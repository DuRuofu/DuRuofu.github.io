<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ESP32网络入门-ESP-NOW协议</title>
    <link href="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.7-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.7-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32ESP-NOW协议程序（实现最简接收发送）</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-ESP-NOW协议</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-27</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-ESP-NOW协议"><a href="#ESP32网络入门-ESP-NOW协议" class="headerlink" title="ESP32网络入门-ESP-NOW协议"></a>ESP32网络入门-ESP-NOW协议</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="1-1-ESP-NOW介绍"><a href="#1-1-ESP-NOW介绍" class="headerlink" title="1.1 ESP-NOW介绍"></a>1.1 ESP-NOW介绍</h3><blockquote><p>视频介绍：<a href="https://www.espressif.com/sites/default/files/esp-now-zh.mp4">https://www.espressif.com/sites/default/files/esp-now-zh.mp4</a></p></blockquote><p>ESP-NOW 是一种由乐鑫公司定义的无连接 Wi-Fi 通信协议。在 ESP-NOW 中，应用程序数据被封装在各个供应商的动作帧中，然后在无连接的情况下，从一个 Wi-Fi 设备传输到另一个 Wi-Fi 设备。 CTR 与 CBC-MAC 协议 (CCMP) 可用来保护动作帧的安全。ESP-NOW 广泛应用于智能照明、远程控制、传感器等领域。</p><p>ESP-NOW 是基于数据链路层的无线通信协议，它将五层 OSI 上层协议精简为一层，数据传输时无需依次经过网络层、传输层、会话层、表示层、应用层等复杂的层级，也无需层层增加包头和解包，大大缓解了网络拥挤时因为丢包而导致的卡顿和延迟，拥有更高的响应速度。</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.7-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/20240327133912.png"></p><h3 id="1-2-ESP-NOW-数据帧格式"><a href="#1-2-ESP-NOW-数据帧格式" class="headerlink" title="1.2 ESP-NOW 数据帧格式"></a>1.2 ESP-NOW 数据帧格式</h3><blockquote><p>搬运自官方教程</p></blockquote><p>ESP-NOW 使用各个供应商的动作帧传输数据，默认比特率为 1 Mbps。各个供应商的动作帧格式为：</p><table><thead><tr><th>MAC 报头</th><th>分类代码</th><th>组织标识符</th><th>随机值</th><th>供应商特定内容</th><th>FCS</th></tr></thead><tbody><tr><td>24 字节</td><td>1 字节</td><td>3 字节</td><td>4 字节</td><td>7~257 字节</td><td>4 字节</td></tr></tbody></table><ul><li>分类代码：分类代码字段可用于指示各个供应商的类别（比如 127）。</li><li>组织标识符：组织标识符包含一个唯一标识符 (比如 0x18fe34)，为乐鑫指定的 MAC 地址的前三个字节。</li><li>随机值：防止重放攻击。</li><li>供应商特定内容：供应商特定内容包含供应商特定字段，如下所示：</li></ul><table><thead><tr><th>元素 ID</th><th>长度</th><th>组织标识符</th><th>类型</th><th>版本</th><th>正文</th></tr></thead><tbody><tr><td>1 字节</td><td>1 字节</td><td>3 字节</td><td>1 字节</td><td>1 字节</td><td>0～250 字节</td></tr></tbody></table><ul><li>元素 ID：元素 ID 字段可用于指示特定于供应商的元素。</li><li>长度：长度是组织标识符、类型、版本和正文的总长度。</li><li>组织标识符：组织标识符包含一个唯一标识符 (比如 0x18fe34)，为乐鑫指定的 MAC 地址的前三个字节。</li><li>类型：类型字段设置为 4，代表 ESP-NOW。</li><li>版本：版本字段设置为 ESP-NOW 的版本。</li><li>正文：正文包含 ESP-NOW 数据。</li></ul><p>由于 ESP-NOW 是无连接的，因此 MAC 报头与标准帧略有不同。FrameControl 字段的 FromDS 和 ToDS 位均为 0。第一个地址字段用于配置目标地址。第二个地址字段用于配置源地址。第三个地址字段用于配置广播地址 (0xff:0xff:0xff:0xff:0xff:0xff)。</p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>使用ESP-NOW的基本条件是要知道ESP32的MAC地址</p></blockquote><p>可以使用<a href="https://github.com/espressif/esp-idf/tree/v5.1.3/examples/system/base_mac_address">base_mac_address</a>历程获取芯片MAC地址：</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.7-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/20240327141511.png"></p><h3 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h3><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv412esp_now_initv" title="esp_now_init"><code>esp_now_init()</code></a> 初始化 ESP-NOW，调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv414esp_now_deinitv" title="esp_now_deinit"><code>esp_now_deinit()</code></a> 反初始化 ESP-NOW。ESP-NOW 数据必须在 Wi-Fi 启动后传输，因此建议在初始化 ESP-NOW 之前启动 Wi-Fi，并在反初始化 ESP-NOW 之后停止 Wi-Fi。</p><p>当调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv414esp_now_deinitv" title="esp_now_deinit"><code>esp_now_deinit()</code></a> 时，配对设备的所有信息都将被删除。</p><h3 id="2-2-设备配对"><a href="#2-2-设备配对" class="headerlink" title="2.2 设备配对"></a>2.2 设备配对</h3><p>在将数据发送到其他设备之前，请先调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv416esp_now_add_peerPK19esp_now_peer_info_t" title="esp_now_add_peer"><code>esp_now_add_peer()</code></a> 将其添加到配对设备列表中。如果启用了加密，则必须设置 LMK。ESP-NOW 数据可以从 Station 或 SoftAP 接口发送。确保在发送 ESP-NOW 数据之前已启用该接口。<br>配对设备的最大数量是 20，其中加密设备的数量不超过 17，默认值是 7。</p><h3 id="2-3-发送数据"><a href="#2-3-发送数据" class="headerlink" title="2.3 发送数据"></a>2.3 发送数据</h3><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv412esp_now_sendPK7uint8_tPK7uint8_t6size_t" title="esp_now_send"><code>esp_now_send()</code></a> 发送 ESP-NOW 数据，调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv424esp_now_register_send_cb17esp_now_send_cb_t" title="esp_now_register_send_cb"><code>esp_now_register_send_cb()</code></a> 注册发送回调函数。如果 MAC 层成功接收到数据，则该函数将返回 ESP_NOW_SEND_SUCCESS 事件。否则，它将返回 ESP_NOW_SEND_FAIL。</p><p>如果有大量 ESP-NOW 数据要发送，调用 <code>esp_now_send()</code> 时需注意单次发送的数据不能超过 250 字节。请注意，两个 ESP-NOW 数据包的发送间隔太短可能导致回调函数返回混乱。因此，建议在等到上一次回调函数返回 ACK 后再发送下一个 ESP-NOW 数据。</p><h3 id="2-4-接收数据"><a href="#2-4-接收数据" class="headerlink" title="2.4 接收数据"></a>2.4 接收数据</h3><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html#_CPPv424esp_now_register_recv_cb17esp_now_recv_cb_t" title="esp_now_register_recv_cb"><code>esp_now_register_recv_cb()</code></a> 注册接收回调函数。当接收 ESP-NOW 数据时，需要调用接收回调函数。接收回调函数也在 Wi-Fi 任务任务中运行。因此，不要在回调函数中执行冗长的操作。 相反，将必要的数据发布到队列，并交给优先级较低的任务处理。</p><h2 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h2><h3 id="3-1-发送"><a href="#3-1-发送" class="headerlink" title="3.1 发送"></a>3.1 发送</h3><blockquote><p>注意：发送需要接收方的MAC地址</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/semphr.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/timers.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_random.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_now.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_crc.h&quot;</span></span><br><br><span class="hljs-comment">// 接收方地址</span><br><span class="hljs-comment">//static uint8_t s_broadcast_mac[ESP_NOW_ETH_ALEN] = &#123;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF&#125;;</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> s_broadcast_mac[ESP_NOW_ETH_ALEN] = &#123;<span class="hljs-number">0x24</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x18</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;espnow&quot;</span>;<br><br><span class="hljs-comment">/* WiFi should start before using ESPNOW */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br>ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));<br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br>ESP_ERROR_CHECK(esp_wifi_start());<br><br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">example_espnow_send_cb</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> *mac_addr, <span class="hljs-type">esp_now_send_status_t</span> status)</span><br>&#123;<br><span class="hljs-keyword">if</span> (status != ESP_NOW_SEND_SUCCESS)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Send error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Send success&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// ESPNOW发送任务</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">espnow_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameter)</span><br>&#123;<br><span class="hljs-type">char</span> send_msg[] = <span class="hljs-string">&quot;ESPNOW test!&quot;</span>;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Start sending broadcast data&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-keyword">if</span> (esp_now_send(s_broadcast_mac, (<span class="hljs-type">uint8_t</span> *)send_msg, <span class="hljs-keyword">sizeof</span>(send_msg)) != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Send error&quot;</span>);<br>&#125;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">espnow_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br><span class="hljs-comment">/* Initialize ESPNOW and register sending and receiving callback function. */</span><br>ESP_ERROR_CHECK(esp_now_init());<br><span class="hljs-comment">// 注册发送回调函数</span><br>ESP_ERROR_CHECK(esp_now_register_send_cb(example_espnow_send_cb));<br><span class="hljs-comment">//ESP_ERROR_CHECK(esp_now_register_recv_cb(example_espnow_recv_cb));</span><br><br><span class="hljs-comment">// 将广播对等方信息添加到对等方列表</span><br><span class="hljs-type">esp_now_peer_info_t</span> *peer = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">esp_now_peer_info_t</span>));<br><span class="hljs-keyword">if</span> (peer == <span class="hljs-literal">NULL</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Malloc peer information fail&quot;</span>);<br>esp_now_deinit();<br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><span class="hljs-comment">// 初始化对等方信息</span><br><span class="hljs-built_in">memset</span>(peer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">esp_now_peer_info_t</span>));<br>peer-&gt;channel = <span class="hljs-number">1</span>;<br>peer-&gt;ifidx = ESP_IF_WIFI_STA;<br>peer-&gt;encrypt = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">memcpy</span>(peer-&gt;peer_addr, s_broadcast_mac, ESP_NOW_ETH_ALEN);<br><span class="hljs-comment">// 添加对等方</span><br>ESP_ERROR_CHECK(esp_now_add_peer(peer));<br><span class="hljs-built_in">free</span>(peer);<br><br>xTaskCreate(espnow_task, <span class="hljs-string">&quot;espnow_task&quot;</span>, <span class="hljs-number">2048</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// Initialize WiFi</span><br>wifi_init();<br><br><span class="hljs-comment">// Initialize ESPNOW</span><br>espnow_init();<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-接收"><a href="#3-2-接收" class="headerlink" title="3.2 接收"></a>3.2 接收</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/semphr.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/timers.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_random.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_now.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_crc.h&quot;</span></span><br><br><span class="hljs-comment">// 接收方地址</span><br><span class="hljs-comment">// static uint8_t s_broadcast_mac[ESP_NOW_ETH_ALEN] = &#123;0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF&#125;;</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> s_broadcast_mac[ESP_NOW_ETH_ALEN] = &#123;<span class="hljs-number">0x24</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x18</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;espnow&quot;</span>;<br><br><span class="hljs-comment">/* WiFi should start before using ESPNOW */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br>ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));<br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br>ESP_ERROR_CHECK(esp_wifi_start());<br>&#125;<br><br><span class="hljs-comment">// ESPNOW接收回调函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">example_espnow_recv_cb</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">esp_now_recv_info_t</span> *recv_info, <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> *data, <span class="hljs-type">int</span> len)</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Receive data from: &quot;</span> MACSTR <span class="hljs-string">&quot;, len: %d&quot;</span>, MAC2STR(recv_info-&gt;src_addr), len);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Data: %s&quot;</span>, data);<br>&#125;<br><br><span class="hljs-comment">// ESPNOW接受数据任务</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">espnow_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameter)</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Start receiving data&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">espnow_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br><span class="hljs-comment">/* Initialize ESPNOW and register sending and receiving callback function. */</span><br>ESP_ERROR_CHECK(esp_now_init());<br><span class="hljs-comment">// 注册接受回调函数</span><br><span class="hljs-comment">//ESP_ERROR_CHECK(esp_now_register_send_cb(example_espnow_send_cb));</span><br>ESP_ERROR_CHECK(esp_now_register_recv_cb(example_espnow_recv_cb));<br><br>xTaskCreate(espnow_task, <span class="hljs-string">&quot;espnow_task&quot;</span>, <span class="hljs-number">2048</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// Initialize WiFi</span><br>wifi_init();<br><br><span class="hljs-comment">// Initialize ESPNOW</span><br>espnow_init();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.7-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-ESP-NOW%E5%8D%8F%E8%AE%AE/20240327152252.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/espressif/esp-idf/blob/v5.1.3/examples/wifi/espnow/main/espnow_example.h">https://github.com/espressif/esp-idf/blob/v5.1.3/examples/wifi/espnow/main/espnow_example.h</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32c3/api-reference/network/esp_now.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32网络入门-MQTT协议</title>
    <link href="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32 MQTT客户端程序</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-MQTT协议</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-27</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-MQTT协议"><a href="#ESP32网络入门-MQTT协议" class="headerlink" title="ESP32网络入门-MQTT协议"></a>ESP32网络入门-MQTT协议</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><blockquote><p>MQTT 与 HTTP 一样，MQTT 运行在传输控制协议&#x2F;互联网协议 (TCP&#x2F;IP) 堆栈之上。</p></blockquote><h3 id="1-1-MQTT介绍"><a href="#1-1-MQTT介绍" class="headerlink" title="1.1 MQTT介绍"></a>1.1 MQTT介绍</h3><blockquote><p><a href="https://mqtt.org/">MQTT官网</a><br><a href="https://www.emqx.com/zh/blog/the-easiest-guide-to-getting-started-with-mqtt">MQTT 协议入门</a></p></blockquote><p>MQTT（Message Queuing Telemetry Transport）是一种轻量级的、基于发布-订阅模式的通信协议，主要应用于物联网（IoT）领域中设备间的通信。</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/20240327113720.png"></p><p>MQTT 协议采用了简单的二进制编码格式，使得它适用于网络带宽较小、延迟较高、网络不稳定的环境下进行通信。同时，MQTT 提供了 QoS（Quality of Service）服务质量保证机制，支持三种不同的 QoS 等级：</p><ul><li>QoS 0：最多发送一次消息，不提供可靠性保证。</li><li>QoS 1：至少发送一次消息，确保消息能到达接收方，但可能会重复。</li><li>QoS 2：恰好发送一次消息，确保消息能到达接收方且只接收一次。</li></ul><p>MQTT 协议的特点包括：可扩展性好、开销小、易于实现、开源、支持多种编程语言等。<br>在 MQTT 协议中，存在两个主要的参与者：发布者和订阅者。发布者将消息发布到一个或多个主题（Topic）中，订阅者可以订阅感兴趣的主题，从而接收到发布者发送的消息。主题可以看作是某一个特定类型的消息的分类标准。<br>MQTT 协议的使用场景包括但不限于：智能家居、智能灯光、智能安防、农业物联网、工业物联网等。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol><li>轻巧高效: MQTT 客户端非常小，需要的资源最少，因此可以在小型微控制器上使用。MQTT 消息头很小，可以优化网络带宽。</li><li>双向通信:MQTT 允许在设备到云和云到设备之间进行消息传递。这使得向事物组广播消息变得容易。</li><li>扩展到数百万个事物:MQTT 可以扩展以连接数百万个物联网设备。</li><li>可靠的消息传递:消息传递的可靠性对于许多物联网用例都很重要。这就是为什么 MQTT 有 3 个定义的服务质量级别：0 - 最多一次，1 - 至少一次，2 - 恰好一次</li><li>支持不可靠的网络:许多物联网设备通过不可靠的蜂窝网络连接。MQTT 对持久会话的支持减少了将客户端与代理重新连接的时间。</li><li>已启用安全性 :MQTT 使使用 TLS 加密消息和使用现代身份验证协议（如 OAuth）对客户端进行身份验证变得容易。</li></ol><h3 id="1-2-MQTT-数据包结构"><a href="#1-2-MQTT-数据包结构" class="headerlink" title="1.2 MQTT 数据包结构"></a>1.2 MQTT 数据包结构</h3><ul><li><p><code>固定头（Fixed header）</code>，存在于所有<code>MQTT</code>数据包中，表示数据包类型及数据包的分组类标识；</p></li><li><p><code>可变头（Variable header）</code>，存在于部分<code>MQTT</code>数据包中，数据包类型决定了可变头是否存在及其具体内容；</p></li><li><p><code>消息体（Payload）</code>，存在于部分<code>MQTT</code>数据包中，表示客户端收到的具体内容；</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/20240327114242.png"></p></li></ul><h3 id="1-3-MQTT-其他概念"><a href="#1-3-MQTT-其他概念" class="headerlink" title="1.3 MQTT 其他概念"></a>1.3 MQTT 其他概念</h3><p><strong>一、订阅（Subscription）</strong></p><p>订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。</p><p><strong>二、会话（Session）</strong></p><p>每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。</p><p><strong>三、主题名（Topic Name）</strong></p><p>连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。</p><p><strong>四、主题筛选器（Topic Filter）</strong></p><p>一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。</p><p><strong>五、负载（Payload）</strong></p><p>消息订阅者所具体接收的内容。</p><p>详细内容可以查看MQTT协议文档：<a href="extension://bfdogplmndidlpjfhoijckpakkdjkkil/pdf/viewer.html?file=https%3A%2F%2Fdocs.oasis-open.org%2Fmqtt%2Fmqtt%2Fv5.0%2Fmqtt-v5.0.pdf">MQTT Version 5.0</a></p><h3 id="1-4-ESP32的MQTT支持"><a href="#1-4-ESP32的MQTT支持" class="headerlink" title="1.4 ESP32的MQTT支持"></a>1.4 ESP32的MQTT支持</h3><blockquote><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html">https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html</a></p></blockquote><ul><li>支持基于 TCP 的 MQTT、基于 Mbed TLS 的 SSL、基于 WebSocket 的 MQTT 以及基于 WebSocket Secure 的 MQTT</li><li>通过 URI 简化配置流程</li><li>多个实例（一个应用程序中有多个客户端）</li><li>支持订阅、发布、认证、遗嘱消息、保持连接心跳机制以及 3 个服务质量 (QoS) 级别（组成全功能客户端）</li></ul><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>示例代码参考:<a href="https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp">https://github.com/espressif/esp-idf/tree/master/examples/protocols/mqtt/tcp</a></p></blockquote><h4 id="2-1-创建一个简单的MQTT服务器："><a href="#2-1-创建一个简单的MQTT服务器：" class="headerlink" title="2.1 创建一个简单的MQTT服务器："></a>2.1 创建一个简单的MQTT服务器：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// MQTT客户端</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_app_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">esp_mqtt_client_config_t</span> mqtt_cfg = &#123;<br>.broker.address.uri = CONFIG_BROKER_URL,<br>&#125;;<br><br><span class="hljs-type">esp_mqtt_client_handle_t</span> client = esp_mqtt_client_init(&amp;mqtt_cfg);<br><span class="hljs-comment">/* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */</span><br><span class="hljs-comment">// 注册事件处理函数</span><br>esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">// 启动MQTT客户端</span><br>esp_mqtt_client_start(client);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很简单这里就不展开说了。</p><h4 id="2-2-事件处理"><a href="#2-2-事件处理" class="headerlink" title="2.2 事件处理"></a>2.2 事件处理</h4><p>事件处理部分是重点：</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// MQTT客户端事件处理</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @brief Event handler registered to receive MQTT events</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  This function is called by the MQTT client event loop.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param handler_args user data registered to the event.</span><br><span class="hljs-comment"> * @param base Event base for the handler(always MQTT Base in this example).</span><br><span class="hljs-comment"> * @param event_id The id for the received event.</span><br><span class="hljs-comment"> * @param event_data The data for the event, esp_mqtt_event_handle_t.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span> *handler_args, <span class="hljs-type">esp_event_base_t</span> base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br>ESP_LOGD(TAG, <span class="hljs-string">&quot;Event dispatched from event loop base=%s, event_id=%&quot;</span> PRIi32 <span class="hljs-string">&quot;&quot;</span>, base, event_id);<br><span class="hljs-type">esp_mqtt_event_handle_t</span> event = event_data;<br><span class="hljs-type">esp_mqtt_client_handle_t</span> client = event-&gt;client;<br><span class="hljs-type">int</span> msg_id;<br><span class="hljs-keyword">switch</span> ((<span class="hljs-type">esp_mqtt_event_id_t</span>)event_id)<br>&#123;<br><span class="hljs-comment">// MQTT连接成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_CONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_CONNECTED&quot;</span>);<br><span class="hljs-comment">// 发布消息</span><br>msg_id = esp_mqtt_client_publish(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>, <span class="hljs-string">&quot;data_3&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent publish successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-comment">// 订阅消息</span><br>msg_id = esp_mqtt_client_subscribe(client, <span class="hljs-string">&quot;/topic/qos0&quot;</span>, <span class="hljs-number">0</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent subscribe successful, msg_id=%d&quot;</span>, msg_id);<br>msg_id = esp_mqtt_client_subscribe(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>, <span class="hljs-number">1</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent subscribe successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-comment">// 取消订阅消息</span><br>msg_id = esp_mqtt_client_unsubscribe(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent unsubscribe successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT连接断开</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_DISCONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_DISCONNECTED&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT订阅成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_SUBSCRIBED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_SUBSCRIBED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br><span class="hljs-comment">// 发布消息</span><br>msg_id = esp_mqtt_client_publish(client, <span class="hljs-string">&quot;/topic/qos0&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent publish successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT取消订阅成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_UNSUBSCRIBED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_UNSUBSCRIBED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT发布成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_PUBLISHED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_PUBLISHED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT收到数据</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_DATA:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_DATA&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TOPIC=%.*s\r\n&quot;</span>, event-&gt;topic_len, event-&gt;topic);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DATA=%.*s\r\n&quot;</span>, event-&gt;data_len, event-&gt;data);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT错误</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_ERROR:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_ERROR&quot;</span>);<br><span class="hljs-keyword">if</span> (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT)<br>&#123;<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, event-&gt;error_handle-&gt;esp_tls_last_esp_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, event-&gt;error_handle-&gt;esp_tls_stack_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>, event-&gt;error_handle-&gt;esp_transport_sock_errno);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Last errno string (%s)&quot;</span>, strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Other event id:%d&quot;</span>, event-&gt;event_id);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>MQTT_EVENT_CONNECTED</code>: 处理MQTT客户端成功连接到代理时的事件。在此情况下，它展示了如何发布、订阅和取消订阅MQTT主题。</li><li><code>MQTT_EVENT_DISCONNECTED</code>: 处理MQTT客户端与代理断开连接时的事件。</li><li><code>MQTT_EVENT_SUBSCRIBED</code>: 处理MQTT客户端成功订阅主题时的事件。</li><li><code>MQTT_EVENT_UNSUBSCRIBED</code>: 处理MQTT客户端成功取消订阅主题时的事件。</li><li><code>MQTT_EVENT_PUBLISHED</code>: 处理MQTT客户端成功发布消息时的事件。</li><li><code>MQTT_EVENT_DATA</code>: 处理收到来自代理的数据时的事件。在此情况下，它打印了主题和数据。</li><li><code>MQTT_EVENT_ERROR</code>: 处理MQTT客户端发生错误时的事件。</li></ul><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>这里使用我自己的MQTT服务器测试：<code>mqtt://www.duruofu.com:1883</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_eth.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/sockets.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/dns.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/netdb.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mqtt_client.h&quot;</span></span><br><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">log_error_if_nonzero</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message, <span class="hljs-type">int</span> error_code)</span><br>&#123;<br><span class="hljs-keyword">if</span> (error_code != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Last error %s: 0x%x&quot;</span>, message, error_code);<br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">// MQTT客户端事件处理</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @brief Event handler registered to receive MQTT events</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  This function is called by the MQTT client event loop.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param handler_args user data registered to the event.</span><br><span class="hljs-comment"> * @param base Event base for the handler(always MQTT Base in this example).</span><br><span class="hljs-comment"> * @param event_id The id for the received event.</span><br><span class="hljs-comment"> * @param event_data The data for the event, esp_mqtt_event_handle_t.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span> *handler_args, <span class="hljs-type">esp_event_base_t</span> base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br>ESP_LOGD(TAG, <span class="hljs-string">&quot;Event dispatched from event loop base=%s, event_id=%&quot;</span> PRIi32 <span class="hljs-string">&quot;&quot;</span>, base, event_id);<br><span class="hljs-type">esp_mqtt_event_handle_t</span> event = event_data;<br><span class="hljs-type">esp_mqtt_client_handle_t</span> client = event-&gt;client;<br><span class="hljs-type">int</span> msg_id;<br><span class="hljs-keyword">switch</span> ((<span class="hljs-type">esp_mqtt_event_id_t</span>)event_id)<br>&#123;<br><span class="hljs-comment">// MQTT连接成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_CONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_CONNECTED&quot;</span>);<br><span class="hljs-comment">// 发布消息</span><br>msg_id = esp_mqtt_client_publish(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>, <span class="hljs-string">&quot;data_3&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent publish successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-comment">// 订阅消息</span><br>msg_id = esp_mqtt_client_subscribe(client, <span class="hljs-string">&quot;/topic/qos0&quot;</span>, <span class="hljs-number">0</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent subscribe successful, msg_id=%d&quot;</span>, msg_id);<br>msg_id = esp_mqtt_client_subscribe(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>, <span class="hljs-number">1</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent subscribe successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-comment">// 取消订阅消息</span><br>msg_id = esp_mqtt_client_unsubscribe(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent unsubscribe successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT连接断开</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_DISCONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_DISCONNECTED&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT订阅成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_SUBSCRIBED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_SUBSCRIBED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br><span class="hljs-comment">// 发布消息</span><br>msg_id = esp_mqtt_client_publish(client, <span class="hljs-string">&quot;/topic/qos0&quot;</span>, <span class="hljs-string">&quot;data&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;sent publish successful, msg_id=%d&quot;</span>, msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT取消订阅成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_UNSUBSCRIBED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_UNSUBSCRIBED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT发布成功</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_PUBLISHED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_PUBLISHED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT收到数据</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_DATA:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_DATA&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TOPIC=%.*s\r\n&quot;</span>, event-&gt;topic_len, event-&gt;topic);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DATA=%.*s\r\n&quot;</span>, event-&gt;data_len, event-&gt;data);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// MQTT错误</span><br><span class="hljs-keyword">case</span> MQTT_EVENT_ERROR:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_ERROR&quot;</span>);<br><span class="hljs-keyword">if</span> (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT)<br>&#123;<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, event-&gt;error_handle-&gt;esp_tls_last_esp_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, event-&gt;error_handle-&gt;esp_tls_stack_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>, event-&gt;error_handle-&gt;esp_transport_sock_errno);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Last errno string (%s)&quot;</span>, strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Other event id:%d&quot;</span>, event-&gt;event_id);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// MQTT客户端</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_app_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">esp_mqtt_client_config_t</span> mqtt_cfg = &#123;<br>.broker.address.uri = <span class="hljs-string">&quot;mqtt://www.duruofu.top:1883&quot;</span>,<br>&#125;;<br><br><span class="hljs-type">esp_mqtt_client_handle_t</span> client = esp_mqtt_client_init(&amp;mqtt_cfg);<br><span class="hljs-comment">/* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */</span><br><span class="hljs-comment">// 注册事件处理函数</span><br>esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">// 启动MQTT客户端</span><br>esp_mqtt_client_start(client);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br><br><span class="hljs-comment">// 创建MQTT客户端</span><br>mqtt_app_start();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用MQTTX来充当另一个客户端:</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/20240327123152.png"></p><p>成功收到消息，如上图</p><p>尝试发送数据，ESP会将数据返回：</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/20240327123309.png"></p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.6-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-MQTT%E5%8D%8F%E8%AE%AE/20240327123341.png"></p><p>这样就完成了简单的MQTT客户端程序。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html">https://docs.espressif.com/projects/esp-idf/zh_CN/v5.1.3/esp32/api-reference/protocols/mqtt.html</a></li><li><a href="https://github.com/espressif/esp-idf/blob/master/examples/protocols/mqtt/tcp/main/app_main.c">https://github.com/espressif/esp-idf/blob/master/examples/protocols/mqtt/tcp/main/app_main.c</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MQTT</tag>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32网络入门-WebSocket协议</title>
    <link href="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档记录ESP32WebSocket协议的使用。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-WebSocket协议</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-26</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-WebSocket协议"><a href="#ESP32网络入门-WebSocket协议" class="headerlink" title="ESP32网络入门-WebSocket协议"></a>ESP32网络入门-WebSocket协议</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-1-WebSocket介绍"><a href="#1-1-WebSocket介绍" class="headerlink" title="1.1 WebSocket介绍"></a>1.1 WebSocket介绍</h3><blockquote><p>详细介绍可以参考: <a href="https://cloud.tencent.com/developer/article/1887095">万字长文，一篇吃透WebSocket：概念、原理、易错常识、动手实践</a></p></blockquote><p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。它的主要特点是可以实现实时双向通信，并且可以在客户端和服务器之间传输任意数据，而不受 HTTP 语义限制。</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240326100058.png"></p><p>与传统的 HTTP 请求-响应模式不同，WebSocket 采用了类似握手的方法来建立连接。客户端向服务器发送一个 HTTP 请求头，其中包含 Upgrade、Connection、Sec-WebSocket-Key 等字段，通知服务器要进行连接升级。服务器返回一个 HTTP 响应头，其中也包含 Upgrade、Connection 和 Sec-WebSocket-Accept 等字段，表示已同意升级连接。之后，客户端和服务器之间的数据就可以以帧为单位进行传输，每个帧包含一个信息片段，可以是文本也可以是二进制。</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240326100128.png"></p><p>WebSocket 协议的优点是支持实时通信，具有较低的延迟，可减少网络传输的开销，有助于提高应用程序的性能。常见的应用场景包括聊天应用、在线游戏、实时数据监控等。</p><h3 id="webSocket数据帧格式"><a href="#webSocket数据帧格式" class="headerlink" title="webSocket数据帧格式"></a>webSocket数据帧格式</h3><p>WebSocket 数据帧是 WebSocket 协议中传输数据的基本单位，每个帧可以包含一个或多个信息片段（Message Fragment），可以是文本也可以是二进制，由 Header 和 Payload 两部分组成。</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240326100219.png"></p><p>Header 一般包括了以下几个字段：</p><ol><li>FIN：1 位，表示当前帧是否为消息的最后一帧，值为 1 表示是，值为 0 表示不是。</li><li>RSV1、RSV2、RSV3：各占 1 位，用于扩展协议。通常情况下，这三位都被置为 0。</li><li>Opcode：4 位，用于表示消息类型，如 0x1 表示文本消息，0x2 表示二进制消息，0x8 表示关闭连接等。</li><li>Mask：1 位，表示负载数据是否被掩码处理过，值为 1 表示被掩码处理，值为 0 表示未被掩码处理。</li><li>Payload length：7 位或 7+16 位或 7+64 位，表示负载数据的长度。当值为 0~126 时，表示负载数据的长度就是该值；当值为 127 时，额外有两个字节表示长度，当值大于等于 2^16 时，额外有 4 个字节表示长度。<br>如果 Mask 位被设置为 1，则 Header 中还要包含一个 4 字节的掩码码值（Masking Key），用于对负载数据进行反掩码操作。<br>Payload 是实际的数据内容，长度由 Header 中的 Payload length 字段表示，可能是文本也可能是二进制。<br>在整个 WebSocket 连接过程中，客户端和服务器会相互发送一些数据帧，包括握手请求、握手响应、消息片段等，根据不同的功能要求分别使用不同的 Opcode 来表示。</li></ol><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="2-1-服务端"><a href="#2-1-服务端" class="headerlink" title="2.1 服务端"></a>2.1 服务端</h3><p>下面我们参考：<a href="https://github.com/espressif/esp-idf/tree/be06a6f5ffe36f9554cfc91fe2036e0fc85fea60/examples/protocols/http_server/ws_echo_server"> Websocket echo server</a>这个历程来学习WebSocket服务端程序</p><h4 id="2-1-1-创建服务实例"><a href="#2-1-1-创建服务实例" class="headerlink" title="2.1.1 创建服务实例"></a>2.1.1 创建服务实例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">httpd_handle_t</span> <span class="hljs-title function_">start_webserver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">httpd_config_t</span> config = HTTPD_DEFAULT_CONFIG();<br><br><span class="hljs-comment">// Start the httpd server</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Starting server on port: &#x27;%d&#x27;&quot;</span>, config.server_port);<br><span class="hljs-keyword">if</span> (httpd_start(&amp;server, &amp;config) == ESP_OK)<br>&#123;<br><span class="hljs-comment">// Registering the ws handler</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering URI handlers&quot;</span>);<br>httpd_register_uri_handler(server, &amp;ws);<br><span class="hljs-keyword">return</span> server;<br>&#125;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Error starting server!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码用于启动 HTTP 服务器。它首先创建一个 HTTP 服务器实例，并使用默认配置进行初始化。然后尝试启动 HTTP 服务器，如果启动成功则打印服务器监听的端口号，并注册 WebSocket 处理器（ws handler）。</p><h4 id="2-1-2-注册路由"><a href="#2-1-2-注册路由" class="headerlink" title="2.1.2 注册路由"></a>2.1.2 注册路由</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> ws = &#123;<br>.uri = <span class="hljs-string">&quot;/ws&quot;</span>,<br>.method = HTTP_GET,<br>.handler = echo_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>,<br>.is_websocket = <span class="hljs-literal">true</span>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="2-1-3-路由处理"><a href="#2-1-3-路由处理" class="headerlink" title="2.1.3 路由处理"></a>2.1.3 路由处理</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This handler echos back the received ws data</span><br><span class="hljs-comment"> * and triggers an async send if certain message received</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">echo_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-keyword">if</span> (req-&gt;method == HTTP_GET)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Handshake done, the new connection was opened&quot;</span>);<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><span class="hljs-type">httpd_ws_frame_t</span> ws_pkt;<br><span class="hljs-type">uint8_t</span> *buf = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">memset</span>(&amp;ws_pkt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">httpd_ws_frame_t</span>));<br>ws_pkt.type = HTTPD_WS_TYPE_TEXT;<br><span class="hljs-comment">/* Set max_len = 0 to get the frame len */</span><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-type">esp_err_t</span> ret = httpd_ws_recv_frame(req, &amp;ws_pkt, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed to get frame len with %d&quot;</span>, ret);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;frame len is %d&quot;</span>, ws_pkt.len);<br><span class="hljs-keyword">if</span> (ws_pkt.len)<br>&#123;<br><span class="hljs-comment">/* ws_pkt.len + 1 is for NULL termination as we are expecting a string */</span><br>buf = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, ws_pkt.len + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (buf == <span class="hljs-literal">NULL</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to calloc memory for buf&quot;</span>);<br><span class="hljs-keyword">return</span> ESP_ERR_NO_MEM;<br>&#125;<br>ws_pkt.payload = buf;<br><span class="hljs-comment">/* Set max_len = ws_pkt.len to get the frame payload */</span><br>ret = httpd_ws_recv_frame(req, &amp;ws_pkt, ws_pkt.len);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed with %d&quot;</span>, ret);<br><span class="hljs-built_in">free</span>(buf);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Got packet with message: %s&quot;</span>, ws_pkt.payload);<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Packet type: %d&quot;</span>, ws_pkt.type);<br><span class="hljs-keyword">if</span> (ws_pkt.type == HTTPD_WS_TYPE_TEXT &amp;&amp;<br><span class="hljs-built_in">strcmp</span>((<span class="hljs-type">char</span> *)ws_pkt.payload, <span class="hljs-string">&quot;Trigger async&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(buf);<br><span class="hljs-keyword">return</span> trigger_async_send(req-&gt;handle, req);<br>&#125;<br><br>ret = httpd_ws_send_frame(req, &amp;ws_pkt);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_send_frame failed with %d&quot;</span>, ret);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码用于处理通过 WebSocket 接收到的数据并作出相应的响应。</p><ol><li>当接收到 HTTP GET 请求时，打印日志并返回 ESP_OK，表示握手成功，连接已打开。</li><li>当接收到 WebSocket 数据帧时，首先获取帧的长度，并根据长度分配内存。</li><li>再次接收 WebSocket 数据帧，获取帧的有效载荷（payload），并将其打印出来。</li><li>根据接收到的数据帧类型，如果是文本类型且内容为 “Trigger async”，则调用 <code>trigger_async_send</code> 函数进行异步发送处理，并释放内存。</li><li>否则，将接收到的数据帧原样返回给客户端，并释放内存。</li></ol><h4 id="2-1-4-服务器发送数据"><a href="#2-1-4-服务器发送数据" class="headerlink" title="2.1.4 服务器发送数据"></a>2.1.4 服务器发送数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Structure holding server handle</span><br><span class="hljs-comment"> * and internal socket fd in order</span><br><span class="hljs-comment"> * to use out of request send</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">async_resp_arg</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">httpd_handle_t</span> hd;<br><span class="hljs-type">int</span> fd;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * async send function, which we put into the httpd work queue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ws_async_send</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;Async data&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">async_resp_arg</span> *<span class="hljs-title">resp_arg</span> =</span> arg;<br><span class="hljs-type">httpd_handle_t</span> hd = resp_arg-&gt;hd;<br><span class="hljs-type">int</span> fd = resp_arg-&gt;fd;<br><span class="hljs-type">httpd_ws_frame_t</span> ws_pkt;<br><span class="hljs-built_in">memset</span>(&amp;ws_pkt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">httpd_ws_frame_t</span>));<br>ws_pkt.payload = (<span class="hljs-type">uint8_t</span> *)data;<br>ws_pkt.len = <span class="hljs-built_in">strlen</span>(data);<br>ws_pkt.type = HTTPD_WS_TYPE_TEXT;<br><br>httpd_ws_send_frame_async(hd, fd, &amp;ws_pkt);<br><span class="hljs-built_in">free</span>(resp_arg);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">trigger_async_send</span><span class="hljs-params">(<span class="hljs-type">httpd_handle_t</span> handle, <span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">async_resp_arg</span> *<span class="hljs-title">resp_arg</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> async_resp_arg));<br><span class="hljs-keyword">if</span> (resp_arg == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> ESP_ERR_NO_MEM;<br>&#125;<br>resp_arg-&gt;hd = req-&gt;handle;<br>resp_arg-&gt;fd = httpd_req_to_sockfd(req);<br><span class="hljs-type">esp_err_t</span> ret = httpd_queue_work(handle, ws_async_send, resp_arg);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br><span class="hljs-built_in">free</span>(resp_arg);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>异步发送</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">trigger_async_send(req-&gt;handle, req);<br></code></pre></td></tr></table></figure><p>同步发送：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">httpd<span class="hljs-constructor">_ws_send_frame(<span class="hljs-params">req</span>, &amp;<span class="hljs-params">ws_pkt</span>)</span>;<br></code></pre></td></tr></table></figure><p>这两个函数都调用<code>esp_err_t httpd_ws_send_frame_async(httpd_handle_t hd, int fd, httpd_ws_frame_t *frame)</code></p><p><code>httpd_ws_send_frame_async</code>的内容如下：</p><blockquote><p>了解即可：</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">httpd_ws_send_frame_async</span><span class="hljs-params">(<span class="hljs-type">httpd_handle_t</span> hd, <span class="hljs-type">int</span> fd, <span class="hljs-type">httpd_ws_frame_t</span> *frame)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!frame) &#123;<br>        ESP_LOGW(TAG, LOG_FMT(<span class="hljs-string">&quot;Argument is invalid&quot;</span>));<br>        <span class="hljs-keyword">return</span> ESP_ERR_INVALID_ARG;<br>    &#125;<br>    <span class="hljs-comment">/* Prepare Tx buffer - maximum length is 14, which includes 2 bytes header, 8 bytes length, 4 bytes mask key */</span><br>    <span class="hljs-type">uint8_t</span> tx_len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint8_t</span> header_buf[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-comment">/* Set the `FIN` bit by default if message is not fragmented. Else, set it as per the `final` field */</span><br>    header_buf[<span class="hljs-number">0</span>] |= (!frame-&gt;fragmented) ? HTTPD_WS_FIN_BIT : (frame-&gt;final? HTTPD_WS_FIN_BIT: HTTPD_WS_CONTINUE);<br>    header_buf[<span class="hljs-number">0</span>] |= frame-&gt;type; <span class="hljs-comment">/* Type (opcode): 4 bits */</span><br>    <span class="hljs-keyword">if</span> (frame-&gt;len &lt;= <span class="hljs-number">125</span>) &#123;<br>        header_buf[<span class="hljs-number">1</span>] = frame-&gt;len &amp; <span class="hljs-number">0x7f</span>U; <span class="hljs-comment">/* Length for 7 bits */</span><br>        tx_len = <span class="hljs-number">2</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (frame-&gt;len &gt; <span class="hljs-number">125</span> &amp;&amp; frame-&gt;len &lt; UINT16_MAX) &#123;<br>        header_buf[<span class="hljs-number">1</span>] = <span class="hljs-number">126</span>;                <span class="hljs-comment">/* Length for 16 bits */</span><br>        header_buf[<span class="hljs-number">2</span>] = (frame-&gt;len &gt;&gt; <span class="hljs-number">8U</span>) &amp; <span class="hljs-number">0xff</span>U;<br>        header_buf[<span class="hljs-number">3</span>] = frame-&gt;len &amp; <span class="hljs-number">0xff</span>U;<br>        tx_len = <span class="hljs-number">4</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        header_buf[<span class="hljs-number">1</span>] = <span class="hljs-number">127</span>;                <span class="hljs-comment">/* Length for 64 bits */</span><br>        <span class="hljs-type">uint8_t</span> shift_idx = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">/* Shift index starts at 7 */</span><br>        <span class="hljs-type">uint64_t</span> len64 = frame-&gt;len; <span class="hljs-comment">/* Raise variable size to make sure we won&#x27;t shift by more bits</span><br><span class="hljs-comment">                                      * than the length has (to avoid undefined behaviour) */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> idx = <span class="hljs-number">2</span>; idx &lt;= <span class="hljs-number">9</span>; idx++) &#123;<br>            <span class="hljs-comment">/* Now do shifting (be careful of endianness, i.e. when buffer index is 2, frame length shift index is 7) */</span><br>            header_buf[idx] = (len64 &gt;&gt; (shift_idx * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xff</span>U;<br>            shift_idx--;<br>        &#125;<br>        tx_len = <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">/* WebSocket server does not required to mask response payload, so leave the MASK bit as 0. */</span><br>    header_buf[<span class="hljs-number">1</span>] &amp;= (~HTTPD_WS_MASK_BIT);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_db</span> *<span class="hljs-title">sess</span> =</span> httpd_sess_get(hd, fd);<br>    <span class="hljs-keyword">if</span> (!sess) &#123;<br>        <span class="hljs-keyword">return</span> ESP_ERR_INVALID_ARG;<br>    &#125;<br>    <span class="hljs-comment">/* Send off header */</span><br>    <span class="hljs-keyword">if</span> (sess-&gt;send_fn(hd, fd, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)header_buf, tx_len, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        ESP_LOGW(TAG, LOG_FMT(<span class="hljs-string">&quot;Failed to send WS header&quot;</span>));<br>        <span class="hljs-keyword">return</span> ESP_FAIL;<br>    &#125;  <br>    <span class="hljs-comment">/* Send off payload */</span><br>    <span class="hljs-keyword">if</span>(frame-&gt;len &gt; <span class="hljs-number">0</span> &amp;&amp; frame-&gt;payload != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (sess-&gt;send_fn(hd, fd, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)frame-&gt;payload, frame-&gt;len, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>            ESP_LOGW(TAG, LOG_FMT(<span class="hljs-string">&quot;Failed to send WS payload&quot;</span>));<br>            <span class="hljs-keyword">return</span> ESP_FAIL;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一段 ESP32 上通过 WebSocket 发送帧的代码，该函数会向指定的 WebSocket 连接发送加密后的帧数据。主要实现如下：</p><ol><li>首先对 frame 参数进行校验，如果为空则返回 ESP_ERR_INVALID_ARG 错误。</li><li>根据 WebSocket 数据帧格式，设置 Header 的 FIN、Opcode 以及 Payload length 字段。同时根据负载长度的大小决定 Header 的长度，最多为 10 个字节，包括了 2 个字节的 Header，2 个字节的 Payload length，4 个字节的 Masking key（在此代码中未使用，因为 WebSocket Server 不需要对 Payload 进行掩码处理）。</li><li>通过 httpd_sess_get() 函数获取对应 WebSocket 连接的套接字描述符（socket descriptor），若获取失败则返回 ESP_ERR_INVALID_ARG 错误。</li><li>调用 socket 的 send_fn() 函数，将 Header 和 Payload 发送给客户端。</li><li>函数返回 ESP_OK 表示发送数据成功，返回 ESP_FAIL 表示发送数据失败。</li></ol><h3 id="2-2-客户端"><a href="#2-2-客户端" class="headerlink" title="2.2 客户端"></a>2.2 客户端</h3><blockquote><p>5.0以上的IDF里，客户端程序以扩展组件包的形式存在,需要使用组件管理器</p></blockquote><p>使用下面的命令将客户端组件添加到工程：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">idf.py<span class="hljs-built_in"> add-dependency </span>&#x27;espressif/esp_websocket_client^1.2.2&#x27;<br></code></pre></td></tr></table></figure><p>文档连接：<a href="https://docs.espressif.com/projects/esp-protocols/esp_websocket_client/docs/latest/index.html#esp-websocket-client" title="Permalink to this headline"> ESP WebSocket 客户端</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">log_error_if_nonzero</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message, <span class="hljs-type">int</span> error_code)</span><br>&#123;<br><span class="hljs-keyword">if</span> (error_code != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Last error %s: 0x%x&quot;</span>, message, error_code);<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">shutdown_signaler</span><span class="hljs-params">(TimerHandle_t xTimer)</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;No data received for %d seconds, signaling shutdown&quot;</span>, NO_DATA_TIMEOUT_SEC);<br>xSemaphoreGive(shutdown_sema);<br>&#125;<br><br><span class="hljs-comment">// WebSocket客户端事件处理</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">websocket_event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span> *handler_args, <span class="hljs-type">esp_event_base_t</span> base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">esp_websocket_event_data_t</span> *data = (<span class="hljs-type">esp_websocket_event_data_t</span> *)event_data;<br><span class="hljs-keyword">switch</span> (event_id)<br>&#123;<br><span class="hljs-comment">// 连接成功</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_CONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_CONNECTED&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 连接断开</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_DISCONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_DISCONNECTED&quot;</span>);<br>log_error_if_nonzero(<span class="hljs-string">&quot;HTTP status code&quot;</span>, data-&gt;error_handle.esp_ws_handshake_status_code);<br><span class="hljs-keyword">if</span> (data-&gt;error_handle.error_type == WEBSOCKET_ERROR_TYPE_TCP_TRANSPORT)<br>&#123;<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, data-&gt;error_handle.esp_tls_last_esp_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, data-&gt;error_handle.esp_tls_stack_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>, data-&gt;error_handle.esp_transport_sock_errno);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 收到数据</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_DATA:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_DATA&quot;</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received opcode=%d&quot;</span>, data-&gt;op_code);<br><span class="hljs-keyword">if</span> (data-&gt;op_code == <span class="hljs-number">0x08</span> &amp;&amp; data-&gt;data_len == <span class="hljs-number">2</span>)<br>&#123;<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Received closed message with code=%d&quot;</span>, <span class="hljs-number">256</span> * data-&gt;data_ptr[<span class="hljs-number">0</span>] + data-&gt;data_ptr[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Received=%.*s\n\n&quot;</span>, data-&gt;data_len, (<span class="hljs-type">char</span> *)data-&gt;data_ptr);<br>&#125;<br><br><span class="hljs-comment">// If received data contains json structure it succeed to parse</span><br>cJSON *root = cJSON_Parse(data-&gt;data_ptr);<br><span class="hljs-keyword">if</span> (root)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cJSON_GetArraySize(root); i++)<br>&#123;<br>cJSON *elem = cJSON_GetArrayItem(root, i);<br>cJSON *id = cJSON_GetObjectItem(elem, <span class="hljs-string">&quot;id&quot;</span>);<br>cJSON *name = cJSON_GetObjectItem(elem, <span class="hljs-string">&quot;name&quot;</span>);<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Json=&#123;&#x27;id&#x27;: &#x27;%s&#x27;, &#x27;name&#x27;: &#x27;%s&#x27;&#125;&quot;</span>, id-&gt;valuestring, name-&gt;valuestring);<br>&#125;<br>cJSON_Delete(root);<br>&#125;<br><br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Total payload length=%d, data_len=%d, current payload offset=%d\r\n&quot;</span>, data-&gt;payload_len, data-&gt;data_len, data-&gt;payload_offset);<br><br>  <span class="hljs-comment">// 定时器复位</span><br>xTimerReset(shutdown_signal_timer, portMAX_DELAY);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_ERROR:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_ERROR&quot;</span>);<br>log_error_if_nonzero(<span class="hljs-string">&quot;HTTP status code&quot;</span>, data-&gt;error_handle.esp_ws_handshake_status_code);<br><span class="hljs-keyword">if</span> (data-&gt;error_handle.error_type == WEBSOCKET_ERROR_TYPE_TCP_TRANSPORT)<br>&#123;<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, data-&gt;error_handle.esp_tls_last_esp_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, data-&gt;error_handle.esp_tls_stack_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>, data-&gt;error_handle.esp_transport_sock_errno);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// WebSocket客户端</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">websocket_app_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">esp_websocket_client_config_t</span> websocket_cfg = &#123;&#125;;<br><br>  <span class="hljs-comment">// 创建定时器</span><br>shutdown_signal_timer = xTimerCreate(<span class="hljs-string">&quot;Websocket shutdown timer&quot;</span>, NO_DATA_TIMEOUT_SEC * <span class="hljs-number">1000</span> / portTICK_PERIOD_MS,<br> pdFALSE, <span class="hljs-literal">NULL</span>, shutdown_signaler);<br><span class="hljs-comment">// 创建信号量</span><br>shutdown_sema = xSemaphoreCreateBinary();<br><br><span class="hljs-comment">// 配置目标服务器</span><br>websocket_cfg.uri = CONFIG_WEBSOCKET_URI;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Connecting to %s...&quot;</span>, websocket_cfg.uri);<br><br><span class="hljs-comment">// 创建WebSocket客户端</span><br><span class="hljs-type">esp_websocket_client_handle_t</span> client = esp_websocket_client_init(&amp;websocket_cfg);<br><span class="hljs-comment">// 注册事件</span><br>esp_websocket_register_events(client, WEBSOCKET_EVENT_ANY, websocket_event_handler, (<span class="hljs-type">void</span> *)client);<br><span class="hljs-comment">// 启动WebSocket客户端</span><br>esp_websocket_client_start(client);<br>xTimerStart(shutdown_signal_timer, portMAX_DELAY);<br><span class="hljs-type">char</span> data[<span class="hljs-number">32</span>];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 发送5次数据</span><br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (esp_websocket_client_is_connected(client))<br>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sprintf</span>(data, <span class="hljs-string">&quot;hello %04d&quot;</span>, i++);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Sending %s&quot;</span>, data);<br><span class="hljs-comment">// 发送文本数据</span><br>esp_websocket_client_send_text(client, data, len, portMAX_DELAY);<br>&#125;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>&#125;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Sending fragmented message&quot;</span>);<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br><span class="hljs-built_in">memset</span>(data, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">sizeof</span>(data));<br>esp_websocket_client_send_text_partial(client, data, <span class="hljs-keyword">sizeof</span>(data), portMAX_DELAY);<br><span class="hljs-built_in">memset</span>(data, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">sizeof</span>(data));<br>esp_websocket_client_send_cont_msg(client, data, <span class="hljs-keyword">sizeof</span>(data), portMAX_DELAY);<br>esp_websocket_client_send_fin(client, portMAX_DELAY);<br><br><span class="hljs-comment">// 等待信号量</span><br>xSemaphoreTake(shutdown_sema, portMAX_DELAY);<br><span class="hljs-comment">// 关闭WebSocket客户端</span><br>esp_websocket_client_close(client, portMAX_DELAY);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Websocket Stopped&quot;</span>);<br><span class="hljs-comment">// 销毁WebSocket客户端</span><br>esp_websocket_client_destroy(client);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><code>websocket_app_start</code>函数初始化WebSocket客户端配置，并设置要连接的WebSocket服务器的URI。然后使用<code>esp_websocket_client_init</code>初始化WebSocket客户端，并使用<code>esp_websocket_register_events</code>注册事件处理程序。最后，启动WebSocket客户端。</li><li><code>websocket_event_handler</code>函数处理各种WebSocket事件，如连接、断开连接、接收数据和错误。它为每个事件记录相关信息，并在接收数据时重置一个定时器以防止由于不活动而关闭连接。</li></ul><p>程序流程可以总结为下图（图源：Michael_ee）：</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240327102246.png"></p><h2 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h2><h3 id="3-1-服务端"><a href="#3-1-服务端" class="headerlink" title="3.1 服务端"></a>3.1 服务端</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;esp_http_server.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_eth.h&quot;</span></span><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Structure holding server handle</span><br><span class="hljs-comment"> * and internal socket fd in order</span><br><span class="hljs-comment"> * to use out of request send</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">async_resp_arg</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">httpd_handle_t</span> hd;<br><span class="hljs-type">int</span> fd;<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * async send function, which we put into the httpd work queue</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">ws_async_send</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;Async data&quot;</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">async_resp_arg</span> *<span class="hljs-title">resp_arg</span> =</span> arg;<br><span class="hljs-type">httpd_handle_t</span> hd = resp_arg-&gt;hd;<br><span class="hljs-type">int</span> fd = resp_arg-&gt;fd;<br><span class="hljs-type">httpd_ws_frame_t</span> ws_pkt;<br><span class="hljs-built_in">memset</span>(&amp;ws_pkt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">httpd_ws_frame_t</span>));<br>ws_pkt.payload = (<span class="hljs-type">uint8_t</span> *)data;<br>ws_pkt.len = <span class="hljs-built_in">strlen</span>(data);<br>ws_pkt.type = HTTPD_WS_TYPE_TEXT;<br><br>httpd_ws_send_frame_async(hd, fd, &amp;ws_pkt);<br><span class="hljs-built_in">free</span>(resp_arg);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">trigger_async_send</span><span class="hljs-params">(<span class="hljs-type">httpd_handle_t</span> handle, <span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">async_resp_arg</span> *<span class="hljs-title">resp_arg</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> async_resp_arg));<br><span class="hljs-keyword">if</span> (resp_arg == <span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-keyword">return</span> ESP_ERR_NO_MEM;<br>&#125;<br>resp_arg-&gt;hd = req-&gt;handle;<br>resp_arg-&gt;fd = httpd_req_to_sockfd(req);<br><span class="hljs-type">esp_err_t</span> ret = httpd_queue_work(handle, ws_async_send, resp_arg);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br><span class="hljs-built_in">free</span>(resp_arg);<br>&#125;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This handler echos back the received ws data</span><br><span class="hljs-comment"> * and triggers an async send if certain message received</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">echo_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-keyword">if</span> (req-&gt;method == HTTP_GET)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Handshake done, the new connection was opened&quot;</span>);<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><span class="hljs-type">httpd_ws_frame_t</span> ws_pkt;<br><span class="hljs-type">uint8_t</span> *buf = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">memset</span>(&amp;ws_pkt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">httpd_ws_frame_t</span>));<br>ws_pkt.type = HTTPD_WS_TYPE_TEXT;<br><span class="hljs-comment">/* Set max_len = 0 to get the frame len */</span><br><span class="hljs-comment">// 读取数据</span><br><span class="hljs-type">esp_err_t</span> ret = httpd_ws_recv_frame(req, &amp;ws_pkt, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed to get frame len with %d&quot;</span>, ret);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;frame len is %d&quot;</span>, ws_pkt.len);<br><span class="hljs-keyword">if</span> (ws_pkt.len)<br>&#123;<br><span class="hljs-comment">/* ws_pkt.len + 1 is for NULL termination as we are expecting a string */</span><br>buf = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, ws_pkt.len + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (buf == <span class="hljs-literal">NULL</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to calloc memory for buf&quot;</span>);<br><span class="hljs-keyword">return</span> ESP_ERR_NO_MEM;<br>&#125;<br>ws_pkt.payload = buf;<br><span class="hljs-comment">/* Set max_len = ws_pkt.len to get the frame payload */</span><br>ret = httpd_ws_recv_frame(req, &amp;ws_pkt, ws_pkt.len);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed with %d&quot;</span>, ret);<br><span class="hljs-built_in">free</span>(buf);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Got packet with message: %s&quot;</span>, ws_pkt.payload);<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Packet type: %d&quot;</span>, ws_pkt.type);<br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-keyword">if</span> (ws_pkt.type == HTTPD_WS_TYPE_TEXT &amp;&amp;<br><span class="hljs-built_in">strcmp</span>((<span class="hljs-type">char</span> *)ws_pkt.payload, <span class="hljs-string">&quot;Trigger async&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-built_in">free</span>(buf);<br><span class="hljs-keyword">return</span> trigger_async_send(req-&gt;handle, req);<br>&#125;<br><br>ret = httpd_ws_send_frame(req, &amp;ws_pkt);<br><span class="hljs-keyword">if</span> (ret != ESP_OK)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_send_frame failed with %d&quot;</span>, ret);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> ws = &#123;<br>.uri = <span class="hljs-string">&quot;/ws&quot;</span>,<br>.method = HTTP_GET,<br>.handler = echo_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>,<br>.is_websocket = <span class="hljs-literal">true</span>&#125;;<br><br><span class="hljs-type">static</span> <span class="hljs-type">httpd_handle_t</span> <span class="hljs-title function_">start_webserver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">httpd_config_t</span> config = HTTPD_DEFAULT_CONFIG();<br><br><span class="hljs-comment">// Start the httpd server</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Starting server on port: &#x27;%d&#x27;&quot;</span>, config.server_port);<br><span class="hljs-keyword">if</span> (httpd_start(&amp;server, &amp;config) == ESP_OK)<br>&#123;<br><span class="hljs-comment">// Registering the ws handler</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering URI handlers&quot;</span>);<br>httpd_register_uri_handler(server, &amp;ws);<br><span class="hljs-keyword">return</span> server;<br>&#125;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Error starting server!&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">stop_webserver</span><span class="hljs-params">(<span class="hljs-type">httpd_handle_t</span> server)</span><br>&#123;<br><span class="hljs-comment">// Stop the httpd server</span><br><span class="hljs-keyword">return</span> httpd_stop(server);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br><br><span class="hljs-comment">// 创建WebSocket服务器</span><br>server = start_webserver();<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意需要设置项目HTTP组件的下面两项配置</p></blockquote><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240327095321.png"></p><p>然后随便打开一个WebSocket测试网站：<a href="http://www.jsons.cn/websocket/">http://www.jsons.cn/websocket/</a></p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240327095439.png"></p><p>服务器程序正常。</p><h3 id="3-2-客户端"><a href="#3-2-客户端" class="headerlink" title="3.2 客户端"></a>3.2 客户端</h3><p>我们使用python编写一个简单的回声服务器程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask_sock <span class="hljs-keyword">import</span> Sock<br><br>app = Flask(__name__)<br>sock = Sock(app)<br><br><span class="hljs-meta">@sock.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">echo</span>(<span class="hljs-params">ws</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data = ws.receive()<br>        ws.send(data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># To run your Flask + WebSocket server in production you can use Gunicorn:</span><br>    <span class="hljs-comment"># gunicorn -b 0.0.0.0:5000 --workers 4 --threads 100 module:app</span><br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>下载依赖：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> flask-sock<br></code></pre></td></tr></table></figure><p>运行程序：</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240327111836.png"></p><p>在代码里定义目标服务器（写自己电脑的ip）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 目标服务器</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONFIG_WEBSOCKET_URI <span class="hljs-string">&quot;ws://192.168.137.1:5000&quot;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_eth.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_websocket_client.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cJSON.h&gt;</span></span><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-comment">// 目标服务器</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CONFIG_WEBSOCKET_URI <span class="hljs-string">&quot;ws://demo.piesocket.com/v3/channel_123?api_key=VCXCEuvhGcBDP7XhiJJUDvR1e1D3eiVjgZ9VRiaV&amp;notify_self&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NO_DATA_TIMEOUT_SEC 5</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-type">static</span> TimerHandle_t shutdown_signal_timer;<br><span class="hljs-type">static</span> SemaphoreHandle_t shutdown_sema;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">log_error_if_nonzero</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message, <span class="hljs-type">int</span> error_code)</span><br>&#123;<br><span class="hljs-keyword">if</span> (error_code != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Last error %s: 0x%x&quot;</span>, message, error_code);<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">shutdown_signaler</span><span class="hljs-params">(TimerHandle_t xTimer)</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;No data received for %d seconds, signaling shutdown&quot;</span>, NO_DATA_TIMEOUT_SEC);<br>xSemaphoreGive(shutdown_sema);<br>&#125;<br><br><span class="hljs-comment">// WebSocket客户端事件处理</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">websocket_event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span> *handler_args, <span class="hljs-type">esp_event_base_t</span> base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">esp_websocket_event_data_t</span> *data = (<span class="hljs-type">esp_websocket_event_data_t</span> *)event_data;<br><span class="hljs-keyword">switch</span> (event_id)<br>&#123;<br><span class="hljs-comment">// 连接成功</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_CONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_CONNECTED&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 连接断开</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_DISCONNECTED:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_DISCONNECTED&quot;</span>);<br>log_error_if_nonzero(<span class="hljs-string">&quot;HTTP status code&quot;</span>, data-&gt;error_handle.esp_ws_handshake_status_code);<br><span class="hljs-keyword">if</span> (data-&gt;error_handle.error_type == WEBSOCKET_ERROR_TYPE_TCP_TRANSPORT)<br>&#123;<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, data-&gt;error_handle.esp_tls_last_esp_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, data-&gt;error_handle.esp_tls_stack_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>, data-&gt;error_handle.esp_transport_sock_errno);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 收到数据</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_DATA:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_DATA&quot;</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received opcode=%d&quot;</span>, data-&gt;op_code);<br><span class="hljs-keyword">if</span> (data-&gt;op_code == <span class="hljs-number">0x08</span> &amp;&amp; data-&gt;data_len == <span class="hljs-number">2</span>)<br>&#123;<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Received closed message with code=%d&quot;</span>, <span class="hljs-number">256</span> * data-&gt;data_ptr[<span class="hljs-number">0</span>] + data-&gt;data_ptr[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Received=%.*s\n\n&quot;</span>, data-&gt;data_len, (<span class="hljs-type">char</span> *)data-&gt;data_ptr);<br>&#125;<br><br><span class="hljs-comment">// If received data contains json structure it succeed to parse</span><br>cJSON *root = cJSON_Parse(data-&gt;data_ptr);<br><span class="hljs-keyword">if</span> (root)<br>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cJSON_GetArraySize(root); i++)<br>&#123;<br>cJSON *elem = cJSON_GetArrayItem(root, i);<br>cJSON *id = cJSON_GetObjectItem(elem, <span class="hljs-string">&quot;id&quot;</span>);<br>cJSON *name = cJSON_GetObjectItem(elem, <span class="hljs-string">&quot;name&quot;</span>);<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Json=&#123;&#x27;id&#x27;: &#x27;%s&#x27;, &#x27;name&#x27;: &#x27;%s&#x27;&#125;&quot;</span>, id-&gt;valuestring, name-&gt;valuestring);<br>&#125;<br>cJSON_Delete(root);<br>&#125;<br><br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Total payload length=%d, data_len=%d, current payload offset=%d\r\n&quot;</span>, data-&gt;payload_len, data-&gt;data_len, data-&gt;payload_offset);<br><br>  <span class="hljs-comment">// 定时器复位</span><br>xTimerReset(shutdown_signal_timer, portMAX_DELAY);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-comment">// 错误</span><br><span class="hljs-keyword">case</span> WEBSOCKET_EVENT_ERROR:<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_ERROR&quot;</span>);<br>log_error_if_nonzero(<span class="hljs-string">&quot;HTTP status code&quot;</span>, data-&gt;error_handle.esp_ws_handshake_status_code);<br><span class="hljs-keyword">if</span> (data-&gt;error_handle.error_type == WEBSOCKET_ERROR_TYPE_TCP_TRANSPORT)<br>&#123;<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, data-&gt;error_handle.esp_tls_last_esp_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, data-&gt;error_handle.esp_tls_stack_err);<br>log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>, data-&gt;error_handle.esp_transport_sock_errno);<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// WebSocket客户端</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">websocket_app_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">esp_websocket_client_config_t</span> websocket_cfg = &#123;&#125;;<br><br>  <span class="hljs-comment">// 创建定时器</span><br>shutdown_signal_timer = xTimerCreate(<span class="hljs-string">&quot;Websocket shutdown timer&quot;</span>, NO_DATA_TIMEOUT_SEC * <span class="hljs-number">1000</span> / portTICK_PERIOD_MS,<br> pdFALSE, <span class="hljs-literal">NULL</span>, shutdown_signaler);<br><span class="hljs-comment">// 创建信号量</span><br>shutdown_sema = xSemaphoreCreateBinary();<br><br><span class="hljs-comment">// 配置目标服务器</span><br>websocket_cfg.uri = CONFIG_WEBSOCKET_URI;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Connecting to %s...&quot;</span>, websocket_cfg.uri);<br><br><span class="hljs-comment">// 创建WebSocket客户端</span><br><span class="hljs-type">esp_websocket_client_handle_t</span> client = esp_websocket_client_init(&amp;websocket_cfg);<br><span class="hljs-comment">// 注册事件</span><br>esp_websocket_register_events(client, WEBSOCKET_EVENT_ANY, websocket_event_handler, (<span class="hljs-type">void</span> *)client);<br><span class="hljs-comment">// 启动WebSocket客户端</span><br>esp_websocket_client_start(client);<br>xTimerStart(shutdown_signal_timer, portMAX_DELAY);<br><span class="hljs-type">char</span> data[<span class="hljs-number">32</span>];<br><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 发送5次数据</span><br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (esp_websocket_client_is_connected(client))<br>&#123;<br><span class="hljs-type">int</span> len = <span class="hljs-built_in">sprintf</span>(data, <span class="hljs-string">&quot;hello %04d&quot;</span>, i++);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Sending %s&quot;</span>, data);<br><span class="hljs-comment">// 发送文本数据</span><br>esp_websocket_client_send_text(client, data, len, portMAX_DELAY);<br>&#125;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>&#125;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Sending fragmented message&quot;</span>);<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br><span class="hljs-built_in">memset</span>(data, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-keyword">sizeof</span>(data));<br>esp_websocket_client_send_text_partial(client, data, <span class="hljs-keyword">sizeof</span>(data), portMAX_DELAY);<br><span class="hljs-built_in">memset</span>(data, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-keyword">sizeof</span>(data));<br>esp_websocket_client_send_cont_msg(client, data, <span class="hljs-keyword">sizeof</span>(data), portMAX_DELAY);<br>esp_websocket_client_send_fin(client, portMAX_DELAY);<br><br><span class="hljs-comment">// 等待信号量</span><br>xSemaphoreTake(shutdown_sema, portMAX_DELAY);<br><span class="hljs-comment">// 关闭WebSocket客户端</span><br>esp_websocket_client_close(client, portMAX_DELAY);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Websocket Stopped&quot;</span>);<br><span class="hljs-comment">// 销毁WebSocket客户端</span><br>esp_websocket_client_destroy(client);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br><br><span class="hljs-comment">// 创建WebSocket客户端</span><br>websocket_app_start();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/27/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.5-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WebSocket%E5%8D%8F%E8%AE%AE/20240327112254.png"></p><p>成功收到回显数据，客户端程序测试完成</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://space.bilibili.com/1338335828">https://space.bilibili.com/1338335828</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html?highlight=websocket">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html?highlight=websocket</a></li><li><a href="https://docs.espressif.com/projects/esp-protocols/esp_websocket_client/docs/latest/index.html#">https://docs.espressif.com/projects/esp-protocols/esp_websocket_client/docs/latest/index.html#</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>WebSocket</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32网络入门-HTTP协议(服务端)</title>
    <link href="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/"/>
    <url>/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32作为WEB服务器的基本使用。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-HTTP协议（服务端）</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-25</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-HTTP协议（服务端）"><a href="#ESP32网络入门-HTTP协议（服务端）" class="headerlink" title="ESP32网络入门-HTTP协议（服务端）"></a>ESP32网络入门-HTTP协议（服务端）</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><blockquote><p>关于HTTP协议的内容在上一节教程里提过,在此不再赘述。</p></blockquote><p>ESP-IDF的HTTP Server 组件提供了在 ESP32 上运行轻量级 Web 服务器的功能，下面介绍使用 HTTP Server 组件 API 的详细步骤：</p><blockquote><ul><li><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html#_CPPv411httpd_startP14httpd_handle_tPK14httpd_config_t" title="httpd_start"><code>httpd_start()</code></a>： 创建 HTTP 服务器的实例，根据具体的配置为其分配内存和资源，并返回该服务器实例的句柄。服务器使用了两个套接字，一个用来监听 HTTP 流量（TCP 类型），另一个用来处理控制信号（UDP 类型），它们在服务器的任务循环中轮流使用。通过向 <code>httpd_start()</code> 传递 <code>httpd_config_t</code> 结构体，可以在创建服务器实例时配置任务的优先级和堆栈的大小。TCP 流量被解析为 HTTP 请求，根据请求的 URI 来调用用户注册的处理程序，在处理程序中需要发送回 HTTP 响应数据包。</p></li><li><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html#_CPPv410httpd_stop14httpd_handle_t" title="httpd_stop"><code>httpd_stop()</code></a>： 根据传入的句柄停止服务器，并释放相关联的内存和资源。这是一个阻塞函数，首先给服务器任务发送停止信号，然后等待其终止。期间服务器任务会关闭所有已打开的连接，删除已注册的 URI 处理程序，并将所有会话的上下文数据重置为空。</p></li><li><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html#_CPPv426httpd_register_uri_handler14httpd_handle_tPK11httpd_uri_t" title="httpd_register_uri_handler"><code>httpd_register_uri_handler()</code></a>： 通过传入 <code>httpd_uri_t</code> 结构体类型的对象来注册 URI 处理程序。该结构体包含如下成员：<code>uri</code> 名字，<code>method</code> 类型（比如 <code>HTTPD_GET/HTTPD_POST/HTTPD_PUT</code> 等等）， <code>esp_err_t *handler (httpd_req_t *req)</code> 类型的函数指针，指向用户上下文数据的 <code>user_ctx</code> 指针。</p></li></ul></blockquote><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>首先我们要初始化WIFI，连接WIFI，这是编写HTTP程序的基础，连接WIFI在此不再赘述。</p><blockquote><p>后面的部分，默认已经连接好网络.</p></blockquote><h3 id="一、创建-HTTP-服务器的实例"><a href="#一、创建-HTTP-服务器的实例" class="headerlink" title="一、创建 HTTP 服务器的实例"></a>一、创建 HTTP 服务器的实例</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 启动 Web 服务器的函数 */</span><br><span class="hljs-type">httpd_handle_t</span> <span class="hljs-title function_">start_webserver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* 生成默认的配置参数 */</span><br>    <span class="hljs-type">httpd_config_t</span> config = HTTPD_DEFAULT_CONFIG();<br><br>    <span class="hljs-comment">/* 置空 esp_http_server 的实例句柄 */</span><br>    <span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-comment">/* 启动 httpd server */</span><br>    <span class="hljs-keyword">if</span> (httpd_start(&amp;server, &amp;config) == ESP_OK) &#123;<br>        <span class="hljs-comment">/* 注册 URI 处理程序 */</span><br>        httpd_register_uri_handler(server, &amp;uri_get);<br>        httpd_register_uri_handler(server, &amp;uri_post);<br>    &#125;<br>    <span class="hljs-comment">/* 如果服务器启动失败，返回的句柄是 NULL */</span><br>    <span class="hljs-keyword">return</span> server;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这段代码是一个基于ESP32的HTTP服务器程序，通过调用httpd_start()函数启动HTTP服务器，并注册URI处理函数，来实现Web服务的功能。主要包括以下几个步骤：</p><ol><li><p>初始化HTTPD配置，使用HTTPD_DEFAULT_CONFIG()函数可以获得默认的HTTPD配置对象，这里设置了LRU清理使能；</p></li><li><p>启动HTTPD服务器，通过调用httpd_start()函数启动HTTPD服务器，参数server指向创建后的HTTPD句柄，config包含HTTPD的配置信息；</p></li><li><p>注册URI处理函数，通过调用httpd_register_uri_handler()函数将URI处理函数添加到HTTP服务器的URI处理列表中，可以实现不同URI地址的访问和处理；</p></li><li><p>注册基本认证机制，如果开启了CONFIG_EXAMPLE_BASIC_AUTH宏定义，则通过httpd_register_basic_auth()函数在HTTPD服务器上注册基本的用户名密码验证机制。</p></li></ol><p>这里的uri_get、uri_post、都是处理URI请求的处理函数，分别对应不同的URI地址。httpd_handle_t类型是HTTPD服务器的句柄类型，可以用于维护HTTPD服务器的状态等信息.</p><h3 id="二、注册-URI-处理程序"><a href="#二、注册-URI-处理程序" class="headerlink" title="二、注册 URI 处理程序"></a>二、注册 URI 处理程序</h3><p>下面对上面提到的路由处理函数进行分析：</p><h4 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h4><p>注册get路由：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 注册路由 */</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> hello = &#123;<br>.uri = <span class="hljs-string">&quot;/hello&quot;</span>,<br>.method = HTTP_GET,<br>.handler = hello_get_handler,<br><span class="hljs-comment">/* Let&#x27;s pass response string in user</span><br><span class="hljs-comment"> * context to demonstrate it&#x27;s usage */</span><br>.user_ctx = <span class="hljs-string">&quot;Hello World!&quot;</span>&#125;;<br></code></pre></td></tr></table></figure><p>这段代码是一个基于ESP32的HTTP服务器程序中的URI处理函数，对应的URI地址为&#x2F;hello。具体来说：</p><ol><li>.uri表示了要处理的URI地址，即当客户端请求该地址时，调用相应的处理函数进行处理；</li><li>.method表示了该URI地址所支持的HTTP请求方法，本例中为HTTP_GET，即只支持GET请求；</li><li>.handler表示了处理函数，当客户端发起请求时，调用该处理函数进行响应；</li><li>.user_ctx是一个指向用户数据的指针，允许在处理函数中使用该指针来存储一些用户自定义的数据，这里将”Hello World!”传递给处理函数作为响应内容。</li></ol><p>在这个例子中，当客户端通过GET方法请求URI地址&#x2F;hello时，会调用hello_get_handler函数进行处理，函数的实现可以根据需求自行编写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* URI 处理函数，在客户端发起 GET /hello 请求时被调用 */</span><br><br><span class="hljs-comment">/* An HTTP GET handler */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">hello_get_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> buf_len;<br><br><span class="hljs-comment">/* Get header value string length and allocate memory for length + 1,</span><br><span class="hljs-comment"> * extra byte for null termination */</span><br>buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Host&quot;</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-comment">/* Copy null terminated value string into buffer */</span><br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Host&quot;</span>, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Host: %s&quot;</span>, buf);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br>buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Test-Header-2&quot;</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Test-Header-2&quot;</span>, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Test-Header-2: %s&quot;</span>, buf);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br>buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Test-Header-1&quot;</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Test-Header-1&quot;</span>, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Test-Header-1: %s&quot;</span>, buf);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br><span class="hljs-comment">/* Read URL query string length and allocate memory for length + 1,</span><br><span class="hljs-comment"> * extra byte for null termination */</span><br>buf_len = httpd_req_get_url_query_len(req) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-keyword">if</span> (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query =&gt; %s&quot;</span>, buf);<br><span class="hljs-type">char</span> param[EXAMPLE_HTTP_QUERY_KEY_MAX_LEN], dec_param[EXAMPLE_HTTP_QUERY_KEY_MAX_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">/* Get value of expected key from query string */</span><br><span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query1&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query1=%s&quot;</span>, param);<br>example_uri_decode(dec_param, param, strnlen(param, EXAMPLE_HTTP_QUERY_KEY_MAX_LEN));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Decoded query parameter =&gt; %s&quot;</span>, dec_param);<br>&#125;<br><span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query3&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query3=%s&quot;</span>, param);<br>example_uri_decode(dec_param, param, strnlen(param, EXAMPLE_HTTP_QUERY_KEY_MAX_LEN));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Decoded query parameter =&gt; %s&quot;</span>, dec_param);<br>&#125;<br><span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query2&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query2=%s&quot;</span>, param);<br>example_uri_decode(dec_param, param, strnlen(param, EXAMPLE_HTTP_QUERY_KEY_MAX_LEN));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Decoded query parameter =&gt; %s&quot;</span>, dec_param);<br>&#125;<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br><span class="hljs-comment">/* Set some custom headers */</span><br>httpd_resp_set_hdr(req, <span class="hljs-string">&quot;Custom-Header-1&quot;</span>, <span class="hljs-string">&quot;Custom-Value-1&quot;</span>);<br>httpd_resp_set_hdr(req, <span class="hljs-string">&quot;Custom-Header-2&quot;</span>, <span class="hljs-string">&quot;Custom-Value-2&quot;</span>);<br><br><span class="hljs-comment">/* Send response with custom headers and body set as the</span><br><span class="hljs-comment"> * string passed in user context*/</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *resp_str = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)req-&gt;user_ctx;<br>httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);<br><br><span class="hljs-comment">/* After sending the HTTP response the old HTTP request</span><br><span class="hljs-comment"> * headers are lost. Check if HTTP request headers can be read now. */</span><br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Host&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Request headers lost&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>上面这段代码是ESP32的HTTP服务器程序中的处理GET请求的函数，对应的URI地址为&#x2F;hello。具体来说：</p><ol><li>首先定义了一个名为hello_get_handler的函数，该函数接收一个指向httpd_req_t类型的指针参数req，表示HTTP请求的结构体实例；</li><li>函数中通过httpd_req_get_hdr_value_len和httpd_req_get_hdr_value_str等函数获取HTTP请求头中特定字段的值，比如Host、Test-Header-1、Test-Header-2等；</li><li>接着通过httpd_req_get_url_query_len和httpd_req_get_url_query_str等函数获取URL查询字符串，并从中解析出特定键值对的值，比如query1、query2、query3等；</li><li>通过httpd_resp_set_hdr设置一些自定义的响应头；</li><li>最后调用httpd_resp_send发送HTTP响应，响应内容为req-&gt;user_ctx所指向的字符串，即在URI处理函数中传入的”Hello World!”。</li></ol><blockquote><p>代码很多，但实际并不复杂运行效果如下：</p></blockquote><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240325174743.png"></p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240325174900.png"></p><p>get参数解析：</p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240325175024.png"></p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240325175043.png"></p><p>我们还可以使用get返回一个网页，用于数据交互：</p><p>新增一个HTML网页的GET路由：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> html = &#123;<br>.uri = <span class="hljs-string">&quot;/html&quot;</span>,<br>.method = HTTP_GET,<br>.handler = html_get_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>&#125;;<br></code></pre></td></tr></table></figure><p>注册：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">    httpd_register_uri_handler(server, &amp;html);<br></code></pre></td></tr></table></figure><p><code>html_get_handler</code>函数:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//定义HTML页面</span><br><span class="hljs-type">char</span> form_html[] = <span class="hljs-string">R&quot;(</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">&lt;title&gt;ESP32 Web Server&lt;/title&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h1&gt;ESP32 Web Server&lt;/h1&gt;</span><br><span class="hljs-string">&lt;form action=&quot;http://192.168.137.55/echo&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-string">&lt;label for=&quot;fname&quot;&gt;Username:&lt;/label&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=&quot;text&quot; id=&quot;fname&quot; name=&quot;username&quot; value=&quot;John&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;label for=&quot;lname&quot;&gt;Age:&lt;/label&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=&quot;text&quot; id=&quot;lname&quot; name=&quot;age&quot; value=&quot;Doe&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;</span><br><span class="hljs-string">)&quot;</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">html_get_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-comment">// 指向 HTML 页面字符串的指针</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *html_content = form_html;<br><br><span class="hljs-comment">// 设置 Content-Type 头</span><br>httpd_resp_set_type(req, <span class="hljs-string">&quot;text/html&quot;</span>);<br><br><span class="hljs-comment">// 发送 HTML 页面作为 HTTP 响应的正文部分</span><br>httpd_resp_send(req, html_content, <span class="hljs-built_in">strlen</span>(html_content));<br><br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>访问效果如图所示：</p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326085636.png"></p><h4 id="POST方法"><a href="#POST方法" class="headerlink" title="POST方法"></a>POST方法</h4><p>我们接着刚才写好的表单，发起一个psot请求<br><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326090740.png"></p><p>这里的URL的IP需要填写自己ESP32联网分配到的IP。这样我们点击提交表单就可以直接发起POST请求。</p><p>注册post路由：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> echo = &#123;<br>.uri = <span class="hljs-string">&quot;/echo&quot;</span>,<br>.method = HTTP_POST,<br>.handler = echo_post_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>&#125;;<br></code></pre></td></tr></table></figure><p>post处理方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* An HTTP POST handler */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">echo_post_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-comment">/* 定义 HTTP POST 请求数据的目标缓存区</span><br><span class="hljs-comment"> * httpd_req_recv() 只接收 char* 数据，但也可以是</span><br><span class="hljs-comment"> * 任意二进制数据（需要类型转换）</span><br><span class="hljs-comment"> * 对于字符串数据，null 终止符会被省略，</span><br><span class="hljs-comment"> * content_len 会给出字符串的长度 */</span><br><span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> ret, remaining = req-&gt;content_len;<br><br><span class="hljs-keyword">while</span> (remaining &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">/* Read the data for the request */</span><br><span class="hljs-keyword">if</span> ((ret = httpd_req_recv(req, buf,<br>MIN(remaining, <span class="hljs-keyword">sizeof</span>(buf)))) &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ret == HTTPD_SOCK_ERR_TIMEOUT)<br>&#123;<br><span class="hljs-comment">/* Retry receiving if timeout occurred */</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">/* 如果发生了错误，返回 ESP_FAIL 可以确保</span><br><span class="hljs-comment"> * 底层套接字被关闭 */</span><br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><br><span class="hljs-comment">/* Send back the same data */</span><br>httpd_resp_send_chunk(req, buf, ret);<br>remaining -= ret;<br><br><span class="hljs-comment">/* Log data received */</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;=========== RECEIVED DATA ==========&quot;</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;%.*s&quot;</span>, ret, buf);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;====================================&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// End response</span><br>httpd_resp_send_chunk(req, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>在表单填写内容：</p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326091157.png"></p><p>提交：</p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326091216.png"></p><p>数据回显，POST请求验证完成。</p><blockquote><p>PS：如果出现下面的报错：Header fields are too long<br><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326091539.png"><br>需要在配置文件里修改：<br><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326091652.png"></p></blockquote><h4 id="PUT方法"><a href="#PUT方法" class="headerlink" title="PUT方法"></a>PUT方法</h4><blockquote><p>put用于修改数据</p></blockquote><p>注册路由：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> ctrl = &#123;<br>.uri = <span class="hljs-string">&quot;/ctrl&quot;</span>,<br>.method = HTTP_PUT,<br>.handler = ctrl_put_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>&#125;;<br><br></code></pre></td></tr></table></figure><p>路由处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">ctrl_put_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-type">char</span> buf;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> ((ret = httpd_req_recv(req, &amp;buf, <span class="hljs-number">1</span>)) &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ret == HTTPD_SOCK_ERR_TIMEOUT)<br>&#123;<br>httpd_resp_send_408(req);<br>&#125;<br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><br><span class="hljs-keyword">if</span> (buf == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br><span class="hljs-comment">/* URI handlers can be unregistered using the uri string */</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Unregistering /hello and /echo URIs&quot;</span>);<br>httpd_unregister_uri(req-&gt;handle, <span class="hljs-string">&quot;/hello&quot;</span>);<br>httpd_unregister_uri(req-&gt;handle, <span class="hljs-string">&quot;/echo&quot;</span>);<br><span class="hljs-comment">/* Register the custom error handler */</span><br>httpd_register_err_handler(req-&gt;handle, HTTPD_404_NOT_FOUND, http_404_error_handler);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering /hello and /echo URIs&quot;</span>);<br>httpd_register_uri_handler(req-&gt;handle, &amp;hello);<br>httpd_register_uri_handler(req-&gt;handle, &amp;echo);<br><span class="hljs-comment">/* Unregister custom error handler */</span><br>httpd_register_err_handler(req-&gt;handle, HTTPD_404_NOT_FOUND, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">/* Respond with empty body */</span><br>httpd_resp_send(req, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ol><li>从请求中接收一个字节的数据到 <code>buf</code> 中。</li><li>如果接收失败或超时，则返回 HTTP 408 请求超时错误。</li><li>如果接收成功且接收的数据为 ‘0’，则取消注册 “&#x2F;hello” 和 “&#x2F;echo” 的 URI 处理器，并注册自定义的 404 错误处理函数 <code>http_404_error_handler</code>。</li><li>如果接收的数据不为 ‘0’，则注册 “&#x2F;hello” 和 “&#x2F;echo” 的 URI 处理器，并取消注册自定义的 404 错误处理函数。</li><li>最后，回复空的 HTTP 响应体并返回 ESP_OK。</li></ol><p>测试效果：</p><p>使用下面的js代码在浏览器控制台发送PUT请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;http://192.168.137.55/ctrl&quot;</span>，<span class="hljs-literal">true</span>);<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">&quot;0&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326094235.png"></p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326094304.png"></p><p>这时hello路由就被取消注册了：</p><p><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326094552.png"></p><p>发送1，hello被重新注册：<br><img src="/2024/03/26/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E6%9C%8D%E5%8A%A1%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%EF%BC%89/20240326094621.png"></p><h3 id="三、停止服务器，释放资源"><a href="#三、停止服务器，释放资源" class="headerlink" title="三、停止服务器，释放资源"></a>三、停止服务器，释放资源</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 停止 Web 服务器的函数 */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">stop_webserver</span><span class="hljs-params">(<span class="hljs-type">httpd_handle_t</span> server)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (server) &#123;<br>        <span class="hljs-comment">/* 停止 httpd server */</span><br>        httpd_stop(server);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h2><blockquote><p>下面是本节全部代码，效果上面展示过，就不再演示</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/param.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_tls_crypto.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;esp_http_server.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_tls.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_check.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;esp_log.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;nvs_flash.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/param.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_tls_crypto.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;esp_http_server.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_tls.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_check.h&quot;</span></span><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMPLE_HTTP_QUERY_KEY_MAX_LEN (64)</span><br><br><span class="hljs-type">char</span> form_html[] = <span class="hljs-string">R&quot;(</span><br><span class="hljs-string">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-string">&lt;html&gt;</span><br><span class="hljs-string">&lt;head&gt;</span><br><span class="hljs-string">&lt;title&gt;ESP32 Web Server&lt;/title&gt;</span><br><span class="hljs-string">&lt;/head&gt;</span><br><span class="hljs-string">&lt;body&gt;</span><br><span class="hljs-string">&lt;h1&gt;ESP32 Web Server&lt;/h1&gt;</span><br><span class="hljs-string">&lt;form action=&quot;http://192.168.137.55/echo&quot; method=&quot;post&quot;&gt;</span><br><span class="hljs-string">&lt;label for=&quot;fname&quot;&gt;Username:&lt;/label&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=&quot;text&quot; id=&quot;fname&quot; name=&quot;username&quot; value=&quot;John&quot;&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;label for=&quot;lname&quot;&gt;Age:&lt;/label&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=&quot;text&quot; id=&quot;lname&quot; name=&quot;age&quot; value=&quot;Doe&quot;&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="hljs-string">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/body&gt;</span><br><span class="hljs-string">&lt;/html&gt;)&quot;</span>;<br><br><span class="hljs-comment">// WIFI回调</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><br><span class="hljs-comment">/*路由处理程序*/</span><br><br><span class="hljs-comment">/* An HTTP GET handler */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">hello_get_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-type">char</span> *buf;<br><span class="hljs-type">size_t</span> buf_len;<br><br><span class="hljs-comment">/* Get header value string length and allocate memory for length + 1,</span><br><span class="hljs-comment"> * extra byte for null termination */</span><br>buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Host&quot;</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-comment">/* Copy null terminated value string into buffer */</span><br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Host&quot;</span>, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Host: %s&quot;</span>, buf);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br>buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Test-Header-2&quot;</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Test-Header-2&quot;</span>, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Test-Header-2: %s&quot;</span>, buf);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br>buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Test-Header-1&quot;</span>) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Test-Header-1&quot;</span>, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Test-Header-1: %s&quot;</span>, buf);<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br><span class="hljs-comment">/* Read URL query string length and allocate memory for length + 1,</span><br><span class="hljs-comment"> * extra byte for null termination */</span><br>buf_len = httpd_req_get_url_query_len(req) + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>)<br>&#123;<br>buf = <span class="hljs-built_in">malloc</span>(buf_len);<br>ESP_RETURN_ON_FALSE(buf, ESP_ERR_NO_MEM, TAG, <span class="hljs-string">&quot;buffer alloc failed&quot;</span>);<br><span class="hljs-keyword">if</span> (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query =&gt; %s&quot;</span>, buf);<br><span class="hljs-type">char</span> param[EXAMPLE_HTTP_QUERY_KEY_MAX_LEN], dec_param[EXAMPLE_HTTP_QUERY_KEY_MAX_LEN] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">/* Get value of expected key from query string */</span><br><span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query1&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query1=%s&quot;</span>, param);<br><span class="hljs-comment">//example_uri_decode(dec_param, param, strnlen(param, EXAMPLE_HTTP_QUERY_KEY_MAX_LEN));</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Decoded query parameter =&gt; %s&quot;</span>, dec_param);<br>&#125;<br><span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query2&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query2=%s&quot;</span>, param);<br><span class="hljs-comment">//example_uri_decode(dec_param, param, strnlen(param, EXAMPLE_HTTP_QUERY_KEY_MAX_LEN));</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Decoded query parameter =&gt; %s&quot;</span>, dec_param);<br>&#125;<br><span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query3&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query3=%s&quot;</span>, param);<br><span class="hljs-comment">//example_uri_decode(dec_param, param, strnlen(param, EXAMPLE_HTTP_QUERY_KEY_MAX_LEN));</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Decoded query parameter =&gt; %s&quot;</span>, dec_param);<br>&#125;<br>&#125;<br><span class="hljs-built_in">free</span>(buf);<br>&#125;<br><br><span class="hljs-comment">/* Set some custom headers */</span><br>httpd_resp_set_hdr(req, <span class="hljs-string">&quot;Custom-Header-1&quot;</span>, <span class="hljs-string">&quot;Custom-Value-1&quot;</span>);<br>httpd_resp_set_hdr(req, <span class="hljs-string">&quot;Custom-Header-2&quot;</span>, <span class="hljs-string">&quot;Custom-Value-2&quot;</span>);<br><br><span class="hljs-comment">/* Send response with custom headers and body set as the</span><br><span class="hljs-comment"> * string passed in user context*/</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *resp_str = (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)req-&gt;user_ctx;<br>httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);<br><br><span class="hljs-comment">/* After sending the HTTP response the old HTTP request</span><br><span class="hljs-comment"> * headers are lost. Check if HTTP request headers can be read now. */</span><br><span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Host&quot;</span>) == <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Request headers lost&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">html_get_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-comment">// 指向 HTML 页面字符串的指针</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *html_content = form_html;<br><br><span class="hljs-comment">// 设置 Content-Type 头</span><br>httpd_resp_set_type(req, <span class="hljs-string">&quot;text/html&quot;</span>);<br><br><span class="hljs-comment">// 发送 HTML 页面作为 HTTP 响应的正文部分</span><br>httpd_resp_send(req, html_content, <span class="hljs-built_in">strlen</span>(html_content));<br><br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><span class="hljs-comment">/* An HTTP POST handler */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">echo_post_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-comment">/* 定义 HTTP POST 请求数据的目标缓存区</span><br><span class="hljs-comment"> * httpd_req_recv() 只接收 char* 数据，但也可以是</span><br><span class="hljs-comment"> * 任意二进制数据（需要类型转换）</span><br><span class="hljs-comment"> * 对于字符串数据，null 终止符会被省略，</span><br><span class="hljs-comment"> * content_len 会给出字符串的长度 */</span><br><span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> ret, remaining = req-&gt;content_len;<br><br><span class="hljs-keyword">while</span> (remaining &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-comment">/* Read the data for the request */</span><br><span class="hljs-keyword">if</span> ((ret = httpd_req_recv(req, buf,<br>MIN(remaining, <span class="hljs-keyword">sizeof</span>(buf)))) &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ret == HTTPD_SOCK_ERR_TIMEOUT)<br>&#123;<br><span class="hljs-comment">/* Retry receiving if timeout occurred */</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">/* 如果发生了错误，返回 ESP_FAIL 可以确保</span><br><span class="hljs-comment"> * 底层套接字被关闭 */</span><br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><br><span class="hljs-comment">/* Send back the same data */</span><br>httpd_resp_send_chunk(req, buf, ret);<br>remaining -= ret;<br><br><span class="hljs-comment">/* Log data received */</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;=========== RECEIVED DATA ==========&quot;</span>);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;%.*s&quot;</span>, ret, buf);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;====================================&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// End response</span><br>httpd_resp_send_chunk(req, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><span class="hljs-comment">/* 注册路由 */</span><br><span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> hello = &#123;<br>.uri = <span class="hljs-string">&quot;/hello&quot;</span>,<br>.method = HTTP_GET,<br>.handler = hello_get_handler,<br>.user_ctx = <span class="hljs-string">&quot;Hello World!&quot;</span>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> html = &#123;<br>.uri = <span class="hljs-string">&quot;/html&quot;</span>,<br>.method = HTTP_GET,<br>.handler = html_get_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>&#125;;<br><br><span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> echo = &#123;<br>.uri = <span class="hljs-string">&quot;/echo&quot;</span>,<br>.method = HTTP_POST,<br>.handler = echo_post_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>&#125;;<br><br><br><span class="hljs-comment">/* This handler allows the custom error handling functionality to be</span><br><span class="hljs-comment"> * tested from client side. For that, when a PUT request 0 is sent to</span><br><span class="hljs-comment"> * URI /ctrl, the /hello and /echo URIs are unregistered and following</span><br><span class="hljs-comment"> * custom error handler http_404_error_handler() is registered.</span><br><span class="hljs-comment"> * Afterwards, when /hello or /echo is requested, this custom error</span><br><span class="hljs-comment"> * handler is invoked which, after sending an error message to client,</span><br><span class="hljs-comment"> * either closes the underlying socket (when requested URI is /echo)</span><br><span class="hljs-comment"> * or keeps it open (when requested URI is /hello). This allows the</span><br><span class="hljs-comment"> * client to infer if the custom error handler is functioning as expected</span><br><span class="hljs-comment"> * by observing the socket state.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">http_404_error_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req, <span class="hljs-type">httpd_err_code_t</span> err)</span><br>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;/hello&quot;</span>, req-&gt;uri) == <span class="hljs-number">0</span>)<br>&#123;<br>httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, <span class="hljs-string">&quot;/hello URI is not available&quot;</span>);<br><span class="hljs-comment">/* Return ESP_OK to keep underlying socket open */</span><br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;/echo&quot;</span>, req-&gt;uri) == <span class="hljs-number">0</span>)<br>&#123;<br>httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, <span class="hljs-string">&quot;/echo URI is not available&quot;</span>);<br><span class="hljs-comment">/* Return ESP_FAIL to close underlying socket */</span><br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><span class="hljs-comment">/* For any other URI send 404 and close socket */</span><br>httpd_resp_send_err(req, HTTPD_404_NOT_FOUND, <span class="hljs-string">&quot;Some 404 error message&quot;</span>);<br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><br><span class="hljs-comment">/* An HTTP PUT handler. This demonstrates realtime</span><br><span class="hljs-comment"> * registration and deregistration of URI handlers</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">ctrl_put_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br>&#123;<br><span class="hljs-type">char</span> buf;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> ((ret = httpd_req_recv(req, &amp;buf, <span class="hljs-number">1</span>)) &lt;= <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">if</span> (ret == HTTPD_SOCK_ERR_TIMEOUT)<br>&#123;<br>httpd_resp_send_408(req);<br>&#125;<br><span class="hljs-keyword">return</span> ESP_FAIL;<br>&#125;<br><br><span class="hljs-keyword">if</span> (buf == <span class="hljs-string">&#x27;0&#x27;</span>)<br>&#123;<br><span class="hljs-comment">/* URI handlers can be unregistered using the uri string */</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Unregistering /hello and /echo URIs&quot;</span>);<br>httpd_unregister_uri(req-&gt;handle, <span class="hljs-string">&quot;/hello&quot;</span>);<br>httpd_unregister_uri(req-&gt;handle, <span class="hljs-string">&quot;/echo&quot;</span>);<br><span class="hljs-comment">/* Register the custom error handler */</span><br>httpd_register_err_handler(req-&gt;handle, HTTPD_404_NOT_FOUND, http_404_error_handler);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering /hello and /echo URIs&quot;</span>);<br>httpd_register_uri_handler(req-&gt;handle, &amp;hello);<br>httpd_register_uri_handler(req-&gt;handle, &amp;echo);<br><span class="hljs-comment">/* Unregister custom error handler */</span><br>httpd_register_err_handler(req-&gt;handle, HTTPD_404_NOT_FOUND, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">/* Respond with empty body */</span><br>httpd_resp_send(req, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> ctrl = &#123;<br>.uri = <span class="hljs-string">&quot;/ctrl&quot;</span>,<br>.method = HTTP_PUT,<br>.handler = ctrl_put_handler,<br>.user_ctx = <span class="hljs-literal">NULL</span>&#125;;<br><br><span class="hljs-comment">/* 启动 Web 服务器的函数 */</span><br><span class="hljs-type">httpd_handle_t</span> <span class="hljs-title function_">start_webserver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/* 生成默认的配置参数 */</span><br><span class="hljs-type">httpd_config_t</span> config = HTTPD_DEFAULT_CONFIG();<br><br><span class="hljs-comment">/* 置空 esp_http_server 的实例句柄 */</span><br><span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Starting server on port: &#x27;%d&#x27;&quot;</span>, config.server_port);<br><span class="hljs-comment">/* 启动 httpd server */</span><br><span class="hljs-keyword">if</span> (httpd_start(&amp;server, &amp;config) == ESP_OK)<br>&#123;<br><span class="hljs-comment">/* 注册 URI 处理程序 */</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering URI handlers&quot;</span>);<br>httpd_register_uri_handler(server, &amp;hello);<br>httpd_register_uri_handler(server, &amp;html);<br>httpd_register_uri_handler(server, &amp;echo);<br>httpd_register_uri_handler(server, &amp;ctrl);<br>&#125;<br><span class="hljs-comment">/* 如果服务器启动失败，返回的句柄是 NULL */</span><br><span class="hljs-keyword">return</span> server;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br>vTaskDelay(<span class="hljs-number">3000</span> / portTICK_PERIOD_MS);<br><br><span class="hljs-comment">/* Start the server for the first time */</span><br>server = start_webserver();<br><br><span class="hljs-keyword">while</span> (server)<br>&#123;<br>sleep(<span class="hljs-number">5</span>);<br>&#125;<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_server.html</a></li><li><a href="https://space.bilibili.com/1338335828">https://space.bilibili.com/1338335828</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>HTTP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32网络入门-HTTP协议(客户端)</title>
    <link href="/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/"/>
    <url>/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32HTTP客户端程序</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-HTTP协议（客户端）</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-24</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-HTTP协议"><a href="#ESP32网络入门-HTTP协议" class="headerlink" title="ESP32网络入门-HTTP协议"></a>ESP32网络入门-HTTP协议</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h4 id="1-1-HTTP协议介绍"><a href="#1-1-HTTP协议介绍" class="headerlink" title="1.1 HTTP协议介绍"></a>1.1 HTTP协议介绍</h4><p><code>HTTP</code>协议(超文本传输协议HyperText Transfer Protocol)，它是基于TCP协议的应用层传输协议，简单来说就是客户端和服务端进行数据传输的一种规则。</p><p>特点：</p><ul><li>支持客户&#x2F;服务器模式</li><li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径，请求方法常用GET,HEAD,POST。每种方法规定了客户与服务器联系的类型不同，由于HTTP协议简单，是的HTTP服务器的程序规模小，因而通信速度很快。</li><li>灵活：HTTP允许传输任意类型的数据对象，正在传输的类型有Content-Type加以标记。</li><li>无连接：无连接的含义是限制每次连接只处理一个请求，服务器处理完客户的请求，并受到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li><li>无状态：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可以导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><h4 id="1-2-HTTP内容"><a href="#1-2-HTTP内容" class="headerlink" title="1.2 HTTP内容"></a>1.2 HTTP内容</h4><blockquote><p>关于HTTP内容比较简单，这里建议直接阅读计算机网络有关部分，在此不再赘述。</p></blockquote><p><img src="/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/20240324115232.png"></p><p>HTTP协议使用客户端&#x2F;服务器模型。客户端向服务器发送HTTP请求，服务器接收到请求后，根据请求的内容进行一定的处理，并将处理结果封装在HTTP响应中返回给客户端。HTTP请求和响应都有一定的结构，通常包含三部分：起始行、首部和主体。</p><p>可以参考：</p><blockquote><p><a href="https://www.bilibili.com/video/BV1KV411o7u5/?spm_id_from=333.1007.0.0&vd_source=ef5a0ab0106372751602034cdd9ab98e">前后端交互之 HTTP 协议</a></p></blockquote><p>我们在本节只需要知道发送HTTP请求的格式和接收的格式即可：</p><h5 id="发送格式："><a href="#发送格式：" class="headerlink" title="发送格式："></a>发送格式：</h5><p><img src="/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/20240324115334.png"></p><p>HTTP的起始行包含了请求方法或响应状态码等信息，如GET、POST等请求方法，200 OK、404 Not Found等响应状态码。HTTP的首部包含了请求或响应的各项属性，如Accept、Content-Type、Set-Cookie等。HTTP的主体则包含了请求或响应的具体内容，如HTML、JSON等文本数据或二进制数据。</p><h5 id="接收格式："><a href="#接收格式：" class="headerlink" title="接收格式："></a>接收格式：</h5><p><img src="/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/20240324115801.png"></p><h5 id="URL格式："><a href="#URL格式：" class="headerlink" title="URL格式："></a>URL格式：</h5><p>URL（Uniform Resource Locator）是用于定位互联网上资源的地址，常见的资源包括网页、图片、视频等。URL由多个部分组成，包括协议、主机名、端口号、路径和查询字符串等。</p><p>一个标准的URL格式如下：</p><p>复制代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">协议</span>&gt;</span>://<span class="hljs-tag">&lt;<span class="hljs-name">主机名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">端口</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">路径</span>&gt;</span>?<span class="hljs-tag">&lt;<span class="hljs-name">查询字符串</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，协议表示访问资源所采用的协议，如HTTP、HTTPS、FTP等；主机名表示资源所在的主机名或IP地址；端口号表示与主机通信的端口号，默认情况下使用协议默认的端口；路径表示请求的资源路径，可以是一个具体的文件路径，也可以是一个文件夹路径；查询字符串表示请求参数，以问号（?）开头，多个参数之间用&amp;符号分隔。</p><p>例如，以下是一个标准的URL格式：</p><p>复制代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://www.example.com:80/index.html?<span class="hljs-built_in">id</span>=123&amp;name=<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>其中，协议为HTTPS，<a href="http://主机名为www.example.com/">主机名为www.example.com</a>，端口号为80（默认端口号可省略），路径为&#x2F;index.html，查询字符串为id&#x3D;123&amp;name&#x3D;test。</p><blockquote><p>请确保明白上面的内容，再开始学习ESP32的HTTP协议使用。</p></blockquote><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>下面我们使用ESP32充当浏览器，向HTTP服务器发送Request请求。</p><h4 id="2-1-整体介绍"><a href="#2-1-整体介绍" class="headerlink" title="2.1 整体介绍"></a>2.1 整体介绍</h4><p><code>esp_http_client</code> 提供了一组 API，用于从 ESP-IDF 应用程序中发起 HTTP&#x2F;S 请求，具体的使用步骤如下：</p><ul><li><p>首先调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv420esp_http_client_initPK24esp_http_client_config_t" title="esp_http_client_init"><code>esp_http_client_init()</code></a>，创建一个 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv424esp_http_client_handle_t" title="esp_http_client_handle_t"><code>esp_http_client_handle_t</code></a> 实例，即基于给定的 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv424esp_http_client_config_t" title="esp_http_client_config_t"><code>esp_http_client_config_t</code></a> 配置创建 HTTP 客户端句柄。此函数必须第一个被调用。若用户未明确定义参数的配置值，则使用默认值。</p></li><li><p>其次调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv423esp_http_client_perform24esp_http_client_handle_t" title="esp_http_client_perform"><code>esp_http_client_perform()</code></a>，执行 <code>esp_http_client</code> 的所有操作，包括打开连接、交换数据、关闭连接（如需要），同时在当前任务完成前阻塞该任务。所有相关的事件（在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv424esp_http_client_config_t" title="esp_http_client_config_t"><code>esp_http_client_config_t</code></a> 中指定）将通过事件处理程序被调用。</p></li><li><p>最后调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv423esp_http_client_cleanup24esp_http_client_handle_t" title="esp_http_client_cleanup"><code>esp_http_client_cleanup()</code></a> 来关闭连接（如有），并释放所有分配给 HTTP 客户端实例的内存。此函数必须在操作完成后最后一个被调用。</p></li></ul><h4 id="2-2-详细步骤"><a href="#2-2-详细步骤" class="headerlink" title="2.2 详细步骤"></a>2.2 详细步骤</h4><p>首先我们要初始化WIFI，连接WIFI，这是编写HTTP程序的基础，连接WIFI在此不再赘述。</p><blockquote><p>后面的部分，默认已经连接好网络.</p></blockquote><h5 id="2-2-1-创建esp-http-client-实例"><a href="#2-2-1-创建esp-http-client-实例" class="headerlink" title="2.2.1 创建esp_http_client 实例"></a>2.2.1 创建<code>esp_http_client</code> 实例</h5><p>这里要使用<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv420esp_http_client_initPK24esp_http_client_config_t" title="esp_http_client_init"><code>esp_http_client_init()</code></a>创建HTTP客户端句柄实例，这个函数是 ESP32&#x2F;ESP-IDF 中用于初始化 HTTP 客户端会话的函数。它接受一个指向 <code>esp_http_client_config_t</code> 结构的指针作为参数，该结构包含了 HTTP 客户端的配置信息。函数返回一个 esp_http_client_handle_t 类型的句柄，需要将这个句柄作为其他接口函数的输入参数来使用。在调用这个函数之后，必须在操作完成后调用 esp_http_client_cleanup 函数来清理资源。</p><p>关于<code>esp_http_client_config_t</code> 结构的参数如下：</p><table><thead><tr><th>成员</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>HTTP URL，如果设置了该字段，则会覆盖其他字段</td></tr><tr><td>host</td><td>域名或 IP 地址，以字符串表示</td></tr><tr><td>port</td><td>连接的端口，默认取决于 <code>esp_http_client_transport_t</code>（80 或 443）</td></tr><tr><td>username</td><td>HTTP 身份验证的用户名</td></tr><tr><td>password</td><td>HTTP 身份验证的密码</td></tr><tr><td>auth_type</td><td>HTTP 身份验证类型，参见 <code>esp_http_client_auth_type_t</code></td></tr><tr><td>path</td><td>HTTP 路径，默认为 <code>/</code> 如果未设置</td></tr><tr><td>query</td><td>HTTP 查询参数</td></tr><tr><td>cert_pem</td><td>SSL 服务器证书，PEM 格式的字符串，如果客户端需要验证服务器</td></tr><tr><td>cert_len</td><td><code>cert_pem</code> 缓冲区的长度。对于以 null 结尾的 PEM，可能为 0</td></tr><tr><td>client_cert_pem</td><td>SSL 客户端证书，PEM 格式的字符串，如果服务器需要验证客户端</td></tr><tr><td>client_cert_len</td><td><code>client_cert_pem</code> 缓冲区的长度。对于以 null 结尾的 PEM，可能为 0</td></tr><tr><td>client_key_pem</td><td>SSL 客户端私钥，PEM 格式的字符串，如果服务器需要验证客户端</td></tr><tr><td>client_key_len</td><td><code>client_key_pem</code> 缓冲区的长度。对于以 null 结尾的 PEM，可能为 0</td></tr><tr><td>client_key_password</td><td>客户端密钥解密密码字符串</td></tr><tr><td>client_key_password_len</td><td><code>client_key_password</code> 字符串的长度</td></tr><tr><td>tls_version</td><td>连接的 TLS 协议版本，例如 TLS 1.2、TLS 1.3（默认 - 无偏好）</td></tr><tr><td>user_agent</td><td>发送 HTTP 请求时的用户代理字符串</td></tr><tr><td>method</td><td>HTTP 方法</td></tr><tr><td>timeout_ms</td><td>网络超时时间（毫秒）</td></tr><tr><td>disable_auto_redirect</td><td>禁用 HTTP 自动重定向</td></tr><tr><td>max_redirection_count</td><td>在接收到 HTTP 重定向状态码时的最大重定向次数，如果为零，则使用默认值</td></tr><tr><td>max_authorization_retries</td><td>在接收到 HTTP 未经授权状态码时的最大连接重试次数，如果为零，则使用默认值。如果为 -1，则禁用授权重试</td></tr><tr><td>event_handler</td><td>HTTP 事件处理器</td></tr><tr><td>transport_type</td><td>HTTP 传输类型，参见 <code>esp_http_client_transport_t</code></td></tr><tr><td>buffer_size</td><td>HTTP 接收缓冲区大小</td></tr><tr><td>buffer_size_tx</td><td>HTTP 发送缓冲区大小</td></tr><tr><td>user_data</td><td>HTTP 用户数据上下文</td></tr><tr><td>is_async</td><td>设置异步模式，目前仅支持 HTTPS</td></tr><tr><td>use_global_ca_store</td><td>使用全局 CA 存储</td></tr><tr><td>skip_cert_common_name_check</td><td>跳过对服务器证书 CN 字段的验证</td></tr><tr><td>common_name</td><td>指向包含服务器证书公共名称的字符串的指针。如果非 NULL，则服务器证书 CN 必须匹配此名称；如果为 NULL，则服务器证书 CN 必须匹配主机名</td></tr><tr><td>crt_bundle_attach</td><td>指向 esp_crt_bundle_attach 函数的函数指针。启用证书包以进行服务器验证，必须在 menuconfig 中启用</td></tr><tr><td>keep_alive_enable</td><td>启用 keep-alive 超时</td></tr><tr><td>keep_alive_idle</td><td>keep-alive 空闲时间，默认为 5 秒</td></tr><tr><td>keep_alive_interval</td><td>keep-alive 间隔时间，默认为 5 秒</td></tr><tr><td>keep_alive_count</td><td>keep-alive 数据包重试发送计数，默认为 3 次</td></tr><tr><td>if_name</td><td>数据通过的接口名称。如果不设置，则使用默认接口</td></tr></tbody></table><p>示例代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化HTTP客户端</span><br><span class="hljs-type">char</span> local_response_buffer[MAX_HTTP_OUTPUT_BUFFER + <span class="hljs-number">1</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-type">esp_http_client_config_t</span> config = &#123;<br>.host = CONFIG_EXAMPLE_HTTP_ENDPOINT,<br>.path = <span class="hljs-string">&quot;/get&quot;</span>,<br>.query = <span class="hljs-string">&quot;esp&quot;</span>,<br>.event_handler = _http_event_handler,<br>.user_data = local_response_buffer, <span class="hljs-comment">// Pass address of local buffer to get response</span><br>.disable_auto_redirect = <span class="hljs-literal">true</span>,<br>&#125;;<br><span class="hljs-type">esp_http_client_handle_t</span> client = esp_http_client_init(&amp;config);<br></code></pre></td></tr></table></figure><p>解释：</p><ol><li><p><code>char local_response_buffer[MAX_HTTP_OUTPUT_BUFFER + 1] = &#123;0&#125;;</code>：这一行定义了一个字符数组 <code>local_response_buffer</code>，用来存储 HTTP 响应内容。<code>MAX_HTTP_OUTPUT_BUFFER</code> 是预先定义的常量，表示了 buffer 的最大大小。</p></li><li><p><code>esp_http_client_config_t config = &#123; ... &#125;;</code>：这里创建了一个 <code>esp_http_client_config_t</code> 结构体变量 <code>config</code>，并使用大括号内的初始化列表对其进行初始化。初始化列表中的字段包括：</p><ul><li><code>host</code>：设置为宏 <code>CONFIG_EXAMPLE_HTTP_ENDPOINT</code>，表示 HTTP 请求的目标主机。</li><li><code>path</code>：设置为 <code>&quot;/get&quot;</code>，表示 HTTP 请求的路径。</li><li><code>query</code>：设置为 <code>&quot;esp&quot;</code>，表示 HTTP 请求的查询参数。</li><li><code>event_handler</code>：设置为 <code>_http_event_handler</code>，这是一个处理 HTTP 事件的回调函数。</li><li><code>user_data</code>：设置为 <code>local_response_buffer</code> 的地址，以便在 HTTP 请求完成后将响应内容存储到 <code>local_response_buffer</code> 中。</li><li><code>disable_auto_redirect</code>：设置为 <code>true</code>，禁用 HTTP 的自动重定向功能。</li></ul></li><li><p><code>esp_http_client_handle_t client = esp_http_client_init(&amp;config);</code>：这一行调用了 <code>esp_http_client_init</code> 函数来初始化一个 HTTP 客户端，并将上述配置传递给该函数。函数返回一个 <code>esp_http_client_handle_t</code> 类型的客户端句柄，以供后续的 HTTP 请求使用。</p></li></ol><h5 id="2-2-2-执行HTTP客户端的各种操作"><a href="#2-2-2-执行HTTP客户端的各种操作" class="headerlink" title="2.2.2 执行HTTP客户端的各种操作"></a>2.2.2 执行HTTP客户端的各种操作</h5><blockquote><p>具体使用就很简单了：</p></blockquote><h6 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h6><p>esp_http_client_perform()：esp_http_client需要使用init函数创建的参数。此函数执行esp_http_client的所有操作，从打开连接，发送数据，下载数据和关闭连接（如有必要）。所有相关事件都将在event_handle（由定义esp_http_client_config_t）中调用。此功能执行其工作并阻止当前任务，直到完成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> err = esp_http_client_perform(client);<br><span class="hljs-keyword">if</span> (err == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP GET Status = %d, content_length = %&quot;</span> PRId64,<br> esp_http_client_get_status_code(client),<br> esp_http_client_get_content_length(client));<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;HTTP GET request failed: %s&quot;</span>, esp_err_to_name(err));<br>&#125;<br>ESP_LOG_BUFFER_HEX(TAG, local_response_buffer, <span class="hljs-built_in">strlen</span>(local_response_buffer));<br><br></code></pre></td></tr></table></figure><p>上面这段代码执行了一个HTTP GET请求，并根据执行结果打印相应的日志信息。</p><h6 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h6><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// POST</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *post_data = <span class="hljs-string">&quot;&#123;\&quot;field1\&quot;:\&quot;value1\&quot;&#125;&quot;</span>;<br>esp_http_client_set_url(client, <span class="hljs-string">&quot;http://&quot;</span> CONFIG_EXAMPLE_HTTP_ENDPOINT <span class="hljs-string">&quot;/post&quot;</span>);<br>esp_http_client_set_method(client, HTTP_METHOD_POST);<br>esp_http_client_set_header(client, <span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/json&quot;</span>);<br>esp_http_client_set_post_field(client, post_data, <span class="hljs-built_in">strlen</span>(post_data));<br>err = esp_http_client_perform(client);<br><span class="hljs-keyword">if</span> (err == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP POST Status = %d, content_length = %&quot;</span> PRId64,<br> esp_http_client_get_status_code(client),<br> esp_http_client_get_content_length(client));<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;HTTP POST request failed: %s&quot;</span>, esp_err_to_name(err));<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-3-关闭链接，并释放系统资源"><a href="#2-2-3-关闭链接，并释放系统资源" class="headerlink" title="2.2.3 关闭链接，并释放系统资源"></a>2.2.3 关闭链接，并释放系统资源</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">esp_http_client_cleanup(client);<br></code></pre></td></tr></table></figure><p>完成<strong>esp_http_client的</strong>任务后，这是最后一个要调用的函数。它将关闭连接（如果有）并释放分配给HTTP客户端的所有内存</p><h3 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h3><blockquote><p>使用HTTP get请求获取我的博客首页</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/param.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_tls.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_http_client.h&quot;</span></span><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-comment">// 最大http输出缓冲区</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_HTTP_OUTPUT_BUFFER 2048</span><br><br><span class="hljs-comment">// WIFI事件回调</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 连接WIFI</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><br><span class="hljs-comment">// HTTP事件回调</span><br><span class="hljs-type">esp_err_t</span> _http_event_handler(<span class="hljs-type">esp_http_client_event_t</span> *evt)<br>&#123;<br><span class="hljs-keyword">switch</span> (evt-&gt;event_id)<br>&#123;<br><span class="hljs-keyword">case</span> HTTP_EVENT_ERROR: <span class="hljs-comment">// 错误事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_ERROR&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_ON_CONNECTED: <span class="hljs-comment">// 连接成功事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_ON_CONNECTED&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_HEADER_SENT: <span class="hljs-comment">// 发送头事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_HEADER_SENT&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_ON_HEADER: <span class="hljs-comment">// 接收头事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_ON_HEADER&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.*s&quot;</span>, evt-&gt;data_len, (<span class="hljs-type">char</span> *)evt-&gt;data);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_ON_DATA: <span class="hljs-comment">// 接收数据事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_ON_DATA, len=%d&quot;</span>, evt-&gt;data_len);<br><span class="hljs-keyword">if</span> (!esp_http_client_is_chunked_response(evt-&gt;client))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.*s&quot;</span>, evt-&gt;data_len, (<span class="hljs-type">char</span> *)evt-&gt;data);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_ON_FINISH: <span class="hljs-comment">// 会话完成事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_ON_FINISH&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_DISCONNECTED: <span class="hljs-comment">// 断开事件</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP_EVENT_DISCONNECTED&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> HTTP_EVENT_REDIRECT:<br>ESP_LOGD(TAG, <span class="hljs-string">&quot;HTTP_EVENT_REDIRECT&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br><br><br><span class="hljs-comment">// HTTP客户端任务</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">http_client_task</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br>ESP_LOGI(<span class="hljs-string">&quot;http_client_task&quot;</span>, <span class="hljs-string">&quot;http_client_task start&quot;</span>);<br><br><span class="hljs-comment">// 初始化HTTP客户端</span><br><span class="hljs-type">char</span> local_response_buffer[MAX_HTTP_OUTPUT_BUFFER + <span class="hljs-number">1</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-comment">// 配置HTTP客户端目标</span><br><span class="hljs-type">esp_http_client_config_t</span> config = &#123;<br><span class="hljs-comment">//.method = HTTP_METHOD_GET,// get请求</span><br>.url = <span class="hljs-string">&quot;http://www.duruofu.top&quot;</span>,<span class="hljs-comment">// 请求url</span><br>.event_handler = _http_event_handler, <span class="hljs-comment">// 事件回调</span><br>.user_data = local_response_buffer,<span class="hljs-comment">// Pass address of local buffer to get response</span><br>&#125;;<br><span class="hljs-type">esp_http_client_handle_t</span> client = esp_http_client_init(&amp;config);<br><br><span class="hljs-comment">// GET</span><br>esp_http_client_set_method(client, HTTP_METHOD_GET);<br><span class="hljs-type">esp_err_t</span> err = esp_http_client_perform(client);<br><span class="hljs-keyword">if</span> (err == ESP_OK)<br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;HTTP GET Status = %d, content_length = %&quot;</span> PRId64,<br> esp_http_client_get_status_code(client),<br> esp_http_client_get_content_length(client));<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;HTTP GET request failed: %s&quot;</span>, esp_err_to_name(err));<br>&#125;<br>ESP_LOG_BUFFER_HEX(TAG, local_response_buffer, <span class="hljs-built_in">strlen</span>(local_response_buffer));<br><br>esp_http_client_cleanup(client);<br><br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 创建HTTP客户端任务</span><br>xTaskCreate(http_client_task, <span class="hljs-string">&quot;http_client_task&quot;</span>, <span class="hljs-number">1024</span>*<span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>效果：<br>成功获取到了博客网站的内容：</p><p><img src="/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/20240325151411.png"></p><p>内容一致：</p><p><img src="/2024/03/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.4-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE(%E5%AE%A2%E6%88%B7%E7%AB%AF)/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-HTTP%E5%8D%8F%E8%AE%AE%EF%BC%88%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%89/20240325151513.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv424esp_http_client_config_t">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html#_CPPv424esp_http_client_config_t</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>HTTP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32WIFI-3.UDP协议</title>
    <link href="/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍ESP32的UDP协议。</li><li>此文档仅作为个人学习笔记，本人不能保证其绝对准确性。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-UDP协议</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-17</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-UDP协议"><a href="#ESP32网络入门-UDP协议" class="headerlink" title="ESP32网络入门-UDP协议"></a>ESP32网络入门-UDP协议</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>上一节教程<a href="https://www.duruofu.top/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/">ESP32WIFI-2.TCP协议</a>详细介绍了TCP协议，本机我们介绍UDP的使用。</p><p>UDP和TCP在程序上的区别，主要如下图：</p><blockquote><p>图来自<a href="https://space.bilibili.com/1338335828">Michael_ee</a>的UDP教程。</p></blockquote><p><img src="/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/20240317142714.png"></p><p>最大的区别就是UDP没有建立连接的过程。</p><p>UDP和TCP的对比如下：</p><p><img src="/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/20240317143536.png"></p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>学习了上一节TCP这部分就会很简单,足够简单就不多描述了。</p></blockquote><h3 id="2-1-UDP客户端"><a href="#2-1-UDP客户端" class="headerlink" title="2.1 UDP客户端"></a>2.1 UDP客户端</h3><p>首先我们要初始化WIFI，连接WIFI，这是编写UDP程序的基础，连接WIFI在此不再赘述。</p><blockquote><p>后面的部分，默认已经连接好网络</p></blockquote><h4 id="2-1-1-创建socket"><a href="#2-1-1-创建socket" class="headerlink" title="2.1.1 创建socket"></a>2.1.1 创建socket</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 创建socket</span><br><span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建失败返回-1</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-2-配置发送目标服务器信息"><a href="#2-1-2-配置发送目标服务器信息" class="headerlink" title="2.1.2 配置发送目标服务器信息"></a>2.1.2 配置发送目标服务器信息</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 目标服务器地址端口</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_SREVER_ADDR <span class="hljs-string">&quot;255.255.255.255&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_SREVER_PORT 8080</span><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_config</span>;</span><br>server_config.sin_addr.s_addr = inet_addr(UDP_SREVER_ADDR);<br>server_config.sin_family = AF_INET;<br>server_config.sin_port = htons(UDP_SREVER_PORT); <span class="hljs-comment">// 宏htons 用于将主机的无符号短整型数据转换成网络字节顺序(小端转大端)</span><br></code></pre></td></tr></table></figure><p>服务器的地址选择 <code>255.255.255.255</code>，意思是不指定局域网内的某一设备，局域网所有的设备如果监听了这个端口号，那么都可以收到ESP32发来的消息</p><h4 id="2-1-3-发送数据"><a href="#2-1-3-发送数据" class="headerlink" title="2.1.3 发送数据"></a>2.1.3 发送数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-type">int</span> err = sendto(sock, data, <span class="hljs-built_in">strlen</span>(data), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_config, <span class="hljs-keyword">sizeof</span>(server_config));<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br>close(sock);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-接收数据"><a href="#2-1-4-接收数据" class="headerlink" title="2.1.4 接收数据"></a>2.1.4 接收数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 接收数据,并发回</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 清空缓存</span><br><span class="hljs-built_in">memset</span>(rx_buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(rx_buffer));<br><span class="hljs-comment">// 接收数据</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">source_addr</span>;</span><br><span class="hljs-type">socklen_t</span> socklen = <span class="hljs-keyword">sizeof</span>(source_addr);<br><span class="hljs-type">int</span> len = recvfrom(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;socklen);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 打印接收到的数据</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-UDP服务端"><a href="#2-2-UDP服务端" class="headerlink" title="2.2 UDP服务端"></a>2.2 UDP服务端</h3><blockquote><p>后面的部分，默认已经连接好网络</p></blockquote><h4 id="2-2-1-创建socket"><a href="#2-2-1-创建socket" class="headerlink" title="2.2.1 创建socket"></a>2.2.1 创建socket</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 创建socket</span><br><span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建失败返回-1</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-配置服务器信息"><a href="#2-2-2-配置服务器信息" class="headerlink" title="2.2.2 配置服务器信息"></a>2.2.2 配置服务器信息</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 服务器地址端口</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_SREVER_PORT 8080</span><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_config</span>;</span><br>server_config.sin_addr.s_addr = htonl(INADDR_ANY);<br>server_config.sin_family = AF_INET;<br>server_config.sin_port = htons(UDP_SREVER_PORT); <span class="hljs-comment">// 宏htons 用于将主机的无符号短整型数据转换成网络字节顺序(小端转大端)</span><br></code></pre></td></tr></table></figure><p>这里就不需要配置服务器IP了，使用ESP32自身分配到的IP。</p><h4 id="2-2-3-绑定端口"><a href="#2-2-3-绑定端口" class="headerlink" title="2.2.3 绑定端口"></a>2.2.3 绑定端口</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 绑定端口</span><br><span class="hljs-type">int</span> err = bind(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_config, <span class="hljs-keyword">sizeof</span>(server_config));<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to bind: errno %d&quot;</span>, errno);<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket bound, port %d&quot;</span>, UDP_SREVER_PORT);<br><br></code></pre></td></tr></table></figure><h4 id="2-2-4-接收数据"><a href="#2-2-4-接收数据" class="headerlink" title="2.2.4 接收数据"></a>2.2.4 接收数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 接收数据,并发回</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 清空缓存</span><br><span class="hljs-built_in">memset</span>(rx_buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(rx_buffer));<br><span class="hljs-comment">// 接收数据</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">source_addr</span>;</span><br><span class="hljs-type">socklen_t</span> socklen = <span class="hljs-keyword">sizeof</span>(source_addr);<br><span class="hljs-type">int</span> len = recvfrom(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;socklen);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 打印接收到的数据</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-5-发送数据"><a href="#2-2-5-发送数据" class="headerlink" title="2.2.5 发送数据"></a>2.2.5 发送数据</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">int</span> err = sendto(sock, rx_buffer, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, <span class="hljs-keyword">sizeof</span>(source_addr));<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Send success&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>有没有发现这服务端代码相比UDP客户端除了多一个使用<code>bind</code>函数绑定地址，剩下都一模一样。（可不是我在水字数😀）</p></blockquote><p>这就涉及到UDP本身的知识了，从套接字编程的角度来看，它是完全相同的。由于UDP是无连接的，因此服务器和客户端都将使用相同的sendto和recvfrom方法。</p><p>但是我们在通信时，一般来说以主从通信为主，我们更喜欢把主机称作为服务端。相比客户端，在DUP里服务端唯一的不同就是服务端的端口和地址是确定的。这样其他客户端才能准确无误向服务端发送消息。</p><p>所以上面的示例代码了，服务端多了一个绑定端口的步骤。其余的都是一样的。</p><p>使用我们使用网络调试助手会发现，协议类型一栏不分客户端和服务端。</p><p><img src="/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/20240317155554.png"></p><h2 id="三、案例（完整代码）"><a href="#三、案例（完整代码）" class="headerlink" title="三、案例（完整代码）"></a>三、案例（完整代码）</h2><h3 id="3-1-UDP客户端"><a href="#3-1-UDP客户端" class="headerlink" title="3.1 UDP客户端"></a>3.1 UDP客户端</h3><blockquote><p>代码:<a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_udp_client">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_udp_client</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-comment">// 目标服务器地址端口</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_SREVER_ADDR <span class="hljs-string">&quot;255.255.255.255&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_SREVER_PORT 8080</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// udp客户端</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">udp_client_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br>&#123;<br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br>ESP_LOGI(<span class="hljs-string">&quot;udp_client_task&quot;</span>, <span class="hljs-string">&quot;udp_client_task start&quot;</span>);<br><br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建失败返回-1</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_config</span>;</span><br>server_config.sin_addr.s_addr = inet_addr(UDP_SREVER_ADDR);<br>server_config.sin_family = AF_INET;<br>server_config.sin_port = htons(UDP_SREVER_PORT); <span class="hljs-comment">// 宏htons 用于将主机的无符号短整型数据转换成网络字节顺序(小端转大端)</span><br><br><br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-type">int</span> err = sendto(sock, data, <span class="hljs-built_in">strlen</span>(data), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_config, <span class="hljs-keyword">sizeof</span>(server_config));<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br>close(sock);<br>&#125;<br><br><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 接收数据,并发回</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 清空缓存</span><br><span class="hljs-built_in">memset</span>(rx_buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(rx_buffer));<br><span class="hljs-comment">// 接收数据</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">source_addr</span>;</span><br><span class="hljs-type">socklen_t</span> socklen = <span class="hljs-keyword">sizeof</span>(source_addr);<br><span class="hljs-type">int</span> len = recvfrom(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;socklen);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 打印接收到的数据</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 关闭socket</span><br>close(sock);<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 创建TCP客户端任务</span><br>xTaskCreate(udp_client_task, <span class="hljs-string">&quot;udp_client_task&quot;</span>, <span class="hljs-number">4096</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/20240317151255.png"></p><h3 id="3-2-UDP服务端"><a href="#3-2-UDP服务端" class="headerlink" title="3.2 UDP服务端"></a>3.2 UDP服务端</h3><blockquote><p>代码：<a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_udp_server">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_udp_server</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/err.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/sys.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;lwip/netdb.h&gt;</span></span><br><br><br><span class="hljs-comment">// 要连接的WIFI</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-comment">// 服务器端口</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UDP_SREVER_PORT 8080</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// udp客户端</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">udp_server_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br>&#123;<br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br>ESP_LOGI(<span class="hljs-string">&quot;udp_server_task&quot;</span>, <span class="hljs-string">&quot;udp_server_task start&quot;</span>);<br><br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_DGRAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建失败返回-1</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_config</span>;</span><br>server_config.sin_addr.s_addr = htonl(INADDR_ANY);<br>server_config.sin_family = AF_INET;<br>server_config.sin_port = htons(UDP_SREVER_PORT); <span class="hljs-comment">// 宏htons 用于将主机的无符号短整型数据转换成网络字节顺序(小端转大端)</span><br><br><span class="hljs-comment">// 绑定端口</span><br><span class="hljs-type">int</span> err = bind(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_config, <span class="hljs-keyword">sizeof</span>(server_config));<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to bind: errno %d&quot;</span>, errno);<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket bound, port %d&quot;</span>, UDP_SREVER_PORT);<br><br><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 接收数据,并发回</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">// 清空缓存</span><br><span class="hljs-built_in">memset</span>(rx_buffer, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(rx_buffer));<br><span class="hljs-comment">// 接收数据</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">source_addr</span>;</span><br><span class="hljs-type">socklen_t</span> socklen = <span class="hljs-keyword">sizeof</span>(source_addr);<br><span class="hljs-type">int</span> len = recvfrom(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;socklen);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-comment">// 打印接收到的数据</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">int</span> err = sendto(sock, rx_buffer, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, <span class="hljs-keyword">sizeof</span>(source_addr));<br><span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Send success&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 关闭socket</span><br>close(sock);<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 创建TCP客户端任务</span><br>xTaskCreate(udp_server_task, <span class="hljs-string">&quot;udp_server_task&quot;</span>, <span class="hljs-number">4096</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/17/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.3-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-UDP%E5%8D%8F%E8%AE%AE/20240317155445.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.bilibili.com/video/BV1iG411j7Gq/?spm_id_from=333.788&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1iG411j7Gq/?spm_id_from=333.788&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>UDP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu_20_04_ROS1安装</title>
    <link href="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/"/>
    <url>/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文记录在Ubuntu22.04下安装ROS1，仅做记录。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>Ubuntu_20_04_ROS1安装</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-17</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="Ubuntu-20-04-ROS1安装"><a href="#Ubuntu-20-04-ROS1安装" class="headerlink" title="Ubuntu_20_04_ROS1安装"></a>Ubuntu_20_04_ROS1安装</h1><h4 id="一、安装Ubuntu20-04虚拟机"><a href="#一、安装Ubuntu20-04虚拟机" class="headerlink" title="一、安装Ubuntu20.04虚拟机"></a>一、安装Ubuntu20.04虚拟机</h4><p>简单，此处忽略</p><h4 id="二、选择ROS版本"><a href="#二、选择ROS版本" class="headerlink" title="二、选择ROS版本"></a>二、选择ROS版本</h4><p>进入ROS官网：<a href="https://www.ros.org/">https://www.ros.org/</a></p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317093207.png"></p><p>这里我们按照ROS1的最后一个版本<code>Noetic Ninjemys</code></p><h4 id="三、参考官方安装步骤"><a href="#三、参考官方安装步骤" class="headerlink" title="三、参考官方安装步骤"></a>三、参考官方安装步骤</h4><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317093510.png"></p><p>点击查看官方教程：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317093556.png"></p><p>选择Ubuntu</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317093621.png"></p><p>这里就是官方的安装步骤指引。</p><h4 id="四、导入ROS安装源"><a href="#四、导入ROS安装源" class="headerlink" title="四、导入ROS安装源"></a>四、导入ROS安装源</h4><p>按照官方提示，我们首先导入安装源。</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317093848.png"></p><p>点击mirrors可以选择中国镜像源。</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317093953.png"></p><p>这里我们选清华：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317094015.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo sh -c <span class="hljs-string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span><br></code></pre></td></tr></table></figure><p>运行上述指令。</p><h4 id="五、设置安装密钥"><a href="#五、设置安装密钥" class="headerlink" title="五、设置安装密钥"></a>五、设置安装密钥</h4><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317094310.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install curl <span class="hljs-comment"># if you haven&#x27;t already installed curl</span><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add -<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317094428.png"></p><p>出现OK即可</p><h4 id="六、下载安装ROS"><a href="#六、下载安装ROS" class="headerlink" title="六、下载安装ROS"></a>六、下载安装ROS</h4><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317094640.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt update<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ros-noetic-desktop-full<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317095558.png"></p><p>不报错就OK</p><h4 id="七、环境参数设置"><a href="#七、环境参数设置" class="headerlink" title="七、环境参数设置"></a>七、环境参数设置</h4><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317095732.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;source /opt/ros/noetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">source ~/.bashrc<br></code></pre></td></tr></table></figure><p>使用<code>roscore</code>测试，可以正常运行：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317095913.png"></p><h4 id="八、rosdep初始化"><a href="#八、rosdep初始化" class="headerlink" title="八、rosdep初始化"></a>八、rosdep初始化</h4><p>初始化依赖工具：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317095959.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install python3-rosdep python3-rosinstall python3-rosinstall-generator python3-wstool build-essential<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317100124.png"></p><p>不报错就OK</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo rosdep init<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317100233.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rosdep update<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317100316.png"></p><p>到这里ROS就安装好了。</p><h4 id="九、ros初上手"><a href="#九、ros初上手" class="headerlink" title="九、ros初上手"></a>九、ros初上手</h4><h5 id="9-1-APT源—-ROS应用商店"><a href="#9-1-APT源—-ROS应用商店" class="headerlink" title="9.1  APT源—-ROS应用商店"></a>9.1  APT源—-ROS应用商店</h5><blockquote><p>这个网站提供ros的一些资源：<a href="https://index.ros.org/">https://index.ros.org/</a></p></blockquote><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317100608.png"></p><p>我们可以找到很多软件包：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317100801.png"></p><p>测试安装一个包：<code>rqt-robot-steering</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install ros-noetic-rqt-robot-steering<br></code></pre></td></tr></table></figure><p>启动ros核心：<code>roscore</code></p><p>然后测试运行这个<code>rqt-robot-steering</code>包，使用命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rosrun rqt_robot_steering rqt_robot_steering<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317103251.png"></p><p>成功打开软件，修改图最上面为&#x2F;turtle1&#x2F;cmd_vel</p><p>在另一个终端运行乌龟实例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rosrun turtlesim turtlesim_node<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317103451.png"></p><p>效果如上所示</p><h5 id="9-2-Github下载软件包"><a href="#9-2-Github下载软件包" class="headerlink" title="9.2 Github下载软件包"></a>9.2 Github下载软件包</h5><p>Github下载编译软件包源码需要建一个工作空间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~<br><span class="hljs-built_in">mkdir</span> catkin_ws<br><span class="hljs-built_in">cd</span> catkin_ws<br><span class="hljs-built_in">mkdir</span> src<br></code></pre></td></tr></table></figure><p>下面尝试下载一个 WPR系列机器人仿真工具</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">cd catkin_ws/src<br>git clone https:<span class="hljs-comment">//github.com/6-robot/wpr_simulation.git</span><br></code></pre></td></tr></table></figure><p>下载好如图：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317104611.png"></p><p>安装软件包依赖：</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317104814.png"></p><p>回到工作目录，编译程序：使用<code>catkin_make</code>命令</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317105103.png"></p><p>编译完成，尝试运行</p><p>首先需要将包里的环境参数加载到终端程序，使用命令<code>source ~/catkin_ws/devel/setup.bash</code></p><p>然后运行软件包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">roslaunch wpr_simulation wpb_simple.launch<br></code></pre></td></tr></table></figure><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317105433.png"></p><p>打开上一节使用的控制器软件，来控制一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">rosrun rqt_robot_steering rqt_robot_steering<br></code></pre></td></tr></table></figure><p>把控制软件消息指令指令修改为&#x2F;cmd_ve、</p><p><img src="/2024/03/17/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/ROS/ROS1/01.%E5%AE%89%E8%A3%85/Ubuntu_20_04_ROS1%E5%AE%89%E8%A3%85/20240317105835.png"></p><p>就能控制机器人撞倒柜子了（😂）</p><p>最后，我们可以在.bashrc文件添加环境参数，以后就一劳永逸了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">echo <span class="hljs-string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> &gt;&gt; ~/.bashrc<br>source ~/.bashrc<br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://wiki.ros.org/noetic/Installation/Ubuntu">https://wiki.ros.org/noetic/Installation/Ubuntu</a></li><li><a href="https://wiki.ros.org/ROS/Installation/UbuntuMirrors#USTC">https://wiki.ros.org/ROS/Installation/UbuntuMirrors#USTC</a></li><li><a href="https://blog.csdn.net/N1CROWN/article/details/126809213#:~:text=Ubuntu20.04%E5%AE%89%E8%A3%85ROS1%201.%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90,2.%E6%9B%B4%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%203.%E6%B7%BB%E5%8A%A0ros%E8%BD%AF%E4%BB%B6%E6%BA%90%204.%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E5%AF%86%E9%92%A5">https://blog.csdn.net/N1CROWN/article/details/126809213#:~:text=Ubuntu20.04%E5%AE%89%E8%A3%85ROS1%201.%E6%9B%B4%E6%8D%A2%E8%BD%AF%E4%BB%B6%E6%BA%90,2.%E6%9B%B4%E6%96%B0%E8%BD%AF%E4%BB%B6%E5%88%97%E8%A1%A8%203.%E6%B7%BB%E5%8A%A0ros%E8%BD%AF%E4%BB%B6%E6%BA%90%204.%E6%B7%BB%E5%8A%A0%E8%BD%AF%E4%BB%B6%E5%AF%86%E9%92%A5</a></li><li><a href="https://blog.csdn.net/m0_59161987/article/details/128557068">https://blog.csdn.net/m0_59161987/article/details/128557068</a></li><li><a href="https://www.bilibili.com/video/BV1BP4y1o7pw/?spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1BP4y1o7pw/?spm_id_from=333.1007.top_right_bar_window_history.content.click</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>软件相关</category>
      
      <category>ROS</category>
      
      <category>ROS1</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境搭建</tag>
      
      <tag>ROS</tag>
      
      <tag>ROS1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32WIFI-2.TCP协议</title>
    <link href="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/"/>
    <url>/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍ESP32的TCP协议,本节内容实现TCP客户端和服务端。</li><li>此文档仅作为个人学习笔记，本人不能保证其绝对准确性。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-TCP协议</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-15</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-TCP协议"><a href="#ESP32网络入门-TCP协议" class="headerlink" title="ESP32网络入门-TCP协议"></a>ESP32网络入门-TCP协议</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>在开始使用TCP协议之前，我们需要掌握一些基本的概念和前置知识：</p><blockquote><p>最基本的一点：TCP&#x2F;UDP工作在网络OSI的七层模型中的第四层——传输层，IP在第三层——网络层，WIFI（狭义上）在一二层-物理层和数据链路层。</p></blockquote><h3 id="1-1-套接字（socket）"><a href="#1-1-套接字（socket）" class="headerlink" title="1.1 套接字（socket）"></a>1.1 套接字（socket）</h3><blockquote><p>下面的部分搬运自：<a href="https://zhuanlan.zhihu.com/p/106271407#:~:text=Socket%E6%98%AF%E5%BA%94%E7%94%A8%E5%B1%82%E4%B8%8ETCP%2FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%E9%80%9A%E4%BF%A1%E7%9A%84%E4%B8%AD%E9%97%B4%E8%BD%AF%E4%BB%B6%E6%8A%BD%E8%B1%A1%E5%B1%82%EF%BC%8C%E5%AE%83%E6%98%AF%E4%B8%80%E7%BB%84%E6%8E%A5%E5%8F%A3%E3%80%82,%E5%9C%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%AD%EF%BC%8CSocket%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E9%97%A8%E9%9D%A2%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%AE%83%E6%8A%8A%E5%A4%8D%E6%9D%82%E7%9A%84TCP%2FIP%E5%8D%8F%E8%AE%AE%E6%97%8F%E9%9A%90%E8%97%8F%E5%9C%A8Socket%E6%8E%A5%E5%8F%A3%E5%90%8E%E9%9D%A2%EF%BC%8C%E5%AF%B9%E7%94%A8%E6%88%B7%E6%9D%A5%E8%AF%B4%EF%BC%8C%E4%B8%80%E7%BB%84%E7%AE%80%E5%8D%95%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%B0%B1%E6%98%AF%E5%85%A8%E9%83%A8%E3%80%82">Socket介绍</a> <em>(如有侵权，请联系作者删除)</em></p></blockquote><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315105448.png"></p><p>Socket是应用层与TCP&#x2F;IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP&#x2F;IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部。</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315104749.png"></p><p>网络协议是很复杂的，它的硬件接口可以是WIFI，网线，4G网卡等，我们开发网络程序，不可能亲自去了解这些物理层，链路层的网络协议和实现。我们通过抽象出统一的上层建筑（Socket）来完成代码编写，这样无论底层（链路层，网络层）是何种形式，我们需要考虑的东西都是相同的（Socket的概念是一样的）。</p><p>socket起源于Unix，而Unix&#x2F;Linux 基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write&#x2F;read –&gt; 关闭close”模式 来操作。Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读&#x2F;写IO、打开、关闭）</p><h3 id="1-2-C-x2F-S模式"><a href="#1-2-C-x2F-S模式" class="headerlink" title="1.2 C&#x2F;S模式"></a>1.2 C&#x2F;S模式</h3><p>C&#x2F;S分布式模式，是计算机用语。C是指Client，S是指Server，C&#x2F;S模式就是指客户端&#x2F;服务器模式。是计算机软件协同工作的一种模式，通常采取两层结构。服务器负责数据的管理，客户机负责完成与用户的交互任务。</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315105755.png"></p><h3 id="1-3-TCP协议"><a href="#1-3-TCP协议" class="headerlink" title="1.3 TCP协议"></a>1.3 TCP协议</h3><blockquote><p>请自行了解</p></blockquote><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>本节的工程基于<a href="https://www.duruofu.top/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/">ESP32WIFI-1.WIFI连接</a>中的<a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta">wifi_sta</a>历程</p></blockquote><p>下图展示了TCP协议服务端和客户端的基本流程：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315111126.png"></p><h3 id="2-1-TCP客户端"><a href="#2-1-TCP客户端" class="headerlink" title="2.1 TCP客户端"></a>2.1 TCP客户端</h3><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315110509.png"></p><p>客户端程序流程：初始化-连接-数据交换-断开连接</p><pre><code class=" mermaid">graph LR;  A(Initialize) --&gt; B(Connect);  B --&gt; C(Communicate);  C --&gt; D(Disconnect);  ```  #### 2.1.1 准备工作准备工作主要是连接wifi，为下面的网络协议提供支持，可以参考：[ESP32WIFI-1.WIFI连接](https://www.duruofu.top/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/)#### 2.1.2 创建套接字使用函数`int socket(int domain,int type,int protocol)`创建套接字，参数分别为- `domain`：指定协议家族或地址族，常用的有 `AF_INET`（IPv4 地址族）和 `AF_INET6`（IPv6 地址族）。- `type`：指定套接字类型，常见的有 `SOCK_STREAM`（流套接字，提供面向连接的、可靠的数据传输）和 `SOCK_DGRAM`（数据报套接字，提供无连接的、不可靠的数据传输）。- `protocol`：指定协议，一般为 0，默认由 `socket()` 函数根据前两个参数自动选择合适的协议。```c// 创建socketint sock = socket(AF_INET, SOCK_STREAM, 0);if (sock &lt; 0) // 创建失败返回-1&#123;ESP_LOGE(TAG, &quot;Unable to create socket: errno %d&quot;, errno);return;&#125;</code></pre><h4 id="2-1-3-配置并连接服务端"><a href="#2-1-3-配置并连接服务端" class="headerlink" title="2.1.3 配置并连接服务端"></a>2.1.3 配置并连接服务端</h4><p>使用函数<code>connect(int s,const struct sockaddr *name,socklen_t namelen)</code>连接服务端，参数分别为：</p><ul><li><code>s</code>: 表示一个已经创建并绑定到本地地址的套接字描述符。</li><li><code>name</code>: 是一个指向目标服务器地址结构体的指针，通常是 <code>struct sockaddr</code> 结构体或其派生结构体，用来指定要连接的远程服务器的地址信息。</li><li><code>namelen</code>: 表示参数 <code>name</code> 指向的地址结构体的长度。</li></ul><p>这里的<code> struct sockaddr </code>结构体用于配置IP协议，这里以IPV4为例，参数如下：</p><ul><li><code>sin_len</code>: 该字段表示结构体的长度，单位为字节。在这个结构体中，用一个字节来表示结构体的长度。</li><li><code>sin_family</code>: 这是一个表示地址族（Address Family）的字段，用于指示地址的类型，如IPv4或IPv6。在这里，用<code>sa_family_t</code>类型来表示，可能是一个枚举值或整数值，用于指示IPv4地址族。（和上一步的<code>domain</code>参数相同）</li><li><code>sin_port</code>: 一个16位的整数，表示端口号。<code>in_port_t</code>类型通常被定义为一个16位的整数，用于存储端口号。</li><li><code>sin_addr</code>: 一个<code>struct in_addr</code>类型的结构体，用于存储IPv4地址信息。通常<code>struct in_addr</code>包含一个32位的整数，表示IPv4地址。</li></ul><p>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_SREVER_ADDR <span class="hljs-string">&quot;192.168.1.100&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_SREVER_PORT 8080</span><br><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_config</span>;</span><br>server_config.sin_addr.s_addr = inet_addr(TCP_SREVER_ADDR);<br>server_config.sin_family = AF_INET;<br>server_config.sin_port = htons(TCP_SREVER_PORT); <span class="hljs-comment">// 宏htons 用于将主机的无符号短整型数据转换成网络字节顺序(小端转大端)</span><br><br><span class="hljs-comment">// 连接服务器</span><br><span class="hljs-type">int</span> err = connect(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_config, <span class="hljs-keyword">sizeof</span>(server_config));<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to connect: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-发送消息"><a href="#2-1-4-发送消息" class="headerlink" title="2.1.4 发送消息"></a>2.1.4 发送消息</h4><p>使用<code>send(int s,const void *dataptr,size_t size,int flags)</code>函数发送消息，参数为：</p><ul><li><code>s</code>：指定的套接字描述符，即要发送消息的目标套接字。</li><li><code>dataptr</code>：指向要发送数据的指针，可以是任意类型的数据。</li><li><code>size</code>：要发送的数据大小，以字节为单位。</li><li><code>flags</code>：用于指定发送操作的附加选项，通常可以设为0。</li></ul><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-type">int</span> len = send(sock, data, <span class="hljs-built_in">strlen</span>(data), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-1-5-接收消息"><a href="#2-1-5-接收消息" class="headerlink" title="2.1.5 接收消息"></a>2.1.5 接收消息</h4><p>使用<code>recv(int s,void *mem,size_t len,int flags)</code>接收数据，参数为：</p><ul><li><code>s</code>：指定要接收数据的套接字描述符。</li><li><code>mem</code>：指向存放接收数据的缓冲区的指针。</li><li><code>len</code>：表示接收缓冲区的长度。</li><li><code>flags</code>：指定接收操作的附加选项，通常可以设置为 0。</li></ul><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">int</span> len = recv(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer), <span class="hljs-number">0</span>);<br><span class="hljs-comment">// Error occurred during receiving</span><br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;recv failed: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// Data received</span><br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes from %s:&quot;</span>, len, TCP_SREVER_ADDR);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;%.*s&quot;</span>, len, rx_buffer);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>完整程序请看下面第三部分：</p><h3 id="2-1-TCP服务器"><a href="#2-1-TCP服务器" class="headerlink" title="2.1 TCP服务器"></a>2.1 TCP服务器</h3><h4 id="2-2-1-准备工作"><a href="#2-2-1-准备工作" class="headerlink" title="2.2.1 准备工作"></a>2.2.1 准备工作</h4><p>初始化NVS、 连接WIFI</p><h4 id="2-2-2-创建并配置socket"><a href="#2-2-2-创建并配置socket" class="headerlink" title="2.2.2 创建并配置socket"></a>2.2.2 创建并配置socket</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 创建套接字</span><br><span class="hljs-type">int</span> listen_sock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (listen_sock &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 设置套接字属性</span><br><span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket created&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>这里使用了一个用于设置 socket 属性，用函数 <code>setsockopt()</code>，函数原形如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">setsockopt</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">int</span> level, <span class="hljs-type">int</span> optname, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *optval, <span class="hljs-type">socklen_t</span> optlen)</span>;<br></code></pre></td></tr></table></figure><ul><li><code>sockfd</code>：指定要设置选项的套接字文件描述符。</li><li><code>level</code>：指定选项的协议级别。常见的级别包括 <code>SOL_SOCKET</code>（通用套接字选项）和 <code>IPPROTO_TCP</code>（TCP 协议选项）等。</li><li><code>optname</code>：指定要设置的选项名称，可以是下列之一或者协议特定的选项。常见的选项包括 <code>SO_REUSEADDR</code>（允许地址重用）、<code>SO_KEEPALIVE</code>（启用连接保活）、<code>SO_RCVBUF</code>（设置接收缓冲区大小）等。</li><li><code>optval</code>：指向包含选项值的缓冲区的指针。</li><li><code>optlen</code>：指定选项值的长度。</li></ul><h4 id="2-2-3-配置服务器信息"><a href="#2-2-3-配置服务器信息" class="headerlink" title="2.2.3 配置服务器信息"></a>2.2.3 配置服务器信息</h4><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">dest_addr</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">dest_addr_ip4</span> =</span> (<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;dest_addr;<br>dest_addr_ip4-&gt;sin_addr.s_addr = htonl(INADDR_ANY);<br>dest_addr_ip4-&gt;sin_family = AF_INET;<br>dest_addr_ip4-&gt;sin_port = htons(TCP_SREVER_PORT);<br><br><span class="hljs-comment">// 绑定套接字</span><br><span class="hljs-type">int</span> err = bind(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;dest_addr, <span class="hljs-keyword">sizeof</span>(dest_addr));<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to bind: errno %d&quot;</span>, errno);<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;IPPROTO: %d&quot;</span>, AF_INET);<br><span class="hljs-keyword">goto</span> CLEAN_UP;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket bound, port %d&quot;</span>, TCP_SREVER_PORT);<br><br></code></pre></td></tr></table></figure><p><code>bind</code> 函数用于将一个套接字与一个地址（通常是 IP 地址和端口号）绑定在一起，以便在该地址上监听连接或发送数据。它的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">bind</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> addrlen)</span>;<br></code></pre></td></tr></table></figure><ol><li><code>sockfd</code>：指定要绑定地址的套接字文件描述符。</li><li><code>addr</code>：指向一个 <code>sockaddr</code> 结构体的指针，该结构体包含了要绑定的地址信息。在 IPv4 地址族中，可以使用 <code>sockaddr_in</code> 结构体；在 IPv6 地址族中，可以使用 <code>sockaddr_in6</code> 结构体。通常，你需要将地址信息转换为 <code>sockaddr</code> 结构体的形式，然后传递给 <code>bind</code> 函数。</li><li><code>addrlen</code>：指定地址结构体的长度。</li></ol><h4 id="2-2-4-监听客户端连接"><a href="#2-2-4-监听客户端连接" class="headerlink" title="2.2.4 监听客户端连接"></a>2.2.4 监听客户端连接</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 监听套接字</span><br>err = listen(listen_sock, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during listen: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">goto</span> CLEAN_UP;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>listen()</code> 函数用于将一个套接字（通常是服务器套接字）转换为被动套接字，即用于接受连接请求</p><ol><li><code>sockfd</code>：指定要监听的套接字文件描述符。</li><li><code>backlog</code>：指定在内核中排队等待接受连接的最大连接数。这个参数限制了同时等待连接的数量，超过这个数量的连接请求将被拒绝。这并不是一个限制同时连接的数量，而是限制等待连接队列的长度。</li><li><code>listen()</code> 函数在成功时返回 0，失败时返回 -1</li></ol><h4 id="2-2-4-建立接收"><a href="#2-2-4-建立接收" class="headerlink" title="2.2.4 建立接收"></a>2.2.4 建立接收</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket listening&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">source_addr</span>;</span> <span class="hljs-comment">// Large enough for both IPv4 or IPv6</span><br><span class="hljs-type">socklen_t</span> addr_len = <span class="hljs-keyword">sizeof</span>(source_addr);<br><span class="hljs-type">int</span> sock = accept(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;addr_len);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to accept connection: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><br><span class="hljs-comment">// Set tcp keepalive option</span><br><span class="hljs-type">int</span> keepAlive = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> keepIdle = <span class="hljs-number">5</span>;  <span class="hljs-comment">// TCP keep-alive idle time(s)</span><br><span class="hljs-type">int</span> keepInterval = <span class="hljs-number">5</span>; <span class="hljs-comment">// TCP keep-alive interval time(s)</span><br><span class="hljs-type">int</span> keepCount = <span class="hljs-number">3</span>;  <span class="hljs-comment">// TCP keep-alive packet retry send counts</span><br><br>setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &amp;keepAlive, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &amp;keepIdle, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &amp;keepInterval, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &amp;keepCount, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br><br></code></pre></td></tr></table></figure><p><code>sockaddr_storage</code> 是一个足够大的结构体，可用于存储任意地址族（IPv4 或 IPv6）的地址信息。</p><p>建立连接使用函数<code>accept()</code>,它用于接受传入的连接请求，并创建一个<strong>新的套接字</strong>来与客户端进行通信。它的原型如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(<span class="hljs-type">int</span> sockfd, <span class="hljs-keyword">struct</span> sockaddr *addr, <span class="hljs-type">socklen_t</span> *addrlen)</span>;<br></code></pre></td></tr></table></figure><p>参数：</p><ul><li><code>sockfd</code>：指定正在监听连接请求的套接字文件描述符。</li><li><code>addr</code>：用于存储客户端地址信息的指针。当有连接请求到达时，<code>accept()</code> 函数会将客户端的地址信息填写到这个结构体中。</li><li><code>addrlen</code>：指向一个整数的指针，表示传入的地址结构体的长度。在调用 <code>accept()</code> 函数之前，必须将这个参数设置为 <code>addr</code> 缓冲区的大小。当 <code>accept()</code> 函数返回时，这个参数会更新为实际填充到 <code>addr</code> 缓冲区中的地址结构体的长度。</li></ul><p>建立连接成功后，通过调用 <code>setsockopt()</code> 函数，设置了套接字的 Keep-Alive 选项，以确保连接保持活跃状态。</p><ul><li><code>SO_KEEPALIVE</code>：启用或禁用 TCP Keep-Alive 机制。</li><li><code>TCP_KEEPIDLE</code>：设置 TCP Keep-Alive 空闲时间，即连接空闲多长时间后开始发送 Keep-Alive 消息。</li><li><code>TCP_KEEPINTVL</code>：设置 TCP Keep-Alive 消息的发送间隔，即两次 Keep-Alive 消息之间的时间间隔。</li><li><code>TCP_KEEPCNT</code>：设置 TCP Keep-Alive 消息的发送次数，即发送多少次 Keep-Alive 消息后仍未收到响应才认为连接失效。</li></ul><h4 id="2-2-6-接收-x2F-发送数据"><a href="#2-2-6-接收-x2F-发送数据" class="headerlink" title="2.2.6 接收&#x2F;发送数据"></a>2.2.6 接收&#x2F;发送数据</h4><p>接收和发送依然使用<code>recv</code>和<code>send</code>，下面实现了一个简单的数据接收，回传函数，参数为建立连接的套接字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 数据接收与回传</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_retransmit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> sock)</span><br>&#123;<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">128</span>];<br><br><span class="hljs-keyword">do</span><br>&#123;<br>len = recv(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Connection closed&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>rx_buffer[len] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Null-terminate whatever is received and treat it like a string</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br><br><span class="hljs-comment">// send() can return less bytes than supplied length.</span><br><span class="hljs-comment">// Walk-around for robust implementation.</span><br><span class="hljs-type">int</span> to_write = len;<br><span class="hljs-keyword">while</span> (to_write &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-type">int</span> written = send(sock, rx_buffer + (len - to_write), to_write, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (written &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-comment">// Failed to retransmit, giving up</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>to_write -= written;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>程序解释如下：</p><ul><li><code>recv()</code> 函数用于从套接字接收数据，并将接收到的数据存储在 <code>rx_buffer</code> 中。它的参数包括套接字文件描述符 <code>sock</code>、接收缓冲区 <code>rx_buffer</code>、缓冲区大小以及一些可选的标志参数。如果 <code>recv()</code> 返回值小于 0，则表示出现了错误；如果返回值为 0，则表示连接已关闭；否则，返回接收到的字节数。</li><li>如果接收到的字节数小于 0，表示发生了接收错误，这时会记录错误信息到日志。</li><li>如果接收到的字节数为 0，表示连接已关闭，这时会记录警告信息到日志。</li><li>如果接收到了数据，会记录接收到的数据字节数和数据内容到日志，并通过 <code>send()</code> 函数将接收到的数据回传给客户端。由于 <code>send()</code> 函数可能一次未能发送完所有数据，所以在一个循环中，将剩余的数据继续发送，直到所有数据都被发送出去。</li><li>如果在发送过程中出现了发送错误（<code>send()</code> 返回值小于 0），则会记录错误信息到日志，并返回函数，放弃继续回传数据。</li><li>整个函数在循环中进行，直到 <code>recv()</code> 返回值小于等于 0，表示接收到的数据长度为 0（连接关闭）或出现了接收错误。</li></ul><h4 id="2-2-6-关闭连接和销毁套接字"><a href="#2-2-6-关闭连接和销毁套接字" class="headerlink" title="2.2.6 关闭连接和销毁套接字"></a>2.2.6 关闭连接和销毁套接字</h4><ul><li><code>shutdown();</code>：这个函数调用会关闭套接字的一部分或者全部通信。第二个参数指定了关闭方式：<ul><li>如果为 0，则表示关闭套接字的读取功能，即不能再从套接字中读取数据。</li><li>如果为 1，则表示关闭套接字的写入功能，即不能再向套接字中写入数据。</li><li>如果为 2，则表示关闭套接字的读取和写入功能，即完全关闭套接字的通信功能。</li></ul></li><li><code>close(sock);</code>：这个函数调用会彻底关闭套接字，释放它占用的资源。关闭套接字后，不能再对它进行任何操作。</li></ul><p>以上就是基本的TCP服务的编程流程，关于服务器实例请参考第三部分</p><h2 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h2><h3 id="3-1-TCP客户端程序"><a href="#3-1-TCP客户端程序" class="headerlink" title="3.1 TCP客户端程序"></a>3.1 TCP客户端程序</h3><blockquote><p>代码见： <a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_tcp_client">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_tcp_client</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_SREVER_ADDR <span class="hljs-string">&quot;192.168.137.1&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_SREVER_PORT 8080</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_client_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br>&#123;<br><br><br><span class="hljs-comment">// 等待wifi连接成功(暂时这样处理)</span><br>vTaskDelay(<span class="hljs-number">5000</span> / portTICK_PERIOD_MS);<br><br>ESP_LOGI(<span class="hljs-string">&quot;tcp_client_task&quot;</span>, <span class="hljs-string">&quot;tcp_client_task start&quot;</span>);<br><br><span class="hljs-comment">// 创建socket</span><br><span class="hljs-type">int</span> sock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 创建失败返回-1</span><br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">server_config</span>;</span><br>server_config.sin_addr.s_addr = inet_addr(TCP_SREVER_ADDR);<br>server_config.sin_family = AF_INET;<br>server_config.sin_port = htons(TCP_SREVER_PORT); <span class="hljs-comment">// 宏htons 用于将主机的无符号短整型数据转换成网络字节顺序(小端转大端)</span><br><br><span class="hljs-comment">// 连接服务器</span><br><span class="hljs-type">int</span> err = connect(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;server_config, <span class="hljs-keyword">sizeof</span>(server_config));<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to connect: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *data = <span class="hljs-string">&quot;Hello World!&quot;</span>;<br><span class="hljs-type">int</span> len = send(sock, data, <span class="hljs-built_in">strlen</span>(data), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">1024</span>];<br><span class="hljs-comment">// 接收数据,并发回</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> len = recv(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer), <span class="hljs-number">0</span>);<br><span class="hljs-comment">// Error occurred during receiving</span><br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;recv failed: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">// Data received</span><br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes from %s:&quot;</span>, len, TCP_SREVER_ADDR);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;%.*s&quot;</span>, len, rx_buffer);<br><br><span class="hljs-comment">// 发送数据</span><br><span class="hljs-type">int</span> len_end = send(sock, rx_buffer, len, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len_end &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 创建TCP客户端任务</span><br>xTaskCreate(tcp_client_task, <span class="hljs-string">&quot;tcp_client_task&quot;</span>, <span class="hljs-number">4096</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序效果如下，可以正常收发数据：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315144045.png"></p><h3 id="3-2-TCP服务端程序"><a href="#3-2-TCP服务端程序" class="headerlink" title="3.2 TCP服务端程序"></a>3.2 TCP服务端程序</h3><blockquote><p>代码见： <a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_tcp_server">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_tcp_server</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TCP_SREVER_PORT 8080</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 数据接收与回传</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_retransmit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> sock)</span><br>&#123;<br><span class="hljs-type">int</span> len;<br><span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">128</span>];<br><br><span class="hljs-keyword">do</span><br>&#123;<br>len = recv(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGW(TAG, <span class="hljs-string">&quot;Connection closed&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>rx_buffer[len] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Null-terminate whatever is received and treat it like a string</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br><br><span class="hljs-comment">// send() can return less bytes than supplied length.</span><br><span class="hljs-comment">// Walk-around for robust implementation.</span><br><span class="hljs-type">int</span> to_write = len;<br><span class="hljs-keyword">while</span> (to_write &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-type">int</span> written = send(sock, rx_buffer + (len - to_write), to_write, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (written &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><span class="hljs-comment">// Failed to retransmit, giving up</span><br><span class="hljs-keyword">return</span>;<br>&#125;<br>to_write -= written;<br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">// tcp服务器任务</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_server_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br>&#123;<br><span class="hljs-comment">// 创建套接字</span><br><span class="hljs-type">int</span> listen_sock = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (listen_sock &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">// 设置套接字属性</span><br><span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br>setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket created&quot;</span>);<br><br><span class="hljs-comment">// 设置服务器(IPV4)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">dest_addr</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">dest_addr_ip4</span> =</span> (<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;dest_addr;<br>dest_addr_ip4-&gt;sin_addr.s_addr = htonl(INADDR_ANY);<br>dest_addr_ip4-&gt;sin_family = AF_INET;<br>dest_addr_ip4-&gt;sin_port = htons(TCP_SREVER_PORT);<br><br><span class="hljs-comment">// 绑定套接字</span><br><span class="hljs-type">int</span> err = bind(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;dest_addr, <span class="hljs-keyword">sizeof</span>(dest_addr));<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to bind: errno %d&quot;</span>, errno);<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;IPPROTO: %d&quot;</span>, AF_INET);<br><span class="hljs-keyword">goto</span> CLEAN_UP;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket bound, port %d&quot;</span>, TCP_SREVER_PORT);<br><br><span class="hljs-comment">// 监听套接字 (阻塞)</span><br>err = listen(listen_sock, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during listen: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">goto</span> CLEAN_UP;<br>&#125;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">char</span> addr_str[<span class="hljs-number">128</span>];<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket listening&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">source_addr</span>;</span> <span class="hljs-comment">// Large enough for both IPv4 or IPv6</span><br><span class="hljs-type">socklen_t</span> addr_len = <span class="hljs-keyword">sizeof</span>(source_addr);<br><span class="hljs-type">int</span> sock = accept(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;addr_len);<br><span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>)<br>&#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to accept connection: errno %d&quot;</span>, errno);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">// Set tcp keepalive option</span><br><span class="hljs-type">int</span> keepAlive = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> keepIdle = <span class="hljs-number">5</span>;  <span class="hljs-comment">// TCP keep-alive idle time(s)</span><br><span class="hljs-type">int</span> keepInterval = <span class="hljs-number">5</span>; <span class="hljs-comment">// TCP keep-alive interval time(s)</span><br><span class="hljs-type">int</span> keepCount = <span class="hljs-number">3</span>;  <span class="hljs-comment">// TCP keep-alive packet retry send counts</span><br><br>setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &amp;keepAlive, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &amp;keepIdle, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &amp;keepInterval, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &amp;keepCount, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br><span class="hljs-comment">// Convert ip address to string</span><br><span class="hljs-keyword">if</span> (source_addr.ss_family == PF_INET)<br>&#123;<br>inet_ntoa_r(((<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;source_addr)-&gt;sin_addr, addr_str, <span class="hljs-keyword">sizeof</span>(addr_str) - <span class="hljs-number">1</span>);<br>&#125;<br><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket accepted ip address: %s&quot;</span>, addr_str);<br><br>do_retransmit(sock);<br><br>shutdown(sock, <span class="hljs-number">0</span>);<br>close(sock);<br>&#125;<br><br>CLEAN_UP:<br>close(listen_sock);<br>vTaskDelete(<span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// wifi初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">wifi_sta_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 初始化WIFI设备( 为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX/TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API)</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br><span class="hljs-comment">//----------------配置省电模式-------------------</span><br><span class="hljs-comment">// 不省电(数据传输会更快)</span><br>ESP_ERROR_CHECK(esp_wifi_set_ps(WIFI_PS_NONE));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">// 创建默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// 配置启动WIFI</span><br>wifi_sta_init();<br><br><span class="hljs-comment">// 创建TCP服务器任务</span><br>xTaskCreate(tcp_server_task, <span class="hljs-string">&quot;tcp_server_task&quot;</span>, <span class="hljs-number">4096</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果演示：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.2-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-TCP%E5%8D%8F%E8%AE%AE/20240315180322.png"></p><blockquote><p>值得注意的一点：这里将整个tcpserver的流程放在一个task里，以至于他只能一对一通信，若要连接多个，则需要将连接，接收的部分也作为task来编写。<br>每次建立连接就会创建一个新的套接字，将这个新的套接字放到一个新的线程进行通信，就能实现多个客户端连接。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://github.com/espressif/esp-idf/blob/release/v5.1/examples/protocols/sockets/tcp_server/main/tcp_server.c">https://github.com/espressif/esp-idf/blob/release/v5.1/examples/protocols/sockets/tcp_server/main/tcp_server.c</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>TCP协议</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32WIFI-1.WIFI连接</title>
    <link href="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/"/>
    <url>/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍ESP32的WIFI基本概念和工作流程,本节内容仅实现WIFI连接。</li><li>此文档仅作为个人学习笔记，本人不能保证其绝对准确性。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32网络入门-WIFI连接</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-13</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32网络入门-WIFI连接"><a href="#ESP32网络入门-WIFI连接" class="headerlink" title="ESP32网络入门-WIFI连接"></a>ESP32网络入门-WIFI连接</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>在开始使用WIFI之前，我们需要掌握一些基本的概念和前置知识：</p><blockquote><p>最基本的一点：Wi-Fi是物理层和数据链路层的东西,Wi-Fi取代的是以太网的网线和交换机上的口，通过无线电波来收发信息。换句话说，这里说的WIFI暂时不涉及网络层协议。</p></blockquote><h3 id="1-1-ESP32事件机制"><a href="#1-1-ESP32事件机制" class="headerlink" title="1.1 ESP32事件机制"></a>1.1 ESP32事件机制</h3><blockquote><p>如果对FreeRTOS的多线程没有任何了解，请先了解一下，可以参考：<a href="https://www.bilibili.com/video/BV1au411E7K1?p=7">线程是什么</a></p></blockquote><p>关于事件循环可以参考下面的链接、大致了解即可。</p><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_event.html">ESP32事件循环</a></li><li><a href="https://www.bilibili.com/video/BV1FD4y1j79J/?spm_id_from=333.788&vd_source=ef5a0ab0106372751602034cdd9ab98e">Event Loop 大白话版</a></li></ol><h3 id="1-2-ESP32-WIFI的STA和AP模式"><a href="#1-2-ESP32-WIFI的STA和AP模式" class="headerlink" title="1.2 ESP32 WIFI的STA和AP模式"></a>1.2 ESP32 WIFI的STA和AP模式</h3><h4 id="1-2-1-AP"><a href="#1-2-1-AP" class="headerlink" title="1.2.1 AP"></a>1.2.1 AP</h4><p>AP(Access Point)也就是无线接入点，是一个无线网络的创建者,是网络的中心节点。一般家庭或办公室使用的无线路由器就是一个AP。</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240313184111.png"></p><h4 id="1-2-2-STA"><a href="#1-2-2-STA" class="headerlink" title="1.2.2 STA"></a>1.2.2 STA</h4><p>站点(STA，Station)就是每一个连接到无线网络中的终端(如笔记本电脑、PDA及其它可以联网的用户设备)都可称为一个站点。</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240313184132.png"></p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><blockquote><p>参考：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/wifi.html">ESP-IDF:Wi-Fi 驱动程序</a></p></blockquote><p>ESP-IDFWiFi库提供的功能如下：</p><ul><li>支持仅 station 模式、仅 AP 模式、station&#x2F;AP 共存模式</li><li>支持使用 IEEE 802.11b、IEEE 802.11g、IEEE 802.11n 和 API 配置协议模式</li><li>支持 WPA&#x2F;WPA2&#x2F;WPA3&#x2F;WPA2-企业版&#x2F;WPA3-企业版&#x2F;WAPI&#x2F;WPS 和 DPP</li><li>支持 AMSDU、AMPDU、HT40、QoS 以及其它主要功能</li><li>支持乐鑫专属协议，可实现 <strong>1 km</strong> 数据通信量</li><li>空中数据传输最高可达 20 MBit&#x2F;s TCP 吞吐量和 30 MBit&#x2F;s UDP 吞吐量</li><li>支持快速扫描和全信道扫描</li><li>支持获取信道状态信息</li></ul><h3 id="2-1-WIFI-AP模式"><a href="#2-1-WIFI-AP模式" class="headerlink" title="2.1 WIFI AP模式"></a>2.1 WIFI AP模式</h3><blockquote><p>官方示例程序位于：</p></blockquote><p><code>Espressif\frameworks\esp-idf-v4.4.3\examples\wifi\getting_started\softAP</code></p><p>配置流程如下：</p><ul><li><code>nvs_flash_init</code>，初始化默认 NVS 分区。</li><li><code>esp_netif_init</code>，初始化底层TCP&#x2F;IP堆栈（创建一个 LwIP 核心任务，并初始化 LwIP 相关工作。）</li><li><code>esp_event_loop_create_default</code>，创建默认事件循环。</li><li><code>esp_netif_create_default_wifi_ap</code>，使用默认WiFi AP配置创建esp_netif对象，将netif连接到WiFi并注册默认WiFi处理程序。</li><li><code>esp_wifi_init</code>，为 WiFi 驱动初始化 WiFi 分配资源，如 WiFi 控制结构、RX&#x2F;TX 缓冲区、WiFi NVS 结构等，这个 WiFi 也启动 WiFi 任务。必须先调用此API，然后才能调用所有其他WiFi API</li><li><code>esp_event_handler_instance_register</code>，监听WIFI_EVENTWiFi 任意事件，触发事件后，进入回调函数</li><li><code>esp_wifi_set_mode</code>，设置WiFi工作模式为station、soft-AP或station+soft-AP，默认模式为soft-AP模式。本程序设置为AP</li><li><code>esp_wifi_set_config</code>，设置 ESP32 STA 或 AP 的配置</li><li><code>esp_wifi_start</code>，根据配置，启动WiFi</li></ul><p>工作流程如下图所示：(看不懂可以忽略，毕竟先用起来慢慢就学会了，也可以看<a href="https://space.bilibili.com/1338335828">Michael_ee</a>老师的教程:<a href="https://www.bilibili.com/video/BV1ye4y1r7XK/?spm_id_from=333.788&vd_source=ef5a0ab0106372751602034cdd9ab98e">WIFI热点工作流程</a>)</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240313190734.png"></p><p>主要的流程分为下面几个部分（图来自官方教程）：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240313191730.png"></p><h4 id="2-1-1-Wi-Fi准备阶段（图上没有）"><a href="#2-1-1-Wi-Fi准备阶段（图上没有）" class="headerlink" title="2.1.1 Wi-Fi准备阶段（图上没有）"></a>2.1.1 Wi-Fi准备阶段（图上没有）</h4><p>这个阶段我们需要初始化NVS,因为WiFi库内部是依赖这个东西的，NVS的相关知识可以看这篇博客：<a href="https://www.duruofu.top/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/">ESP32存储-3.VFS虚拟文件系统</a></p><p>下面直接贴出代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) &#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK( ret );<br></code></pre></td></tr></table></figure><h4 id="2-1-2-Wi-Fi-初始化阶段"><a href="#2-1-2-Wi-Fi-初始化阶段" class="headerlink" title="2.1.2 Wi-Fi 初始化阶段"></a>2.1.2 Wi-Fi 初始化阶段</h4><p>这个阶段主要有下面几个步骤：</p><ul><li>主任务通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/network/esp_netif.html#_CPPv414esp_netif_initv" title="esp_netif_init"><code>esp_netif_init()</code></a> 创建一个 LwIP 核心任务，并初始化 LwIP 相关工作。</li><li>主任务通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_event.html#_CPPv421esp_event_loop_createPK21esp_event_loop_args_tP23esp_event_loop_handle_t" title="esp_event_loop_create"><code>esp_event_loop_create()</code></a> 创建一个系统事件任务，并初始化应用程序事件的回调函数。在此情况下，该回调函数唯一的动作就是将事件中继到应用程序任务中。</li><li>主任务通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/network/esp_netif.html#_CPPv432esp_netif_create_default_wifi_apv" title="esp_netif_create_default_wifi_ap"><code>esp_netif_create_default_wifi_ap()</code></a> 或 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/network/esp_netif.html#_CPPv433esp_netif_create_default_wifi_stav" title="esp_netif_create_default_wifi_sta"><code>esp_netif_create_default_wifi_sta()</code></a> 创建有 TCP&#x2F;IP 堆栈的默认网络接口实例绑定 station 或 AP。</li><li>主任务通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/network/esp_wifi.html#_CPPv413esp_wifi_initPK18wifi_init_config_t" title="esp_wifi_init"><code>esp_wifi_init()</code></a> 创建 Wi-Fi 驱动程序任务，并初始化 Wi-Fi 驱动程序。</li><li>主任务通过调用 OS API 创建应用程序任务。</li></ul><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_ERROR_CHECK(esp_netif_init());<br><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// *esp_netif_ap 可以用来修改AP设置</span><br><span class="hljs-type">esp_netif_t</span> *esp_netif_ap = esp_netif_create_default_wifi_ap();<br><br><span class="hljs-comment">/*Initialize WiFi */</span> <br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br></code></pre></td></tr></table></figure><p>到这里就完成了wifi初始化。</p><h4 id="2-1-3-Wi-Fi-配置阶段"><a href="#2-1-3-Wi-Fi-配置阶段" class="headerlink" title="2.1.3 Wi-Fi 配置阶段"></a>2.1.3 Wi-Fi 配置阶段</h4><p>Wi-Fi 驱动程序初始化成功后，可以进入到配置阶段。</p><p>通过函数<code>esp_wifi_set_mode</code>可以设置WiFi工作模式为station、soft-AP或station+soft-AP。</p><p>通过函数<code>esp_wifi_set_config</code>，设置 ESP32 STA 或 AP 的具体配置（参数很多，可以去官方文档仔细看看，下面只配置几个基本参数）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 设置为AP模式</span><br> ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));<br> <br><span class="hljs-comment">// AP详细配置</span><br><span class="hljs-type">wifi_config_t</span> wifi_ap_config = &#123;<br>.ap = &#123;<br>.ssid = ESP_WIFI_AP_SSID,  <span class="hljs-comment">// WIFI名称</span><br>.ssid_len = <span class="hljs-built_in">strlen</span>(ESP_WIFI_AP_SSID), <span class="hljs-comment">// 名称长度</span><br>.channel = <span class="hljs-number">1</span>,  <span class="hljs-comment">// WIFI信道</span><br>.password = ESP_WIFI_AP_PASSWD,  <span class="hljs-comment">// WiFi密码</span><br>.max_connection = <span class="hljs-number">5</span>,  <span class="hljs-comment">// 最大连接数，默认值是 10</span><br>.authmode = WIFI_AUTH_WPA2_PSK,  <span class="hljs-comment">// WiFi认证方式</span><br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_ap_config));<br></code></pre></td></tr></table></figure><p>这里只配配置了基本参数。</p><h4 id="2-1-4-Wi-Fi-启动阶段"><a href="#2-1-4-Wi-Fi-启动阶段" class="headerlink" title="2.1.4 Wi-Fi 启动阶段"></a>2.1.4 Wi-Fi 启动阶段</h4><p> 使用<code>esp_wifi_start</code>，根据配置，启动WiFi</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Start WiFi */</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br></code></pre></td></tr></table></figure><p>这样就完成了一个基本的WIFI AP。</p><p>但是这样仅仅是最基本的程序，当有外部STA设备接入和断开我们如何在程序里得知呢？这就需要使用之前创建的默认事件循环，</p><h4 id="2-1-5-事件循环"><a href="#2-1-5-事件循环" class="headerlink" title="2.1.5 事件循环"></a>2.1.5 事件循环</h4><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_event.html#_CPPv431esp_event_handler_register_with23esp_event_loop_handle_t16esp_event_base_t7int32_t19esp_event_handler_tPv" title="esp_event_handler_register_with"><code>esp_event_handler_instance_register</code></a> 将事件处理函数注册到默认的事件循环中。它与 <code>esp_event_handler_instance_register_with </code>函数的功能相同，唯一的区别是将处理器注册到默认事件循环中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">esp_event_handler_instance_register</span><span class="hljs-params">(<span class="hljs-type">esp_event_base_t</span> event_base,</span><br><span class="hljs-params">                                             <span class="hljs-type">int32_t</span> event_id,</span><br><span class="hljs-params">                                             <span class="hljs-type">esp_event_handler_t</span> event_handler,</span><br><span class="hljs-params">                                             <span class="hljs-type">void</span> *event_handler_arg,</span><br><span class="hljs-params">                                             <span class="hljs-type">esp_event_handler_instance_t</span> *instance)</span>;<br></code></pre></td></tr></table></figure><p>参数如下：</p><ul><li>参数 event_base 是要为其注册处理程序的事件的基本ID。</li><li>参数 event_id 是要注册处理程序的事件的ID。</li><li>参数 event_handler 是当事件被分发时调用的处理函数。</li><li>参数 event_handler_arg 是传递给处理函数的除事件数据以外的数据。</li><li>参数 instance 是与注册的事件处理器和数据相关的事件处理器实例对象</li></ul><p>可以在espidf文件里看到相关事件描述：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240314165844.png"></p><p>我们可以在默认事件循环创建后，添加事件处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg,<span class="hljs-type">esp_event_base_t</span> event_base,<span class="hljs-type">int32_t</span> event_id,<span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-comment">// 连接事件</span><br><span class="hljs-keyword">if</span>(event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_AP_STAIPASSIGNED)<br>&#123;<br><span class="hljs-comment">// 解析数据</span><br><span class="hljs-type">ip_event_ap_staipassigned_t</span>* event_info = (<span class="hljs-type">ip_event_ap_staipassigned_t</span> *)event_data;<br>ESP_LOGW(<span class="hljs-string">&quot;WIFI_AP&quot;</span>, <span class="hljs-string">&quot;设备已连接 MAC:&quot;</span>MACSTR<span class="hljs-string">&quot;&quot;</span>, MAC2STR(event_info-&gt;mac));<br>&#125;<br><br><span class="hljs-comment">// 断开连接事件</span><br><span class="hljs-keyword">if</span>(event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_AP_STADISCONNECTED)<br>&#123;<br><span class="hljs-type">wifi_event_ap_stadisconnected_t</span>* event_info = (<span class="hljs-type">wifi_event_ap_stadisconnected_t</span>*)event_data;<br>ESP_LOGW(<span class="hljs-string">&quot;WIFI_AP&quot;</span>, <span class="hljs-string">&quot;设备已断开 MAC:&quot;</span>MACSTR<span class="hljs-string">&quot;&quot;</span>, MAC2STR(event_info-&gt;mac));<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// ......</span><br><br><span class="hljs-comment">// 初始化默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><span class="hljs-comment">// 注册设备连接事件回调</span><br>esp_event_handler_instance_register(IP_EVENT, IP_EVENT_AP_STAIPASSIGNED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">// 注册设备断开连接设备回调</span><br>esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_AP_STADISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br><br><span class="hljs-comment">// ......</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们在这里注册了IP_EVENT_AP_STAIPASSIGNED事件，当STA设备连接和断开后就会调用WIFI_CallBack回调函数,打印连接设备的MAC信息。</p><h3 id="2-2-WIFI-STA"><a href="#2-2-WIFI-STA" class="headerlink" title="2.2 WIFI  STA"></a>2.2 WIFI  STA</h3><blockquote><p>官方示例代码位于（与热点流程相似，但是细节有所不同）:<br>&#96;Espressif\frameworks\esp-idf-v4.4.3\examples\wifi\getting_started\station</p></blockquote><p>前面几步配配置方式基本相同</p><p>下面是官方的程序宏观流程：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240314220947.png"></p><h4 id="2-2-1-Wi-Fi准备阶段（与上文AP相同）"><a href="#2-2-1-Wi-Fi准备阶段（与上文AP相同）" class="headerlink" title="2.2.1 Wi-Fi准备阶段（与上文AP相同）"></a>2.2.1 Wi-Fi准备阶段（与上文AP相同）</h4><p>初始化NVS：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) &#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK( ret );<br></code></pre></td></tr></table></figure><h4 id="2-2-2-Wi-Fi初始化阶段"><a href="#2-2-2-Wi-Fi初始化阶段" class="headerlink" title="2.2.2 Wi-Fi初始化阶段"></a>2.2.2 Wi-Fi初始化阶段</h4><p>这里与AP的配置不同了，我们需要配置设备为STA模式，</p><p>这里唯一的区别是把<code>esp_netif_create_default_wifi_ap()</code>修改为<code> esp_netif_create_default_wifi_sta()</code>配置为STA模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_ERROR_CHECK(esp_netif_init());<br><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br><span class="hljs-comment">// *esp_netif_ap 可以用来修改AP设置</span><br><span class="hljs-type">esp_netif_t</span> *esp_netif_sta = esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span> <br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br></code></pre></td></tr></table></figure><h4 id="2-2-3-Wi-Fi配置阶段"><a href="#2-2-3-Wi-Fi配置阶段" class="headerlink" title="2.2.3 Wi-Fi配置阶段"></a>2.2.3 Wi-Fi配置阶段</h4><p>这里与AP模式类似，但是配置结构体里的内容有差异</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c">...............<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br>.................<br><br><span class="hljs-comment">// 设置为STA模式</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125; ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br></code></pre></td></tr></table></figure><p>这里的配置信息顾名思义就是要连接的wifi名称和密码（当然还有更多参数，可以参考ESP-IDF参数说明）。</p><h4 id="2-2-4-Wi-Fi-启动阶段"><a href="#2-2-4-Wi-Fi-启动阶段" class="headerlink" title="2.2.4 Wi-Fi 启动阶段"></a>2.2.4 Wi-Fi 启动阶段</h4><p>和AP模式不同，这里多了一个<code>esp_wifi_connect()</code>用于连接wifi。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br>ESP_ERROR_CHECK(esp_wifi_connect());<br></code></pre></td></tr></table></figure><h4 id="2-2-5-事件循环"><a href="#2-2-5-事件循环" class="headerlink" title="2.2.5 事件循环"></a>2.2.5 事件循环</h4><p>同样的，我们可以像前面一样添加事件回调函数</p><p>这里监听了启动事件，连接失败事件，连接成功事件，代码很简单就不展开解释了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg,<span class="hljs-type">esp_event_base_t</span> event_base,<span class="hljs-type">int32_t</span> event_id,<span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// ......</span><br><br><span class="hljs-comment">// 初始化默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br><br><span class="hljs-comment">// ......</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-3-补充"><a href="#2-3-补充" class="headerlink" title="2.3 补充"></a>2.3 补充</h3><h4 id="2-3-1-WIFI的省电模式"><a href="#2-3-1-WIFI的省电模式" class="headerlink" title="2.3.1 WIFI的省电模式"></a>2.3.1 WIFI的省电模式</h4><p>可以使用<code>esp_wifi_set_ps()</code>函数来配置WIFI的省电模式。</p><p>这个函数可以有三个参数可选：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span><br>    WIFI_PS_NONE,        <span class="hljs-comment">/**&lt; No power save */</span><br>    WIFI_PS_MIN_MODEM,   <span class="hljs-comment">/**&lt; Minimum modem power saving. In this mode, station wakes up to receive beacon every DTIM period */</span><br>    WIFI_PS_MAX_MODEM,   <span class="hljs-comment">/**&lt; Maximum modem power saving. In this mode, interval to receive beacons is determined by the listen_interval parameter in wifi_sta_config_t */</span><br>&#125; <span class="hljs-type">wifi_ps_type_t</span>;<br><br></code></pre></td></tr></table></figure><p>关于省电模式可以参考：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/low-power-mode.html#id8" title="永久链接至标题">Wi-Fi场景如何选择低功耗模式</a></p><h4 id="2-3-2-静态IP配置"><a href="#2-3-2-静态IP配置" class="headerlink" title="2.3.2 静态IP配置"></a>2.3.2 静态IP配置</h4><p>在<code>esp_netif_create_default_wifi_sta()</code>创建好DHCP客户端后使用函数<code>esp_err_t esp_netif_dhcpc_stop(esp_netif_t *esp_netif)</code>停止DHCP客户端。</p><p>使用<code>esp_netif_set_ip_info()</code>配置我们想要的静态IP,如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 初始化STA设备</span><br><span class="hljs-type">esp_netif_t</span> *esp_netif = esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">// ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓</span><br><span class="hljs-comment">//*******************配置静态IP*************************</span><br>esp_netif_dhcpc_stop(esp_netif);<br><span class="hljs-type">esp_netif_ip_info_t</span> ipInfo;<br>ipInfo.ip.addr = inet_addr(<span class="hljs-string">&quot;192.168.138.2&quot;</span>);<br>ipInfo.netmask = inet_addr(<span class="hljs-string">&quot;255.255.255.0&quot;</span>);<br>ipInfo.gw = inet_addr(<span class="hljs-string">&quot;192.168.138.2&quot;</span>);<br><br>esp_netif_set_ip_info(esp_netif, &amp;ipInfo);<br>esp_netif_dhcpc_start(esp_netif);<br><span class="hljs-comment">//*******************配置静态IP*************************</span><br><span class="hljs-comment">// ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑</span><br></code></pre></td></tr></table></figure><h3 id="2-3-1-WIFI-Scan"><a href="#2-3-1-WIFI-Scan" class="headerlink" title="2.3.1 WIFI Scan"></a>2.3.1 WIFI Scan</h3><p>我们使用<code>esp_wifi_start</code>后，会根据配置，启动WiFI。如果不立即连接到设定的WIFI热点，我们也可以使用WIFI Scan来寻找可连接的设备。</p><p><code>esp_wifi_scan_start</code>，扫描所有有效的AP<br><code>esp_wifi_scan_get_ap_records</code>，获取上次扫描中找到的AP列表 <code>esp_wifi_scan_get_ap_num</code>，获取上次扫描中找到的AP数</p><p>这里也没什么复杂的，建议直接参考IDF官方文档：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/wifi.html#id17" title="永久链接至标题">ESP32 Wi-Fi 扫描</a></p><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><h3 id="3-1-WIFI-AP模式"><a href="#3-1-WIFI-AP模式" class="headerlink" title="3.1 WIFI AP模式"></a>3.1 WIFI AP模式</h3><p>下面基于第二部分的教程实现了WIFI AP模式<br>代码链接：</p><blockquote><p><a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_ap">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_ap</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_AP_SSID <span class="hljs-string">&quot;DuRuofu_ESP32&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_AP_PASSWD <span class="hljs-string">&quot;3.1415926&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg,<span class="hljs-type">esp_event_base_t</span> event_base,<span class="hljs-type">int32_t</span> event_id,<span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-comment">// 连接事件</span><br><span class="hljs-keyword">if</span>(event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_AP_STAIPASSIGNED)<br>&#123;<br><span class="hljs-comment">// 解析数据</span><br><span class="hljs-type">ip_event_ap_staipassigned_t</span>* event_info = (<span class="hljs-type">ip_event_ap_staipassigned_t</span> *)event_data;<br>ESP_LOGW(<span class="hljs-string">&quot;WIFI_AP&quot;</span>, <span class="hljs-string">&quot;设备已连接 MAC:&quot;</span>MACSTR<span class="hljs-string">&quot;&quot;</span>, MAC2STR(event_info-&gt;mac));<br>&#125;<br><br><span class="hljs-comment">// 断开连接事件</span><br><span class="hljs-keyword">if</span>(event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_AP_STADISCONNECTED)<br>&#123;<br><span class="hljs-type">wifi_event_ap_stadisconnected_t</span>* event_info = (<span class="hljs-type">wifi_event_ap_stadisconnected_t</span>*)event_data;<br>ESP_LOGW(<span class="hljs-string">&quot;WIFI_AP&quot;</span>, <span class="hljs-string">&quot;设备已断开 MAC:&quot;</span>MACSTR<span class="hljs-string">&quot;&quot;</span>, MAC2STR(event_info-&gt;mac));<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//----------------准备阶段-------------------</span><br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">//---------------初始化阶段------------------</span><br><br>ESP_ERROR_CHECK(esp_netif_init());<br><br><span class="hljs-comment">// 初始化默认事件循环</span><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><span class="hljs-comment">// 注册设备连接事件回调</span><br>esp_event_handler_instance_register(IP_EVENT, IP_EVENT_AP_STAIPASSIGNED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-comment">// 注册设备断开连接设备回调</span><br>esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_AP_STADISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br><span class="hljs-comment">// *esp_netif_ap 可以用来修改AP设置</span><br><span class="hljs-type">esp_netif_t</span> *esp_netif_ap = esp_netif_create_default_wifi_ap();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//---------------配置阶段--------------------</span><br><span class="hljs-comment">// 设置为AP模式</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_AP));<br><br><span class="hljs-comment">// AP详细配置</span><br><span class="hljs-type">wifi_config_t</span> wifi_ap_config = &#123;<br>.ap = &#123;<br>.ssid = ESP_WIFI_AP_SSID,  <span class="hljs-comment">// WIFI名称</span><br>.ssid_len = <span class="hljs-built_in">strlen</span>(ESP_WIFI_AP_SSID), <span class="hljs-comment">// 名称长度</span><br>.channel = <span class="hljs-number">1</span>,  <span class="hljs-comment">// WIFI信道</span><br>.password = ESP_WIFI_AP_PASSWD,  <span class="hljs-comment">// WiFi密码</span><br>.max_connection = <span class="hljs-number">5</span>,  <span class="hljs-comment">// 最大连接数，默认值是 10</span><br>.authmode = WIFI_AUTH_WPA2_PSK,  <span class="hljs-comment">// WiFi认证方式</span><br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_AP, &amp;wifi_ap_config));<br><br><span class="hljs-comment">//---------------启动阶段--------------------</span><br><span class="hljs-comment">/* Start WiFi */</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br>&#125;<br></code></pre></td></tr></table></figure><p>效果展示：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240314220318.png"></p><p>连接wifi会打印连接设备的信息。</p><h3 id="3-2-WIFI-STA模式"><a href="#3-2-WIFI-STA模式" class="headerlink" title="3.2 WIFI STA模式"></a>3.2 WIFI STA模式</h3><p>下面基于第二部分的教程实现了WIFI STA模式<br>代码链接：</p><blockquote><p><a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_mac.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_SSID <span class="hljs-string">&quot;duruofu_win10&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESP_WIFI_STA_PASSWD <span class="hljs-string">&quot;1234567890&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">WIFI_CallBack</span><span class="hljs-params">(<span class="hljs-type">void</span> *event_handler_arg, <span class="hljs-type">esp_event_base_t</span> event_base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> connect_count = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// WIFI 启动成功</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_START&quot;</span>);<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-comment">// WIFI 连接失败</span><br><span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED&quot;</span>);<br>connect_count++;<br><span class="hljs-keyword">if</span> (connect_count &lt; <span class="hljs-number">6</span>)<br>&#123;<br>ESP_ERROR_CHECK(esp_wifi_connect());<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_DISCONNECTED 10 times&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-comment">// WIFI 连接成功(获取到了IP)</span><br><span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP)<br>&#123;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;WIFI_EVENT_STA_GOT_IP&quot;</span>);<br><span class="hljs-type">ip_event_got_ip_t</span> *info = (<span class="hljs-type">ip_event_got_ip_t</span> *)event_data;<br>ESP_LOGI(<span class="hljs-string">&quot;WIFI_EVENT&quot;</span>, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR <span class="hljs-string">&quot;&quot;</span>, IP2STR(&amp;info-&gt;ip_info.ip));<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//----------------准备阶段-------------------</span><br><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> ret = nvs_flash_init();<br><span class="hljs-keyword">if</span> (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND)<br>&#123;<br>ESP_ERROR_CHECK(nvs_flash_erase());<br>ret = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK(ret);<br><br><span class="hljs-comment">//----------------初始化阶段-------------------</span><br>ESP_ERROR_CHECK(esp_netif_init());<br><br>ESP_ERROR_CHECK(esp_event_loop_create_default());<br><span class="hljs-comment">// 注册事件(wifi启动成功)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_START, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(WIFI_EVENT, WIFI_EVENT_STA_DISCONNECTED, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 注册事件(wifi连接失败)</span><br>ESP_ERROR_CHECK(esp_event_handler_instance_register(IP_EVENT, IP_EVENT_STA_GOT_IP, WIFI_CallBack, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>));<br><br><span class="hljs-comment">// 初始化STA设备</span><br>esp_netif_create_default_wifi_sta();<br><br><span class="hljs-comment">/*Initialize WiFi */</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = WIFI_INIT_CONFIG_DEFAULT();<br><span class="hljs-comment">// WIFI_INIT_CONFIG_DEFAULT 是一个默认配置的宏</span><br><br>ESP_ERROR_CHECK(esp_wifi_init(&amp;cfg));<br><br><span class="hljs-comment">//----------------配置阶段-------------------</span><br><span class="hljs-comment">// 设置为STA模式</span><br>ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));<br><br><span class="hljs-comment">// STA详细配置</span><br><span class="hljs-type">wifi_config_t</span> sta_config = &#123;<br>.sta = &#123;<br>.ssid = ESP_WIFI_STA_SSID,<br>.password = ESP_WIFI_STA_PASSWD,<br>.bssid_set = <span class="hljs-literal">false</span>,<br>&#125;,<br>&#125;;<br>ESP_ERROR_CHECK(esp_wifi_set_config(WIFI_IF_STA, &amp;sta_config));<br><br><span class="hljs-comment">//----------------启动阶段-------------------</span><br>ESP_ERROR_CHECK(esp_wifi_start());<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240315084947.png"></p><h3 id="3-2-WIFI配置静态IP"><a href="#3-2-WIFI配置静态IP" class="headerlink" title="3.2 WIFI配置静态IP"></a>3.2 WIFI配置静态IP</h3><p>代码链接：</p><blockquote><p><a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta_static_ip">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_sta_static_ip</a></p></blockquote><h3 id="3-3-WIFI-Scan"><a href="#3-3-WIFI-Scan" class="headerlink" title="3.3 WIFI Scan"></a>3.3 WIFI Scan</h3><p>代码链接：</p><blockquote><p><a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_scan">https://github.com/DuRuofu/ESP32_Learning/tree/master/05.wifi/wifi_scan</a></p></blockquote><p>效果：</p><p><img src="/2024/03/15/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/05.ESP32WIFI%E5%85%A5%E9%97%A8/5.1-ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/ESP32%E7%BD%91%E7%BB%9C%E5%85%A5%E9%97%A8-WIFI%E8%BF%9E%E6%8E%A5/20240315100518.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.bilibili.com/video/BV1au411E7K1?p=7&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1au411E7K1?p=7&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://www.bilibili.com/video/BV1au411E7K1?p=8&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1au411E7K1?p=8&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/wifi.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/wifi.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>WIFI连接</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-7.I2C入门</title>
    <link href="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32 I2C外设（主机模式）的基本使用。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-I2C入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-11</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-I2C入门"><a href="#ESP32外设-I2C入门" class="headerlink" title="ESP32外设-I2C入门"></a>ESP32外设-I2C入门</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>I2C 是一种串行同步半双工通信协议，总线上可以同时挂载多个主机和从机。I2C 总线由串行数据线 (SDA) 和串行时钟线 (SCL) 线构成。这些线都需要上拉电阻。</p><p>I2C 具有简单且制造成本低廉等优点，主要用于低速外围设备的短距离通信（一英尺以内）。</p><p>ESP32 有2个 I2C 控制器（也称为端口），负责处理在 I2C 总线上的通信。每个控制器都可以设置为主机或从机。</p><p>关于I2C的详细介绍可以查看我之前写的一篇博客：<a href="https://www.duruofu.top/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/">IIC协议解析-DuRuofu</a>和相关科普视频:<a href="https://www.bilibili.com/video/BV1dg4y1H773/?spm_id_from=333.337.search-card.all.click">4分钟看懂！I2C通讯协议 最简单的总线通讯！</a>,这里默认大家了解基本的I2C知识,仅介绍在ESP-IDF环境下如何使用。</p><p>我们只需要了解基本的I2C帧结构：</p><p>写数据：</p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311090119.png"></p><p>读数据：</p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311090050.png"></p><h2 id="二、使用（主机模式）"><a href="#二、使用（主机模式）" class="headerlink" title="二、使用（主机模式）"></a>二、使用（主机模式）</h2><h3 id="一、初始化参数配置"><a href="#一、初始化参数配置" class="headerlink" title="一、初始化参数配置"></a>一、初始化参数配置</h3><h4 id="1-1-设置参数"><a href="#1-1-设置参数" class="headerlink" title="1.1 设置参数"></a>1.1 设置参数</h4><p>包括设置初始化参数（如主机模式或从机模式，SDA 和 SCL 使用的 GPIO 管脚，时钟速度等）</p><p>使用<code>i2c_param_config()</code>来配置驱动程序，他需要两个参数：</p><ul><li>参数一：欲配置的I2C通道（<code>I2C_NUM_0</code>或<code>I2C_NUM_1</code>）</li><li>参数二：配置参数结构体的指针<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv412i2c_config_t" title="i2c_config_t"><code>i2c_config_t</code></a></li></ul><p> </p><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv412i2c_config_t" title="i2c_config_t"><code>i2c_config_t</code></a> 结构体中的几个参数如下：</p><ul><li>设置 I2C <strong>工作模式</strong> - 从 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv410i2c_mode_t" title="i2c_mode_t"><code>i2c_mode_t</code></a> 中选择主机模式或从机模式</li><li>设置 <strong>通信管脚</strong><ul><li>指定 SDA 和 SCL 信号使用的 GPIO 管脚</li><li>是否启用 ESP32 的内部上拉电阻</li></ul></li><li>（仅限主机模式）设置 I2C <strong>时钟速度</strong></li><li>（仅限从机模式）设置以下内容：<ul><li>是否应启用 <strong>10 位寻址模式</strong></li><li>定义 <strong>从机地址</strong></li></ul></li></ul><p>配置示例（主机）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i2c_master_port = <span class="hljs-number">0</span>;<br><span class="hljs-type">i2c_config_t</span> conf = &#123;<br>    .mode = I2C_MODE_MASTER,<br>    .sda_io_num = I2C_MASTER_SDA_IO,         <span class="hljs-comment">// 配置 SDA 的 GPIO</span><br>    .sda_pullup_en = GPIO_PULLUP_ENABLE,<br>    .scl_io_num = I2C_MASTER_SCL_IO,         <span class="hljs-comment">// 配置 SCL 的 GPIO</span><br>    .scl_pullup_en = GPIO_PULLUP_ENABLE,<br>    .master.clk_speed = I2C_MASTER_FREQ_HZ,  <span class="hljs-comment">// 为项目选择频率</span><br>    .clk_flags = <span class="hljs-number">0</span>,          <span class="hljs-comment">// 可选项，可以使用 I2C_SCLK_SRC_FLAG_* 标志来选择 I2C 源时钟</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在此阶段，<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv416i2c_param_config10i2c_port_tPK12i2c_config_t" title="i2c_param_config"><code>i2c_param_config()</code></a> 还将其他 I2C 配置参数设置为 I2C 总线协议规范中定义的默认值。有关默认值及修改默认值的详细信息，请参考 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#i2c-api-customized-configuration">用户自定义配置</a>。</p><p>时钟源(<code>clk_flags</code>)：</p><table><thead><tr><th>参数</th><th>值</th><th>含义</th></tr></thead><tbody><tr><td>I2C_SCLK_SRC_FLAG_FOR_NOMA</td><td>0</td><td><strong>仅根据所需频率</strong>进行<strong>自动</strong>选择时钟。（<strong>不支持特殊功能</strong>，如 APB 等）</td></tr><tr><td>I2C_SCLK_SRC_FLAG_AWARE_DFS</td><td>1</td><td>当 APB 时钟改变时，时钟的波特率不会改变。</td></tr><tr><td>I2C_SCLK_SRC_FLAG_LIGHT_SLEEP</td><td>2</td><td>用于轻度睡眠模式</td></tr><tr><td>一般配置为0即可。</td><td></td><td></td></tr></tbody></table><h4 id="1-2-安装驱动程序"><a href="#1-2-安装驱动程序" class="headerlink" title="1.2 安装驱动程序"></a>1.2 安装驱动程序</h4><p>配置好 I2C 驱动程序后，使用以下参数调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv418i2c_driver_install10i2c_port_t10i2c_mode_t6size_t6size_ti" title="i2c_driver_install"><code>i2c_driver_install()</code></a> 安装驱动程序：</p><table><thead><tr><th>参数名</th><th>含义</th><th>类型</th></tr></thead><tbody><tr><td>“i2c_num”</td><td>端口号，从 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv410i2c_port_t" title="i2c_port_t"><code>i2c_port_t</code></a> 中二选一</td><td>[i2c_port_t]</td></tr><tr><td>“mode”</td><td>- 主机或从机模式，从 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv410i2c_mode_t" title="i2c_mode_t"><code>i2c_mode_t</code></a> 中选择</td><td>[i2c_mode_t]</td></tr><tr><td>“slv_rx_buf_len”</td><td>（仅限从机模式），忽略</td><td>[size_t]</td></tr><tr><td>“slv_tx_buf_len”</td><td>（仅限从机模式），忽略</td><td>[size_t]</td></tr><tr><td>“intr_alloc_flags”</td><td>用于分配中断的标志，忽略中断填0</td><td>[int]</td></tr></tbody></table><p>安装 I2C 驱动程序后， ESP32 即可与其他 I2C 设备通信。ESP32 的 I2C 控制器在主机模式下负责与 I2C 从机设备建立通信，并发送命令让从机响应，如进行测量并将结果发给主机。</p><p>ESP-IDF将数据帧以一个数据容器的格式包装，驱动程序提供一个名为 “命令链接” 的容器，该容器应填充一系列命令，然后传递给 I2C 控制器执行。</p><p>我们只需要创建一个空的 <code>I2C 命令</code> 对象，然后添加各种子数据帧，例如起始信号，从机地址，读写位，数据，终止信号等。</p><h3 id="二、写数据"><a href="#二、写数据" class="headerlink" title="二、写数据"></a>二、写数据</h3><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311092622.png"></p><p>上图展示了我们发送一个命令需要使用的几个函数，通过这几个函数的配合就可以组成一个I2C写数据数据帧。</p><p>看一个示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">i2c_cmd_handle_t</span> cmd = i2c_cmd_link_create();<span class="hljs-comment">//创建i2c_cmd_handle_t对象</span><br><span class="hljs-comment">//下面添加各种子数据帧</span><br>i2c_master_start(cmd);        <span class="hljs-comment">//起始信号</span><br>i2c_master_write_byte(cmd, <span class="hljs-number">0x78</span>, <span class="hljs-literal">true</span>);        <span class="hljs-comment">//从机地址及读写位</span><br>i2c_master_write(cmd, bytes, datalen, <span class="hljs-literal">true</span>);<span class="hljs-comment">//数据位(数组)</span><br>i2c_master_stop(cmd);        <span class="hljs-comment">//终止信号</span><br>i2c_master_cmd_begin(<span class="hljs-number">0</span>, cmd, <span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<span class="hljs-comment">//向I2C_NUM_0 发送这个数据帧，timeout设置为1000毫秒</span><br>i2c_cmd_link_delete(cmd);<span class="hljs-comment">//删除i2c_cmd_handle_t对象，释放资源</span><br><br></code></pre></td></tr></table></figure><ol><li>使用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv419i2c_cmd_link_createv" title="i2c_cmd_link_create"><code>i2c_cmd_link_create()</code></a> 创建一个命令链接。</li><li><strong>启动位</strong> - <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv416i2c_master_start16i2c_cmd_handle_t" title="i2c_master_start"><code>i2c_master_start()</code></a></li><li><strong>从机地址</strong> - <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv421i2c_master_write_byte16i2c_cmd_handle_t7uint8_tb" title="i2c_master_write_byte"><code>i2c_master_write_byte()</code></a>。提供单字节地址作为调用此函数的实参。</li><li><strong>数据</strong> - 一个或多个字节的数据作为 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv416i2c_master_write16i2c_cmd_handle_tPK7uint8_t6size_tb" title="i2c_master_write"><code>i2c_master_write()</code></a> 的实参。</li><li><strong>停止位</strong> - <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv415i2c_master_stop16i2c_cmd_handle_t" title="i2c_master_stop"><code>i2c_master_stop()</code></a></li><li>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv420i2c_master_cmd_begin10i2c_port_t16i2c_cmd_handle_t10TickType_t" title="i2c_master_cmd_begin"><code>i2c_master_cmd_begin()</code></a> 来触发 I2C 控制器执行命令链接。一旦开始执行，就不能再修改命令链接。</li><li>命令发送后，通过调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv419i2c_cmd_link_delete16i2c_cmd_handle_t" title="i2c_cmd_link_delete"><code>i2c_cmd_link_delete()</code></a> 释放命令链接使用的资源。</li></ol><h3 id="三、读数据"><a href="#三、读数据" class="headerlink" title="三、读数据"></a>三、读数据</h3><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311093612.png"></p><p>上图展示了我们发送一个命令需要使用的几个函数，通过这几个函数的配合就可以组成一个I2C读数据数据帧。</p><p>在读取数据时，在上图的步骤 4 中，不是用 <code>i2c_master_write...</code>，而是用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv420i2c_master_read_byte16i2c_cmd_handle_tP7uint8_t14i2c_ack_type_t" title="i2c_master_read_byte"><code>i2c_master_read_byte()</code></a> 和&#x2F;或 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv415i2c_master_read16i2c_cmd_handle_tP7uint8_t6size_t14i2c_ack_type_t" title="i2c_master_read"><code>i2c_master_read()</code></a> 填充命令链接。</p><p><code>i2c_master_read()</code>，它的第二个参数<code>data </code>的含义变为用于接收数据的缓冲区地址（<code>uint8_t</code>数组指针即可），第三个参数<code>datalen</code>变为所需要接受数据的长度。第四个参数<code>ack</code>为主机是否发送应答信号。发送则为<code> I2C_MASTER_ACK</code>  ，若每个byte都非应答则为<code>I2C_MASTER_NACK</code>。若只有最后一个字节（接收到数据大于<code>datalen</code>之后）才非应答，则为<code>I2C_MASTER_LAST_NACK</code></p><p><code>i2c_master_read_byte()</code>，第二个参数<code>data</code>也变成了用于接受数据的缓冲区地址，类型为<code>uint8_t</code>的变量指针即可。</p><h3 id="四、其他配置"><a href="#四、其他配置" class="headerlink" title="四、其他配置"></a>四、其他配置</h3><h4 id="4-1-自定义时序"><a href="#4-1-自定义时序" class="headerlink" title="4.1 自定义时序"></a>4.1 自定义时序</h4><p>配置环节函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv416i2c_param_config10i2c_port_tPK12i2c_config_t" title="i2c_param_config"><code>i2c_param_config()</code></a> 在初始化 I2C 端口的驱动程序配置时，也会将几个 I2C 通信参数设置为 I2C 总线协议规范规定的默认值。其他一些相关参数已在 I2C 控制器的寄存器中预先配置。</p><p>通过调用下表中提供的专用函数，可以将所有这些参数更改为用户自定义值。请注意，时序值是在 APB 时钟周期中定义。</p><table><thead><tr><th>要更改的参数</th><th>函数</th></tr></thead><tbody><tr><td>SCL 脉冲周期的高电平和低电平</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv414i2c_set_period10i2c_port_tii" title="i2c_set_period"><code>i2c_set_period()</code></a></td></tr><tr><td>在产生 <strong>启动</strong> 信号期间使用的 SCL 和 SDA 信号时序</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv420i2c_set_start_timing10i2c_port_tii" title="i2c_set_start_timing"><code>i2c_set_start_timing()</code></a></td></tr><tr><td>在产生 <strong>停止</strong> 信号期间使用的 SCL 和 SDA 信号时序</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv419i2c_set_stop_timing10i2c_port_tii" title="i2c_set_stop_timing"><code>i2c_set_stop_timing()</code></a></td></tr><tr><td>从机采样以及主机切换时，SCL 和 SDA 信号之间的时序关系</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv419i2c_set_data_timing10i2c_port_tii" title="i2c_set_data_timing"><code>i2c_set_data_timing()</code></a></td></tr><tr><td>I2C 超时</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv415i2c_set_timeout10i2c_port_ti" title="i2c_set_timeout"><code>i2c_set_timeout()</code></a></td></tr><tr><td>优先发送&#x2F;接收最高有效位 (LSB) 或最低有效位 (MSB），可在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv416i2c_trans_mode_t" title="i2c_trans_mode_t"><code>i2c_trans_mode_t</code></a> 定义的模式中选择</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv417i2c_set_data_mode10i2c_port_t16i2c_trans_mode_t16i2c_trans_mode_t" title="i2c_set_data_mode"><code>i2c_set_data_mode()</code></a></td></tr><tr><td>上述每个函数都有一个 <strong>get</strong> 对应项来检查当前设置的值。例如，调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv415i2c_get_timeout10i2c_port_tPi" title="i2c_get_timeout"><code>i2c_get_timeout()</code></a> 来检查 I2C 超时值。</td><td></td></tr></tbody></table><p>通过函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv411i2c_set_pin10i2c_port_tiibb10i2c_mode_t" title="i2c_set_pin"><code>i2c_set_pin()</code></a> 可以为 SDA 和 SCL 信号选择不同的管脚并改变上拉配置。如果要修改已经输入的值，请使用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv416i2c_param_config10i2c_port_tPK12i2c_config_t" title="i2c_param_config"><code>i2c_param_config()</code></a>。</p><blockquote><p>ESP32 的内部上拉电阻范围为几万欧姆，因此在大多数情况下，它们本身不足以用作 I2C 上拉电阻。建议用户使用阻值在 I2C 总线协议规范规定范围内的上拉电阻。计算阻值的具体方法，可参考 <a href="https://www.ti.com/lit/an/slva689/slva689.pdf">TI 应用说明</a></p></blockquote><h4 id="4-2-删除驱动程序"><a href="#4-2-删除驱动程序" class="headerlink" title="4.2 删除驱动程序"></a>4.2 删除驱动程序</h4><p>当使用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv418i2c_driver_install10i2c_port_t10i2c_mode_t6size_t6size_ti" title="i2c_driver_install"><code>i2c_driver_install()</code></a> 建立 I2C 通信，一段时间后不再需要 I2C 通信时，可以通过调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv417i2c_driver_delete10i2c_port_t" title="i2c_driver_delete"><code>i2c_driver_delete()</code></a> 来移除驱动程序以释放分配的资源。</p><p>由于函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html#_CPPv417i2c_driver_delete10i2c_port_t" title="i2c_driver_delete"><code>i2c_driver_delete()</code></a> 无法保证线程安全性，请在调用该函数移除驱动程序前务必确保所有的线程都已停止使用驱动程序。</p><h4 id="4-3-I2C中断"><a href="#4-3-I2C中断" class="headerlink" title="4.3 I2C中断"></a>4.3 I2C中断</h4><p>I2C 工作过程会产生多种中断，安装驱动程序时会安装默认中断处理程序。</p><p>当然，您可以通过调用函数 i2c_isr_register() 来注册自己的而不是默认的中断处理程序。无论何时，中断服务程序（ISR）都应保持简短！</p><p>在运行自己的中断处理程序时，可以参考 ESP32 技术参考手册 &gt; I2C 控制器 (I2C) &gt; 中断 ，以获取有关 I2C 控制器触发的中断描述。</p><p>这个入门教程就不再详述。</p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>下面我们尝试使用I2C来读取一个 BH1750 环境光传感器（GY-30 模块）</p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311102941.png"></p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311103121.png"></p><p>这里我将地址引脚拉低，将地址配置为：0100011</p><h3 id="3-1-i2c-tools使用"><a href="#3-1-i2c-tools使用" class="headerlink" title="3.1 i2c_tools使用"></a>3.1 i2c_tools使用</h3><p>在IDF示例目录下有一个<code>i2c_tools</code>工具：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/esp/</span>esp-idf<span class="hljs-regexp">/examples/</span>peripherals<span class="hljs-regexp">/i2c/i</span>2c_tools<br></code></pre></td></tr></table></figure><p>成功运行这个工程之后我们看到会：</p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311101935.png"></p><p><a href="https://i2c.wiki.kernel.org/index.php/I2C_Tools">I2C Tools</a> 是一个简单但非常有用的工具，用于开发 I2C 相关应用程序，在 Linux 平台中也很有名。这个例子只是实现了基于 <a href="https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/system/console.html">esp32 控制台组件</a>的 <a href="https://i2c.wiki.kernel.org/index.php/I2C_Tools">I2C 工具</a>的一些基本功能。如下所示，此示例支持五个命令行工具：</p><ol><li><code>i2cconfig</code>：它将使用特定的 GPIO 编号、端口号和频率配置 I2C 总线。</li><li><code>i2cdetect</code>：它将扫描 I2C 总线中的设备，并输出一个表格，其中包含总线上检测到的设备列表。</li><li><code>i2cget</code>：它将读取通过 I2C 总线可见的寄存器。</li><li><code>i2cset</code>：它将设置通过 I2C 总线可见的寄存器。</li><li><code>i2cdump</code>：它将检查通过 I2C 总线可见的寄存器。</li></ol><p>i2c-tools默认使用gpio18 和gpio19.可以使用i2cconfig 修改i2c配置。这里我们就将i2c的两个数据线接到gpio18 和gpio19.</p><p>使用i2cdetect，我们成功找到了 BH1750的芯片地址，说明硬件连接无误。</p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311103845.png"></p><h3 id="3-1-使用I2C读取BH1750数据"><a href="#3-1-使用I2C读取BH1750数据" class="headerlink" title="3.1 使用I2C读取BH1750数据"></a>3.1 使用I2C读取BH1750数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/i2c.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sdkconfig.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;main&quot;</span>;<br><br><br><span class="hljs-comment">// I2C Master 配置</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_MASTER_SCL_IO  19              <span class="hljs-comment">/*!&lt; gpio number for I2C master clock */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_MASTER_SDA_IO  18              <span class="hljs-comment">/*!&lt; gpio number for I2C master data  */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_MASTER_NUM  I2C_NUM_0          <span class="hljs-comment">/*!&lt; I2C port number for master dev */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_MASTER_FREQ_HZ 100000          <span class="hljs-comment">/*!&lt; I2C master clock frequency */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_MASTER_TX_BUF_DISABLE 0        <span class="hljs-comment">/*!&lt; I2C master doesn&#x27;t need buffer */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_MASTER_RX_BUF_DISABLE 0        <span class="hljs-comment">/*!&lt; I2C master doesn&#x27;t need buffer */</span></span><br><br><span class="hljs-comment">// BH1750 Sensor 配置</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BH1750_SENSOR_ADDR 0x23  <span class="hljs-comment">//0010_0011    // 传感器地址</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BH1750_CMD_START   0x23  <span class="hljs-comment">//0010_0011// 传感器模式:单次采集模式</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WRITE_BIT I2C_MASTER_WRITE              <span class="hljs-comment">// I2C 读取位 :1</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> READ_BIT I2C_MASTER_READ                <span class="hljs-comment">// I2C 写入位 :0</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ACK_CHECK_EN 0x1                        <span class="hljs-comment">// 检测从机应答</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ACK_CHECK_DIS 0x0                       <span class="hljs-comment">// 不检测从机应答</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ACK_VAL 0x0                             <span class="hljs-comment">// 响应值</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NACK_VAL 0x1                            <span class="hljs-comment">// 无响应值</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief test code to operate on BH1750 sensor</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. set operation mode(e.g One time L-resolution mode)</span><br><span class="hljs-comment"> * _________________________________________________________________</span><br><span class="hljs-comment"> * | start | slave_addr + wr_bit + ack | write 1 byte + ack  | stop |</span><br><span class="hljs-comment"> * --------|---------------------------|---------------------|------|</span><br><span class="hljs-comment"> * 2. wait more than 24 ms</span><br><span class="hljs-comment"> * 3. read data</span><br><span class="hljs-comment"> * ______________________________________________________________________________________</span><br><span class="hljs-comment"> * | start | slave_addr + rd_bit + ack | read 1 byte + ack  | read 1 byte + nack | stop |</span><br><span class="hljs-comment"> * --------|---------------------------|--------------------|--------------------|------|</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">i2c_master_sensor_test</span><span class="hljs-params">(<span class="hljs-type">i2c_port_t</span> i2c_num, <span class="hljs-type">uint8_t</span> *data_h, <span class="hljs-type">uint8_t</span> *data_l)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-type">i2c_cmd_handle_t</span> cmd = i2c_cmd_link_create();     <span class="hljs-comment">// 创建I2C命令</span><br>    i2c_master_start(cmd);      <span class="hljs-comment">// 起始信号</span><br>    i2c_master_write_byte(cmd, BH1750_SENSOR_ADDR &lt;&lt; <span class="hljs-number">1</span> | WRITE_BIT, ACK_CHECK_EN); <span class="hljs-comment">//从机地址及读写位</span><br>    i2c_master_write_byte(cmd, BH1750_CMD_START, ACK_CHECK_EN);   <span class="hljs-comment">//数据位(数组)</span><br>    i2c_master_stop(cmd);   <span class="hljs-comment">//终止信号</span><br>    ret = i2c_master_cmd_begin(i2c_num, cmd, <span class="hljs-number">1000</span> / portTICK_PERIOD_MS);   <span class="hljs-comment">//i2c_num 发送这个数据帧，timeout设置为1000毫秒</span><br>    i2c_cmd_link_delete(cmd);     <span class="hljs-comment">//删除i2c_cmd_handle_t对象，释放资源</span><br>    <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>    vTaskDelay(<span class="hljs-number">30</span> / portTICK_PERIOD_MS);<br>    cmd = i2c_cmd_link_create();<br>    i2c_master_start(cmd);<br>    i2c_master_write_byte(cmd, BH1750_SENSOR_ADDR &lt;&lt; <span class="hljs-number">1</span> | READ_BIT, ACK_CHECK_EN);   <span class="hljs-comment">//从机地址及读写位</span><br>    i2c_master_read_byte(cmd, data_h, ACK_VAL);<span class="hljs-comment">//读取数据(高位)</span><br>    i2c_master_read_byte(cmd, data_l, NACK_VAL);<span class="hljs-comment">//读取数据(低位)</span><br>    i2c_master_stop(cmd);<br>    ret = i2c_master_cmd_begin(i2c_num, cmd, <span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>    i2c_cmd_link_delete(cmd);<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @brief I2C master initialization</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">i2c_master_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 配置I2C</span><br>    <span class="hljs-type">int</span> i2c_master_port = I2C_MASTER_NUM;<br>    <span class="hljs-type">i2c_config_t</span> conf = &#123;<br>        .mode = I2C_MODE_MASTER,<br>        .sda_io_num = I2C_MASTER_SDA_IO,<br>        .sda_pullup_en = GPIO_PULLUP_ENABLE,<br>        .scl_io_num = I2C_MASTER_SCL_IO,<br>        .scl_pullup_en = GPIO_PULLUP_ENABLE,<br>        .master.clk_speed = I2C_MASTER_FREQ_HZ,<br>        <span class="hljs-comment">// .clk_flags = 0,          /*!&lt; Optional, you can use I2C_SCLK_SRC_FLAG_* flags to choose i2c source clock here. */</span><br>    &#125;;<br>    <span class="hljs-type">esp_err_t</span> err = i2c_param_config(i2c_master_port, &amp;conf);<br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        <span class="hljs-keyword">return</span> err;<br>    &#125;<br><span class="hljs-comment">// 安装I2C驱动</span><br>    <span class="hljs-keyword">return</span> i2c_driver_install(i2c_master_port, conf.mode, I2C_MASTER_RX_BUF_DISABLE, I2C_MASTER_TX_BUF_DISABLE, <span class="hljs-number">0</span>);<br>&#125;<br><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">i2c_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span><br>&#123;<br>    <span class="hljs-type">int</span> ret;<span class="hljs-comment">// Return value</span><br>    <span class="hljs-type">int</span> task_idx = (<span class="hljs-type">int</span>)arg;<br>    <span class="hljs-type">uint8_t</span> sensor_data_h, sensor_data_l;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 读取数据</span><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;TASK[%d] test cnt: %d&quot;</span>, task_idx, cnt++);<br>        ret = i2c_master_sensor_test(I2C_MASTER_NUM, &amp;sensor_data_h, &amp;sensor_data_l);<br>        <span class="hljs-keyword">if</span> (ret == ESP_ERR_TIMEOUT) &#123;<br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;I2C Timeout&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == ESP_OK) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*******************\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TASK[%d]  MASTER READ SENSOR( BH1750 )\n&quot;</span>, task_idx);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;*******************\n&quot;</span>);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data_h: %02x\n&quot;</span>, sensor_data_h);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data_l: %02x\n&quot;</span>, sensor_data_l);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sensor val: %.02f [Lux]\n&quot;</span>, (sensor_data_h &lt;&lt; <span class="hljs-number">8</span> | sensor_data_l) / <span class="hljs-number">1.2</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ESP_LOGW(TAG, <span class="hljs-string">&quot;%s: No ack, sensor not connected...skip...&quot;</span>, esp_err_to_name(ret));<br>        &#125;<br>vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 初始化I2C</span><br>    ESP_ERROR_CHECK(i2c_master_init());<br><span class="hljs-comment">// 创建I2C采集任务</span><br>    xTaskCreate(i2c_task, <span class="hljs-string">&quot;i2c_task&quot;</span>, <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>, (<span class="hljs-type">void</span> *)<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这段程序是一个基于ESP32开发板的示例代码，用于通过I2C总线与BH1750光照传感器通信。程序中首先进行了I2C主设备的初始化配置，然后定义了读取传感器数据的函数<code>i2c_master_sensor_test</code>。在任务函数<code>i2c_task</code>中，循环读取传感器数据并打印输出，显示光照传感器采集到的数据值。最后，在<code>app_main</code>函数中初始化I2C，并创建了一个任务来执行I2C数据采集操作。</p><p>细节部分都有注释说明，在此不再详细指出。</p><p>效果：</p><p><img src="/2024/03/11/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.7-ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-I2C%E5%85%A5%E9%97%A8/20240311111917.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html">https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.1/esp32/api-reference/peripherals/i2c.html</a></li><li><a href="https://www.bilibili.com/video/BV1dg4y1H773/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1dg4y1H773/?spm_id_from=333.337.search-card.all.click</a></li><li><a href="https://www.duruofu.top/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/">https://www.duruofu.top/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>I2C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32存储-4.SPIFFS文件系统</title>
    <link href="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.4-ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.4-ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍，ESP32 flash SPIFFS文件系统的使用.</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32存储-SPIFFS文件系统</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-06</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32存储-SPIFFS文件系统"><a href="#ESP32存储-SPIFFS文件系统" class="headerlink" title="ESP32存储-SPIFFS文件系统"></a>ESP32存储-SPIFFS文件系统</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>关于<a href="https://so.csdn.net/so/search?q=esp32&spm=1001.2101.3001.7020">esp32</a>的spiffs文件系统的详细内容，请看esp32官网的介绍：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v4.1/api-reference/storage/spiffs.html">espidf编程指南-spiffs</a></p><ul><li>SPIFFS是一种专门为像ESP32&#x2F;8266这种嵌入式设备而开发的微型文件系统，SPIFFS是设置在Flash中的一块空间，可以用来存放如网页、图片等体积小的静态资源，而无需采用存储于外部SD卡的方式。</li><li>SPIFFS中的数据不会因为断电而丢失</li></ul><p>对于spiffs，乐鑫提供了很好的支持，专门提供了工具（spiffsgen.py，mkspiffs）用于对实现spiffs 在esp32 上的创建、格式化等操作。</p><p>注意：</p><blockquote><ol><li>目前，SPIFFS 尚不支持目录，但可以生成扁平结构。如果 SPIFFS 挂载在 <code>/spiffs</code> 下，在 <code>/spiffs/tmp/myfile.txt</code> 路径下创建一个文件则会在 SPIFFS 中生成一个名为 <code>/tmp/myfile.txt</code> 的文件，而不是在 <code>/spiffs/tmp</code> 下生成名为 <code>myfile.txt</code> 的文件；</li><li>SPIFFS 并非实时栈，每次写操作耗时不等；</li><li>目前，SPIFFS 尚不支持检测或处理已损坏的块。</li><li>SPIFFS 只能稳定地使用约 75% 的指定分区容量。</li><li>当文件系统空间不足时，垃圾收集器会尝试多次扫描文件系统来寻找可用空间。根据所需空间的不同，写操作会被调用多次，每次函数调用将花费几秒</li><li>被删除文件通常不会被完全清除，会在文件系统中遗留下无法使用的部分</li><li>如果 ESP32 在文件系统操作期间断电，可能会导致 SPIFFS 损坏。但是仍可通过 <code>esp_spiffs_check</code> 函数恢复文件系统。</li></ol></blockquote><h2 id="二、SPIFFS文件系统使用"><a href="#二、SPIFFS文件系统使用" class="headerlink" title="二、SPIFFS文件系统使用"></a>二、SPIFFS文件系统使用</h2><h5 id="2-1-新建工程，准备自定义分区表"><a href="#2-1-新建工程，准备自定义分区表" class="headerlink" title="2.1 新建工程，准备自定义分区表"></a>2.1 新建工程，准备自定义分区表</h5><p>在分区表里添加 soiffs 文件系统的分区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"># ESP-IDF Partition Table<br># Name,   Type, SubType, Offset,  Size, Flags<br>nvs,      data, nvs,     <span class="hljs-number">0x9000</span>,  <span class="hljs-number">0x4000</span>,<br>phy_init, data, phy,     <span class="hljs-number">0xf000</span>,  <span class="hljs-number">0x1000</span>,<br>factory,  app,  factory, <span class="hljs-number">0x10000</span>,  <span class="hljs-number">1</span>M,<br>storage,  data, spiffs,  ,        <span class="hljs-number">0xF0000</span>,<br></code></pre></td></tr></table></figure><p>选择自定义分区表：</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.4-ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/20240306141136.png"></p><h5 id="2-2-建立soiffs镜像"><a href="#2-2-建立soiffs镜像" class="headerlink" title="2.2 建立soiffs镜像"></a>2.2 建立soiffs镜像</h5><p>在项目根目录建立soiffs镜像文件夹<code>spiffs_image</code></p><p>在项目mian组件cmarklist文件添加镜像构建工具相关代码：<br><code>spiffs_create_partition_image(my_spiffs_partition my_folder FLASH_IN_PROJECT)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">idf_component_register(SRCS <span class="hljs-string">&quot;flash_spiffs.c&quot;</span><br>                    INCLUDE_DIRS <span class="hljs-string">&quot;.&quot;</span>)<br><br># Create a SPIFFS image from the contents of the <span class="hljs-string">&#x27;spiffs_image&#x27;</span> directory<br><br><span class="hljs-meta"># that fits the partition named <span class="hljs-string">&#x27;storage&#x27;</span>. FLASH_IN_PROJECT indicates that</span><br><br><span class="hljs-meta"># the generated image should be flashed when the entire project is flashed to</span><br><br><span class="hljs-meta"># the target with <span class="hljs-string">&#x27;idf.py -p PORT flash&#x27;</span>.</span><br><br>spiffs_create_partition_image(storage ../spiffs_image FLASH_IN_PROJECT)<br></code></pre></td></tr></table></figure><h5 id="2-3-码里挂载文件系统"><a href="#2-3-码里挂载文件系统" class="headerlink" title="2.3 码里挂载文件系统"></a>2.3 码里挂载文件系统</h5><p>然后在代码里挂载文件系统即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_LOGI(TAG, <span class="hljs-string">&quot;Initializing SPIFFS&quot;</span>);<br><br><span class="hljs-type">esp_vfs_spiffs_conf_t</span> conf = &#123;<br>  .base_path = <span class="hljs-string">&quot;/spiffs&quot;</span>,<br>  .partition_label = <span class="hljs-literal">NULL</span>,<br>  .max_files = <span class="hljs-number">5</span>,<br>  .format_if_mount_failed = <span class="hljs-literal">false</span><br>&#125;;<br><br><span class="hljs-comment">// Use settings defined above to initialize and mount SPIFFS filesystem.</span><br><span class="hljs-comment">// Note: esp_vfs_spiffs_register is an all-in-one convenience function.</span><br><span class="hljs-type">esp_err_t</span> ret = esp_vfs_spiffs_register(&amp;conf);<br><br><span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br><span class="hljs-keyword">if</span> (ret == ESP_FAIL) &#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to mount or format filesystem&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == ESP_ERR_NOT_FOUND) &#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to find SPIFFS partition&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to initialize SPIFFS (%s)&quot;</span>, esp_err_to_name(ret));<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>esp_vfs_spiffs_register</code>用于将SPIFFS注册并挂载到虚拟文件系统（VFS）中，并指定路径前缀。</p><p>函数参数中的conf是一个指向<code>esp_vfs_spiffs_conf_t</code>配置结构体的指针。</p><p><code>esp_vfs_spiffs_conf_t</code>参数：</p><ul><li><strong>base_path:</strong> 文件系统关联的文件路径前缀。</li><li><strong>partition_label:</strong> 可选项，要使用的 SPIFFS 分区的标签。如果设置为 NULL，则将使用 subtype&#x3D;spiffs 的第一个分区。</li><li><strong>max_files:</strong> 可同时打开的最大文件数。</li><li><strong>format_if_mount_failed:</strong> 如果为 true，在挂载失败时将格式化文件系统。</li></ul><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>下面的示例程序来自：<a href="https://github.com/espressif/esp-idf/tree/v5.2.1/examples/storage/spiffsgen">https://github.com/espressif/esp-idf/tree/v5.2.1/examples/storage/spiffsgen</a></p><p>主要功能包括初始化 SPIFFS、读取文件内容以及计算文件的 MD5 哈希值。</p><p>在 <code>app_main</code> 函数中，首先初始化 SPIFFS 文件系统，然后获取文件系统的信息，接着依次调用 <code>read_hello_txt</code> 和 <code>compute_alice_txt_md5</code> 函数来读取 <code>hello.txt</code> 文件的内容和计算 <code>alice.txt</code> 文件的 MD5 哈希值。最后，取消挂载 SPIFFS 文件系统并结束程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_err.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_spiffs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mbedtls/md5.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;example&quot;</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">read_hello_txt</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Reading hello.txt&quot;</span>);<br><br>    <span class="hljs-comment">// Open for reading hello.txt</span><br>    FILE* f = fopen(<span class="hljs-string">&quot;/spiffs/hello.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open hello.txt&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>];<br>    <span class="hljs-built_in">memset</span>(buf, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(buf));<br>    fread(buf, <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(buf), f);<br>    fclose(f);<br><br>    <span class="hljs-comment">// Display the read contents from the file</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Read from hello.txt: %s&quot;</span>, buf);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">compute_alice_txt_md5</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Computing alice.txt MD5 hash&quot;</span>);<br><br>    <span class="hljs-comment">// The file alice.txt lives under a subdirectory, though SPIFFS itself is flat</span><br>    FILE* f = fopen(<span class="hljs-string">&quot;/spiffs/sub/alice.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open alice.txt&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Read file and compute the digest chunk by chunk</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MD5_MAX_LEN 16</span><br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">64</span>];<br>    mbedtls_md5_context ctx;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> digest[MD5_MAX_LEN];<br><br>    mbedtls_md5_init(&amp;ctx);<br>    mbedtls_md5_starts(&amp;ctx);<br><br>    <span class="hljs-type">size_t</span> read;<br><br>    <span class="hljs-keyword">do</span> &#123;<br>        read = fread((<span class="hljs-type">void</span>*) buf, <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(buf), f);<br>        mbedtls_md5_update(&amp;ctx, (<span class="hljs-type">unsigned</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>*) buf, read);<br>    &#125; <span class="hljs-keyword">while</span>(read == <span class="hljs-keyword">sizeof</span>(buf));<br><br>    mbedtls_md5_finish(&amp;ctx, digest);<br><br>    <span class="hljs-comment">// Create a string of the digest</span><br>    <span class="hljs-type">char</span> digest_str[MD5_MAX_LEN * <span class="hljs-number">2</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; MD5_MAX_LEN; i++) &#123;<br>        <span class="hljs-built_in">sprintf</span>(&amp;digest_str[i * <span class="hljs-number">2</span>], <span class="hljs-string">&quot;%02x&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)digest[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// For reference, MD5 should be deeb71f585cbb3ae5f7976d5127faf2a</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Computed MD5 hash of alice.txt: %s&quot;</span>, digest_str);<br><br>    fclose(f);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Initializing SPIFFS&quot;</span>);<br><br>    <span class="hljs-type">esp_vfs_spiffs_conf_t</span> conf = &#123;<br>      .base_path = <span class="hljs-string">&quot;/spiffs&quot;</span>,<br>      .partition_label = <span class="hljs-literal">NULL</span>,<br>      .max_files = <span class="hljs-number">5</span>,<br>      .format_if_mount_failed = <span class="hljs-literal">false</span><br>    &#125;;<br><br>    <span class="hljs-comment">// Use settings defined above to initialize and mount SPIFFS filesystem.</span><br>    <span class="hljs-comment">// Note: esp_vfs_spiffs_register is an all-in-one convenience function.</span><br>    <span class="hljs-type">esp_err_t</span> ret = esp_vfs_spiffs_register(&amp;conf);<br><br>    <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br>        <span class="hljs-keyword">if</span> (ret == ESP_FAIL) &#123;<br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to mount or format filesystem&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == ESP_ERR_NOT_FOUND) &#123;<br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to find SPIFFS partition&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to initialize SPIFFS (%s)&quot;</span>, esp_err_to_name(ret));<br>        &#125;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> total = <span class="hljs-number">0</span>, used = <span class="hljs-number">0</span>;<br>    ret = esp_spiffs_info(<span class="hljs-literal">NULL</span>, &amp;total, &amp;used);<br>    <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to get SPIFFS partition information (%s)&quot;</span>, esp_err_to_name(ret));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Partition size: total: %d, used: %d&quot;</span>, total, used);<br>    &#125;<br><br>    <span class="hljs-comment">/* The following calls demonstrate reading files from the generated SPIFFS</span><br><span class="hljs-comment">     * image. The images should contain the same files and contents as the spiffs_image directory.</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">// Read and display the contents of a small text file (hello.txt)</span><br>    read_hello_txt();<br><br>    <span class="hljs-comment">// Compute and display the MD5 hash of a large text file (alice.txt)</span><br>    compute_alice_txt_md5();<br><br>    <span class="hljs-comment">// All done, unmount partition and disable SPIFFS</span><br>    esp_vfs_spiffs_unregister(<span class="hljs-literal">NULL</span>);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;SPIFFS unmounted&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.4-ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-SPIFFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/20240306142532.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/api-reference/storage/spiffs.html">https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/api-reference/storage/spiffs.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>存储API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>SPIFFS文件系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32存储-3.VFS虚拟文件系统</title>
    <link href="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍ESP32的FAT （虚拟文件系统）</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32存储-FAT 文件系统</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-06</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32存储-VFS虚拟文件系统"><a href="#ESP32存储-VFS虚拟文件系统" class="headerlink" title="ESP32存储-VFS虚拟文件系统"></a>ESP32存储-VFS虚拟文件系统</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h4 id="1-1-什么是VFS"><a href="#1-1-什么是VFS" class="headerlink" title="1.1 什么是VFS"></a>1.1 什么是VFS</h4><p>虚拟文件系统的作用是：使得计算机上层的软件，能够用单一的方式，来跟底层不同的文件系统沟通（无论是真实的文件系统还是虚拟的文件系统）。在操作系统与之下的各种文件系统之间，虚拟文件系统提供了标准的操作接口，将所有不同种类的文件系统统一起来。</p><p>我们常说”Linux下一切皆文件“，指的就是Linux通过VFS把一切设备都抽象成一个统一的文件系统，从设备读取数据视为向“文件”读取数据，向设备发送数据视为写数据到“文件”。并且不同的“文件”之间读写方式相同。</p><p>Linux这时候不再需要关注这个设备具体读写方式的区别，而直接使用相同的高层操作完成与外设的数据交互。</p><h4 id="1-2-ESP32的VFS"><a href="#1-2-ESP32的VFS" class="headerlink" title="1.2 ESP32的VFS"></a>1.2 ESP32的VFS</h4><p>ESP32借助这种概念，设计了虚拟文件系统 (VFS) 组件，为驱动程序提供一个统一接口，可以操作类文件对象。这类驱动程序可以是 FAT、SPIFFS 等真实文件系统，也可以是提供文件类接口的设备驱动程序。</p><p>ESP32的VFS支持<code>fprintf</code> <code>fopen</code>等标准C库函数，调用这个函数本质上就是对VFS的访问。并提供了“路径”“文件描述符”等概念。不同的文件系统通过文件路劲来区分。</p><p>如，可以使用 &#x2F;fat 前缀注册 FAT 文件系统驱动程序，并调用 <code>fopen(“/fat/file.txt”，“w”)</code>。然后，VFS 组件将调用 FAT 驱动程序的 <code>open</code> 函数并将 <code>/file.txt</code> 参数传递给它(以及适当的模式标志)。对返回的 <code>FILE *</code> 流的所有后续 C 库函数调用也将被转发到 FAT 驱动程序。</p><p>对于VFS，我们可以通过手动实现读与写来挂载文件系统。除此之外，ESP-IDF提供了大量简化API为开发者实现了挂载常用的文件系统，如：</p><ul><li>挂载ESP32或模组内部<code>flash</code>为<code>Fat</code>文件系统</li><li>挂载SD卡为<code>Fat</code>文件系统</li><li>·······</li></ul><h5 id="1-2-1-VFS的挂载点和路径"><a href="#1-2-1-VFS的挂载点和路径" class="headerlink" title="1.2.1 VFS的挂载点和路径"></a>1.2.1 VFS的挂载点和路径</h5><p>一个标准ESP32 VFS路径如下所示</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/挂载点/</span><span class="hljs-keyword">static</span>/index.html<br></code></pre></td></tr></table></figure><p>上面的示例包含了“挂载点”和“路径”</p><ul><li><strong>挂载点名称必须以路径分隔符 (<code>/</code>) 开头，且分隔符后至少包含一个字符</strong>，一个挂载点被认为成一个文件系统，<code>/</code>不是根文件系统。</li><li>VFS允许多层挂载点，可以将 <code>/storage/sdcard</code>作为挂载点</li></ul><h5 id="1-2-2-文件描述符"><a href="#1-2-2-文件描述符" class="headerlink" title="1.2.2 文件描述符"></a>1.2.2 文件描述符</h5><p>文件描述符是一组很小的正整数，从 <code>0</code> 到 <code>FD_SETSIZE - 1</code>，<code>FD_SETSIZE</code> 定义在 <code>sys/select.h</code>。最大文件描述符由 <code>CONFIG_LWIP_MAX_SOCKETS</code> 定义，且为套接字保留。VFS 中包含一个名为 <code>s_fd_table</code> 的查找表，用于将全局文件描述符映射至 <code>s_vfs</code> 数组中注册的 VFS 驱动索引。</p><h5 id="1-2-3-标准IO流-stdin、stdout、stderr"><a href="#1-2-3-标准IO流-stdin、stdout、stderr" class="headerlink" title="1.2.3 标准IO流: stdin、stdout、stderr"></a>1.2.3 标准IO流: <code>stdin</code>、<code>stdout</code>、<code>stderr</code></h5><p>如果 menuconfig 中 <code>UART for console output</code> 选项没有设置为 <code>None</code>，则 <code>stdin</code>、 <code>stdout</code> 和 <code>stderr</code> 将默认从 UART 读取或写入。UART0 或 UART1 可用作标准 IO。默认情况下，UART0 使用 115200 波特率，TX 管脚为 GPIO1，RX 管脚为 GPIO3。上述参数可以在 menuconfig 中更改。</p><h2 id="二、使用VFS虚拟文件系统-FatFs"><a href="#二、使用VFS虚拟文件系统-FatFs" class="headerlink" title="二、使用VFS虚拟文件系统( FatFs)"></a>二、使用VFS虚拟文件系统( FatFs)</h2><h3 id="将内部flash挂载为Fat文件系统"><a href="#将内部flash挂载为Fat文件系统" class="headerlink" title="将内部flash挂载为Fat文件系统"></a>将内部flash挂载为Fat文件系统</h3><h5 id="2-1-新建工程，准备自定义分区表"><a href="#2-1-新建工程，准备自定义分区表" class="headerlink" title="2.1 新建工程，准备自定义分区表"></a>2.1 新建工程，准备自定义分区表</h5><p>在分区表里添加 fat 文件系统的分区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"># ESP-IDF Partition Table<br># Name,   Type, SubType, Offset,  Size, Flags<br>nvs,      data, nvs,     <span class="hljs-number">0x9000</span>,  <span class="hljs-number">0x4000</span>,<br>phy_init, data, phy,     <span class="hljs-number">0xf000</span>,  <span class="hljs-number">0x1000</span>,<br>factory,  app,  factory, <span class="hljs-number">0x10000</span>,  <span class="hljs-number">1</span>M,<br>storage,  data, fat,     <span class="hljs-number">0x110000</span>, <span class="hljs-number">1</span>M,<br><br></code></pre></td></tr></table></figure><p>选择自定义分区表：</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/20240306124810.png"></p><p>配置好可以使用<code>idf.py partition_table</code>生成二进制分区表</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/20240306125408.png"></p><h5 id="2-2-挂载文件系统"><a href="#2-2-挂载文件系统" class="headerlink" title="2.2 挂载文件系统"></a>2.2 挂载文件系统</h5><p>使用<code>esp_vfs_fat_spiflash_mount_rw_wl()</code>在SPI闪存中初始化FAT文件系统并在VFS中注册。</p><ul><li><strong>base_path:</strong> FATFS 分区应该挂载的路径（例如 “&#x2F;spiflash”）。</li><li><strong>partition_label:</strong> 应该使用的分区标签。</li><li><strong>mount_config:</strong> 针对挂载 FATFS 的额外参数结构体指针。</li><li><strong>wl_handle:</strong> [输出] 磨损平衡驱动程序句柄。<br><strong>返回值:</strong></li><li><strong>ESP_OK:</strong> 成功。</li><li><strong>ESP_ERR_NOT_FOUND:</strong> 如果分区表中不包含具有给定标签的 FATFS 分区。</li><li><strong>ESP_ERR_INVALID_STATE:</strong> 如果已经调用了 esp_vfs_fat_spiflash_mount_rw_wl。</li><li><strong>ESP_ERR_NO_MEM:</strong> 如果无法分配内存。</li><li><strong>ESP_FAIL:</strong> 如果无法挂载分区。</li></ul><p><code>mount_config</code>是一个针对挂载 FATFS 的额外参数配置结构体，原形为<code>esp_vfs_fat_mount_config_t</code>,参数如下：</p><ul><li><strong>format_if_mount_failed:</strong> 如果 FAT 分区无法挂载，且此参数为 true，则创建分区表并格式化文件系统。</li><li><strong>max_files:</strong> 最大打开文件数。</li><li><strong>allocation_unit_size:</strong> 如果设置了 format_if_mount_failed 并且挂载失败，使用给定的分配单元大小格式化卡。必须是2的幂，在扇区大小和128*扇区大小之间。对于 SD 卡，扇区大小始终为512字节。对于磨损平衡，扇区大小由 CONFIG_WL_SECTOR_SIZE 选项确定。使用较大的分配单元大小将导致更高的读&#x2F;写性能和在存储小文件时更高的开销。</li><li><strong>disk_status_check_enable:</strong> 启用真实的 ff_disk_status 函数实现以用于 SD 卡（ff_sdmmc_status）。可能会降低 IO 性能。如果需要处理 SD 卡未正确卸载就物理移除或者遇到 SD 卡问题的情况，请尝试启用。对于其他存储介质则不起作用。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Mount FATFS partition</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_fatfs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* partition_label)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Mounting FAT filesystem&quot;</span>);<br>    <span class="hljs-type">const</span> <span class="hljs-type">esp_vfs_fat_mount_config_t</span> mount_config = &#123;<br>            .max_files = <span class="hljs-number">4</span>,<br>            .format_if_mount_failed = <span class="hljs-literal">true</span>,<br>            .allocation_unit_size = CONFIG_WL_SECTOR_SIZE<br>    &#125;;<br>    <span class="hljs-type">esp_err_t</span> err = esp_vfs_fat_spiflash_mount_rw_wl(base_path, partition_label, &amp;mount_config, &amp;s_wl_handle);<br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to mount FATFS (%s)&quot;</span>, esp_err_to_name(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用标准C库读写文件"><a href="#使用标准C库读写文件" class="headerlink" title="使用标准C库读写文件"></a>使用标准C库读写文件</h3><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Create a file in FAT FS</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Opening file&quot;</span>);<br>FILE *f = fopen(<span class="hljs-string">&quot;/flash/hello.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br><span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>    ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open file for writing&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-built_in">fprintf</span>(f, <span class="hljs-string">&quot;fat文件系统测试 %s\n&quot;</span>, <span class="hljs-string">&quot;hollo world!&quot;</span>);<br>fclose(f);<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;File written&quot;</span>);<br><br><span class="hljs-comment">// Open file for reading</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Reading file&quot;</span>);<br>f = fopen(<span class="hljs-string">&quot;/flash/hello.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>    ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open file for reading&quot;</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">char</span> line[<span class="hljs-number">128</span>];<br>fgets(line, <span class="hljs-keyword">sizeof</span>(line), f);<br>fclose(f);<br><span class="hljs-comment">// strip newline</span><br><span class="hljs-type">char</span> *pos = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;\n&#x27;</span>);<br><span class="hljs-keyword">if</span> (pos) &#123;<br>    *pos = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Read from file: &#x27;%s&#x27;&quot;</span>, line);<br></code></pre></td></tr></table></figure><ol><li><p><code>fopen</code> 函数：用于打开一个文件，并返回一个指向该文件的文件指针。在这段代码中，它被用于打开 “&#x2F;flash&#x2F;hello.txt” 文件，以便进行写入和读取操作。第二个参数 “wb” 表示以写入模式打开文件，”rb” 表示以读取模式打开文件。</p></li><li><p><code>fprintf</code> 函数：用于把格式化的数据写入文件中。在这段代码中，它被用于向文件中写入一行格式化的文本内容。</p></li><li><p><code>fclose</code> 函数：用于关闭先前通过 <code>fopen</code> 打开的文件。在这段代码中，它被用于关闭文件句柄，确保文件被正确地写入到存储介质中。</p></li><li><p><code>fgets</code> 函数：用于从文件中读取一行数据。在这段代码中，它被用于读取 “&#x2F;flash&#x2F;hello.txt” 文件中的内容。</p></li></ol><h3 id="卸载文件系统"><a href="#卸载文件系统" class="headerlink" title="卸载文件系统"></a>卸载文件系统</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_LOGI(TAG, <span class="hljs-string">&quot;Unmounting FAT filesystem&quot;</span>);<br><span class="hljs-type">esp_err_t</span> unmount_err = esp_vfs_fat_spiflash_unmount_rw_wl(base_path, s_wl_handle);<br><span class="hljs-keyword">if</span> (unmount_err != ESP_OK) &#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to unmount FATFS (%s)&quot;</span>, esp_err_to_name(unmount_err));<br><span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、示例"><a href="#三、示例" class="headerlink" title="三、示例"></a>三、示例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_vfs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_vfs_fat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;FAT&quot;</span>;<br><br><span class="hljs-comment">// Handle of the wear levelling library instance</span><br><span class="hljs-type">static</span> <span class="hljs-type">wl_handle_t</span> s_wl_handle = WL_INVALID_HANDLE;<br><br><span class="hljs-comment">// Mount path for the partition</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *base_path = <span class="hljs-string">&quot;/flash&quot;</span>;<br><br><span class="hljs-comment">// Mount FATFS partition</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_fatfs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* partition_label)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Mounting FAT filesystem&quot;</span>);<br>    <span class="hljs-type">const</span> <span class="hljs-type">esp_vfs_fat_mount_config_t</span> mount_config = &#123;<br>            .max_files = <span class="hljs-number">4</span>,<br>            .format_if_mount_failed = <span class="hljs-literal">true</span>,<br>            .allocation_unit_size = CONFIG_WL_SECTOR_SIZE<br>    &#125;;<br>    <span class="hljs-type">esp_err_t</span> err = esp_vfs_fat_spiflash_mount_rw_wl(base_path, partition_label, &amp;mount_config, &amp;s_wl_handle);<br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to mount FATFS (%s)&quot;</span>, esp_err_to_name(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *partition_label = <span class="hljs-string">&quot;storage&quot;</span>;<br>    <span class="hljs-comment">// Initialize FAT FS in the partition</span><br>    <span class="hljs-keyword">if</span> (!mount_fatfs(partition_label)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Print FAT FS size information</span><br>    <span class="hljs-type">uint64_t</span> bytes_total, bytes_free;<br>    esp_vfs_fat_info(base_path, &amp;bytes_total, &amp;bytes_free);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;FAT FS: %&quot;</span> PRIu64 <span class="hljs-string">&quot; kB total, %&quot;</span> PRIu64 <span class="hljs-string">&quot; kB free&quot;</span>, bytes_total / <span class="hljs-number">1024</span>, bytes_free / <span class="hljs-number">1024</span>);<br><br>    <span class="hljs-comment">// Create a file in FAT FS</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Opening file&quot;</span>);<br>    FILE *f = fopen(<span class="hljs-string">&quot;/flash/hello.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open file for writing&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">fprintf</span>(f, <span class="hljs-string">&quot;fat文件系统测试 %s\n&quot;</span>, <span class="hljs-string">&quot;hollo world!&quot;</span>);<br>    fclose(f);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;File written&quot;</span>);<br><br>    <span class="hljs-comment">// Open file for reading</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Reading file&quot;</span>);<br>    f = fopen(<span class="hljs-string">&quot;/flash/hello.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open file for reading&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> line[<span class="hljs-number">128</span>];<br>    fgets(line, <span class="hljs-keyword">sizeof</span>(line), f);<br>    fclose(f);<br>    <span class="hljs-comment">// strip newline</span><br>    <span class="hljs-type">char</span> *pos = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (pos) &#123;<br>        *pos = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Read from file: &#x27;%s&#x27;&quot;</span>, line);<br><span class="hljs-comment">// Unmount FAT FS</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Unmounting FAT filesystem&quot;</span>);<br><span class="hljs-type">esp_err_t</span> unmount_err = esp_vfs_fat_spiflash_unmount_rw_wl(base_path, s_wl_handle);<br><span class="hljs-keyword">if</span> (unmount_err != ESP_OK) &#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to unmount FATFS (%s)&quot;</span>, esp_err_to_name(unmount_err));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/20240306135406.png"></p><h2 id="四、补充：从本地文件创建-FATFS-文件系统映像"><a href="#四、补充：从本地文件创建-FATFS-文件系统映像" class="headerlink" title="四、补充：从本地文件创建 FATFS 文件系统映像"></a>四、补充：从本地文件创建 FATFS 文件系统映像</h2><p>可以使用FatFs 分区生成器工具：</p><p>通过调用 <code>fatfs_create_partition_image</code> 可以直接从 CMake 构建系统中调用 FatFs 分区生成器:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">fatfs_create_spiflash_image(&lt;partition&gt; &lt;base_dir&gt; [FLASH_IN_PROJECT])<br></code></pre></td></tr></table></figure><p>参考：</p><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32/api-reference/storage/fatfs.html">https://docs.espressif.com/projects/esp-idf/zh_CN/stable/esp32/api-reference/storage/fatfs.html</a></li><li><a href="https://github.com/espressif/esp-idf/tree/v5.2.1/examples/storage/fatfsgen">https://github.com/espressif/esp-idf/tree/v5.2.1/examples/storage/fatfsgen</a></li></ol><p>根目录新建一个<code>fatfs_image</code>目录存放我们的文件镜像，</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.3-ESP32%E5%AD%98%E5%82%A8-VFS%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/ESP32%E5%AD%98%E5%82%A8-VFS%E8%99%9A%E6%8B%9F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E5%85%A5%E9%97%A8/20240306143748.png"></p><p>新建hello.txt 写上内容</p><p>然后在下面main组件的<code>CMakeLists</code>文件添加：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">idf_component_register(SRCS <span class="hljs-string">&quot;flash_fatfs.c&quot;</span><br>                    INCLUDE_DIRS <span class="hljs-string">&quot;.&quot;</span>)<br><br><span class="hljs-built_in">set</span>(image ../fatfs_image)<br>fatfs_create_spiflash_image(storage $&#123;image&#125; FLASH_IN_PROJECT)<br></code></pre></td></tr></table></figure><p>然后修改主程序：</p><p>尝试读取刚才烧录的文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_vfs.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_vfs_fat.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;FAT&quot;</span>;<br><br><span class="hljs-comment">// Handle of the wear levelling library instance</span><br><span class="hljs-type">static</span> <span class="hljs-type">wl_handle_t</span> s_wl_handle = WL_INVALID_HANDLE;<br><br><span class="hljs-comment">// Mount path for the partition</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *base_path = <span class="hljs-string">&quot;/fatfs_image&quot;</span>;<br><br><span class="hljs-comment">// Mount FATFS partition</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">mount_fatfs</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* partition_label)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Mounting FAT filesystem&quot;</span>);<br>    <span class="hljs-type">const</span> <span class="hljs-type">esp_vfs_fat_mount_config_t</span> mount_config = &#123;<br>            .max_files = <span class="hljs-number">4</span>,<br>            .format_if_mount_failed = <span class="hljs-literal">true</span>,<br>            .allocation_unit_size = CONFIG_WL_SECTOR_SIZE<br>    &#125;;<br>    <span class="hljs-type">esp_err_t</span> err = esp_vfs_fat_spiflash_mount_rw_wl(base_path, partition_label, &amp;mount_config, &amp;s_wl_handle);<br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to mount FATFS (%s)&quot;</span>, esp_err_to_name(err));<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *partition_label = <span class="hljs-string">&quot;storage&quot;</span>;<br>    <span class="hljs-comment">// Initialize FAT FS in the partition</span><br>    <span class="hljs-keyword">if</span> (!mount_fatfs(partition_label)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Print FAT FS size information</span><br>    <span class="hljs-type">uint64_t</span> bytes_total, bytes_free;<br>    esp_vfs_fat_info(base_path, &amp;bytes_total, &amp;bytes_free);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;FAT FS: %&quot;</span> PRIu64 <span class="hljs-string">&quot; kB total, %&quot;</span> PRIu64 <span class="hljs-string">&quot; kB free&quot;</span>, bytes_total / <span class="hljs-number">1024</span>, bytes_free / <span class="hljs-number">1024</span>);<br><br><span class="hljs-comment">// 读取写入的镜像文件</span><br>    <span class="hljs-comment">// Open file for reading</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Reading file&quot;</span>);<br>    FILE *f = fopen(<span class="hljs-string">&quot;/fatfs_image/hello.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-keyword">if</span> (f == <span class="hljs-literal">NULL</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to open file for reading&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">char</span> line[<span class="hljs-number">128</span>];<br>    fgets(line, <span class="hljs-keyword">sizeof</span>(line), f);<br>    fclose(f);<br>    <span class="hljs-comment">// strip newline</span><br>    <span class="hljs-type">char</span> *pos = <span class="hljs-built_in">strchr</span>(line, <span class="hljs-string">&#x27;\n&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (pos) &#123;<br>        *pos = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    &#125;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Read from file: &#x27;%s&#x27;&quot;</span>, line);<br><span class="hljs-comment">// Unmount FAT FS</span><br>ESP_LOGI(TAG, <span class="hljs-string">&quot;Unmounting FAT filesystem&quot;</span>);<br><span class="hljs-type">esp_err_t</span> unmount_err = esp_vfs_fat_spiflash_unmount_rw_wl(base_path, s_wl_handle);<br><span class="hljs-keyword">if</span> (unmount_err != ESP_OK) &#123;<br>ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to unmount FATFS (%s)&quot;</span>, esp_err_to_name(unmount_err));<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/api-reference/storage/vfs.html">https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/api-reference/storage/vfs.html</a></li><li><a href="https://blog.csdn.net/m0_51518255/article/details/112253634">https://blog.csdn.net/m0_51518255/article/details/112253634</a></li><li><a href="https://github.com/espressif/esp-idf/tree/v5.2.1/examples/storage/fatfsgen">https://github.com/espressif/esp-idf/tree/v5.2.1/examples/storage/fatfsgen</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>存储API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>VFS虚拟文件系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32存储-2.非易失性存储 (NVS)</title>
    <link href="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.2-ESP32%E5%AD%98%E5%82%A8-%E9%9D%9E%E6%98%93%E5%A4%B1%E6%80%A7%E5%AD%98%E5%82%A8%20(NVS)/ESP32%E5%AD%98%E5%82%A8-%E9%9D%9E%E6%98%93%E5%A4%B1%E6%80%A7%E5%AD%98%E5%82%A8%20(NVS)/"/>
    <url>/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.2-ESP32%E5%AD%98%E5%82%A8-%E9%9D%9E%E6%98%93%E5%A4%B1%E6%80%A7%E5%AD%98%E5%82%A8%20(NVS)/ESP32%E5%AD%98%E5%82%A8-%E9%9D%9E%E6%98%93%E5%A4%B1%E6%80%A7%E5%AD%98%E5%82%A8%20(NVS)/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档将详细介绍ESP32 NVS 常用的一些概念。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32存储-非易失性存储 (NVS)</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-06</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32存储-非易失性存储-NVS"><a href="#ESP32存储-非易失性存储-NVS" class="headerlink" title="ESP32存储-非易失性存储 (NVS)"></a>ESP32存储-非易失性存储 (NVS)</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h4 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h4><p>非易失性存储 (NVS) 库主要用于在 flash 中<strong>存储键值格式的数据</strong>。</p><p>在分区表一节我们所看到的分区表里都有一个nvs分区，如下（第一条分区）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"># Name,   Type, SubType, Offset,  Size, Flags<br>nvs,      data, nvs,     <span class="hljs-number">0x9000</span>,  <span class="hljs-number">0x4000</span>,<br>otadata,  data, ota,     <span class="hljs-number">0xd000</span>,  <span class="hljs-number">0x2000</span>,<br>phy_init, data, phy,     <span class="hljs-number">0xf000</span>,  <span class="hljs-number">0x1000</span>,<br>factory,  app,  factory, <span class="hljs-number">0x10000</span>,  <span class="hljs-number">1</span>M,<br></code></pre></td></tr></table></figure><p>NVS 库通过调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/storage/partition.html#flash-partition-apis">esp_partition</a> API 使用主 flash 的部分空间，即类型为 <code>data</code> 且子类型为 <code>nvs</code> 的所有分区。这部分空间就是留给我们充当键值对数据存储的。</p><blockquote><p>NVS 最适合存储一些较小的数据，而非字符串或二进制大对象 (BLOB) 等较大的数据。如需存储较大的 BLOB 或者字符串，请考虑使用基于磨损均衡库的 FAT 文件系统。<br>如果NVS分区被截断，比如更改分区表布局的时候，应该擦除分区内容。可以使用 <code>idf.py erase_flash</code> 命令擦除flash上全部的内容。</p></blockquote><h4 id="1-2-键值对细节"><a href="#1-2-键值对细节" class="headerlink" title="1.2 键值对细节"></a>1.2 键值对细节</h4><p>NVS 的操作对象为键值对，其中键是 ASCII 字符串，当前支持最大键长为 15 个字符，值可以为以下几种类型：<br>整数型： uint8_t、int8_t、uint16_t、int16_t、uint32_t、int32_t、uint64_t 和 int64_t；<br>字符型： 以 \0 结尾的字符串；<br>二进制数据： 可变长度的二进制数据 (BLOB)。</p><p>键必须唯一。为现有的键写入新值时，会将旧的值及数据类型更新为写入操作指定的值和数据类型。</p><p>读取值时会执行数据类型检查。如果读取操作预期的数据类型与对应键的数据类型不匹配，则返回错误。</p><h4 id="1-3-命名空间"><a href="#1-3-命名空间" class="headerlink" title="1.3 命名空间"></a>1.3 命名空间</h4><p>为了减少不同组件之间键名的潜在冲突，NVS 将每个键值对分配给一个命名空间。命名空间的命名规则遵循键名的命名规则，例如，最多可占 15 个字符。此外，单个 NVS 分区最多只能容纳 254 个不同的命名空间。命名空间的名称在调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/storage/nvs_flash.html#_CPPv48nvs_openPKc15nvs_open_mode_tP12nvs_handle_t" title="nvs_open"><code>nvs_open()</code></a> 或 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/storage/nvs_flash.html#_CPPv423nvs_open_from_partitionPKcPKc15nvs_open_mode_tP12nvs_handle_t" title="nvs_open_from_partition"><code>nvs_open_from_partition</code></a> 中指定，调用后将返回一个不透明句柄，用于后续调用 <code>nvs_get_*</code>、<code>nvs_set_*</code> 和 <code>nvs_commit</code> 函数。这样，一个句柄关联一个命名空间，键名便不会与其他命名空间中相同键名冲突。</p><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>NVS 程序接口位于 <code>esp-idf/components/nvs_flash/include/nvs_flash.h</code></p><h4 id="2-1-初始化"><a href="#2-1-初始化" class="headerlink" title="2.1 初始化"></a>2.1 初始化</h4><p>使用函数<code>nvs_flash_init()</code>，初始化默认NVS分区（无参数）</p><blockquote><p><code>nvs_flash_erase()</code>擦除默认NVS分区（标签为“NVS”的分区）的所有内容。</p></blockquote><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Initialize NVS</span><br><span class="hljs-type">esp_err_t</span> err = nvs_flash_init();<br><span class="hljs-keyword">if</span> (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) &#123;<br><span class="hljs-comment">// NVS partition was truncated and needs to be erased</span><br><span class="hljs-comment">// Retry nvs_flash_init</span><br>ESP_ERROR_CHECK(nvs_flash_erase());<br>err = nvs_flash_init();<br>&#125;<br>ESP_ERROR_CHECK( err );<br></code></pre></td></tr></table></figure><h4 id="2-2-打开存储空间"><a href="#2-2-打开存储空间" class="headerlink" title="2.2 打开存储空间"></a>2.2 打开存储空间</h4><p>使用函数<code>esp_err_t nvs_open(const char *namespace_name, nvs_open_mode_t open_mode, nvs_handle_t *out_handle)</code>从默认NVS分区打开具有给定命名空间的非易失性存储。</p><p>参数：</p><ul><li>[in] name:命名空间名称。最大长度为(NVS_KEY_NAME_MAX_SIZE-1)个字符。不应该是空的。</li><li>[in] open_mode : NVS_READWRITE 或NVS_READONLY。如果是NVS_READONLY，将打开一个只读句柄。此句柄的所有写入请求都将被拒绝。</li><li>[out] out_handle:如果成功(返回码为零)，将在此参数中返回句柄。</li></ul><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">nvs_handle_t</span> my_handle;<br>err = nvs_open(<span class="hljs-string">&quot;storage&quot;</span>, NVS_READWRITE, &amp;my_handle);<br></code></pre></td></tr></table></figure><h4 id="2-3-读取API"><a href="#2-3-读取API" class="headerlink" title="2.3 读取API"></a>2.3 读取API</h4><p>基本类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_i8</span>  <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int8_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_u8</span>  <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint8_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_i16</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int16_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_u16</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint16_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_i32</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int32_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_u32</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint32_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_i64</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int64_t</span>* out_value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_u64</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint64_t</span>* out_value)</span>;<br></code></pre></td></tr></table></figure><p>其他类型(多一个长度的参数)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_str</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">char</span>* out_value, <span class="hljs-type">size_t</span>* length)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_get_blob</span><span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">void</span>* out_value, <span class="hljs-type">size_t</span>* length)</span>;<br><br></code></pre></td></tr></table></figure><p>这部分api，简单明了，不再此详细解释。</p><h4 id="2-4-写入API"><a href="#2-4-写入API" class="headerlink" title="2.4 写入API"></a>2.4 写入API</h4><p>基本类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_i8</span>  <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int8_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_u8</span>  <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint8_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_i16</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int16_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_u16</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint16_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_i32</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int32_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_u32</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint32_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_i64</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">int64_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_u64</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">uint64_t</span> value)</span>;<br><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">nvs_set_str</span> <span class="hljs-params">(<span class="hljs-type">nvs_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* key, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* value)</span>;<br></code></pre></td></tr></table></figure><p>其他类型(多一个length的参数)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//用来存储大二进制数据的函数（比如说结构体） esp_err_t nvs_set_blob(nvs_handle_t handle, const char* key, const void* value, size_t length);</span><br></code></pre></td></tr></table></figure><h4 id="2-5-释放资源"><a href="#2-5-释放资源" class="headerlink" title="2.5 释放资源"></a>2.5 释放资源</h4><p>使用函数<code>void nvs_close(nvs_handle_t handle)</code>关闭存储句柄并释放所有已分配的资源。<br>一旦不再使用nvs_open打开的每个句柄，就应该为该句柄调用此函数。关闭句柄可能不会自动将更改写入非易失性存储器。这必须使用<code>nvs_commit()</code>函数显式完成。一旦对句柄调用了此函数，就不应再使用该句柄。</p><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><p>下面的案例用于在ESP32设备上实现一个简单的重启计数器，并将重启次数存储在非易失性存储中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// Initialize NVS</span><br>    <span class="hljs-type">esp_err_t</span> err = nvs_flash_init();<br>    <span class="hljs-keyword">if</span> (err == ESP_ERR_NVS_NO_FREE_PAGES || err == ESP_ERR_NVS_NEW_VERSION_FOUND) &#123;<br>        <span class="hljs-comment">// NVS partition was truncated and needs to be erased</span><br>        <span class="hljs-comment">// Retry nvs_flash_init</span><br>        ESP_ERROR_CHECK(nvs_flash_erase());<br>        err = nvs_flash_init();<br>    &#125;<br>    ESP_ERROR_CHECK( err );<br><br>    <span class="hljs-comment">// Open</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Opening Non-Volatile Storage (NVS) handle... &quot;</span>);<br>    <span class="hljs-type">nvs_handle_t</span> my_handle;<br>    err = nvs_open(<span class="hljs-string">&quot;storage&quot;</span>, NVS_READWRITE, &amp;my_handle);<br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (%s) opening NVS handle!\n&quot;</span>, esp_err_to_name(err));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Done\n&quot;</span>);<br><br>        <span class="hljs-comment">// Read</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Reading restart counter from NVS ... &quot;</span>);<br>        <span class="hljs-type">int32_t</span> restart_counter = <span class="hljs-number">0</span>; <span class="hljs-comment">// value will default to 0, if not set yet in NVS</span><br>        err = nvs_get_i32(my_handle, <span class="hljs-string">&quot;restart_counter&quot;</span>, &amp;restart_counter);<br>        <span class="hljs-keyword">switch</span> (err) &#123;<br>            <span class="hljs-keyword">case</span> ESP_OK:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Done\n&quot;</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Restart counter = %&quot;</span> PRIu32 <span class="hljs-string">&quot;\n&quot;</span>, restart_counter);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> ESP_ERR_NVS_NOT_FOUND:<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The value is not initialized yet!\n&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Error (%s) reading!\n&quot;</span>, esp_err_to_name(err));<br>        &#125;<br><br>        <span class="hljs-comment">// Write</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Updating restart counter in NVS ... &quot;</span>);<br>        restart_counter++;<br>        err = nvs_set_i32(my_handle, <span class="hljs-string">&quot;restart_counter&quot;</span>, restart_counter);<br>        <span class="hljs-built_in">printf</span>((err != ESP_OK) ? <span class="hljs-string">&quot;Failed!\n&quot;</span> : <span class="hljs-string">&quot;Done\n&quot;</span>);<br><br>        <span class="hljs-comment">// Commit written value.</span><br>        <span class="hljs-comment">// After setting any values, nvs_commit() must be called to ensure changes are written</span><br>        <span class="hljs-comment">// to flash storage. Implementations may write to storage at other times,</span><br>        <span class="hljs-comment">// but this is not guaranteed.</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Committing updates in NVS ... &quot;</span>);<br>        err = nvs_commit(my_handle);<br>        <span class="hljs-built_in">printf</span>((err != ESP_OK) ? <span class="hljs-string">&quot;Failed!\n&quot;</span> : <span class="hljs-string">&quot;Done\n&quot;</span>);<br><br>        <span class="hljs-comment">// Close</span><br>        nvs_close(my_handle);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">// Restart module</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">10</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Restarting in %d seconds...\n&quot;</span>, i);<br>        vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Restarting now.\n&quot;</span>);<br>    fflush(<span class="hljs-built_in">stdout</span>);<br>    esp_restart();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：可以记录下重启的次数，不随掉电丢失。</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.2-ESP32%E5%AD%98%E5%82%A8-%E9%9D%9E%E6%98%93%E5%A4%B1%E6%80%A7%E5%AD%98%E5%82%A8%20(NVS)/ESP32%E5%AD%98%E5%82%A8-%E9%9D%9E%E6%98%93%E5%A4%B1%E6%80%A7%E5%AD%98%E5%82%A8%20(NVS)/20240306111636.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/api-reference/storage/nvs_flash.html#_CPPv48nvs_openPKc15nvs_open_mode_tP12nvs_handle_t">https://docs.espressif.com/projects/esp-idf/zh_CN/release-v5.2/esp32/api-reference/storage/nvs_flash.html#_CPPv48nvs_openPKc15nvs_open_mode_tP12nvs_handle_t</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>存储API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>非易失性存储 (NVS)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32存储-1.分区表入门</title>
    <link href="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.1-ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.1-ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍ESP32flash分区表的相关知识。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32存储-分区表入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-05</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32存储-分区表入门"><a href="#ESP32存储-分区表入门" class="headerlink" title="ESP32存储-分区表入门"></a>ESP32存储-分区表入门</h1><blockquote><p><strong>flash</strong>: 它在嵌入式系统中的功能可以和硬盘在PC中的功能相比。它们都是用来存储程序和数据的，好比是ROM。而且可以在掉电的情况下继续保存数据使其不会丢失。Flash memory（闪速存储器）作为一种安全、快速的存储体，具有体积小，容量大，成本低，掉电数据不丢失等一系列优点，已成为嵌入式系统中数据和程序最主要的载体。根据结构的不同可以将其分为<strong>NOR Flash</strong>和<strong>NAND Flash</strong>两种。NOR Flash的特点是应用程序可以直接在闪存中运行，不需要再把代码读到系统RAM中运行。NAND Flash不行。而我们单片机基本都是NOR FLASN。</p></blockquote><p>分区表是划分ESP32内部flash的规则表，它将 flash 划分为多个不同功能的区域用于其他功能。</p><p>每片 ESP32 的 flash 可以包含多个应用程序，以及多种不同类型的数据（例如校准数据、文件系统数据、参数存储数据等），因此，我们在 flash 的 默认偏移地址 0x8000 处烧写一张分区表。</p><p>分区表的长度为 0xC00 字节，最多可以保存 95 条分区表条目。MD5 校验和附加在分区表之后，用于在运行时验证分区表的完整性。</p><p>分区表占据了整个 flash 扇区，大小为 0x1000 (4 KB)。因此，它后面的任何分区至少需要位于 (<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/kconfig.html#config-partition-table-offset">默认偏移地址</a>) + 0x1000 处。</p><p>分区表中的每个条目都包括以下几个部分：Name（标签）、Type（app、data 等）、SubType 以及在 flash 中的偏移量（分区的加载地址）。</p><h3 id="1-1-分区表字段详解："><a href="#1-1-分区表字段详解：" class="headerlink" title="1.1 分区表字段详解："></a>1.1 分区表字段详解：</h3><h5 id="1-基本"><a href="#1-基本" class="headerlink" title="(1) 基本"></a><strong>(1) 基本</strong></h5><ul><li>字段之间的空字符会被忽略，任何以 # 开头的行（注释）都会被忽略。</li><li>CSV 文件中的每个非注释行均为一个分区定义。</li><li>每个分区的 <code>Offset</code> 字段可以为空，<code>gen_esp32part.py</code> 工具会从分区表位置的后面开始自动计算并填充该分区的偏移地址，同时确保每个分区的偏移地址正确对齐。</li></ul><h5 id="2-Name-——-分区名"><a href="#2-Name-——-分区名" class="headerlink" title="(2) Name —— 分区名"></a><strong>(2) Name —— 分区名</strong></h5><ul><li>Name 字段可以是任何有意义的名称，但不能超过 16 个字符（之后的内容将被截断）。该字段对 ESP32 并不是特别重要。</li></ul><h5 id="3-Type-——-主类型"><a href="#3-Type-——-主类型" class="headerlink" title="(3) Type —— 主类型"></a><strong>(3) Type —— 主类型</strong></h5><ul><li>Type 字段可以指定为 app (0x00) 或者 data (0x01)，也可以直接使用数字 0-254（或者十六进制 0x00-0xFE）。注意，0x00-0x3F 不得使用（预留给 esp-idf 的核心功能）。</li></ul><h5 id="4-SubType-——-子类型"><a href="#4-SubType-——-子类型" class="headerlink" title="(4) SubType —— 子类型"></a>(4) SubType —— 子类型</h5><ul><li><p>子类型用于明确具体类型，该字段本质上为长度 8 bit 的数字，内容与具体分区 Type 有关。目前，esp-idf 仅仅规定了 <code>“app”</code> 和 <code>“data”</code> 两种分区类型的子类型含义。</p></li><li><p>目前esp-idf能识别的已知关键字有：<br>  app 类型下：f<code>actory, test, ota_0, ota_1, ota_2, ota_3, ota_4, ota_5, ota_6, ota_7, ota_8, ota_9, ota_10, ota_11, ota_12, ota_13, ota_14, ota_15</code><br>  data 类型下：<code>ota, phy, nvs, coredump, nvs_keys, efuse, esphttpd, fat, spiffs</code></p></li></ul><h5 id="5-Offset-amp-Size-——-偏移地址-amp-分区大小"><a href="#5-Offset-amp-Size-——-偏移地址-amp-分区大小" class="headerlink" title="(5) Offset &amp; Size —— 偏移地址 &amp; 分区大小"></a><strong>(5) Offset &amp; Size —— 偏移地址 &amp; 分区大小</strong></h5><ul><li><p>偏移地址表示 SPI flash 中的分区地址，扇区大小为 0x1000 (4 KB)。因此，偏移地址必须是 4 KB 的倍数。语法上分区的大小和偏移地址可以采用以下表示方法：</p><ul><li>十进制数（支持 K 或 M 的倍数单位（分别代表 <code>1024</code> 和 <code>1024²</code> 字节）</li><li>以 <code>0x</code> 为前缀的十六进制数.</li></ul></li><li><p>若 CSV 文件中的分区偏移地址为空，则该分区会接在前一个分区之后；若为首个分区，则将接在分区表之后。</p></li><li><p><code>app</code> 分区的偏移地址必须与 0x10000 (64 KB) 对齐。如果偏移字段留空，则 <code>gen_esp32part.py</code> 工具会自动计算得到一个满足对齐要求的偏移地址。如果 <code>app</code> 分区的偏移地址没有与 0x10000 (64 KB) 对齐，则该工具会报错。</p></li><li><p><code>app</code> 分区的大小必须与 flash 扇区大小对齐。为 <code>app</code> 分区指定未对齐的大小将返回错误。</p></li><li><p>若启用了安全启动 V1，则 <code>app</code> 分区的大小需与 0x10000 (64 KB) 对齐。</p></li><li><p><code>app</code> 分区的大小和偏移地址可以采用十进制数或是以 0x 为前缀的十六进制数，且支持 K 或 M 的倍数单位（K 和 M 分别代表 1024 和 1024*1024 字节）。</p></li></ul><h5 id="6-Flag-——-标记"><a href="#6-Flag-——-标记" class="headerlink" title="(6) Flag —— 标记"></a><strong>(6) Flag —— 标记</strong></h5><p>目前支持 <code>encrypted</code> 和 <code>readonly</code> 标记：</p><ul><li><p>如果 Flags 字段设置为 <code>encrypted</code>，且已启用 Flash 加密 功能，则该分区将会被加密。注：无论是否设置 Flags 字段，<code>app</code> 分区都将保持加密。</p></li><li><p>如果 Flags 字段设置为 <code>readonly</code>，则该分区为只读分区。<code>readonly</code> 标记仅支持除 <code>ota</code> 和 <code>coredump</code> 子类型外的 <code>data</code> 分区。使用该标记，防止意外写入如出厂数据分区等包含关键设备特定配置数据的分区。</p></li></ul><h3 id="1-2-内置分区表"><a href="#1-2-内置分区表" class="headerlink" title="1.2 内置分区表"></a>1.2 内置分区表</h3><p>打开项目配置菜单（<code>idf.py menuconfig</code>），可以在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/kconfig.html#config-partition-table-type">CONFIG_PARTITION_TABLE_TYPE</a> 下看到内置预定义的分区表：</p><ul><li>“Single factory app, no OTA”（单APP，无OTA分区）</li><li>“Factory app, two OTA definitions”（单APP + 两个OTA分区）<br><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.1-ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/20240306095441.png"><br>在以上两种选项中，出厂应用程序均将被烧录至 flash 的 0x10000 偏移地址处。</li></ul><blockquote><p>运行 <code>idf.py partition-tabl</code> ，即可以打印当前使用分区表的信息摘要。</p></blockquote><p>下图是 “Single factory app, no OTA” 选项的分区表信息摘要:</p><p><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.1-ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/20240306095603.png"></p><ul><li>flash 的 0x10000 (64 KB) 偏移地址处存放一个标记为 “factory” 的二进制应用程序，且启动加载器将默认加载这个应用程序。</li><li>分区表中还定义了两个数据区域，分别用于存储 NVS 库专用分区和 PHY 初始化数据。</li></ul><p>下图是 “Factory app, two OTA definitions” 选项的分区表信息摘要:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"># ESP-IDF Partition Table<br># Name,   Type, SubType, Offset,  Size, Flags<br>nvs,      data, nvs,     <span class="hljs-number">0x9000</span>,  <span class="hljs-number">0x4000</span>,<br>otadata,  data, ota,     <span class="hljs-number">0xd000</span>,  <span class="hljs-number">0x2000</span>,<br>phy_init, data, phy,     <span class="hljs-number">0xf000</span>,  <span class="hljs-number">0x1000</span>,<br>factory,  app,  factory, <span class="hljs-number">0x10000</span>,  <span class="hljs-number">1</span>M,<br>ota_0,    app,  ota_0,   <span class="hljs-number">0x110000</span>, <span class="hljs-number">1</span>M,<br>ota_1,    app,  ota_1,   <span class="hljs-number">0x210000</span>, <span class="hljs-number">1</span>M,<br></code></pre></td></tr></table></figure><ul><li>分区表中定义了三个应用程序分区，这三个分区的类型都被设置为 “app”，但具体 app 类型不同。其中，位于 0x10000 偏移地址处的为出厂应用程序 (factory)，其余两个为 OTA 应用程序（ota_0，ota_1）。</li><li>新增了一个名为 “otadata” 的数据分区，用于保存 OTA 升级时需要的数据。启动加载器会查询该分区的数据，以判断该从哪个 OTA 应用程序分区加载程序。如果 “otadata” 分区为空，则会执行出厂程序。</li></ul><h3 id="1-3-自定义分区表"><a href="#1-3-自定义分区表" class="headerlink" title="1.3 自定义分区表"></a>1.3 自定义分区表</h3><p>内置分区表功能很少，例如无文件系统等分区。我们如果想要使用文件系统就要自定义分区表。</p><p>使用自定义分区表时，要先在工程根目录下新建一个<code>*.csv</code>文件，内容按照上文规则编写自定义分区表。分区表文件名随意。如下<code>partitions.csv</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">$ your_project<br>.<br>├── main<br>│   ├── CMakeLists.txt<br>│   └── Hello.cpp<br>├── CMakeLists.txt<br>└── partitions.csv  #这个文件<br></code></pre></td></tr></table></figure><p>之后打开<code>idf.py menuconfig</code> 参考上文打开分区表设置界面，选择第三项“自定义分区表 <code>CSV</code>文件”<br>然后填写自己的分区表即可。<br><img src="/2024/03/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/04.ESP32%E5%AD%98%E5%82%A8%E5%99%A8%E5%85%A5%E9%97%A8/4.1-ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/ESP32%E5%AD%98%E5%82%A8-%E5%88%86%E5%8C%BA%E8%A1%A8%E5%85%A5%E9%97%A8/20240306102203.png"></p><p>之后使用<code>idf.py build</code> 和 <code>idf.py flash</code>即可编译并烧录整个应用程序。</p><blockquote><p>注：如果只是想编译分区表，请用<code>idf.py partition_table</code> 和<code>idf.py partition_table-flash</code>分别来编译和烧录分区表。</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/partition-tables.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/partition-tables.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>存储API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>分区表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-6.LEDPWM入门</title>
    <link href="/2024/03/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.6-ESP32%E5%A4%96%E8%AE%BE-LEDPWM%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-LEDPWM%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.6-ESP32%E5%A4%96%E8%AE%BE-LEDPWM%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-LEDPWM%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-LEDPWM入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-05</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-LEDPWM入门"><a href="#ESP32外设-LEDPWM入门" class="headerlink" title="ESP32外设-LEDPWM入门"></a>ESP32外设-LEDPWM入门</h1><h2 id="一、介绍："><a href="#一、介绍：" class="headerlink" title="一、介绍："></a>一、介绍：</h2><p>LED 控制器 (LEDC) 主要用于控制 LED，也可产生 PWM 信号用于其他设备的控制。该控制器有 8 路通道，可以产生独立的波形，驱动 RGB LED 等设备。</p><p>LEDC 通道共有两组，分别为 8 路高速通道和 8 路低速通道。高速通道模式在硬件中实现，可以自动且无干扰地改变 PWM 占空比。低速通道模式下，PWM 占空比需要由软件中的驱动器改变。每组通道都可以使用不同的时钟源。</p><p>LED PWM 控制器可在无需 CPU 干预的情况下自动改变占空比，实现亮度和颜色渐变。</p><p>设置 LEDC 通道在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#ledc-api-high-low-speed-mode">高速模式或低速模式</a> 下运行，需要进行如下配置：</p><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#ledc-api-configure-timer">定时器配置</a> 指定 PWM 信号的频率和占空比分辨率。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#ledc-api-configure-channel">通道配置</a> 绑定定时器和输出 PWM 信号的 GPIO。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#ledc-api-change-pwm-signal">改变 PWM 信号</a> 输出 PWM 信号来驱动 LED。可通过软件控制或使用硬件渐变功能来改变 LED 的亮度。</li></ol><blockquote><p>首次 LEDC 配置时，建议先配置定时器（调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv417ledc_timer_configPK19ledc_timer_config_t" title="ledc_timer_config"><code>ledc_timer_config()</code></a>），再配置通道（调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv419ledc_channel_configPK21ledc_channel_config_t" title="ledc_channel_config"><code>ledc_channel_config()</code></a>）。这样可以确保 IO 脚上的 PWM 信号自有输出开始其频率就是正确的。</p></blockquote><h2 id="二、使用："><a href="#二、使用：" class="headerlink" title="二、使用："></a>二、使用：</h2><h4 id="1、定时器配置："><a href="#1、定时器配置：" class="headerlink" title="1、定时器配置："></a>1、定时器配置：</h4><p>要设置定时器，可调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv417ledc_timer_configPK19ledc_timer_config_t" title="ledc_timer_config"><code>ledc_timer_config()</code></a>，并将包括如下配置参数的数据结构 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv419ledc_timer_config_t" title="ledc_timer_config_t"><code>ledc_timer_config_t</code></a> 传递给该函数：</p><ul><li>速度模式 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv411ledc_mode_t" title="ledc_mode_t"><code>ledc_mode_t</code></a></li><li>定时器索引 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv412ledc_timer_t" title="ledc_timer_t"><code>ledc_timer_t</code></a></li><li>PWM 信号频率（Hz）</li><li>PWM 占空比分辨率</li><li>时钟源 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv414ledc_clk_cfg_t" title="ledc_clk_cfg_t"><code>ledc_clk_cfg_t</code></a></li></ul><p>频率和占空比分辨率相互关联。PWM 频率越高，占空比分辨率越低，反之亦然。<br> PWM 占空比设置的分辨率范围较广,PWM 频率为 5 kHz 时，占空比分辨率最大可为 13 位。这意味着占空比可为 0 至 100% 之间的任意值，分辨率为 ~0.012%（2 ** 13 &#x3D; 8192 LED 亮度的离散电平）。</p><p>时钟源同样可以限制 PWM 频率。选择的时钟源频率越高，可以配置的 PWM 频率上限就越高。</p><p>ESP32 LEDC 时钟源特性:</p><table><thead><tr><th>时钟名称</th><th>时钟频率</th><th>速度模式</th><th>时钟功能</th></tr></thead><tbody><tr><td>APB_CLK</td><td>80 MHz</td><td>高速 &#x2F; 低速</td><td>&#x2F;</td></tr><tr><td>REF_TICK</td><td>1 MHz</td><td>高速 &#x2F; 低速</td><td>支持动态调频 (DFS) 功能</td></tr><tr><td>RC_FAST_CLK</td><td>~ 8 MHz</td><td>低速</td><td>支持动态调频（DFS）功能，支持 Light-sleep 模式</td></tr></tbody></table><blockquote><p>如果 ESP32 的定时器选用了 <code>RC_FAST_CLK</code> 作为其时钟源，驱动会通过内部校准来得知这个时钟源的实际频率。这样确保了输出 PWM 信号频率的精准性。</p></blockquote><p>配置示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ledc_timer_config_t</span> ledc_timer = &#123;<br>.speed_mode       = LEDC_MODE,<br>.duty_resolution  = LEDC_DUTY_RES,<br>.timer_num        = LEDC_TIMER,<br>.freq_hz          = LEDC_FREQUENCY,  <span class="hljs-comment">// Set output frequency at 4kHz</span><br>.clk_cfg          = LEDC_AUTO_CLK<br>&#125;;<br>ESP_ERROR_CHECK(ledc_timer_config(&amp;ledc_timer));<br></code></pre></td></tr></table></figure><h4 id="2、通道配置："><a href="#2、通道配置：" class="headerlink" title="2、通道配置："></a>2、通道配置：</h4><p>定时器设置好后，请配置所需的通道（<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv414ledc_channel_t" title="ledc_channel_t"><code>ledc_channel_t</code></a> 之一）。配置通道需调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv419ledc_channel_configPK21ledc_channel_config_t" title="ledc_channel_config"><code>ledc_channel_config()</code></a>。</p><p>通道的配置与定时器设置类似，需向通道配置函数传递包括通道配置参数的结构体 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv421ledc_channel_config_t" title="ledc_channel_config_t"><code>ledc_channel_config_t</code></a> 。</p><p><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv421ledc_channel_config_t" title="ledc_channel_config_t"><code>ledc_channel_config_t</code></a> 的参数如下：</p><ol><li>**<code>int gpio_num</code>**：指定LEDC输出的GPIO编号。例如，如果你想使用GPIO16，则设置 <code>gpio_num = 16</code>。</li><li>**<code>ledc_mode_t speed_mode</code>**：指定LEDC的速度模式，可以是高速模式（仅在ESP32上存在）或低速模式。</li><li>**<code>ledc_channel_t channel</code>**：指定LEDC的通道号，范围从0到<code>LEDC_CHANNEL_MAX-1</code>。</li><li>**<code>ledc_intr_type_t intr_type</code>**：配置中断类型，可以启用淡入淡出中断或禁用淡入淡出中断。</li><li>**<code>ledc_timer_t timer_sel</code>**：选择通道的定时器源，范围从0到<code>LEDC_TIMER_MAX-1</code>。</li><li>**<code>uint32_t duty</code>**：设置LEDC通道的占空比，其值的范围是[0, (2^duty_resolution)]。</li><li>**<code>int hpoint</code>**：设置LEDC通道的hpoint值，其范围是[0, (2^duty_resolution)-1]。</li><li>**<code>unsigned int output_invert</code>**：启用（1）或禁用（0）GPIO输出反转。</li><li>**<code>struct ledc_channel_config_t::[anonymous] flags</code>**：LEDC标志，用于进一步配置LEDC通道的特定行为。</li></ol><p>此时，通道会按照 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv421ledc_channel_config_t" title="ledc_channel_config_t"><code>ledc_channel_config_t</code></a> 的配置开始运作，并在选定的 GPIO 上生成由定时器设置指定的频率和占空比的 PWM 信号。在通道运作过程中，可以随时通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv49ledc_stop11ledc_mode_t14ledc_channel_t8uint32_t" title="ledc_stop"><code>ledc_stop()</code></a> 将其暂停。</p><p>配置示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Prepare and then apply the LEDC PWM channel configuration</span><br><span class="hljs-type">ledc_channel_config_t</span> ledc_channel = &#123;<br>    .speed_mode     = LEDC_MODE,<br>    .channel        = LEDC_CHANNEL,<br>    .timer_sel      = LEDC_TIMER,<br>    .intr_type      = LEDC_INTR_DISABLE,<br>    .gpio_num       = LEDC_OUTPUT_IO,<br>    .duty           = <span class="hljs-number">0</span>, <span class="hljs-comment">// Set duty to 0%</span><br>    .hpoint         = <span class="hljs-number">0</span><br>&#125;;<br>ESP_ERROR_CHECK(ledc_channel_config(&amp;ledc_channel));<br></code></pre></td></tr></table></figure><h4 id="3、改变-PWM-信号"><a href="#3、改变-PWM-信号" class="headerlink" title="3、改变 PWM 信号"></a>3、改变 PWM 信号</h4><p>通道开始运行、生成具有恒定占空比和频率的 PWM 信号之后，有几种方式可以改变该信号。驱动 LED 时，主要通过改变占空比来变化光线亮度。</p><h4 id="使用软件改变-PWM-占空比"><a href="#使用软件改变-PWM-占空比" class="headerlink" title="使用软件改变 PWM 占空比"></a>使用软件改变 PWM 占空比</h4><p>调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv413ledc_set_duty11ledc_mode_t14ledc_channel_t8uint32_t" title="ledc_set_duty"><code>ledc_set_duty()</code></a> 可以设置新的占空比。之后，调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv416ledc_update_duty11ledc_mode_t14ledc_channel_t" title="ledc_update_duty"><code>ledc_update_duty()</code></a> 使新配置生效。（也可以使用<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv419ledc_channel_configPK21ledc_channel_config_t" title="ledc_channel_config"><code>ledc_channel_config()</code></a>）</p><p>传递给函数的占空比数值范围取决于选定的 <code>duty_resolution</code>，应为 <code>0</code> 至 <code>(2 ** duty_resolution)</code>。例如，如选定的占空比分辨率为 10，则占空比的数值范围为 0 至 1024。此时分辨率为 ~ 0.1%。</p><blockquote><p>在 ESP32 上，当通道绑定的定时器配置了其最大 PWM 占空比分辨率（ <code>MAX_DUTY_RES</code> ），通道的占空比不能被设置到 <code>(2 ** MAX_DUTY_RES)</code> 。否则，硬件内部占空比计数器会溢出，并导致占空比计算错误。</p></blockquote><h4 id="使用硬件改变-PWM-占空比"><a href="#使用硬件改变-PWM-占空比" class="headerlink" title="使用硬件改变 PWM 占空比"></a>使用硬件改变 PWM 占空比</h4><p>LED PWM 控制器硬件可逐渐改变占空比的数值。要使用此功能，需用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv422ledc_fade_func_installi" title="ledc_fade_func_install"><code>ledc_fade_func_install()</code></a> 使能渐变，之后用下列可用渐变函数之一配置：</p><ol><li>**<code>ledc_set_fade_with_time()</code>**：此函数用于设置指定通道的占空比在给定时间内从当前值渐变到目标值。你需要指定LEDC通道、目标占空比以及变化所需的时间（以毫秒为单位）。</li><li>**<code>ledc_set_fade_with_step()</code>**：此函数允许用户指定一个渐变步骤，包括每一步改变的占空比量、总共的步数以及每一步的时间间隔。这使得用户可以更精细地控制渐变过程。</li><li>**<code>ledc_set_fade()</code>**：这是一个更通用的渐变设置函数，它允许直接设置目标占空比、最大占空比、步长和步长间的时间间隔，但在不同版本的ESP-IDF中可能不总是可用。</li></ol><p>最后调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv415ledc_fade_start11ledc_mode_t14ledc_channel_t16ledc_fade_mode_t" title="ledc_fade_start"><code>ledc_fade_start()</code></a> 开启渐变。</p><p>如不需要渐变和渐变中断，可用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv424ledc_fade_func_uninstallv" title="ledc_fade_func_uninstall"><code>ledc_fade_func_uninstall()</code></a> 关闭。</p><h4 id="改变-PWM-频率"><a href="#改变-PWM-频率" class="headerlink" title="改变 PWM 频率"></a>改变 PWM 频率</h4><p>LED PWM 控制器 API 有多种方式即时改变 PWM 频率：</p><ul><li>通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv413ledc_set_freq11ledc_mode_t12ledc_timer_t8uint32_t" title="ledc_set_freq"><code>ledc_set_freq()</code></a> 设置频率。可用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv413ledc_get_freq11ledc_mode_t12ledc_timer_t" title="ledc_get_freq"><code>ledc_get_freq()</code></a> 查看当前频率。</li><li>通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv423ledc_bind_channel_timer11ledc_mode_t14ledc_channel_t12ledc_timer_t" title="ledc_bind_channel_timer"><code>ledc_bind_channel_timer()</code></a> 将其他定时器绑定到该通道来改变频率和占空比分辨率。</li><li>通过调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#_CPPv419ledc_channel_configPK21ledc_channel_config_t" title="ledc_channel_config"><code>ledc_channel_config()</code></a> 改变通道的定时器。</li></ul><h2 id="三、案例："><a href="#三、案例：" class="headerlink" title="三、案例："></a>三、案例：</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/ledc.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_err.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_TIMER              LEDC_TIMER_0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_MODE               LEDC_LOW_SPEED_MODE</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_OUTPUT_IO          (2) <span class="hljs-comment">// Define the output GPIO</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_CHANNEL            LEDC_CHANNEL_0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_DUTY_RES           LEDC_TIMER_13_BIT <span class="hljs-comment">// Set duty resolution to 13 bits</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_DUTY               (4096) <span class="hljs-comment">// Set duty to 50%. (2 ** 13) * 50% = 4096</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEDC_FREQUENCY          (4000) <span class="hljs-comment">// Frequency in Hertz. Set frequency at 4 kHz</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FADE_TIME               (2000) <span class="hljs-comment">// Fade time in milliseconds</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">example_ledc_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// Prepare and then apply the LEDC PWM timer configuration</span><br>    <span class="hljs-type">ledc_timer_config_t</span> ledc_timer = &#123;<br>        .speed_mode       = LEDC_MODE,<br>        .duty_resolution  = LEDC_DUTY_RES,<br>        .timer_num        = LEDC_TIMER,<br>        .freq_hz          = LEDC_FREQUENCY,  <span class="hljs-comment">// Set output frequency at 4 kHz</span><br>        .clk_cfg          = LEDC_AUTO_CLK<br>    &#125;;<br>    ESP_ERROR_CHECK(ledc_timer_config(&amp;ledc_timer));<br><br>    <span class="hljs-comment">// Prepare and then apply the LEDC PWM channel configuration</span><br>    <span class="hljs-type">ledc_channel_config_t</span> ledc_channel = &#123;<br>        .speed_mode     = LEDC_MODE,<br>        .channel        = LEDC_CHANNEL,<br>        .timer_sel      = LEDC_TIMER,<br>        .intr_type      = LEDC_INTR_DISABLE,<br>        .gpio_num       = LEDC_OUTPUT_IO,<br>        .duty           = <span class="hljs-number">0</span>, <span class="hljs-comment">// Start with duty 0%</span><br>        .hpoint         = <span class="hljs-number">0</span><br>    &#125;;<br>    ESP_ERROR_CHECK(ledc_channel_config(&amp;ledc_channel));<br><br>    <span class="hljs-comment">// Install LEDC fade function</span><br>    ESP_ERROR_CHECK(ledc_fade_func_install(<span class="hljs-number">0</span>));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// Set the LEDC peripheral configuration</span><br>    example_ledc_init();<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">// Fade to 100% duty cycle within FADE_TIME milliseconds</span><br>        ESP_ERROR_CHECK(ledc_set_fade_with_time(LEDC_MODE, LEDC_CHANNEL, LEDC_DUTY, FADE_TIME));<br>        ESP_ERROR_CHECK(ledc_fade_start(LEDC_MODE, LEDC_CHANNEL, LEDC_FADE_WAIT_DONE));<br><br>        <span class="hljs-comment">// Wait for the fade to complete</span><br>        vTaskDelay(FADE_TIME / portTICK_PERIOD_MS);<br><br>        <span class="hljs-comment">// Fade back to 0% duty cycle within FADE_TIME milliseconds</span><br>        ESP_ERROR_CHECK(ledc_set_fade_with_time(LEDC_MODE, LEDC_CHANNEL, <span class="hljs-number">0</span>, FADE_TIME));<br>        ESP_ERROR_CHECK(ledc_fade_start(LEDC_MODE, LEDC_CHANNEL, LEDC_FADE_WAIT_DONE));<br><br>        <span class="hljs-comment">// Wait for the fade to complete</span><br>        vTaskDelay(FADE_TIME / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1.gif" alt="1.gif"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/qq_36347513/article/details/116651516">https://blog.csdn.net/qq_36347513/article/details/116651516</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#ledc-api-supported-range-frequency-duty-resolution">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/ledc.html#ledc-api-supported-range-frequency-duty-resolution</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>LEDPWM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-5.DAC入门</title>
    <link href="/2024/03/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.5-ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.5-ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32外设，数模转换器的使用。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-DAC入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-05</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-DAC入门"><a href="#ESP32外设-DAC入门" class="headerlink" title="ESP32外设-DAC入门"></a>ESP32外设-DAC入门</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>ESP32 有两个 8 位数模转换器 (DAC) 通道，分别连接到 GPIO25（通道 1）和 GPIO26（通道 2）。每个 DAC 通道可以将数字值 0 ~ 255 转换成模拟电压 0 ~ Vref（此处的 Vref 为 VDD3P3_RTC 引脚输入的参考电压，一般来说其输入的电压值应等于电源电压 VDD）。输出电压可按以下方式计算:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">out_voltage = Vref * digi_val / <span class="hljs-number">255</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>通道序号</th><th>GPIO（ESP32）</th></tr></thead><tbody><tr><td><code>DAC_CHANNEL_1</code></td><td>GPIO<code>25</code></td></tr><tr><td><code>DAC_CHANNEL_2</code></td><td>GPIO<code>26</code></td></tr></tbody></table><p>头文件有：</p><ul><li><p><code>dac.h</code>：原有 DAC 驱动的最上层头文件，只包含在使用原有驱动 API 的应用程序中。</p></li><li><p><code>dac_oneshot.h</code>：新 DAC 驱动的最上层头文件，应包含在使用新驱动 API（单次模式）的应用程序中。</p></li><li><p><code>dac_cosine.h</code>：新 DAC 驱动的最上层头文件，应包含在使用新驱动 API（余弦模式）的应用程序中。</p></li><li><p><code>dac_continuous.h</code>：新 DAC 驱动的最上层头文件，应包含在使用新驱动 API（连续模式）的应用程序中。</p></li></ul><blockquote><p>原有驱动程序与新驱动程序无法共存。使用原有驱动需包含 <code>dac.h</code>，使用新驱动需包含 <code>dac_oneshot.h</code>、 <code>dac_cosine.h</code> 和 <code>dac_continuous.h</code>。后续更新或将移除原有驱动程序。</p></blockquote><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><p>ESP32 有两个 DAC 通道。通道的软件资源互相独立，用户可以根据具体情况调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv420dac_oneshot_handle_t" title="dac_oneshot_handle_t"><code>dac_oneshot_handle_t</code></a>、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv419dac_cosine_handle_t" title="dac_cosine_handle_t"><code>dac_cosine_handle_t</code></a> 或 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv423dac_continuous_handle_t" title="dac_continuous_handle_t"><code>dac_continuous_handle_t</code></a> 来管理不同通道，但不支持在同一个通道上注册不同模式。</p><h4 id="2-1-电压直接输出（单次-x2F-直接模式）"><a href="#2-1-电压直接输出（单次-x2F-直接模式）" class="headerlink" title="2.1 电压直接输出（单次&#x2F;直接模式）"></a>2.1 电压直接输出（单次&#x2F;直接模式）</h4><p>DAC 通道每次调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv426dac_oneshot_output_voltage20dac_oneshot_handle_t7uint8_t" title="dac_oneshot_output_voltage"><code>dac_oneshot_output_voltage()</code></a> （可在 ISR 中调用）时都可以将一个 8 位数字转换为模拟值。直至下一次转换开始前，DAC 通道上都将维持该模拟电压。开始转换电压前，需要首先调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv423dac_oneshot_new_channelPK20dac_oneshot_config_tP20dac_oneshot_handle_t" title="dac_oneshot_new_channel"><code>dac_oneshot_new_channel()</code></a> 来启用该 DAC 通道。</p><h4 id="2-2-连续波输出（连续-x2F-DMA-模式）"><a href="#2-2-连续波输出（连续-x2F-DMA-模式）" class="headerlink" title="2.2 连续波输出（连续&#x2F;DMA 模式）"></a>2.2 连续波输出（连续&#x2F;DMA 模式）</h4><p>DAC 通道可以通过 DMA 连续转换数字信号，这种模式下有三种写入 DAC 数据的方法：</p><ol><li>常规写入（同步）：一次性传输所有数据并在所有数据均已载入 DMA 缓冲区前保持阻塞状态。如果不再继续输入数据，电压将维持在最后的转换值。该模式通常用于传输音频等长信号。</li><li>循环写入：在数据载入 DMA 缓冲区后，缓冲区中的数据将以非阻塞的方式被循环转换。但要注意，输入的缓冲区大小受 DMA 描述符数量和 DMA 缓冲区大小的限制。该模式通常用于传输如正弦波等需要重复的短信号。为了启用循环写入，需要在启用 DAC 连续模式后调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv431dac_continuous_write_cyclically23dac_continuous_handle_tP7uint8_t6size_tP6size_t" title="dac_continuous_write_cyclically"><code>dac_continuous_write_cyclically()</code></a>。</li><li>异步写入。可根据事件回调异步传输数据。需要调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv4N21dac_event_callbacks_t15on_convert_doneE" title="dac_event_callbacks_t::on_convert_done"><code>dac_event_callbacks_t::on_convert_done</code></a> 以启用异步模式。用户在回调中可得到 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv416dac_event_data_t" title="dac_event_data_t"><code>dac_event_data_t</code></a>，其中包含 DMA 缓冲区的地址和长度，即允许用户直接将数据载入 DMA 缓冲区。启用异步写入前需要调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv438dac_continuous_register_event_callback23dac_continuous_handle_tPK21dac_event_callbacks_tPv" title="dac_continuous_register_event_callback"><code>dac_continuous_register_event_callback()</code></a>、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv4N21dac_event_callbacks_t15on_convert_doneE" title="dac_event_callbacks_t::on_convert_done"><code>dac_event_callbacks_t::on_convert_done</code></a> 和 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv434dac_continuous_start_async_writing23dac_continuous_handle_t" title="dac_continuous_start_async_writing"><code>dac_continuous_start_async_writing()</code></a>。注意，异步写入一旦开始，回调函数将被持续触发。调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv435dac_continuous_write_asynchronously23dac_continuous_handle_tP7uint8_t6size_tPK7uint8_t6size_tP6size_t" title="dac_continuous_write_asynchronously"><code>dac_continuous_write_asynchronously()</code></a> 可以在某个单独任务中或直接在回调函数中载入数据。</li></ol><h4 id="2-3-余弦波输出（余弦模式）"><a href="#2-3-余弦波输出（余弦模式）" class="headerlink" title="2.3 余弦波输出（余弦模式）"></a>2.3 余弦波输出（余弦模式）</h4><p>DAC 外设中包含一个余弦波发生器，可以在通道上产生余弦波。用户可以通过<code>struct dac_cosine_config_t</code> 结构体配置余弦波的频率、振幅和相位。启用该模式需要先调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv422dac_cosine_new_channelPK19dac_cosine_config_tP19dac_cosine_handle_t" title="dac_cosine_new_channel"><code>dac_cosine_new_channel()</code></a> 将 DAC 转换成余弦模式，然后调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html#_CPPv416dac_cosine_start19dac_cosine_handle_t" title="dac_cosine_start"><code>dac_cosine_start()</code></a> 启动余弦波发生器。</p><p>目前，余弦波发生器仅有 <code>RTC_FAST</code> 一个时钟源，可通过选择 <code>dac_cosine_clk_src_t::DAC_COSINE_CLK_SRC_RTC_FAST</code> 来启用该时钟源。该时钟源为默认时钟源，与 <code>dac_cosine_clk_src_t::DAC_COSINE_CLK_SRC_RTC_DEFAULT</code> 相同。</p><p><code>struct dac_cosine_config_t</code> 结构体用于配置DAC（数字到模拟转换器）的余弦波通道。以下是其成员变量的参数说明：</p><ul><li><code>dac_channel_t chan_id</code>：余弦波通道ID，指定哪个DAC通道将产生余弦波。</li><li><code>uint32_t freq_hz</code>：余弦波频率，单位为Hz。该频率由RTC_FAST时钟驱动，RTC_FAST时钟是从RC_FAST时钟分频得到的。默认RTC时钟下，余弦波最小频率约为130Hz。理论上虽然可以支持高达数MHz的频率，但由于硬件限制，在高频下波形会失真。通常不建议设置超过200kHz的频率。</li><li><code>dac_cosine_clk_src_t clk_src</code>：余弦波生成器的时钟源，目前只支持<code>DAC_COSINE_CLK_SRC_DEFAULT</code>。</li><li><code>dac_cosine_atten_t atten</code>：余弦波幅度的衰减。</li><li><code>dac_cosine_phase_t phase</code>：余弦波的相位，仅支持<code>DAC_COSINE_PHASE_0</code>或<code>DAC_COSINE_PHASE_180</code>，设置不支持的相位时，默认为0。</li><li><code>int8_t offset</code>：余弦波的直流偏移量。</li><li><code>bool force_set_freq</code>：强制设置余弦波频率。</li><li><code>struct dac_cosine_config_t::[anonymous] flags</code>：余弦模式的标志位。</li></ul><h2 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h2><h4 id="3-1-电压直接输出（单次-x2F-直接模式）"><a href="#3-1-电压直接输出（单次-x2F-直接模式）" class="headerlink" title="3.1 电压直接输出（单次&#x2F;直接模式）"></a>3.1 电压直接输出（单次&#x2F;直接模式）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/dac_oneshot.h&quot;</span></span><br><span class="hljs-comment">//#include &quot;esp_check.h&quot;</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">dac_output_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *args)</span><br>&#123;<br>    <span class="hljs-type">dac_oneshot_handle_t</span> handle = (<span class="hljs-type">dac_oneshot_handle_t</span>)args;<br>    <span class="hljs-type">uint32_t</span> val = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">/* Set the voltage every 100 ms */</span><br>        ESP_ERROR_CHECK(dac_oneshot_output_voltage(handle, val));<br>        val += <span class="hljs-number">10</span>;<br>        val %= <span class="hljs-number">250</span>;<br>        vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">500</span>));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* DAC oneshot init */</span><br>    <span class="hljs-type">dac_oneshot_handle_t</span> chan0_handle;<br>    <span class="hljs-type">dac_oneshot_config_t</span> chan0_cfg = &#123;<br>        .chan_id = DAC_CHAN_0,<br>    &#125;;<br>    ESP_ERROR_CHECK(dac_oneshot_new_channel(&amp;chan0_cfg, &amp;chan0_handle));<br><br>    <span class="hljs-type">dac_oneshot_handle_t</span> chan1_handle;<br>    <span class="hljs-type">dac_oneshot_config_t</span> chan1_cfg = &#123;<br>        .chan_id = DAC_CHAN_1,<br>    &#125;;<br>    ESP_ERROR_CHECK(dac_oneshot_new_channel(&amp;chan1_cfg, &amp;chan1_handle));<br><br>    <span class="hljs-comment">/* DAC oneshot outputting threads */</span><br>    xTaskCreate(dac_output_task, <span class="hljs-string">&quot;dac_chan0_output_task&quot;</span>, <span class="hljs-number">4096</span>, chan0_handle, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>    vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">500</span>)); <span class="hljs-comment">// To differential the output of two channels</span><br>    xTaskCreate(dac_output_task, <span class="hljs-string">&quot;dac_chan1_output_task&quot;</span>, <span class="hljs-number">4096</span>, chan1_handle, <span class="hljs-number">5</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>效果：每500ms电压跳变一次</p><p><img src="/2024/03/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.5-ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/82e8653ceeeeccb1ab9c00963d2e541.jpg"></p><h4 id="3-2-连续波输出（连续-x2F-DMA-模式）"><a href="#3-2-连续波输出（连续-x2F-DMA-模式）" class="headerlink" title="3.2 连续波输出（连续&#x2F;DMA 模式）"></a>3.2 连续波输出（连续&#x2F;DMA 模式）</h4><h5 id="1、常规写入（同步）"><a href="#1、常规写入（同步）" class="headerlink" title="1、常规写入（同步）"></a>1、常规写入（同步）</h5><p>参考： <a href="https://github.com/espressif/esp-idf/tree/e4f167d/examples/peripherals/dac/dac_continuous/dac_audio">peripherals&#x2F;dac&#x2F;dac_continuous&#x2F;dac_audio</a></p><h5 id="2、循环写入"><a href="#2、循环写入" class="headerlink" title="2、循环写入"></a>2、循环写入</h5><p>参考： <a href="https://github.com/espressif/esp-idf/tree/e4f167d/examples/peripherals/dac/dac_continuous/signal_generator">peripherals&#x2F;dac&#x2F;dac_continuous&#x2F;signal_generator</a></p><h5 id="3、异步写入"><a href="#3、异步写入" class="headerlink" title="3、异步写入"></a>3、异步写入</h5><p>参考： <a href="https://github.com/espressif/esp-idf/tree/e4f167d/examples/peripherals/dac/dac_continuous/dac_audio">peripherals&#x2F;dac&#x2F;dac_continuous&#x2F;dac_audio</a></p><h4 id="3-3-余弦波输出（余弦模式）"><a href="#3-3-余弦波输出（余弦模式）" class="headerlink" title="3.3 余弦波输出（余弦模式）"></a>3.3 余弦波输出（余弦模式）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/dac_cosine.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">dac_cosine_handle_t</span> chan0_handle;<br>    <span class="hljs-type">dac_cosine_handle_t</span> chan1_handle;<br>    <span class="hljs-comment">/* Normally two channels can only be configured to one frequency</span><br><span class="hljs-comment">     * But we can set force_set_freq bit to force update the frequency</span><br><span class="hljs-comment">     * The example here will produce cosine wave at 8 KHz on both channels */</span><br>    <span class="hljs-type">dac_cosine_config_t</span> cos0_cfg = &#123;<br>        .chan_id = DAC_CHAN_0,<br>        .freq_hz = <span class="hljs-number">1000</span>, <span class="hljs-comment">// It will be covered by 8000 in the latter configuration</span><br>        .clk_src = DAC_COSINE_CLK_SRC_DEFAULT,<br>        .offset = <span class="hljs-number">0</span>,<br>        .phase = DAC_COSINE_PHASE_0,<br>        .atten = DAC_COSINE_ATTEN_DEFAULT,<br>        .flags.force_set_freq = <span class="hljs-literal">false</span>,<br>    &#125;;<br>    <span class="hljs-type">dac_cosine_config_t</span> cos1_cfg = &#123;<br>        .chan_id = DAC_CHAN_1,<br>        .freq_hz = <span class="hljs-number">8000</span>,<br>        .clk_src = DAC_COSINE_CLK_SRC_DEFAULT,<br>        .offset = <span class="hljs-number">0</span>,<br>        .phase = DAC_COSINE_PHASE_180,<br>        .atten = DAC_COSINE_ATTEN_DB_6,<br>        .flags.force_set_freq = <span class="hljs-literal">true</span>, <span class="hljs-comment">// set true will allow to overwrite the frequency that set before</span><br>    &#125;;<br>    ESP_ERROR_CHECK(dac_cosine_new_channel(&amp;cos0_cfg, &amp;chan0_handle));<br>    ESP_ERROR_CHECK(dac_cosine_new_channel(&amp;cos1_cfg, &amp;chan1_handle));<br>    ESP_ERROR_CHECK(dac_cosine_start(chan0_handle));<br>    ESP_ERROR_CHECK(dac_cosine_start(chan1_handle));<br><br>&#125;<br></code></pre></td></tr></table></figure><p>效果：<br><img src="/2024/03/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.5-ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-DAC%E5%85%A5%E9%97%A8/20240305135400.png"></p><p>我们得到了两路余弦信号，其中一路还设置了180度的相位偏移和6dB的衰减。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/dac.html</a></li><li><a href="https://blog.csdn.net/m0_50064262/article/details/115189865">https://blog.csdn.net/m0_50064262/article/details/115189865</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>DAC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32系统API-1.软件定时器</title>
    <link href="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/07.ESP32%E7%B3%BB%E7%BB%9FAPI%E5%85%A5%E9%97%A8/7.1-%E8%BD%AF%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8/ESP32%E7%B3%BB%E7%BB%9FAPI-%E8%BD%AF%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/07.ESP32%E7%B3%BB%E7%BB%9FAPI%E5%85%A5%E9%97%A8/7.1-%E8%BD%AF%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8/ESP32%E7%B3%BB%E7%BB%9FAPI-%E8%BD%AF%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32的软件定时器。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32系统API-软件定时器</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-04</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32系统API-软件定时器"><a href="#ESP32系统API-软件定时器" class="headerlink" title="ESP32系统API-软件定时器"></a>ESP32系统API-软件定时器</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>本节介绍：高分辨率软件定时器（esp_imer），推荐选择esp_timer定时器作为esp32首选软件定时器。</p><p>FreeRTOS提供软件计时器，但这些计时器有一些限制:</p><ol><li>最大分辨率等于RTOS滴答周期</li><li>FreeRTOS的定时器回调来自于一个低优先级的任务。</li></ol><p>硬件定时器不受限制，但配置复杂，只能设置一个比较值(警报值)，要灵活使用比较麻烦。</p><p>esp_timer定时器有两种工作方式：单次模式&#x2F;周期模式</p><h2 id="二、esp-timer定时器使用"><a href="#二、esp-timer定时器使用" class="headerlink" title="二、esp_timer定时器使用"></a>二、esp_timer定时器使用</h2><p>头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_timer.h&quot;</span></span><br></code></pre></td></tr></table></figure><h4 id="一、初始化软件定时器"><a href="#一、初始化软件定时器" class="headerlink" title="一、初始化软件定时器"></a>一、初始化软件定时器</h4><p>创建定时器句柄：<code>esp_timer_handle_t</code></p><p>创建并配置结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">esp_timer_cb_t</span> callback;        <span class="hljs-comment">//函数在计时器到期的回调函数</span><br>    <span class="hljs-type">void</span>* arg;                      <span class="hljs-comment">//传递给回调函数的参数</span><br>    <span class="hljs-type">esp_timer_dispatch_t</span> dispatch_method; <span class="hljs-comment">//从任务或ISR调用回调</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name;               <span class="hljs-comment">//定时名称（字符串）</span><br>&#125; <span class="hljs-type">esp_timer_create_args_t</span>;<br></code></pre></td></tr></table></figure><p>使用<code>esp_timer_create</code>创建定时器：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">esp_timer_create</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">esp_timer_create_args_t</span>* create_args, <span class="hljs-type">esp_timer_handle_t</span>* out_handle)</span>;<br></code></pre></td></tr></table></figure><p>参数：<br><code>create_args</code> ：参数，也就是2.1中的变量类型；<br><code>out_handle</code>：定时器句柄；<br><code>esp_err_t</code>：返回值，ESP_OK表示创建成功，其他表示失败。</p><h4 id="二、启动软件定时器"><a href="#二、启动软件定时器" class="headerlink" title="二、启动软件定时器"></a>二、启动软件定时器</h4><h5 id="启动一个周期定时器"><a href="#启动一个周期定时器" class="headerlink" title="启动一个周期定时器"></a>启动一个周期定时器</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">esp_timer_start_periodic</span><span class="hljs-params">(<span class="hljs-type">esp_timer_handle_t</span> timer, <span class="hljs-type">uint64_t</span> period)</span>;<br></code></pre></td></tr></table></figure><p><code>timer</code> ：定时器句柄； <code>period</code>：定时时长，单位是微秒； <code>esp_err_t</code>：返回值，ESP_OK表示创建成功，其他表示失败。</p><h5 id="启动一个单次定时器"><a href="#启动一个单次定时器" class="headerlink" title="启动一个单次定时器"></a>启动一个单次定时器</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">esp_timer_start_once</span><span class="hljs-params">(<span class="hljs-type">esp_timer_handle_t</span> timer, <span class="hljs-type">uint64_t</span> timeout_us)</span>;<br></code></pre></td></tr></table></figure><p><code>timer</code> ：定时器句柄； <code>period</code>：定时时长，单位是微秒； <code>esp_err_t</code>：返回值，ESP_OK表示创建成功，其他表示失败。</p><h4 id="三、停止和删除软件定时器"><a href="#三、停止和删除软件定时器" class="headerlink" title="三、停止和删除软件定时器"></a>三、停止和删除软件定时器</h4><h5 id="停止一个定时器"><a href="#停止一个定时器" class="headerlink" title="停止一个定时器"></a>停止一个定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">esp_err_t <span class="hljs-title function_">esp_timer_stop</span>(esp_timer_handle_t timer);<br></code></pre></td></tr></table></figure><p>既可以用于单词定时器、也可以用于周期定时器。 <code>timer</code> ：定时器句柄； <code>esp_err_t</code>：返回值，ESP_OK表示操作成功，其他表示失败。</p><h5 id="删除定时器"><a href="#删除定时器" class="headerlink" title="删除定时器"></a>删除定时器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">esp_err_t <span class="hljs-title function_">esp_timer_delete</span>(esp_timer_handle_t timer);<br></code></pre></td></tr></table></figure><p><code>timer</code> ：定时器句柄； <code>esp_err_t</code>：返回值，ESP_OK表示操作成功，其他表示失败。</p><h2 id="三、使用案例"><a href="#三、使用案例" class="headerlink" title="三、使用案例"></a>三、使用案例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_timer.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;esp_timer&quot;</span>;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">periodic_timer_callback</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br>    <span class="hljs-type">int64_t</span> time_since_boot = esp_timer_get_time();<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Periodic timer called, time since boot: %lld us&quot;</span>, time_since_boot);<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">oneshot_timer_callback</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span><br>&#123;<br>    <span class="hljs-type">int64_t</span> time_since_boot = esp_timer_get_time();<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;One-shot timer called, time since boot: %lld us&quot;</span>, time_since_boot);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 定义定时器句柄</span><br><span class="hljs-type">esp_timer_handle_t</span> oneshot_timer ,periodic_timer;<br><br>    <span class="hljs-comment">// 创建一个周期定时器</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">esp_timer_create_args_t</span> periodic_timer_args = &#123;<br>            .callback = &amp;periodic_timer_callback,<br>            <span class="hljs-comment">/* name is optional, but may help identify the timer when debugging */</span><br>            .name = <span class="hljs-string">&quot;periodic&quot;</span><br>    &#125;;<span class="hljs-comment">//周期定时器配置</span><br>    ESP_ERROR_CHECK(esp_timer_create(&amp;periodic_timer_args, &amp;periodic_timer));<br><br><span class="hljs-comment">// 创建一个单次定时器</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">esp_timer_create_args_t</span> oneshot_timer_args = &#123;<br>            .callback = &amp;oneshot_timer_callback,<br>            .name = <span class="hljs-string">&quot;one-shot&quot;</span><br>    &#125;;<span class="hljs-comment">//单次定时器配置</span><br>    ESP_ERROR_CHECK(esp_timer_create(&amp;oneshot_timer_args, &amp;oneshot_timer));<br>    <span class="hljs-comment">/* Start the timers */</span><br>    ESP_ERROR_CHECK(esp_timer_start_periodic(periodic_timer, <span class="hljs-number">1000000</span>));<span class="hljs-comment">//1s回调一次</span><br>    ESP_ERROR_CHECK(esp_timer_start_once(oneshot_timer, <span class="hljs-number">5000000</span>));<span class="hljs-comment">//5s后回调</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Started timers, time since boot: %lld us&quot;</span>, esp_timer_get_time());<br><br><br>vTaskDelay(<span class="hljs-number">10000</span> / portTICK_PERIOD_MS);  <span class="hljs-comment">// 10s后删除定时器</span><br><span class="hljs-comment">/* Clean up and finish the example */</span><br>    ESP_ERROR_CHECK(esp_timer_stop(periodic_timer));<br>    ESP_ERROR_CHECK(esp_timer_delete(periodic_timer));<br>    ESP_ERROR_CHECK(esp_timer_delete(oneshot_timer));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>代码中先定义了两个定时器句柄，一个是周期定时器 (<code>periodic_timer</code>)，另一个是单次定时器 (<code>oneshot_timer</code>)。<br>然后分别使用 <code>esp_timer_create</code> 函数创建这两个定时器，指定了回调函数和名称。<br>接着使用 <code>esp_timer_start_periodic</code> 函数启动周期定时器，设置了定时器的周期为 1 秒。同时使用 <code>esp_timer_start_once</code> 函数启动单次定时器，设置了定时器在 5 秒后触发。<br>在主任务函数中，使用了 <code>vTaskDelay</code> 函数延迟了 10 秒，之后停止并删除了这两个定时器。</p><p><img src="/20240304185405.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_timer.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_timer.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>系统API</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>软件定时器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-4.ADC入门</title>
    <link href="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ADC外设的使用，个人记录使用，如有侵权请联系删除。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-ADC入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-03</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-ADC入门"><a href="#ESP32外设-ADC入门" class="headerlink" title="ESP32外设-ADC入门"></a>ESP32外设-ADC入门</h1><blockquote><p>本文档主要转载自<a href="https://blog.csdn.net/m0_50064262" title="Augtons正(单片机)">Augtons正(单片机)</a>的ESP32系列教程（关于ADC部分的梳理甚至比官方教程都清晰）。</p></blockquote><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>ESP32(经典版)集成了两个 <code>12</code>位SAR(逐次逼近寄存器)adc，共支持18个测量通道。</p><ul><li>采用 2 个 SAR ADC，可支持同时采样与转换</li><li>采用 5 个专用 ADC 控制器，可支持不同应用场景（比如，高性能、低功耗，或功率检测和峰值检测）</li><li>支持 18 个模拟输入管脚</li><li>可配置 12 位、11 位、10 位、9 位多种分辨率</li><li>支持 DMA（1 个控制器支持）</li><li>支持多通道扫描模式（2 个控制器支持）</li><li>支持 Deep-sleep 模式运行（1 个控制器支持）</li><li>支持 ULP 协处理器控制（2 个控制器支持）</li></ul><h3 id="1-1-ADC通道概览"><a href="#1-1-ADC通道概览" class="headerlink" title="1.1 ADC通道概览"></a>1.1 ADC通道概览</h3><p><strong>ADC1：</strong></p><ul><li><p>支持 8 个通道，包括：GPIO32 - GPIO39（并非按顺序）<br><strong>ADC2：</strong></p></li><li><p>支持 10 个通道，包括：GPIO0, GPIO2, GPIO4, GPIO12 - GPIO15, GOIO25 - GPIO27（并非按顺序）</p></li></ul><p>ESP32 内置霍尔传感器，采用 ADC1 的通道0和3（GPIO36 和 GPIO39）。</p><p><strong>注意</strong>：</p><blockquote><ol><li><code>ADC2</code>模块也被<code>Wi-Fi</code>使用，当它们一起使用时，只有一个会被抢占，这意味着<code>adc2_get_raw()</code>可能会被阻塞，直到<code>Wi-Fi</code>停止，反之亦然。<strong>换言之，ADC2 不能与 WIFI 共用！</strong></li><li>从一个没有连接到任何信号的引脚读取到的 ADC 值是 <strong>随机</strong> 的。</li></ol></blockquote><p>ADC通道对应关系如下(经典模组)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">ADC1_CHANNEL_0GPIO <span class="hljs-number">36</span><br>ADC1_CHANNEL_1GPIO <span class="hljs-number">37</span><br>ADC1_CHANNEL_2GPIO <span class="hljs-number">38</span><br>ADC1_CHANNEL_3GPIO <span class="hljs-number">39</span><br>ADC1_CHANNEL_4GPIO <span class="hljs-number">32</span><br>ADC1_CHANNEL_5GPIO <span class="hljs-number">33</span><br>ADC1_CHANNEL_6GPIO <span class="hljs-number">34</span><br>ADC1_CHANNEL_7GPIO <span class="hljs-number">35</span><br><br>ADC2_CHANNEL_0ESP32:GPIO <span class="hljs-number">4</span><br>ADC2_CHANNEL_1ESP32:GPIO <span class="hljs-number">0</span><br>ADC2_CHANNEL_2ESP32:GPIO <span class="hljs-number">2</span><br>ADC2_CHANNEL_3ESP32:GPIO <span class="hljs-number">15</span><br>ADC2_CHANNEL_4ESP32:GPIO <span class="hljs-number">13</span><br>ADC2_CHANNEL_5ESP32:GPIO <span class="hljs-number">12</span><br>ADC2_CHANNEL_6ESP32:GPIO <span class="hljs-number">14</span><br>ADC2_CHANNEL_7ESP32:GPIO <span class="hljs-number">27</span><br>ADC2_CHANNEL_8ESP32:GPIO <span class="hljs-number">25</span><br>ADC2_CHANNEL_9ESP32:GPIO <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><h3 id="1-2-ADC-衰减"><a href="#1-2-ADC-衰减" class="headerlink" title="1.2 ADC 衰减"></a>1.2 ADC 衰减</h3><p>ADC模块 能读取电压的范围（量程）有限，因此我们一般给某个 ADC 通道配置一定的衰减，使其读取更大的电压。但更大的量程会导致更小的精度。因此根据 ADC 的应用场景，选择适当的衰减级别十分必要。</p><p>ESP32 的每一个通道都有提供了4个级别的衰减等级，不同的衰减等级对于的量程在下表列出：注意，下表中的 “推荐范围” 并不是量程 ，而是在某衰减等级下测量最精确的推荐测量范围</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303200107.png"></p><h3 id="1-2-ADC校准与减小测量误差"><a href="#1-2-ADC校准与减小测量误差" class="headerlink" title="1.2 ADC校准与减小测量误差"></a>1.2 ADC校准与减小测量误差</h3><h4 id="减少噪声"><a href="#减少噪声" class="headerlink" title="减少噪声"></a>减少噪声</h4><p>ESP32 ADC 对噪声敏感，可能导致 ADC 读数出现较大偏差。根据不同使用场景，要减少噪声影响，你可能需要将旁路电容（如 100 nF 陶瓷电容）连接到 ADC 使用的输入管脚。此外，也可以通过多次采样，进一步减轻噪声的影响。</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303200300.png"></p><p>图中展示了连接电容以及 64 次采样对噪声的抑制效果。其中纵轴(ADC Reading)代表不同方式读取到的ADC值，横轴(Sample Number)是采样次数。</p><h4 id="ADC-校准"><a href="#ADC-校准" class="headerlink" title="ADC 校准"></a>ADC 校准</h4><p>关于ADC校准的库为<code>esp_adc_cal.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_adc/adc_cali.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>个库提供 API 函数用于校正基准ADC 参考电压，ADC参考电压为 1100 m V。<br>对于不同的参考电压，ADC 值与输入电压值（待测电压）的关系不同。关系如下图：<br>​<img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303200839.png"></p><p>上图列出了参考电压分别在：V r e f &#x3D; &#x3D;1070mV(蓝色) 和 V r e f &#x3D; &#x3D;1160mV(橙色) 下的 ADC 值和待测电压 Voltage 的关系。</p><p>我们把这条拟合曲线称为 ADC 模块(在某参考电压下)的 <strong>ADC-Voltage 特征曲线</strong>。</p><p>在实际应用中，我们调用esp_adc_cal.h库提供的 API 函数去求得指定参考电压下的 ADC-Voltage 特征曲线，并利用这一条曲线去将 ADC 测量值转换为欲测量的电压Voltage。开发者可以选择自定义参考电压值，也可以利用ESP32 内部 eFuse（一次性可编程存储器）中储存的出厂参考电压校准值去获取这个曲线。</p><p>使用下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">%IDF_PATH%/components/esptool_py/esptool/espefuse.py --port COMx adc_info<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303201442.png"></p><p>除此之外，ESP32 内部的参考电压也可以手动测量，方法是将此电压输出到（路由到）某个GPIO口上，然后手动测量此GPIO口和GND接口之间的电压，就是eFuse内部的参考电压。将参考电压路由到GPIO的方法是调用API函数adc_vref_to_gpio()，参数是想要输出电压的GPIO口编号。必须是ADC2的通道IO口之一，因为ESP32只支持将参考电压路由到 ADC2 上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 将参考电压路由到GPIO25上 */</span> <br>adc_vref_to_gpio(ADC_UNIT_2, GPIO_NUM_25);<br></code></pre></td></tr></table></figure><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="单次转换模式使用"><a href="#单次转换模式使用" class="headerlink" title="单次转换模式使用"></a>单次转换模式使用</h3><h5 id="1、-资源分配-：获取-ADC-句柄，以及回收资源"><a href="#1、-资源分配-：获取-ADC-句柄，以及回收资源" class="headerlink" title="1、 资源分配 ：获取 ADC 句柄，以及回收资源"></a>1、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#adc-oneshot-resource-allocation">资源分配</a> ：获取 ADC 句柄，以及回收资源</h5><p>需要配置结构体<code> adc_oneshot_unit_init_cfg_t</code></p><p>参数为：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N27adc_oneshot_unit_init_cfg_t7unit_idE" title="adc_oneshot_unit_init_cfg_t::unit_id"><code>adc_oneshot_unit_init_cfg_t::unit_id</code></a> 选择 ADC。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N27adc_oneshot_unit_init_cfg_t7clk_srcE" title="adc_oneshot_unit_init_cfg_t::clk_src"><code>adc_oneshot_unit_init_cfg_t::clk_src</code></a> 选择 ADC 的时钟源。设置为 0 时，驱动程序将使用默认时钟源，详情请参阅 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv421adc_oneshot_clk_src_t" title="adc_oneshot_clk_src_t"><code>adc_oneshot_clk_src_t</code></a>。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N27adc_oneshot_unit_init_cfg_t8ulp_modeE" title="adc_oneshot_unit_init_cfg_t::ulp_mode"><code>adc_oneshot_unit_init_cfg_t::ulp_mode</code></a> 设置是否支持 ADC 在 ULP 模式下工作。</li></ul><p>完成 ADC 初始配置后，使用已设置的初始配置结构体 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv427adc_oneshot_unit_init_cfg_t" title="adc_oneshot_unit_init_cfg_t"><code>adc_oneshot_unit_init_cfg_t</code></a> 调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv420adc_oneshot_new_unitPK27adc_oneshot_unit_init_cfg_tP25adc_oneshot_unit_handle_t" title="adc_oneshot_new_unit"><code>adc_oneshot_new_unit()</code></a>。如果分配成功，该函数将返回 ADC 单元实例句柄。</p><p>该函数可能因参数无效、内存不足等原因返回错误代码。比如，当要分配的 ADC 实例已经注册时，该函数会返回 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_err.html#c.ESP_ERR_NOT_FOUND" title="ESP_ERR_NOT_FOUND"><code>ESP_ERR_NOT_FOUND</code></a> 错误。可用 ADC 数量可通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/soc_caps.html#c.SOC_ADC_PERIPH_NUM" title="SOC_ADC_PERIPH_NUM"><code>SOC_ADC_PERIPH_NUM</code></a> 查看</p><p>如果不再需要先前创建的 ADC 单元实例，请调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv420adc_oneshot_del_unit25adc_oneshot_unit_handle_t" title="adc_oneshot_del_unit"><code>adc_oneshot_del_unit()</code></a> 回收该实例，相关的硬件和软件资源也会回收。</p><p>创建 ADC 单元实例句柄示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">adc_oneshot_unit_handle_t</span> adc1_handle;<br><span class="hljs-type">adc_oneshot_unit_init_cfg_t</span> init_config1 = &#123;<br>    .unit_id = ADC_UNIT_1,<br>    .ulp_mode = ADC_ULP_MODE_DISABLE,<br>&#125;;<br>ESP_ERROR_CHECK(adc_oneshot_new_unit(&amp;init_config1, &amp;adc1_handle));<br></code></pre></td></tr></table></figure><p>回收 ADC 单元实例示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_ERROR_CHECK(adc_oneshot_del_unit(adc1_handle));<br></code></pre></td></tr></table></figure><h5 id="2、-配置-ADC-单元实例"><a href="#2、-配置-ADC-单元实例" class="headerlink" title="2、 配置 ADC 单元实例"></a>2、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#adc-oneshot-unit-configuration">配置 ADC 单元实例</a></h5><p>设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv422adc_oneshot_chan_cfg_t" title="adc_oneshot_chan_cfg_t"><code>adc_oneshot_chan_cfg_t</code></a> 配置 ADC IO 以测量模拟信号</p><p>参数：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N22adc_oneshot_chan_cfg_t5attenE" title="adc_oneshot_chan_cfg_t::atten"><code>adc_oneshot_chan_cfg_t::atten</code></a>，ADC 衰减。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N22adc_oneshot_chan_cfg_t8bitwidthE" title="adc_oneshot_chan_cfg_t::bitwidth"><code>adc_oneshot_chan_cfg_t::bitwidth</code></a>，原始转换结果的位宽。</li></ul><p>使用上述配置结构体调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv426adc_oneshot_config_channel25adc_oneshot_unit_handle_t13adc_channel_tPK22adc_oneshot_chan_cfg_t" title="adc_oneshot_config_channel"><code>adc_oneshot_config_channel()</code></a>，并指定要配置的 ADC 通道。函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv426adc_oneshot_config_channel25adc_oneshot_unit_handle_t13adc_channel_tPK22adc_oneshot_chan_cfg_t" title="adc_oneshot_config_channel"><code>adc_oneshot_config_channel()</code></a> 支持多次调用，以配置不同的 ADC 通道。驱动程序将在内部保存每个通道的配置。</p><p>示例：配置两个 ADC 通道</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">adc_oneshot_chan_cfg_t</span> config = &#123;<br>    .bitwidth = ADC_BITWIDTH_DEFAULT,<br>    .atten = ADC_ATTEN_DB_12,<br>&#125;;<br>ESP_ERROR_CHECK(adc_oneshot_config_channel(adc1_handle, EXAMPLE_ADC1_CHAN0, &amp;config));<br>ESP_ERROR_CHECK(adc_oneshot_config_channel(adc1_handle, EXAMPLE_ADC1_CHAN1, &amp;config));<br></code></pre></td></tr></table></figure><h5 id="3、-读取转换结果"><a href="#3、-读取转换结果" class="headerlink" title="3、 读取转换结果"></a>3、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#adc-oneshot-read-conversion-result">读取转换结果</a></h5><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv416adc_oneshot_read25adc_oneshot_unit_handle_t13adc_channel_tPi" title="adc_oneshot_read"><code>adc_oneshot_read()</code></a> 可以获取 ADC 通道的原始转换结果。</p><p>通过该函数获取的 ADC 转换结果为原始数据。可以使用以下公式，根据 ADC 原始结果计算电压：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">Vout = Dout * Vmax / Dmax       <br></code></pre></td></tr></table></figure><table><thead><tr><th>Vout</th><th>数字输出结果，代表电压。</th></tr></thead><tbody><tr><td>Dout</td><td>ADC 原始数字读取结果。</td></tr><tr><td>Vmax</td><td>可测量的最大模拟输入电压，与 ADC 衰减相关，请参考 <a href="https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_cn.pdf">技术参考手册</a> &gt; <code>片上传感器与模拟信号处理</code>。</td></tr><tr><td>Dmax</td><td>输出 ADC 原始数字读取结果的最大值，即 2^位宽，位宽即之前配置的 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N25adc_digi_pattern_config_t9bit_widthE" title="adc_digi_pattern_config_t::bit_width"><code>adc_digi_pattern_config_t::bit_width</code></a>。</td></tr><tr><td>读取原始结果示例：</td><td></td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">ESP_ERROR_CHECK(adc_oneshot_read(adc1_handle, EXAMPLE_ADC1_CHAN0, &amp;adc_raw[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;ADC%d Channel[%d] Raw Data: %d&quot;</span>, ADC_UNIT_1 + <span class="hljs-number">1</span>, EXAMPLE_ADC1_CHAN0, adc_raw[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br><br>ESP_ERROR_CHECK(adc_oneshot_read(adc1_handle, EXAMPLE_ADC1_CHAN1, &amp;adc_raw[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]));<br>ESP_LOGI(TAG, <span class="hljs-string">&quot;ADC%d Channel[%d] Raw Data: %d&quot;</span>, ADC_UNIT_1 + <span class="hljs-number">1</span>, EXAMPLE_ADC1_CHAN1, adc_raw[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><p>注：</p><blockquote><ul><li>随机数生成器 (RNG) 以 ADC 为输入源。使用 ADC 单次转换模式驱动从 RNG 生成随机数时，随机性会减弱。</li><li>一个 ADC 单元每次只能在一种操作模式下运行，可以是连续模式或单次模式。<code>adc_oneshot_start()</code> 提供了保护措施。</li><li>Wi-Fi 也使用 ADC2，<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv416adc_oneshot_read25adc_oneshot_unit_handle_t13adc_channel_tPi" title="adc_oneshot_read"><code>adc_oneshot_read()</code></a> 提供了 Wi-Fi 驱动与 ADC 单次转换模式驱动间的保护。</li><li>ESP32-DevKitC：GPIO0 已用于自动烧录功能，不能用于 ADC 单次转换模式。</li><li>ESP-WROVER-KIT：GPIO0、GPIO2、GPIO4 和 GPIO15 已有其他用途，不能用于 ADC 单次转换模式。</li></ul></blockquote><h3 id="连续转换模式使用"><a href="#连续转换模式使用" class="headerlink" title="连续转换模式使用"></a>连续转换模式使用</h3><p>ADC 连续转换模式驱动由多个转换帧组成。</p><ul><li>转换帧：一个转换帧包含多个转换结果。转换帧大小以字节为单位，在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv425adc_continuous_new_handlePK27adc_continuous_handle_cfg_tP23adc_continuous_handle_t" title="adc_continuous_new_handle"><code>adc_continuous_new_handle()</code></a> 中配置。</li><li>转换结果：一个转换结果包含多个字节，即 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/soc_caps.html#c.SOC_ADC_DIGI_RESULT_BYTES" title="SOC_ADC_DIGI_RESULT_BYTES"><code>SOC_ADC_DIGI_RESULT_BYTES</code></a>。转换结果的数据结构由 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv422adc_digi_output_data_t" title="adc_digi_output_data_t"><code>adc_digi_output_data_t</code></a> 定义，包括 ADC 单元、ADC 通道以及原始数据。</li></ul><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303211254.png"></p><h5 id="1、-资源分配："><a href="#1、-资源分配：" class="headerlink" title="1、 资源分配："></a>1、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#adc-continuous-resource-allocation">资源分配</a>：</h5><p>首先设置配置结构体 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv427adc_continuous_handle_cfg_t" title="adc_continuous_handle_cfg_t"><code>adc_continuous_handle_cfg_t</code></a>，创建 ADC 连续转换模式驱动的句柄，参数如下：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N27adc_continuous_handle_cfg_t18max_store_buf_sizeE" title="adc_continuous_handle_cfg_t::max_store_buf_size"><code>adc_continuous_handle_cfg_t::max_store_buf_size</code></a>：以字节为单位设置最大缓冲池的大小，驱动程序将 ADC 转换结果保存到该缓冲池中。缓冲池已满时，新的转换将丢失。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N27adc_continuous_handle_cfg_t15conv_frame_sizeE" title="adc_continuous_handle_cfg_t::conv_frame_size"><code>adc_continuous_handle_cfg_t::conv_frame_size</code></a>：以字节为单位设置 ADC 转换帧大小。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N27adc_continuous_handle_cfg_t5flagsE" title="adc_continuous_handle_cfg_t::flags"><code>adc_continuous_handle_cfg_t::flags</code></a>：设置可以改变驱动程序行为的标志。（<code>flush_pool</code>：缓冲池满时自动清空缓冲池。）</li></ul><p>完成以上 ADC 配置后，使用已设置的配置结构体 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv427adc_continuous_handle_cfg_t" title="adc_continuous_handle_cfg_t"><code>adc_continuous_handle_cfg_t</code></a> 调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv425adc_continuous_new_handlePK27adc_continuous_handle_cfg_tP23adc_continuous_handle_t" title="adc_continuous_new_handle"><code>adc_continuous_new_handle()</code></a>来分配资源。</p><p>如果不再使用 ADC 连续转换模式驱动，请调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv421adc_continuous_deinit23adc_continuous_handle_t" title="adc_continuous_deinit"><code>adc_continuous_deinit()</code></a> 将驱动去初始化。</p><p>配置示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">adc_continuous_handle_t</span> handle = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">adc_continuous_handle_cfg_t</span> adc_config = &#123;<br>    .max_store_buf_size = <span class="hljs-number">1024</span>,<br>    .conv_frame_size = <span class="hljs-number">100</span>,<br>&#125;;<br>ESP_ERROR_CHECK(adc_continuous_new_handle(&amp;adc_config));<br></code></pre></td></tr></table></figure><h5 id="2、-配置-ADC："><a href="#2、-配置-ADC：" class="headerlink" title="2、 配置 ADC："></a>2、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#adc-continuous-adc-configurations">配置 ADC</a>：</h5><p>初始化 ADC 连续转换模式驱动后，设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv423adc_continuous_config_t" title="adc_continuous_config_t"><code>adc_continuous_config_t</code></a> 配置 ADC IO，测量模拟信号：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N23adc_continuous_config_t11pattern_numE" title="adc_continuous_config_t::pattern_num"><code>adc_continuous_config_t::pattern_num</code></a>：要使用的 ADC 通道数量。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N23adc_continuous_config_t11adc_patternE" title="adc_continuous_config_t::adc_pattern"><code>adc_continuous_config_t::adc_pattern</code></a>：每个要使用的 ADC 通道的配置列表，请参阅下文描述。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N23adc_continuous_config_t14sample_freq_hzE" title="adc_continuous_config_t::sample_freq_hz"><code>adc_continuous_config_t::sample_freq_hz</code></a>：期望的 ADC 采样频率，单位为 Hz。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N23adc_continuous_config_t9conv_modeE" title="adc_continuous_config_t::conv_mode"><code>adc_continuous_config_t::conv_mode</code></a>：连续转换模式。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N23adc_continuous_config_t6formatE" title="adc_continuous_config_t::format"><code>adc_continuous_config_t::format</code></a>：转换模式结果的输出格式。</li></ul><p>设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv425adc_digi_pattern_config_t" title="adc_digi_pattern_config_t"><code>adc_digi_pattern_config_t</code></a>：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N25adc_digi_pattern_config_t5attenE" title="adc_digi_pattern_config_t::atten"><code>adc_digi_pattern_config_t::atten</code></a>：ADC 衰减。请参阅 <a href="https://www.espressif.com/sites/default/files/documentation/esp32_technical_reference_manual_cn.pdf#sensor">技术参考手册</a> 中的片上传感器与模拟信号处理章节。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N25adc_digi_pattern_config_t7channelE" title="adc_digi_pattern_config_t::channel"><code>adc_digi_pattern_config_t::channel</code></a>：IO 对应的 ADC 通道号，请参阅下文注意事项。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N25adc_digi_pattern_config_t4unitE" title="adc_digi_pattern_config_t::unit"><code>adc_digi_pattern_config_t::unit</code></a>：IO 所属的 ADC 单元。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv4N25adc_digi_pattern_config_t9bit_widthE" title="adc_digi_pattern_config_t::bit_width"><code>adc_digi_pattern_config_t::bit_width</code></a>：原始转换结果的位宽。</li></ul><p>最后，使用上述配置结构体，调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv421adc_continuous_config23adc_continuous_handle_tPK23adc_continuous_config_t" title="adc_continuous_config"><code>adc_continuous_config()</code></a>。</p><p>配置示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">   <span class="hljs-comment">//  ADC IO</span><br>   <span class="hljs-type">adc_continuous_config_t</span> dig_cfg = &#123;<br>       .sample_freq_hz = <span class="hljs-number">20</span> * <span class="hljs-number">1000</span>,         <span class="hljs-comment">// 采样频率</span><br>       .conv_mode = ADC_CONV_SINGLE_UNIT_1,  <span class="hljs-comment">// 转换模式</span><br>       .format = ADC_DIGI_OUTPUT_FORMAT_TYPE1,    <span class="hljs-comment">// 输出格式</span><br>   &#125;;<br><br>   <span class="hljs-type">adc_digi_pattern_config_t</span> adc_pattern[SOC_ADC_PATT_LEN_MAX] = &#123;<span class="hljs-number">0</span>&#125;;<br>   dig_cfg.pattern_num = channel_num;   <span class="hljs-comment">// 通道数量</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; channel_num; i++) &#123;<br>       adc_pattern[i].atten = ADC_ATTEN_DB_0;  <span class="hljs-comment">// ADC 衰减</span><br>       adc_pattern[i].channel = channel[i] &amp; <span class="hljs-number">0x7</span>;  <span class="hljs-comment">// 通道</span><br>       adc_pattern[i].unit = ADC_UNIT_1;<span class="hljs-comment">// ADC单元</span><br>       adc_pattern[i].bit_width = SOC_ADC_DIGI_MAX_BITWIDTH; <span class="hljs-comment">// 位宽</span><br><br><span class="hljs-comment">// 打印配置信息</span><br>       ESP_LOGI(TAG, <span class="hljs-string">&quot;adc_pattern[%d].atten is :%&quot;</span>PRIx8, i, adc_pattern[i].atten);<br>       ESP_LOGI(TAG, <span class="hljs-string">&quot;adc_pattern[%d].channel is :%&quot;</span>PRIx8, i, adc_pattern[i].channel);<br>       ESP_LOGI(TAG, <span class="hljs-string">&quot;adc_pattern[%d].unit is :%&quot;</span>PRIx8, i, adc_pattern[i].unit);<br>   &#125;<br><br><span class="hljs-comment">// 要使用的 ADC 通道的配置列表</span><br>   dig_cfg.adc_pattern = adc_pattern;<br><br></code></pre></td></tr></table></figure><h5 id="3、-ADC-控制："><a href="#3、-ADC-控制：" class="headerlink" title="3、 ADC 控制："></a>3、 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#adc-continuous-adc-control">ADC 控制</a>：</h5><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv420adc_continuous_start23adc_continuous_handle_t" title="adc_continuous_start"><code>adc_continuous_start()</code></a>，将使 ADC 开始从配置好的 ADC 通道测量模拟信号，并生成转换结果。</p><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv419adc_continuous_stop23adc_continuous_handle_t" title="adc_continuous_stop"><code>adc_continuous_stop()</code></a> 则会停止 ADC 转换。</p><h5 id="4、注册事件回调："><a href="#4、注册事件回调：" class="headerlink" title="4、注册事件回调："></a>4、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#adc-continuous-register-event-callbacks">注册事件回调</a>：</h5><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv439adc_continuous_register_event_callbacks23adc_continuous_handle_tPK24adc_continuous_evt_cbs_tPv" title="adc_continuous_register_event_callbacks"><code>adc_continuous_register_event_callbacks()</code></a>，可以将自己的函数链接到驱动程序的 ISR 中。通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv424adc_continuous_evt_cbs_t" title="adc_continuous_evt_cbs_t"><code>adc_continuous_evt_cbs_t</code></a> 可查看所有支持的事件回调。</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N24adc_continuous_evt_cbs_t12on_conv_doneE" title="adc_continuous_evt_cbs_t::on_conv_done"><code>adc_continuous_evt_cbs_t::on_conv_done</code></a>：当一个转换帧完成时，触发此事件。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N24adc_continuous_evt_cbs_t11on_pool_ovfE" title="adc_continuous_evt_cbs_t::on_pool_ovf"><code>adc_continuous_evt_cbs_t::on_pool_ovf</code></a>：当内部缓冲池已满时，触发此事件，新的转换结果将丢失。</li></ul><h6 id="转换完成事件"><a href="#转换完成事件" class="headerlink" title="转换完成事件"></a>转换完成事件</h6><p>当驱动程序完成一次转换后，会触发 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv4N24adc_continuous_evt_cbs_t12on_conv_doneE" title="adc_continuous_evt_cbs_t::on_conv_done"><code>adc_continuous_evt_cbs_t::on_conv_done</code></a> 事件，并填充事件数据。事件数据包含一个指向转换帧缓冲区的指针，以及转换帧缓冲区大小。要了解事件数据结构，请参阅 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv425adc_continuous_evt_data_t" title="adc_continuous_evt_data_t"><code>adc_continuous_evt_data_t</code></a>。</p><h5 id="5、读取转换结果："><a href="#5、读取转换结果：" class="headerlink" title="5、读取转换结果："></a>5、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#adc-continuous-read-conversion-result">读取转换结果</a>：</h5><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv420adc_continuous_start23adc_continuous_handle_t" title="adc_continuous_start"><code>adc_continuous_start()</code></a> 启动 ADC 连续转换，调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv419adc_continuous_read23adc_continuous_handle_tP7uint8_t8uint32_tP8uint32_t8uint32_t" title="adc_continuous_read"><code>adc_continuous_read()</code></a> 可以获取 ADC 通道的转换结果。注意提供缓冲区，获取原始结果。</p><p>函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_continuous.html#_CPPv419adc_continuous_read23adc_continuous_handle_tP7uint8_t8uint32_tP8uint32_t8uint32_t" title="adc_continuous_read"><code>adc_continuous_read()</code></a> 每次都会尝试以期望长度读取转换结果。<br>参数：</p><ul><li><strong>handle</strong> – <strong>[in]</strong> ADC连续模式驱动句柄</li><li><strong>buf</strong> – **[out]**要从ADC读取的转换结果缓冲区。</li><li><strong>length_max</strong> – <strong>[in]</strong> 从ADC读取的转换结果的预期长度（以字节为单位）。</li><li><strong>out_length</strong> – <strong>[out]</strong> 通过此API从ADC读取的转换结果的实际长度（以字节为单位）。</li><li><strong>timeout_ms</strong> – <strong>[in]</strong> 通过此API等待数据的时间（以毫秒为单位）。</li></ul><h2 id="六、ADC-示例"><a href="#六、ADC-示例" class="headerlink" title="六、ADC 示例"></a>六、ADC 示例</h2><h4 id="单次转换示例程序："><a href="#单次转换示例程序：" class="headerlink" title="单次转换示例程序："></a>单次转换示例程序：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_adc/adc_oneshot.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMPLE_ADC1_CHAN0 ADC_CHANNEL_6  <span class="hljs-comment">// 根据您的硬件配置选择合适的通道</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMPLE_ADC1_CHAN1 ADC_CHANNEL_7  <span class="hljs-comment">// 根据您的硬件配置选择合适的通道</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span>* TAG = <span class="hljs-string">&quot;ADC_ONESHOT_EXAMPLE&quot;</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">adc_oneshot_unit_handle_t</span> adc1_handle;<br>    <span class="hljs-type">adc_oneshot_unit_init_cfg_t</span> init_config1 = &#123;<br>        .unit_id = ADC_UNIT_1,<br>        .ulp_mode = ADC_ULP_MODE_DISABLE,<br>    &#125;;<br>    ESP_ERROR_CHECK(adc_oneshot_new_unit(&amp;init_config1, &amp;adc1_handle));<br><br>    <span class="hljs-type">adc_oneshot_chan_cfg_t</span> config = &#123;<br>        .bitwidth = ADC_BITWIDTH_DEFAULT,<br>        .atten = ADC_ATTEN_DB_11,  <span class="hljs-comment">// 设置适当的衰减以匹配您的输入电压范围</span><br>    &#125;;<br><br>    <span class="hljs-comment">// 配置两个通道</span><br>    ESP_ERROR_CHECK(adc_oneshot_config_channel(adc1_handle, EXAMPLE_ADC1_CHAN0, &amp;config));<br>    ESP_ERROR_CHECK(adc_oneshot_config_channel(adc1_handle, EXAMPLE_ADC1_CHAN1, &amp;config));<br><br>    <span class="hljs-type">int</span> adc_raw[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">// 对每个通道进行单次转换并读取结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        ESP_ERROR_CHECK(adc_oneshot_read(adc1_handle, EXAMPLE_ADC1_CHAN0, &amp;adc_raw[<span class="hljs-number">0</span>]));<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;ADC1 Channel[%d] Raw Data: %d&quot;</span>, EXAMPLE_ADC1_CHAN0, adc_raw[<span class="hljs-number">0</span>]);<br><br>        ESP_ERROR_CHECK(adc_oneshot_read(adc1_handle, EXAMPLE_ADC1_CHAN1, &amp;adc_raw[<span class="hljs-number">1</span>]));<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;ADC1 Channel[%d] Raw Data: %d&quot;</span>, EXAMPLE_ADC1_CHAN1, adc_raw[<span class="hljs-number">1</span>]);<br><br>        vTaskDelay(pdMS_TO_TICKS(<span class="hljs-number">1000</span>));  <span class="hljs-comment">// 等待1秒再次读取</span><br>    &#125;<br><br>    <span class="hljs-comment">// 回收资源</span><br>    ESP_ERROR_CHECK(adc_oneshot_del_unit(adc1_handle));<br>&#125;<br><br></code></pre></td></tr></table></figure><p>为通道6接上1V电压：</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/1e135337569c82f7be09abf554e49c5.jpg"></p><p>串口输出结果：</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303210953.png"></p><h4 id="连续转换示例程序："><a href="#连续转换示例程序：" class="headerlink" title="连续转换示例程序："></a>连续转换示例程序：</h4><blockquote><p>参考:<a href="https://github.com/espressif/esp-idf/blob/fdb7a43752633560c73ee079d512c0c13808456f/examples/peripherals/adc/continuous_read/main/continuous_read_main.c">https://github.com/espressif/esp-idf/blob/fdb7a43752633560c73ee079d512c0c13808456f/examples/peripherals/adc/continuous_read/main/continuous_read_main.c</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sdkconfig.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/semphr.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_adc/adc_continuous.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _EXAMPLE_ADC_UNIT_STR(unit)         #unit   </span><br><span class="hljs-comment">// C预处理器的字符串化操作符 #，它可以将宏参数转换为字符串常量。如果传递 ADC_UNIT 给 _EXAMPLE_ADC_UNIT_STR，它会生成字符串 &quot;ADC_UNIT&quot;。</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMPLE_ADC_UNIT_STR(unit)          _EXAMPLE_ADC_UNIT_STR(unit)</span><br><span class="hljs-comment">// 宏嵌套</span><br><br><span class="hljs-comment">// 用于从 adc_digi_output_data_t 结构体中提取通道号和数据值。</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMPLE_ADC_GET_CHANNEL(p_data)     ((p_data)-&gt;type1.channel)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EXAMPLE_ADC_GET_DATA(p_data)        ((p_data)-&gt;type1.data)</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ADC_UNIT                    ADC_UNIT_1</span><br><br><br><span class="hljs-comment">// ADC通道</span><br><span class="hljs-comment">//static adc_channel_t channel[2] = &#123;ADC_CHANNEL_6, ADC_CHANNEL_7&#125;;</span><br><span class="hljs-type">static</span> <span class="hljs-type">adc_channel_t</span> channel[<span class="hljs-number">1</span>] = &#123;ADC_CHANNEL_6&#125;;<br><br><br><span class="hljs-type">static</span> TaskHandle_t s_task_handle;<br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;ADC_CONTINUOUS&quot;</span>;<br><br><span class="hljs-comment">// ADC连续模式的事件回调(一个转换帧完成时)</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> IRAM_ATTR <span class="hljs-title function_">s_conv_done_cb</span><span class="hljs-params">(<span class="hljs-type">adc_continuous_handle_t</span> handle, <span class="hljs-type">const</span> <span class="hljs-type">adc_continuous_evt_data_t</span> *edata, <span class="hljs-type">void</span> *user_data)</span><br>&#123;<br>    BaseType_t mustYield = pdFALSE;<br>    <span class="hljs-comment">//Notify that ADC continuous driver has done enough number of conversions</span><br><span class="hljs-comment">//vTaskNotifyGiveFromISR 是 FreeRTOS 提供的一个函数，它允许从中断服务例程（ISR）安全地向任务发送通知</span><br>    vTaskNotifyGiveFromISR(s_task_handle, &amp;mustYield);<br><br>    <span class="hljs-keyword">return</span> (mustYield == pdTRUE);<br>&#125;<br><br><span class="hljs-comment">// adc初始化</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">continuous_adc_init</span><span class="hljs-params">(<span class="hljs-type">adc_channel_t</span> *channel, <span class="hljs-type">uint8_t</span> channel_num, <span class="hljs-type">adc_continuous_handle_t</span> *out_handle)</span><br>&#123;<br><span class="hljs-comment">// 创建一个ADC连续模式的句柄</span><br>    <span class="hljs-type">adc_continuous_handle_t</span> handle = <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-comment">// 配置ADC连续模式的参数</span><br>    <span class="hljs-type">adc_continuous_handle_cfg_t</span> adc_config = &#123;<br>        .max_store_buf_size = <span class="hljs-number">1024</span>,  <span class="hljs-comment">// 最大存储缓冲区大小</span><br>        .conv_frame_size = <span class="hljs-number">256</span>,<span class="hljs-comment">// 转换帧大小</span><br>    &#125;;<br>    ESP_ERROR_CHECK(adc_continuous_new_handle(&amp;adc_config, &amp;handle));<br><br>    <span class="hljs-comment">//  ADC IO</span><br>    <span class="hljs-type">adc_continuous_config_t</span> dig_cfg = &#123;<br>        .sample_freq_hz = <span class="hljs-number">20</span> * <span class="hljs-number">1000</span>,         <span class="hljs-comment">// 采样频率</span><br>        .conv_mode = ADC_CONV_SINGLE_UNIT_1,  <span class="hljs-comment">// 转换模式</span><br>        .format = ADC_DIGI_OUTPUT_FORMAT_TYPE1,    <span class="hljs-comment">// 输出格式</span><br>    &#125;;<br><br>    <span class="hljs-type">adc_digi_pattern_config_t</span> adc_pattern[SOC_ADC_PATT_LEN_MAX] = &#123;<span class="hljs-number">0</span>&#125;;<br>    dig_cfg.pattern_num = channel_num;   <span class="hljs-comment">// 通道数量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; channel_num; i++) &#123;<br>        adc_pattern[i].atten = ADC_ATTEN_DB_11;  <span class="hljs-comment">// ADC 衰减</span><br>        adc_pattern[i].channel = channel[i] &amp; <span class="hljs-number">0x7</span>;  <span class="hljs-comment">// 通道</span><br>        adc_pattern[i].unit = ADC_UNIT;<span class="hljs-comment">// ADC单元</span><br>        adc_pattern[i].bit_width = SOC_ADC_DIGI_MAX_BITWIDTH; <span class="hljs-comment">// 位宽</span><br><br><span class="hljs-comment">// 打印配置信息</span><br><span class="hljs-comment">// - PRIx8 是一个预处理宏，定义在 C 语言的标准库头文件 &lt;inttypes.h&gt; 中。它用于以可移植的方式格式化输出 uint8_t 类型的数据为十六进制形式。</span><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;adc_pattern[%d].atten is :%&quot;</span>PRIx8, i, adc_pattern[i].atten);<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;adc_pattern[%d].channel is :%&quot;</span>PRIx8, i, adc_pattern[i].channel);<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;adc_pattern[%d].unit is :%&quot;</span>PRIx8, i, adc_pattern[i].unit);<br>    &#125;<br><br><span class="hljs-comment">// 要使用的 ADC 通道的配置列表</span><br>    dig_cfg.adc_pattern = adc_pattern;<br>    ESP_ERROR_CHECK(adc_continuous_config(handle, &amp;dig_cfg));<br><br>    *out_handle = handle;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">esp_err_t</span> ret; <span class="hljs-comment">// 返回状态</span><br>    <span class="hljs-type">uint32_t</span> ret_num = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 转换完成的数据数量</span><br><span class="hljs-comment">// 定义接收数组</span><br>    <span class="hljs-type">uint8_t</span> result[<span class="hljs-number">256</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><span class="hljs-comment">// 初始化数组,填充为0xcc</span><br>    <span class="hljs-built_in">memset</span>(result, <span class="hljs-number">0xcc</span>, <span class="hljs-number">256</span>);<br><br><span class="hljs-comment">//获取app_mian任务的句柄。</span><br>    s_task_handle = xTaskGetCurrentTaskHandle();<br><br><span class="hljs-comment">// 初始化ADC</span><br>    <span class="hljs-type">adc_continuous_handle_t</span> handle = <span class="hljs-literal">NULL</span>;<br>    continuous_adc_init(channel, <span class="hljs-keyword">sizeof</span>(channel) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">adc_channel_t</span>), &amp;handle);<br><br><span class="hljs-comment">// 事件回调</span><br>    <span class="hljs-type">adc_continuous_evt_cbs_t</span> cbs = &#123;<br><span class="hljs-comment">// 当一个转换帧完成时，触发此事件:s_conv_done_cb</span><br>        .on_conv_done = s_conv_done_cb,<br>    &#125;;<br><br><span class="hljs-comment">// 注册事件回调</span><br>    ESP_ERROR_CHECK(adc_continuous_register_event_callbacks(handle, &amp;cbs, <span class="hljs-literal">NULL</span>));<br><span class="hljs-comment">// 启动ADC连续模式</span><br>    ESP_ERROR_CHECK(adc_continuous_start(handle));<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * This is to show you the way to use the ADC continuous mode driver event callback.</span><br><span class="hljs-comment">         * This `ulTaskNotifyTake` will block when the data processing in the task is fast.</span><br><span class="hljs-comment">         * However in this example, the data processing (print) is slow, so you barely block here.</span><br><span class="hljs-comment">         *</span><br><span class="hljs-comment">         * Without using this event callback (to notify this task), you can still just call</span><br><span class="hljs-comment">         * `adc_continuous_read()` here in a loop, with/without a certain block timeout.</span><br><span class="hljs-comment">         */</span><br><span class="hljs-comment">//  ulTaskNotifyTake() 等待通知</span><br>        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);<br><br><span class="hljs-comment">//生成字符串</span><br>        <span class="hljs-type">char</span> unit[] = EXAMPLE_ADC_UNIT_STR(ADC_UNIT);<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">// 读取ADC数据</span><br>            ret = adc_continuous_read(handle, result, <span class="hljs-number">256</span>, &amp;ret_num, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 读取成功</span><br>            <span class="hljs-keyword">if</span> (ret == ESP_OK) &#123;<br><span class="hljs-comment">// 显示读取操作的返回状态和实际读取到的数据字节数</span><br>                ESP_LOGI(<span class="hljs-string">&quot;TASK&quot;</span>, <span class="hljs-string">&quot;ret is %x, ret_num is %&quot;</span>PRIu32<span class="hljs-string">&quot; bytes&quot;</span>, ret, ret_num);<br><span class="hljs-comment">// 循环遍历读取到的数据，解析每个ADC数据项，并打印出来</span><br><span class="hljs-comment">// - 循环以 SOC_ADC_DIGI_RESULT_BYTES 为步长迭代，这个常量定义了每个ADC数据项的字节大小。</span><br><span class="hljs-comment">// - adc_digi_output_data_t 是一个结构体类型，用于解析ADC数据项。</span><br><span class="hljs-comment">// - EXAMPLE_ADC_GET_CHANNEL(p) 和 EXAMPLE_ADC_GET_DATA(p) 是宏，用于从 adc_digi_output_data_t 结构体中提取通道号和数据值。</span><br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ret_num; i += SOC_ADC_DIGI_RESULT_BYTES) &#123;<br>                    <span class="hljs-type">adc_digi_output_data_t</span> *p = (<span class="hljs-type">adc_digi_output_data_t</span>*)&amp;result[i];<br>                    <span class="hljs-type">uint32_t</span> chan_num = EXAMPLE_ADC_GET_CHANNEL(p);<br>                    <span class="hljs-type">uint32_t</span> data = EXAMPLE_ADC_GET_DATA(p);<br>                    <span class="hljs-comment">/*检查通道编号验证，如果通道编号超过最大通道，则数据无效 */</span><br><span class="hljs-comment">// - PRIu32 是 C 语言标准库中的宏，它用于以可移植的方式格式化输出 uint32_t 类型的数据。</span><br>                    <span class="hljs-keyword">if</span> (chan_num &lt; SOC_ADC_CHANNEL_NUM(ADC_UNIT)) &#123;<br>                        ESP_LOGI(TAG, <span class="hljs-string">&quot;Unit: %s, Channel: %&quot;</span>PRIu32<span class="hljs-string">&quot;, Value: %&quot;</span>PRIu32, unit, chan_num, data);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        ESP_LOGW(TAG, <span class="hljs-string">&quot;Invalid data [%s_%&quot;</span>PRIu32<span class="hljs-string">&quot;_%&quot;</span>PRIu32<span class="hljs-string">&quot;]&quot;</span>, unit, chan_num, data);<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">/**</span><br><span class="hljs-comment">                 * Because printing is slow, so every time you call `ulTaskNotifyTake`, it will immediately return.</span><br><span class="hljs-comment">                 * To avoid a task watchdog timeout, add a delay here. When you replace the way you process the data,</span><br><span class="hljs-comment">                 * usually you don&#x27;t need this delay (as this task will block for a while).</span><br><span class="hljs-comment">                 */</span><br>                vTaskDelay(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret == ESP_ERR_TIMEOUT) &#123;<br>                <span class="hljs-comment">//We try to read `EXAMPLE_READ_LEN` until API returns timeout, which means there&#x27;s no available data</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">// 停止ADC连续模式</span><br>    ESP_ERROR_CHECK(adc_continuous_stop(handle));<br>    ESP_ERROR_CHECK(adc_continuous_deinit(handle));<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><p>接线：</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/1e135337569c82f7be09abf554e49c5.jpg"></p><p>效果：</p><p><img src="/2024/03/04/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.4-ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-ADC%E5%85%A5%E9%97%A8/20240303222750.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/m0_50064262/article/details/118817032">https://blog.csdn.net/m0_50064262/article/details/118817032</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv427adc_oneshot_unit_init_cfg_t">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/adc_oneshot.html#_CPPv427adc_oneshot_unit_init_cfg_t</a></li><li>extension:&#x2F;&#x2F;bfdogplmndidlpjfhoijckpakkdjkkil&#x2F;pdf&#x2F;viewer.html?file&#x3D;https%3A%2F%2F<a href="http://www.espressif.com%2Fsites%2Fdefault%2Ffiles%2Fdocumentation%2Fesp32_technical_reference_manual_cn.pdf">www.espressif.com%2Fsites%2Fdefault%2Ffiles%2Fdocumentation%2Fesp32_technical_reference_manual_cn.pdf</a></li><li><a href="https://github.com/espressif/esp-idf/tree/fdb7a43/examples/peripherals/adc/oneshot_read">https://github.com/espressif/esp-idf/tree/fdb7a43/examples/peripherals/adc/oneshot_read</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>ADC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-3.硬件定时器入门</title>
    <link href="/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.3-ESP32%E5%A4%96%E8%AE%BE-%E7%A1%AC%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-%E7%A1%AC%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.3-ESP32%E5%A4%96%E8%AE%BE-%E7%A1%AC%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-%E7%A1%AC%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32硬件定时器的使用。(其他型号也可参考)</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-硬件定时器入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-04</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-硬件定时器入门"><a href="#ESP32外设-硬件定时器入门" class="headerlink" title="ESP32外设-硬件定时器入门"></a>ESP32外设-硬件定时器入门</h1><blockquote><p>若不必使用硬件定时器，则建议使用软件定时器：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_timer.html">ESP 定时器</a></p></blockquote><h2 id="一、介绍："><a href="#一、介绍：" class="headerlink" title="一、介绍："></a>一、介绍：</h2><p>通用定时器是 ESP32 定时器组外设的驱动程序。ESP32 硬件定时器分辨率高，具有灵活的报警功能。定时器内部计数器达到特定目标数值的行为被称为定时器报警。定时器报警时将调用用户注册的不同定时器回调函数。</p><p>通用定时器通常在以下场景中使用：</p><ul><li>如同挂钟一般自由运行，随时随地获取高分辨率时间戳；</li><li>生成周期性警报，定期触发事件；</li><li>生成一次性警报，在目标时间内响应。</li></ul><p>ESP32 内置 4 个 64-bit 通用定时器。每个定时器包含一个 16-bit 预分频器和一个 64-bit 可自动重新加载向上 ／向下计数器。 ESP32 的定时器分为 2 组，每组 2 个。TIMGn_Tx 的 n 代表组别，x 代表定时器编号。</p><p>定时器特性： </p><p>• 16-bit 时钟预分频器，分频系数为 2-65536<br>• 64-bit 时基计数器<br>• 可配置的向上／向下时基计数器：增加或减少<br>• 暂停和恢复时基计数器<br>• 报警时自动重新加载<br>• 当报警值溢出&#x2F;低于保护值时报警<br>• 软件控制的即时重新加载<br>• 电平触发中断和边沿触发中断</p><h2 id="二、使用："><a href="#二、使用：" class="headerlink" title="二、使用："></a>二、使用：</h2><p>ESP32内置了两个定时器组 <code>Timer Group</code>，每个定时器组都有两个64位定时器<code>Timer</code>。支持向上、向下两个方向计数。支持设置警报阈值。</p><h4 id="1、定时器初始化"><a href="#1、定时器初始化" class="headerlink" title="1、定时器初始化"></a>1、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#gptimer-resource-allocation">定时器初始化</a></h4><p>通用定时器实例由 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv416gptimer_handle_t" title="gptimer_handle_t"><code>gptimer_handle_t</code></a> 表示。</p><p>要初始化一个定时器实例，需要提前提供配置结构体 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv416gptimer_config_t" title="gptimer_config_t"><code>gptimer_config_t</code></a>，参数如下：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N16gptimer_config_t7clk_srcE" title="gptimer_config_t::clk_src"><code>gptimer_config_t::clk_src</code></a> 选择定时器的时钟源。<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv422gptimer_clock_source_t" title="gptimer_clock_source_t"><code>gptimer_clock_source_t</code></a> 中列出多个可用时钟，仅可选择其中一个时钟。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N16gptimer_config_t9directionE" title="gptimer_config_t::direction"><code>gptimer_config_t::direction</code></a> 设置定时器的计数方向，<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv425gptimer_count_direction_t" title="gptimer_count_direction_t"><code>gptimer_count_direction_t</code></a> 中列出多个支持的方向，仅可选择其中一个方向。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N16gptimer_config_t13resolution_hzE" title="gptimer_config_t::resolution_hz"><code>gptimer_config_t::resolution_hz</code></a> 设置内部计数器的分辨率。计数器每滴答一次相当于 <strong>1 &#x2F; resolution_hz</strong> 秒。</li><li><code>gptimer_config::intr_priority</code> 设置中断的优先级。如果设置为 <code>0</code>，则会分配一个默认优先级的中断，否则会使用指定的优先级。</li><li>选用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N16gptimer_config_t11intr_sharedE" title="gptimer_config_t::intr_shared"><code>gptimer_config_t::intr_shared</code></a> 设置是否将定时器中断源标记为共享源。</li></ul><p>配置好结构体，将结构传递给 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv417gptimer_new_timerPK16gptimer_config_tP16gptimer_handle_t" title="gptimer_new_timer"><code>gptimer_new_timer()</code></a>，用以实例化定时器实例并返回定时器句柄。</p><p>如已不再需要之前创建的通用定时器实例，应通过调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv417gptimer_del_timer16gptimer_handle_t" title="gptimer_del_timer"><code>gptimer_del_timer()</code></a> 回收定时器（在删除通用定时器句柄之前，请通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv415gptimer_disable16gptimer_handle_t" title="gptimer_disable"><code>gptimer_disable()</code></a> 禁用定时器，或者通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv414gptimer_enable16gptimer_handle_t" title="gptimer_enable"><code>gptimer_enable()</code></a> 确认定时器尚未使能。）</p><p>初始化示例：<strong>创建分辨率为 1 MHz 的通用定时器句柄</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">gptimer_handle_t</span> gptimer = <span class="hljs-literal">NULL</span>;<br><span class="hljs-type">gptimer_config_t</span> timer_config = &#123;<br>    .clk_src = GPTIMER_CLK_SRC_DEFAULT,<br>    .direction = GPTIMER_COUNT_UP,<br>    .resolution_hz = <span class="hljs-number">1</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 1MHz, 1 tick = 1us</span><br>&#125;;<br>ESP_ERROR_CHECK(gptimer_new_timer(&amp;timer_config, &amp;gptimer));<br></code></pre></td></tr></table></figure><h4 id="2、定时器设置和获取计数值"><a href="#2、定时器设置和获取计数值" class="headerlink" title="2、定时器设置和获取计数值"></a>2、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#set-and-get-count-value">定时器设置和获取计数值</a></h4><p>创建通用定时器时，内部计数器将默认重置为零。计数值可以通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv421gptimer_set_raw_count16gptimer_handle_t8uint64_t" title="gptimer_set_raw_count"><code>gptimer_set_raw_count()</code></a> 异步更新。最大计数值取决于硬件定时器的位宽，这也会在 SOC 宏 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/soc_caps.html#c.SOC_TIMER_GROUP_COUNTER_BIT_WIDTH" title="SOC_TIMER_GROUP_COUNTER_BIT_WIDTH"><code>SOC_TIMER_GROUP_COUNTER_BIT_WIDTH</code></a> 中有所反映。当更新活动定时器的原始计数值时，定时器将立即从新值开始计数。</p><p>计数值可以随时通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv421gptimer_get_raw_count16gptimer_handle_tP8uint64_t" title="gptimer_get_raw_count"><code>gptimer_get_raw_count()</code></a> 获取。</p><h4 id="3、设置警报动作"><a href="#3、设置警报动作" class="headerlink" title="3、设置警报动作"></a>3、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#set-up-alarm-action">设置警报动作</a></h4><p>对于大多数通用定时器使用场景而言，应在启动定时器之前设置警报动作，但不包括简单的挂钟场景，该场景仅需自由运行的定时器。设置警报动作，需要根据如何使用警报事件来配置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv422gptimer_alarm_config_t" title="gptimer_alarm_config_t"><code>gptimer_alarm_config_t</code></a> 的不同参数：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t11alarm_countE" title="gptimer_alarm_config_t::alarm_count"><code>gptimer_alarm_config_t::alarm_count</code></a> 设置触发警报事件的目标计数值。设置警报值时还需考虑计数方向。尤其是当 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t20auto_reload_on_alarmE" title="gptimer_alarm_config_t::auto_reload_on_alarm"><code>gptimer_alarm_config_t::auto_reload_on_alarm</code></a> 为 true 时，<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t11alarm_countE" title="gptimer_alarm_config_t::alarm_count"><code>gptimer_alarm_config_t::alarm_count</code></a> 和 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t12reload_countE" title="gptimer_alarm_config_t::reload_count"><code>gptimer_alarm_config_t::reload_count</code></a> 不能设置为相同的值，因为警报值和重载值相同时没有意义。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t12reload_countE" title="gptimer_alarm_config_t::reload_count"><code>gptimer_alarm_config_t::reload_count</code></a> 代表警报事件发生时要重载的计数值。此配置仅在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t20auto_reload_on_alarmE" title="gptimer_alarm_config_t::auto_reload_on_alarm"><code>gptimer_alarm_config_t::auto_reload_on_alarm</code></a> 设置为 true 时生效。</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t20auto_reload_on_alarmE" title="gptimer_alarm_config_t::auto_reload_on_alarm"><code>gptimer_alarm_config_t::auto_reload_on_alarm</code></a> 标志设置是否使能自动重载功能。如果使能，硬件定时器将在警报事件发生时立即将 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N22gptimer_alarm_config_t12reload_countE" title="gptimer_alarm_config_t::reload_count"><code>gptimer_alarm_config_t::reload_count</code></a> 的值重载到计数器中。</li></ul><p>要使警报配置生效，需要调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv424gptimer_set_alarm_action16gptimer_handle_tPK22gptimer_alarm_config_t" title="gptimer_set_alarm_action"><code>gptimer_set_alarm_action()</code></a>。特别是当 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv422gptimer_alarm_config_t" title="gptimer_alarm_config_t"><code>gptimer_alarm_config_t</code></a> 设置为 <code>NULL</code> 时，报警功能将被禁用。</p><h4 id="4、注册事件回调函数"><a href="#4、注册事件回调函数" class="headerlink" title="4、注册事件回调函数"></a>4、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#gptimer-register-event-callbacks">注册事件回调函数</a></h4><p>定时器启动后，可动态产生特定事件（如“警报事件”）。如需在事件发生时调用某些函数，请通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv432gptimer_register_event_callbacks16gptimer_handle_tPK25gptimer_event_callbacks_tPv" title="gptimer_register_event_callbacks"><code>gptimer_register_event_callbacks()</code></a> 将函数挂载到中断服务例程 (ISR)。<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv425gptimer_event_callbacks_t" title="gptimer_event_callbacks_t"><code>gptimer_event_callbacks_t</code></a> 中列出了所有支持的事件回调函数：</p><ul><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv4N25gptimer_event_callbacks_t8on_alarmE" title="gptimer_event_callbacks_t::on_alarm"><code>gptimer_event_callbacks_t::on_alarm</code></a> 设置警报事件的回调函数。由于此函数在 ISR 上下文中调用，必须确保该函数不会试图阻塞（例如，确保仅从函数内调用具有 <code>ISR</code> 后缀的 FreeRTOS API）。函数原型在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv418gptimer_alarm_cb_t" title="gptimer_alarm_cb_t"><code>gptimer_alarm_cb_t</code></a> 中有所声明。</li></ul><p>此功能将为定时器延迟安装中断服务，但不使能中断服务。所以，请在 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv414gptimer_enable16gptimer_handle_t" title="gptimer_enable"><code>gptimer_enable()</code></a> 之前调用这一函数，否则将返回 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_err.html#c.ESP_ERR_INVALID_STATE" title="ESP_ERR_INVALID_STATE"><code>ESP_ERR_INVALID_STATE</code></a> 错误。了解详细信息，请查看章节 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#enable-and-disable-timer">使能和禁用定时器</a>。</p><h4 id="5、使能和禁用定时器"><a href="#5、使能和禁用定时器" class="headerlink" title="5、使能和禁用定时器"></a>5、<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#enable-and-disable-timer">使能和禁用定时器</a></h4><p>在对定时器进行 IO 控制之前，需要先调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv414gptimer_enable16gptimer_handle_t" title="gptimer_enable"><code>gptimer_enable()</code></a> 使能定时器。此函数功能如下：</p><ul><li>此函数将把定时器驱动程序的状态从 <strong>init</strong> 切换为 <strong>enable</strong>。</li><li>如果 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv432gptimer_register_event_callbacks16gptimer_handle_tPK25gptimer_event_callbacks_tPv" title="gptimer_register_event_callbacks"><code>gptimer_register_event_callbacks()</code></a> 已经延迟安装中断服务，此函数将使能中断服务。</li></ul><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv415gptimer_disable16gptimer_handle_t" title="gptimer_disable"><code>gptimer_disable()</code></a> 会进行相反的操作，即将定时器驱动程序恢复到 <strong>init</strong> 状态，禁用中断服务并释放电源管理锁。</p><h4 id="6、启动和停止定时器"><a href="#6、启动和停止定时器" class="headerlink" title="6、启动和停止定时器"></a>6、启动和停止定时器</h4><p>启动和停止是定时器的基本 IO 操作。调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv413gptimer_start16gptimer_handle_t" title="gptimer_start"><code>gptimer_start()</code></a> 可以使内部计数器开始工作，而 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv412gptimer_stop16gptimer_handle_t" title="gptimer_stop"><code>gptimer_stop()</code></a> 可以使计数器停止工作。下文说明了如何在存在或不存在警报事件的情况下启动定时器。</p><p>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#_CPPv413gptimer_start16gptimer_handle_t" title="gptimer_start"><code>gptimer_start()</code></a> 将使驱动程序状态从 enable 转换为 run, 反之亦然。注意确保 start 和 stop 函数成对使用，否则，函数可能返回 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/esp_err.html#c.ESP_ERR_INVALID_STATE" title="ESP_ERR_INVALID_STATE"><code>ESP_ERR_INVALID_STATE</code></a>。</p><h2 id="三、示例："><a href="#三、示例：" class="headerlink" title="三、示例："></a>三、示例：</h2><blockquote><p>参考：<a href="https://github.com/espressif/esp-idf/blob/fdb7a43752633560c73ee079d512c0c13808456f/examples/peripherals/timer_group/gptimer/main/gptimer_example_main.c">https://github.com/espressif/esp-idf/blob/fdb7a43752633560c73ee079d512c0c13808456f/examples/peripherals/timer_group/gptimer/main/gptimer_example_main.c</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/queue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gptimer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;gptimer&quot;</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">uint64_t</span> event_count;<br>&#125; <span class="hljs-type">example_queue_element_t</span>;<br><br><span class="hljs-comment">// 定时器警报事件的回调函数(案例1)</span><br><span class="hljs-comment">// 三个参数:定时器句柄 timer、事件数据指针 edata 和用户数据指针 user_data。</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> IRAM_ATTR <span class="hljs-title function_">example_timer_on_alarm_cb_v1</span><span class="hljs-params">(<span class="hljs-type">gptimer_handle_t</span> timer, <span class="hljs-type">const</span> <span class="hljs-type">gptimer_alarm_event_data_t</span> *edata, <span class="hljs-type">void</span> *user_data)</span><br>&#123;<br>    BaseType_t high_task_awoken = pdFALSE;<br>    QueueHandle_t <span class="hljs-built_in">queue</span> = (QueueHandle_t)user_data;<br>    <span class="hljs-comment">// 立即停止计时器</span><br>    gptimer_stop(timer);<br>    <span class="hljs-comment">// 从事件数据中获取计数值，并将其存储在 example_queue_element_t 结构体变量 ele 的 event_count 字段中。</span><br>    <span class="hljs-type">example_queue_element_t</span> ele = &#123;<br>        .event_count = edata-&gt;count_value<br>    &#125;;<br><span class="hljs-comment">//使用 xQueueSendFromISR() 函数将 ele 变量发送到队列中</span><br>    xQueueSendFromISR(<span class="hljs-built_in">queue</span>, &amp;ele, &amp;high_task_awoken);<br>    <span class="hljs-comment">// return whether we need to yield at the end of ISR</span><br>    <span class="hljs-keyword">return</span> (high_task_awoken == pdTRUE);<br>&#125;<br><br><span class="hljs-comment">// 定时器警报事件的回调函数(案例2)</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> IRAM_ATTR <span class="hljs-title function_">example_timer_on_alarm_cb_v2</span><span class="hljs-params">(<span class="hljs-type">gptimer_handle_t</span> timer, <span class="hljs-type">const</span> <span class="hljs-type">gptimer_alarm_event_data_t</span> *edata, <span class="hljs-type">void</span> *user_data)</span><br>&#123;<br>    BaseType_t high_task_awoken = pdFALSE;<br>    QueueHandle_t <span class="hljs-built_in">queue</span> = (QueueHandle_t)user_data;<br>    <span class="hljs-comment">// Retrieve count value and send to queue</span><br>    <span class="hljs-type">example_queue_element_t</span> ele = &#123;<br>        .event_count = edata-&gt;count_value<br>    &#125;;<br>    xQueueSendFromISR(<span class="hljs-built_in">queue</span>, &amp;ele, &amp;high_task_awoken);<br>    <span class="hljs-comment">// return whether we need to yield at the end of ISR</span><br>    <span class="hljs-keyword">return</span> (high_task_awoken == pdTRUE);<br>&#125;<br><br><span class="hljs-comment">// 定时器警报事件的回调函数(案例3:动态更新报警值)</span><br><span class="hljs-type">static</span> <span class="hljs-type">bool</span> IRAM_ATTR <span class="hljs-title function_">example_timer_on_alarm_cb_v3</span><span class="hljs-params">(<span class="hljs-type">gptimer_handle_t</span> timer, <span class="hljs-type">const</span> <span class="hljs-type">gptimer_alarm_event_data_t</span> *edata, <span class="hljs-type">void</span> *user_data)</span><br>&#123;<br>    BaseType_t high_task_awoken = pdFALSE;<br>    QueueHandle_t <span class="hljs-built_in">queue</span> = (QueueHandle_t)user_data;<br>    <span class="hljs-comment">// Retrieve count value and send to queue</span><br>    <span class="hljs-type">example_queue_element_t</span> ele = &#123;<br>        .event_count = edata-&gt;count_value<br>    &#125;;<br>    xQueueSendFromISR(<span class="hljs-built_in">queue</span>, &amp;ele, &amp;high_task_awoken);<br>    <span class="hljs-comment">// reconfigure alarm value</span><br>    <span class="hljs-type">gptimer_alarm_config_t</span> alarm_config = &#123;<br>        .alarm_count = edata-&gt;alarm_value + <span class="hljs-number">1000000</span>, <span class="hljs-comment">// alarm in next 1s</span><br>    &#125;;<br>    gptimer_set_alarm_action(timer, &amp;alarm_config);<br>    <span class="hljs-comment">// return whether we need to yield at the end of ISR</span><br>    <span class="hljs-keyword">return</span> (high_task_awoken == pdTRUE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// 定义一个 example_queue_element_t 类型的变量 ele</span><br>    <span class="hljs-type">example_queue_element_t</span> ele;<br><span class="hljs-comment">//创建了一个长度为 10，每个元素大小为 example_queue_element_t 类型的队列，并将其赋值给 queue 变量。</span><br>    QueueHandle_t <span class="hljs-built_in">queue</span> = xQueueCreate(<span class="hljs-number">10</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">example_queue_element_t</span>));<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">queue</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;创建队列失败&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br><span class="hljs-comment">// 初始化定时器</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;创建分辨率为 1 MHz 的通用定时器句柄&quot;</span>);<br>    <span class="hljs-type">gptimer_handle_t</span> gptimer = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">gptimer_config_t</span> timer_config = &#123;<br>        .clk_src = GPTIMER_CLK_SRC_DEFAULT,<br>        .direction = GPTIMER_COUNT_UP,<br>        .resolution_hz = <span class="hljs-number">1000000</span>, <span class="hljs-comment">// 1MHz, 1 tick=1us</span><br>    &#125;;<br>    ESP_ERROR_CHECK(gptimer_new_timer(&amp;timer_config, &amp;gptimer));<br><br><span class="hljs-comment">// 注册定时器事件回调函数(警报事件的回调函数)</span><br>    <span class="hljs-type">gptimer_event_callbacks_t</span> cbs = &#123;<br>        .on_alarm = example_timer_on_alarm_cb_v1,<br>    &#125;;<br>    ESP_ERROR_CHECK(gptimer_register_event_callbacks(gptimer, &amp;cbs, <span class="hljs-built_in">queue</span>));<br><br>    <span class="hljs-comment">// 使能定时器</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Enable timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_enable(gptimer));<br><br> <span class="hljs-comment">// 设置定时器的周期为 1s(触发警报事件的目标计数值)</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Start timer, stop it at alarm event&quot;</span>);<br>    <span class="hljs-type">gptimer_alarm_config_t</span> alarm_config1 = &#123;<br>        .alarm_count = <span class="hljs-number">1000000</span>, <span class="hljs-comment">// period = 1s</span><br>    &#125;;<br><span class="hljs-comment">// 设置定时器的报警事件</span><br>    ESP_ERROR_CHECK(gptimer_set_alarm_action(gptimer, &amp;alarm_config1));<br><span class="hljs-comment">// 启动定时器</span><br>    ESP_ERROR_CHECK(gptimer_start(gptimer));<br><br>    <span class="hljs-comment">// 等待定时器报警事件(从队列中接收数据,接收到的数据将会存储在 &amp;ele 中)</span><br>    <span class="hljs-keyword">if</span> (xQueueReceive(<span class="hljs-built_in">queue</span>, &amp;ele, pdMS_TO_TICKS(<span class="hljs-number">2000</span>))) &#123;<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Timer stopped, count=%llu&quot;</span>, ele.event_count);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ESP_LOGW(TAG, <span class="hljs-string">&quot;Missed one count event&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">// 设置定时器的计数值(异步更新)</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Set count value&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_set_raw_count(gptimer, <span class="hljs-number">100</span>));<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Get count value&quot;</span>);<br><br><span class="hljs-comment">// 获取定时器的计数值</span><br>    <span class="hljs-type">uint64_t</span> count;<br>    ESP_ERROR_CHECK(gptimer_get_raw_count(gptimer, &amp;count));<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Timer count value=%llu&quot;</span>, count);<br><br>    <span class="hljs-comment">//--------------------------------------------------------------------//</span><br>ESP_LOGW(TAG, <span class="hljs-string">&quot;案例1结束,案例2开始&quot;</span>);<br><span class="hljs-comment">//--------------------------------------------------------------------//</span><br><br>    <span class="hljs-comment">// 在更新报警回调之前，我们应该确保计时器没有处于启用状态</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Disable timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_disable(gptimer));<br>    <span class="hljs-comment">// 设置一个新的回调函数</span><br>    cbs.on_alarm = example_timer_on_alarm_cb_v2;<br>    ESP_ERROR_CHECK(gptimer_register_event_callbacks(gptimer, &amp;cbs, <span class="hljs-built_in">queue</span>));<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Enable timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_enable(gptimer));<br><br>    <span class="hljs-comment">// 重新设置报警条件</span><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Start timer, auto-reload at alarm event&quot;</span>);<br>    <span class="hljs-type">gptimer_alarm_config_t</span> alarm_config2 = &#123;<br>        .reload_count = <span class="hljs-number">0</span>,<br>        .alarm_count = <span class="hljs-number">1000000</span>, <span class="hljs-comment">// period = 1s</span><br>        .flags.auto_reload_on_alarm = <span class="hljs-literal">true</span>, <span class="hljs-comment">//报警事件发生后立即通过硬件重新加载计数值</span><br>    &#125;;<br><span class="hljs-comment">// 设置定时器的报警事件</span><br>    ESP_ERROR_CHECK(gptimer_set_alarm_action(gptimer, &amp;alarm_config2));<br>    ESP_ERROR_CHECK(gptimer_start(gptimer));<br><br> <span class="hljs-comment">// 循环次数为4次。在每次循环中，通过 xQueueReceive() 函数从队列中接收数据，并等待最多2秒。如果成功接收到数据，则打印定时器重新加载的消息</span><br>    <span class="hljs-type">int</span> record = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">while</span> (record) &#123;<br>        <span class="hljs-keyword">if</span> (xQueueReceive(<span class="hljs-built_in">queue</span>, &amp;ele, pdMS_TO_TICKS(<span class="hljs-number">2000</span>))) &#123;<br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Timer reloaded, count=%llu&quot;</span>, ele.event_count);<br>            record--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ESP_LOGW(TAG, <span class="hljs-string">&quot;Missed one count event&quot;</span>);<br>        &#125;<br>    &#125;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Stop timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_stop(gptimer));<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Disable timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_disable(gptimer));<br><br>    <span class="hljs-comment">//--------------------------------------------------------------------//</span><br>ESP_LOGW(TAG, <span class="hljs-string">&quot;案例2结束,案例3开始&quot;</span>);<br><span class="hljs-comment">//--------------------------------------------------------------------//</span><br><span class="hljs-comment">// 案例3动态更新报警值</span><br>    cbs.on_alarm = example_timer_on_alarm_cb_v3;<br>    ESP_ERROR_CHECK(gptimer_register_event_callbacks(gptimer, &amp;cbs, <span class="hljs-built_in">queue</span>));<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Enable timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_enable(gptimer));<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Start timer, update alarm value dynamically&quot;</span>);<br>    <span class="hljs-type">gptimer_alarm_config_t</span> alarm_config3 = &#123;<br>        .alarm_count = <span class="hljs-number">1000000</span>, <span class="hljs-comment">// period = 1s</span><br>    &#125;;<br>    ESP_ERROR_CHECK(gptimer_set_alarm_action(gptimer, &amp;alarm_config3));<br>    ESP_ERROR_CHECK(gptimer_start(gptimer));<br>    record = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">while</span> (record) &#123;<br>        <span class="hljs-keyword">if</span> (xQueueReceive(<span class="hljs-built_in">queue</span>, &amp;ele, pdMS_TO_TICKS(<span class="hljs-number">2000</span>))) &#123;<br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Timer alarmed, count=%llu&quot;</span>, ele.event_count);<br>            record--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ESP_LOGW(TAG, <span class="hljs-string">&quot;Missed one count event&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Stop timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_stop(gptimer));<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Disable timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_disable(gptimer));<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Delete timer&quot;</span>);<br>    ESP_ERROR_CHECK(gptimer_del_timer(gptimer));<br><br>    vQueueDelete(<span class="hljs-built_in">queue</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>上面的示例程序，包含了三个案例：</p><ol><li>案例1：定时器触发警报事件后立即停止计时器，并将事件数据发送到队列中。</li><li>案例2：定时器触发警报事件后自动重新加载计数值，并将事件数据发送到队列中。</li><li>案例3：定时器触发警报事件后动态更新报警值，并将事件数据发送到队列中。</li></ol><p>在每个案例中，程序初始化 gptimer，注册相应的定时器事件回调函数，启动定时器并设置报警事件，然后通过队列接收数据并进行相应的处理。</p><p>效果：</p><p><img src="/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.3-ESP32%E5%A4%96%E8%AE%BE-%E7%A1%AC%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-%E7%A1%AC%E4%BB%B6%E5%AE%9A%E6%97%B6%E5%99%A8%E5%85%A5%E9%97%A8/20240304172313.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#id26">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gptimer.html#id26</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>硬件定时器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-2.UART入门</title>
    <link href="/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.2-ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/"/>
    <url>/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.2-ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍ESP32外设-UART的基本使用</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-UART入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-03-03</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-UART入门"><a href="#ESP32外设-UART入门" class="headerlink" title="ESP32外设-UART入门"></a>ESP32外设-UART入门</h1><h2 id="一、UART介绍"><a href="#一、UART介绍" class="headerlink" title="一、UART介绍"></a>一、UART介绍</h2><p>通用异步接收器&#x2F;发送器 (UART) 属于一种硬件功能，通过使用 RS232、RS422、RS485 等常见异步串行通信接口来处理通信时序要求和数据帧。UART 是实现不同设备之间全双工或半双工数据交换的一种常用且经济的方式。</p><p>ESP32 芯片有 3 个 UART 控制器（也称为端口），每个控制器都有一组相同的寄存器以简化编程并提高灵活性。</p><p>每个 UART 控制器可以独立配置波特率、数据位长度、位顺序、停止位位数、奇偶校验位等参数。所有具备完整功能的 UART 控制器都能与不同制造商的 UART 设备兼容，并且支持红外数据协会 (IrDA) 定义的标准协议。</p><h2 id="二、功能概述"><a href="#二、功能概述" class="headerlink" title="二、功能概述"></a>二、功能概述</h2><p>基本编程流程分为以下几个步骤：</p><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-setting-communication-parameters">设置通信参数</a> - 设置波特率、数据位、停止位等</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-setting-communication-pins">设置通信管脚</a> - 分配连接设备的管脚</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-driver-installation">安装驱动程序</a> - 为 UART 驱动程序分配 ESP32 资源</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-running-uart-communication">运行 UART 通信</a> - 发送&#x2F;接收数据</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-using-interrupts">使用中断</a> - 触发特定通信事件的中断</li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-deleting-driver">删除驱动程序</a> - 如无需 UART 通信，则释放已分配的资源</li></ol><blockquote><p>步骤 1 到 3 为配置阶段，步骤 4 为 UART 运行阶段，步骤 5 和 6 为可选步骤。<br>UART 驱动程序函数通过 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv411uart_port_t" title="uart_port_t"><code>uart_port_t</code></a> 识别不同的 UART 控制器。调用以下所有函数均需此标识。</p></blockquote><h2 id="三、UART简单使用"><a href="#三、UART简单使用" class="headerlink" title="三、UART简单使用"></a>三、UART简单使用</h2><h3 id="1、设置通信参数"><a href="#1、设置通信参数" class="headerlink" title="1、设置通信参数"></a>1、设置通信参数</h3><h4 id="结构体配置："><a href="#结构体配置：" class="headerlink" title="结构体配置："></a>结构体配置：</h4><p>调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv417uart_param_config11uart_port_tPK13uart_config_t" title="uart_param_config"><code>uart_param_config()</code></a> 并向其传递 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv413uart_config_t" title="uart_config_t"><code>uart_config_t</code></a> 结构体，<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv413uart_config_t" title="uart_config_t"><code>uart_config_t</code></a> 结构体应包含所有必要的参数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 定义使用的UART端口为UART_NUM_2，即第三个UART端口</span><br><span class="hljs-type">const</span> <span class="hljs-type">uart_port_t</span> uart_num = UART_NUM_2;<br><br><span class="hljs-comment">// 初始化并配置UART的参数</span><br><span class="hljs-type">uart_config_t</span> uart_config = &#123;<br>    .baud_rate = <span class="hljs-number">115200</span>, <span class="hljs-comment">// 设置波特率为115200，这是数据传输速率的一种度量</span><br>    .data_bits = UART_DATA_8_BITS, <span class="hljs-comment">// 设置数据位为8位，这是每个数据包中的位数</span><br>    .parity = UART_PARITY_DISABLE, <span class="hljs-comment">// 禁用奇偶校验，用于错误检测</span><br>    .stop_bits = UART_STOP_BITS_1, <span class="hljs-comment">// 设置停止位为1，停止位用于标识每个数据包的结束</span><br>    .flow_ctrl = UART_HW_FLOWCTRL_CTS_RTS, <span class="hljs-comment">// 启用CTS/RTS硬件流控制，用于调节数据传输速率，防止数据丢失</span><br>    .rx_flow_ctrl_thresh = <span class="hljs-number">122</span>, <span class="hljs-comment">// 设置接收流控制阈值为122，这与硬件流控制相关</span><br>&#125;;<br><br><span class="hljs-comment">// 使用上述配置参数配置UART端口</span><br><span class="hljs-comment">// ESP_ERROR_CHECK是一个宏，用于检查函数返回的错误码，并在出错时终止程序</span><br>ESP_ERROR_CHECK(uart_param_config(uart_num, &amp;uart_config));<br><br></code></pre></td></tr></table></figure><h4 id="函数分步配置："><a href="#函数分步配置：" class="headerlink" title="函数分步配置："></a>函数分步配置：</h4><p>调用下表中的专用函数，能够单独配置特定参数。如需重新配置某个参数，也可使用这些函数</p><table><thead><tr><th>配置参数</th><th>函数</th></tr></thead><tbody><tr><td>波特率</td><td><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv417uart_set_baudrate11uart_port_t8uint32_t" title="uart_set_baudrate"><code>uart_set_baudrate()</code></a></td></tr><tr><td>传输位</td><td>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv420uart_set_word_length11uart_port_t18uart_word_length_t" title="uart_set_word_length"><code>uart_set_word_length()</code></a> 设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv418uart_word_length_t" title="uart_word_length_t"><code>uart_word_length_t</code></a></td></tr><tr><td>奇偶控制</td><td>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv413uart_parity_t" title="uart_parity_t"><code>uart_parity_t</code></a> 设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv415uart_set_parity11uart_port_t13uart_parity_t" title="uart_set_parity"><code>uart_set_parity()</code></a></td></tr><tr><td>停止位</td><td>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv418uart_set_stop_bits11uart_port_t16uart_stop_bits_t" title="uart_set_stop_bits"><code>uart_set_stop_bits()</code></a> 设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv416uart_stop_bits_t" title="uart_stop_bits_t"><code>uart_stop_bits_t</code></a></td></tr><tr><td>硬件流控模式</td><td>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv421uart_set_hw_flow_ctrl11uart_port_t21uart_hw_flowcontrol_t7uint8_t" title="uart_set_hw_flow_ctrl"><code>uart_set_hw_flow_ctrl()</code></a> 设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv421uart_hw_flowcontrol_t" title="uart_hw_flowcontrol_t"><code>uart_hw_flowcontrol_t</code></a></td></tr><tr><td>通信模式</td><td>调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv413uart_set_mode11uart_port_t11uart_mode_t" title="uart_set_mode"><code>uart_set_mode()</code></a> 设置 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv411uart_mode_t" title="uart_mode_t"><code>uart_mode_t</code></a></td></tr><tr><td>表中每个函数都可使用 <code>_get_</code> 对应项来查看当前设置值。例如，查看当前波特率值，调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv417uart_get_baudrate11uart_port_tP8uint32_t" title="uart_get_baudrate"><code>uart_get_baudrate()</code></a>。</td><td></td></tr></tbody></table><h3 id="2、分配引脚"><a href="#2、分配引脚" class="headerlink" title="2、分配引脚"></a>2、分配引脚</h3><p>通信参数设置完成后，可以配置其他 UART 设备连接的 GPIO 管脚。调用函数 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv412uart_set_pin11uart_port_tiiii" title="uart_set_pin"><code>uart_set_pin()</code></a>，指定配置 Tx、Rx、RTS 和 CTS 信号的 GPIO 管脚编号。如要为特定信号保留当前分配的管脚编号，可传递宏 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#c.UART_PIN_NO_CHANGE" title="UART_PIN_NO_CHANGE"><code>UART_PIN_NO_CHANGE</code></a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// Set UART pins(TX: IO4, RX: IO5, RTS: IO18, CTS: IO19)</span><br>ESP_ERROR_CHECK(uart_set_pin(UART_NUM_2, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>));<br></code></pre></td></tr></table></figure><h3 id="3、安装驱动程序"><a href="#3、安装驱动程序" class="headerlink" title="3、安装驱动程序"></a>3、安装驱动程序</h3><p>通信管脚设置完成后，请调用 <a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#_CPPv419uart_driver_install11uart_port_tiiiP13QueueHandle_ti" title="uart_driver_install"><code>uart_driver_install()</code></a> 安装驱动程序并指定以下参数：</p><ul><li>Tx 环形缓冲区的大小</li><li>Rx 环形缓冲区的大小</li><li>事件队列句柄和大小</li><li>分配中断的标志<br>该函数将为 UART 驱动程序分配所需的内部资源。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">// Setup UART buffered IO with event queue</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> uart_buffer_size = (<span class="hljs-number">1024</span> * <span class="hljs-number">2</span>);<br>QueueHandle_t uart_queue;<br><span class="hljs-comment">// Install UART driver using an event queue here</span><br>ESP_ERROR_CHECK(uart_driver_install(UART_NUM_2, uart_buffer_size, \<br>                                        uart_buffer_size, <span class="hljs-number">10</span>, &amp;uart_queue, <span class="hljs-number">0</span>));<br><br></code></pre></td></tr></table></figure></li></ul><p>此步骤完成后，可连接外部 UART 设备检查通信。</p><blockquote><p>注意：当TX 缓冲区参数填 0 或 NULL 的时候，不使用缓冲区，使用uart_write_bytes()发送操作时，在数据发送之前将会阻塞。</p><p>同样也有不阻塞的函数uart_tx_chars()，它不会为等待TX FIFO有足够的空间而阻塞，而是将填充可用的TX FIFO。此函数返回时，FIFO是满的。</p></blockquote><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c">QueueHandle_t eventQueue;<br><br>uart_driver_install(<br>UART_NUM_2, <span class="hljs-comment">//UART 编号</span><br><span class="hljs-keyword">sizeof</span> rxBuf, <span class="hljs-comment">//Rx 缓冲区大小</span><br><span class="hljs-keyword">sizeof</span> rxBuf, <span class="hljs-comment">//Tx 缓冲区大小</span><br><span class="hljs-number">16</span>, <span class="hljs-comment">//事件队列长度（可以不要，此参数填 0，然后下一个参数填NULL）</span><br>&amp;eventQueue, <span class="hljs-comment">//(QueueHandle_t*)接受被创建的句柄的变量指针，类型为FreeRTOS的队列</span><br><span class="hljs-number">0</span><span class="hljs-comment">//中断分配标志，这里写 0 表示不想分配中断</span><br>);<br><br>uart_set_pin(<br>UART_NUM_2, <span class="hljs-comment">//UART 编号</span><br><span class="hljs-number">19</span>, <span class="hljs-comment">//TX GPIO</span><br><span class="hljs-number">18</span>, <span class="hljs-comment">//RX GPIO</span><br><span class="hljs-number">5</span>, <span class="hljs-comment">//RTS GPIO</span><br><span class="hljs-number">4</span><span class="hljs-comment">//CTS GPIO</span><br>);<br><br></code></pre></td></tr></table></figure><h3 id="3、收发数据"><a href="#3、收发数据" class="headerlink" title="3、收发数据"></a>3、收发数据</h3><p>使用函数<code>uart_write_bytes()</code> 和 <code>uart_read_bytes()</code> 分别进行发送数据以及接收数据。<strong>两个函数的参数均为（UART_NUM，发送内容首地址&#x2F;接受缓冲区地址，长度）</strong></p><p>下面是一个简单的UART通信示例，展示如何使用ESP32进行数据的发送和接收。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/queue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/uart.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_err.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TX_GPIO_NUM 17</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RX_GPIO_NUM 16</span><br><br><span class="hljs-comment">// 配置串口3</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">uart_config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">uart_port_t</span> uart_num = UART_NUM_2;<br><br>    <span class="hljs-type">uart_config_t</span> uart_config = &#123;<br>        .baud_rate = <span class="hljs-number">115200</span>,<br>        .data_bits = UART_DATA_8_BITS,<br>        .parity = UART_PARITY_DISABLE,<br>        .stop_bits = UART_STOP_BITS_1,<br>        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,<br>        .rx_flow_ctrl_thresh = <span class="hljs-number">122</span>,<br>    &#125;;<br><br>    <span class="hljs-comment">// 配置UART参数</span><br>    ESP_ERROR_CHECK(uart_param_config(uart_num, &amp;uart_config));<br><br>    <span class="hljs-comment">// 设置UART引脚</span><br>    ESP_ERROR_CHECK(uart_set_pin(uart_num, TX_GPIO_NUM, RX_GPIO_NUM, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE));<br><br>    <span class="hljs-comment">// 安装UART驱动程序，不使用事件队列</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> uart_buffer_size = (<span class="hljs-number">1024</span> * <span class="hljs-number">2</span>);<br>    ESP_ERROR_CHECK(uart_driver_install(uart_num, uart_buffer_size, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>));<br>&#125;<br><br><span class="hljs-comment">// 串口发送测试</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">uart_send_receive_demo</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">uart_port_t</span> uart_num = UART_NUM_2;<br>    <span class="hljs-type">char</span>* test_str = <span class="hljs-string">&quot;This is a UART test string.\n&quot;</span>;<br>    <span class="hljs-type">uint8_t</span> data[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-comment">// 发送数据</span><br>    uart_write_bytes(uart_num, test_str, <span class="hljs-built_in">strlen</span>(test_str));<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        vTaskDelay(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 等待数据接收</span><br>        <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>        ESP_ERROR_CHECK(uart_get_buffered_data_len(uart_num, (<span class="hljs-type">size_t</span>*)&amp;length));<br>        <span class="hljs-keyword">if</span>(length &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> read_len = uart_read_bytes(uart_num, data, length, pdMS_TO_TICKS(<span class="hljs-number">1000</span>));<br>            <span class="hljs-keyword">if</span>(read_len &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 输出接收到的数据</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Received: %.*s\n&quot;</span>, read_len, data);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    uart_config();<br>    uart_send_receive_demo();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>连接硬件：</p><p><img src="/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.2-ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/f6feb7ee07d7284e6cb91d19578507a.jpg"></p><p>测试接收发送效果：</p><p>发送：</p><p><img src="/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.2-ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/20240303184402.png"></p><p>接收：</p><p><img src="/2024/03/03/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.2-ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-UART%E5%85%A5%E9%97%A8/20240303184431.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/m0_50064262/article/details/119006749">https://blog.csdn.net/m0_50064262/article/details/119006749</a></li><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-setting-communication-parameters">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/uart.html#uart-api-setting-communication-parameters</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>UART</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32外设-1.GPIO入门</title>
    <link href="/2024/02/29/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.1-ESP32%E5%A4%96%E8%AE%BE-GPIO%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-GPIO%E5%85%A5%E9%97%A8/"/>
    <url>/2024/02/29/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.1-ESP32%E5%A4%96%E8%AE%BE-GPIO%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-GPIO%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档介绍GPIO的基本使用。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32外设-GPIO入门</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-29</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32外设-GPIO入门"><a href="#ESP32外设-GPIO入门" class="headerlink" title="ESP32外设-GPIO入门"></a>ESP32外设-GPIO入门</h1><h2 id="一、GPIO介绍"><a href="#一、GPIO介绍" class="headerlink" title="一、GPIO介绍"></a>一、GPIO介绍</h2><p>“通用 IO”或”GPIO”是英文”General-Purpose Input&#x2F;Output Port”的简写，意为通用输入&#x2F;输出接 口。当设置为输入模式时，它可以用于感知外部信号；而设置为输出模式时，则可以用于控制 外部设备。在开发过程中，我们经常使用一些简单的外部模块，如 LED、按键和蜂鸣器等。要 使用这些模块，只需将它们与芯片的 GPIO 连接，然后通过控制 GPIO 的输出&#x2F;读取高低电平即可。</p><p>ESP32 芯片具有 34 个物理 GPIO 管脚（GPIO0 ~ GPIO19、GPIO21 ~ GPIO23、GPIO25 ~ GPIO27 和 GPIO32 ~ GPIO39）。每个管脚都可用作一个通用 IO，或连接一个内部的外设信号。通过 IO MUX、RTC IO MUX 和 GPIO 交换矩阵，可配置外设模块的输入信号来源于任何的 IO 管脚，并且外设模块的输出信号也可连接到任意 IO 管脚。这些模块共同组成了芯片的 IO 控制。</p><h2 id="二、相关函数介绍"><a href="#二、相关函数介绍" class="headerlink" title="二、相关函数介绍"></a>二、相关函数介绍</h2><blockquote><p>具体参考：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/peripherals/gpio.html">GPIO &amp; RTC GPIO</a></p></blockquote><h4 id="gpio-config-函数"><a href="#gpio-config-函数" class="headerlink" title="gpio_config 函数:"></a>gpio_config 函数:</h4><p><code>esp_err_t gpio_config(const gpio_config_t *pGPIOConfig)</code></p><p>该函数用来配置指定管脚的实时配置状态，包括上下拉、输入输出使能、管脚映射等</p><p><code>gpio_config_t</code>  简介:</p><table><thead><tr><th>成员</th><th>类型</th><th>意义</th></tr></thead><tbody><tr><td>pin_bit_mask</td><td>uint64_t</td><td>GPIO pin：使用位掩码设置，每个位对应一个GPIO</td></tr><tr><td>mode</td><td>gpio_mode_t</td><td>GPIO模式：设置输入&#x2F;输出模式</td></tr><tr><td>pull_up_en</td><td>gpio_pullup_t</td><td>GPIO上拉：表示是否启用内部上拉电阻</td></tr><tr><td>pull_down_en</td><td>gpio_pulldown_t</td><td>GPIO下拉：表示是否启用内部下拉电阻</td></tr><tr><td>intr_type</td><td>gpio_int_type_t</td><td>GPIO中断类型</td></tr></tbody></table><h4 id="gpio-set-level-函数"><a href="#gpio-set-level-函数" class="headerlink" title="gpio_set_level 函数"></a>gpio_set_level 函数</h4><p><code>esp_err_t gpio_set_level(gpio_num_t gpio_num, uint32_t level)</code></p><p>该函数用来设置 gpiod 电平状态。</p><h4 id="gpio-get-level-函数"><a href="#gpio-get-level-函数" class="headerlink" title="gpio_get_level 函数"></a>gpio_get_level 函数</h4><p><code>int gpio_get_level(gpio_num_t gpio_num); </code></p><p>gpio_num 用来指向获取那个 IO 的电平，该函数的返回值就是指定 IO 的电平状态 0 或 1</p><h2 id="二、GPIO输出-x2F-输入配置"><a href="#二、GPIO输出-x2F-输入配置" class="headerlink" title="二、GPIO输出&#x2F;输入配置"></a>二、GPIO输出&#x2F;输入配置</h2><p>引用头文件：<code>#include &quot;driver/gpio.h&quot;</code></p><h3 id="1、使用结构体配置："><a href="#1、使用结构体配置：" class="headerlink" title="1、使用结构体配置："></a>1、使用结构体配置：</h3><p>例子：配置GPIO2和4为输出:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">gpio_config_t</span> ioConfig = &#123;<br>.pin_bit_mask = (<span class="hljs-number">1ull</span> &lt;&lt; <span class="hljs-number">2</span>)|(<span class="hljs-number">1ull</span> &lt;&lt; <span class="hljs-number">4</span>),<br>.mode = GPIO_MODE_OUTPUT,<br><span class="hljs-comment">//.....省</span><br><span class="hljs-comment">//  .   ....略</span><br><span class="hljs-comment">//.....号</span><br>&#125;;<br><span class="hljs-comment">//传入gpio_config_t指针</span><br>gpio_config(&amp;ioConfig);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>pin_bit_mask</code>是一个<code>uint64_t</code>类型的变量，有64个二进制位，其中部分位对应这个配置对哪些 GPIO 生效。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 表示此配置对 GPIO2生效，因为这个64位数的第2位（从零开始）为1</span><br>pin_bit_mask = <span class="hljs-number">0b0100</span><br><br><span class="hljs-comment">// 表示此配置对 GPIO0 和 GPIO5 生效，因为第0位和第5位为1</span><br>pin_bit_mask = <span class="hljs-number">0b100001</span><br><br><span class="hljs-comment">// 表示此配置对 GPIO16 和 GPIO 18 生效，采用位运算</span><br>pin_bit_mask = (<span class="hljs-number">1ull</span> &lt;&lt; <span class="hljs-number">16</span>) | (<span class="hljs-number">1ull</span> &lt;&lt; <span class="hljs-number">18</span>)<br></code></pre></td></tr></table></figure><h3 id="2、使用函数单个配置："><a href="#2、使用函数单个配置：" class="headerlink" title="2、使用函数单个配置："></a>2、使用函数单个配置：</h3><p>使用函数配置，就是把结构体法拆成了函数。</p><h4 id="1、设置GPIO方向（输入-或者-输出）"><a href="#1、设置GPIO方向（输入-或者-输出）" class="headerlink" title="1、设置GPIO方向（输入 或者 输出）"></a>1、设置GPIO方向（<strong>输入</strong> 或者 <strong>输出</strong>）</h4><p>调用函数<code>gpio_set_direction(gpio_num_tgpio_num, gpio_mode_tmode)</code></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">GPIO set <span class="hljs-keyword">direction.</span><br><span class="hljs-keyword"></span>Configure GPIO <span class="hljs-keyword">direction,such </span>as output_only,input_only,output_and_input<br>参数:<br>- gpio_num -- Configure GPIO pins number, it <span class="hljs-keyword">should </span><span class="hljs-keyword">be </span>GPIO number. If you want to set <span class="hljs-keyword">direction </span>of e.g. GPIO16, gpio_num <span class="hljs-keyword">should </span><span class="hljs-keyword">be </span>GPIO_NUM_16 (<span class="hljs-number">16</span>);<br>- mode -- GPIO <span class="hljs-keyword">direction</span><br><span class="hljs-keyword"></span>返回:<br>ESP_OK Success<br>ESP_ERR_INVALID_ARG GPIO error<br></code></pre></td></tr></table></figure><h4 id="2、配置为输出时，设置某个GPIO的-输出电平"><a href="#2、配置为输出时，设置某个GPIO的-输出电平" class="headerlink" title="2、配置为输出时，设置某个GPIO的 输出电平"></a>2、配置为<code>输出</code>时，设置某个GPIO的 输出电平</h4><p>调用函数<code>gpio_set_level(gpio_num_t gpio_num, uint32_t level)</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">esp_err_t rtc_gpio_set_level(gpio_num_t gpio_num, uint32_t <span class="hljs-keyword">level</span>)<br><span class="hljs-keyword">Set</span> the RTC IO output <span class="hljs-keyword">level</span>.<br>参数<br>gpio_num <span class="hljs-comment">-- GPIO number (e.g. GPIO_NUM_12)</span><br><span class="hljs-keyword">level</span> <span class="hljs-comment">-- output level</span><br>返回<br>ESP_OK Success<br>ESP_ERR_INVALID_ARG GPIO <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> an RTC IO<br></code></pre></td></tr></table></figure><p>例：GPIO2配置为输出，并输出高电平</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><br>gpio_set_direction(<span class="hljs-number">2</span>, GPIO_MODE_OUTPUT);<br>gpio_set_level(GPIO_NUM_16, <span class="hljs-number">1</span>);<br><br></code></pre></td></tr></table></figure><h4 id="3、在配置为输入模式时，检测GPIO的电平。"><a href="#3、在配置为输入模式时，检测GPIO的电平。" class="headerlink" title="3、在配置为输入模式时，检测GPIO的电平。"></a>3、在配置为<code>输入</code>模式时，检测GPIO的电平。</h4><p>调用函数<code>int gpio_get_level(gpio_num_t gpio_num)</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">GPIO <span class="hljs-keyword">get</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">level</span>.<br>警告:<br><span class="hljs-keyword">If</span> the pad <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> configured <span class="hljs-keyword">for</span> <span class="hljs-keyword">input</span> (<span class="hljs-keyword">or</span> <span class="hljs-keyword">input</span> <span class="hljs-keyword">and</span> output) the returned <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">always</span> <span class="hljs-number">0.</span><br>参数:<br>gpio_num <span class="hljs-comment">-- GPIO number. If you want to get the logic level of e.g. pin GPIO16, gpio_num should be GPIO_NUM_16 (16);</span><br>返回:<br><span class="hljs-number">0</span> the GPIO <span class="hljs-keyword">input</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0</span><br><span class="hljs-number">1</span> the GPIO <span class="hljs-keyword">input</span> <span class="hljs-keyword">level</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>例：将GPIO2配置为输入，当GPIO2电平改变时打印</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> mLevel = <span class="hljs-number">0</span>;<br>gpio_set_direction(<span class="hljs-number">2</span>, GPIO_MODE_INPUT);<br>gpio_get_level(<span class="hljs-number">2</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span> (mLevel != (temp = gpio_get_level(<span class="hljs-number">2</span>)))&#123;<br>mLevel = temp;<br><span class="hljs-keyword">if</span> (temp)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1 Level\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 Level\n&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4、函数配置GPIO内部上下拉电阻"><a href="#4、函数配置GPIO内部上下拉电阻" class="headerlink" title="4、函数配置GPIO内部上下拉电阻"></a>4、函数配置GPIO内部上下拉电阻</h4><p><code>gpio_set_pull_mode()</code>  配置GPIO上拉&#x2F;下拉电阻器。<br><code>gpio_pullup_en()</code>         启用GPIO上的上拉。<br><code>gpio_pullup_dis()</code>       禁用GPIO上的上拉。<br><code>gpio_pulldown_en()</code><br><code>gpio_pulldown_dis()</code>  </p><p><code>gpio_set_pull_mode()</code> :</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">参数<br>gpio_num <span class="hljs-comment">-- GPIO number. If you want to set pull up or down mode for e.g. GPIO16, gpio_num should be GPIO_NUM_16 (16);</span><br>pull <span class="hljs-comment">-- GPIO pull up/down mode.</span><br>返回<br>ESP_OK Success<br>ESP_ERR_INVALID_ARG : <span class="hljs-keyword">Parameter</span> <span class="hljs-literal">error</span><br></code></pre></td></tr></table></figure><p>pull的几种模式：</p><ol><li><code>GPIO_PULLUP_ONLY</code> —— 仅上拉  </li><li><code>GPIO_PULLDOWN_ONLY</code> —— 仅下拉  </li><li><code>GPIO_PULLUP_PULLDOWN</code> —— 全部启用  </li><li><code>GPIO_FLOATING</code> —— 悬空这个 GPIO</li></ol><p>注：只有同时支持输入和输出的引脚集成了上拉和下拉电阻。（仅输入的GPIO 34 至 GPIO 39不需要）</p><h2 id="二、GPIO输出-x2F-输入实例"><a href="#二、GPIO输出-x2F-输入实例" class="headerlink" title="二、GPIO输出&#x2F;输入实例"></a>二、GPIO输出&#x2F;输入实例</h2><p>下面我们使用上面提到的函数，实现按键按下LED灯亮：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_GPIO GPIO_NUM_2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUTTON_GPIO GPIO_NUM_0</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 初始化LED GPIO为输出模式</span><br>    gpio_set_direction(LED_GPIO, GPIO_MODE_OUTPUT);<br><br>    <span class="hljs-comment">// 初始化按钮GPIO为输入模式</span><br>    gpio_set_direction(BUTTON_GPIO, GPIO_MODE_INPUT);<br>    gpio_set_pull_mode(BUTTON_GPIO, GPIO_PULLUP_ONLY);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 读取按钮状态</span><br>        <span class="hljs-type">int</span> button_state = gpio_get_level(BUTTON_GPIO);<br><br>        <span class="hljs-comment">// 如果按钮被按下（逻辑低电平），点亮LED</span><br>        <span class="hljs-keyword">if</span>(button_state == <span class="hljs-number">0</span>) &#123;<br>            gpio_set_level(LED_GPIO, <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            gpio_set_level(LED_GPIO, <span class="hljs-number">0</span>);<br>        &#125;<br><br>        vTaskDelay(<span class="hljs-number">10</span> / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>效果：按下LED亮，代码见：</p><p><a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/03.peripheral/gpio">https://github.com/DuRuofu/ESP32_Learning/tree/master/03.peripheral/gpio</a></p><p><img src="/2024/02/29/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/03.ESP%E5%A4%96%E8%AE%BE%E5%85%A5%E9%97%A8/3.1-ESP32%E5%A4%96%E8%AE%BE-GPIO%E5%85%A5%E9%97%A8/ESP32%E5%A4%96%E8%AE%BE-GPIO%E5%85%A5%E9%97%A8/20240303160738.png"></p><h2 id="二、GPIO中断配置："><a href="#二、GPIO中断配置：" class="headerlink" title="二、GPIO中断配置："></a>二、GPIO中断配置：</h2><p>通过<code>gpio_config()</code>函数传递一个结构体<code>gpio_config_t</code>指针，在<code>gpio_config_t</code>结构体中声明中断类型。或通过函数<code>gpio_set_intr_type()</code>函数</p><blockquote><p>必须将GPIO配置为<code>包含输入</code>的模式，比如 <code>GPIO_MODE_INPUT</code> 或 <code>GPIO_MODE_INPUT_OUTPUT</code> 等。</p></blockquote><p> <code>gpio_set_intr_type()</code>函数介绍：</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi">GPIO <span class="hljs-keyword">set</span> <span class="hljs-keyword">interrupt</span> trigger <span class="hljs-keyword">type</span>.<br>参数<br>gpio_num -- GPIO number. <span class="hljs-keyword">If</span> you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">set</span> the trigger <span class="hljs-keyword">type</span> <span class="hljs-keyword">of</span> e.g. <span class="hljs-keyword">of</span> GPIO16, gpio_num should be GPIO_NUM_16 (<span class="hljs-number">16</span>);<br>intr_type -- <span class="hljs-keyword">Interrupt</span> <span class="hljs-keyword">type</span>, select from gpio_int_type_t<br>返回<br>ESP_OK Success<br>ESP_ERR_INVALID_ARG Parameter error<br></code></pre></td></tr></table></figure><h4 id="配置中断示例："><a href="#配置中断示例：" class="headerlink" title="配置中断示例："></a>配置中断示例：</h4><p>使用结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">gpio_config_t</span> ioConfig = &#123;<br><span class="hljs-comment">//..... = ... ,//省略</span><br><span class="hljs-comment">//..... = ... ,//省略</span><br>.intr_type = GPIO_INTR_NEGEDGE,<span class="hljs-comment">//本例中设置为下降沿触发中断</span><br>.pull_down_en = <span class="hljs-number">1</span>,<span class="hljs-comment">//要触发下降沿中断，所以要允许下拉</span><br>&#125;;<br>gpio_config(&amp;ioConfig);<br></code></pre></td></tr></table></figure><p>使用函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">gpio_set_intr_type(<span class="hljs-number">2</span>, GPIO_INTR_NEGEDGE);<br></code></pre></td></tr></table></figure><h4 id="响应中断："><a href="#响应中断：" class="headerlink" title="响应中断："></a>响应中断：</h4><p>抛开原理不谈，我们需要做的是写一个函数，让CPU在对应中断触发时执行这个函数即可。</p><h5 id="中断服务函数"><a href="#中断服务函数" class="headerlink" title="中断服务函数"></a>中断服务函数</h5><p>首先是中断服务函数，我们需要创建一个静态的，带有<code>IRAM_ATTR</code>宏的函数作为<code>中断服务程序 Handler</code></p><blockquote><p>原因是GPIO的中断在IRAM中工作。这样的好处是在flash禁用的情况下也可以响应中断。且速度更快，对于这种频繁触发的中断是有利的。但是这个中断也因此无法使用<code>printf</code>等串口打印工作，需要转入其他Task中执行,参考<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/system/intr_alloc.html">中断分配</a></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 声明一个用于处理GPIO中断的函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> IRAM_ATTR <span class="hljs-title function_">gpio_isr_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> &#123;<br>    <span class="hljs-comment">// 读取按钮状态并设置LED</span><br>    <span class="hljs-type">int</span> button_state = gpio_get_level(BUTTON_GPIO);<br>    gpio_set_level(LED_GPIO, button_state == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="绑定中断服务函数"><a href="#绑定中断服务函数" class="headerlink" title="绑定中断服务函数"></a>绑定中断服务函数</h5><p>为某个GPIO口设置<code>中断服务程序 Handler</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">gpio_install_isr_service</span>(<span class="hljs-number">0</span>); <br><span class="hljs-built_in">gpio_isr_handler_add</span>(<span class="hljs-number">18</span>, intrHandler, NULL);<br></code></pre></td></tr></table></figure><p>函数详解：</p><p><code>esp_err_t gpio_install_isr_service(int intr_alloc_flags);</code></p><ul><li><strong>功能</strong>：安装GPIO中断服务。这个服务允许你为多个GPIO引脚注册中断处理回调函数。这个函数只需要在第一次设置GPIO中断时被调用一次，用于初始化中断服务。</li><li><strong>参数</strong>：<ul><li><code>intr_alloc_flags</code>：中断分配标志，用于指定中断的分配行为。对于大多数应用，传递<code>0</code>作为参数即可。如果需要更精细的控制（如指定中断的CPU核心），可以使用<code>ESP_INTR_FLAG_*</code>系列宏定义。</li></ul></li><li><strong>返回值</strong>：执行结果，<code>ESP_OK</code>表示成功，其他值表示错误。</li></ul><p><code>esp_err_t gpio_isr_handler_add(gpio_num_t gpio_num, gpio_isr_t isr_handler, void* args);</code></p><ul><li><strong>功能</strong>：为指定的GPIO引脚添加中断处理函数。当指定的GPIO引脚发生配置的中断事件时（例如电平变化），注册的回调函数将被调用。</li><li><strong>参数</strong>：<ul><li><code>gpio_num</code>：GPIO引脚号，指定要为其添加中断处理函数的GPIO引脚。</li><li><code>isr_handler</code>：中断服务例程（ISR），即当GPIO引脚触发中断时要调用的回调函数。</li><li><code>args</code>：传递给中断处理函数的参数，可以是任意类型的指针。在回调函数中，你可以通过这个参数获取额外的上下文信息。</li></ul></li></ul><h4 id="中断案例："><a href="#中断案例：" class="headerlink" title="中断案例："></a>中断案例：</h4><p>将刚才的按键点灯修改为中断模式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_GPIO GPIO_NUM_2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUTTON_GPIO GPIO_NUM_0</span><br><br><span class="hljs-comment">// 声明一个用于处理GPIO中断的函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> IRAM_ATTR <span class="hljs-title function_">gpio_isr_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg)</span> &#123;<br>    <span class="hljs-comment">// 读取按钮状态并设置LED</span><br>    <span class="hljs-type">int</span> button_state = gpio_get_level(BUTTON_GPIO);<br>    gpio_set_level(LED_GPIO, button_state == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// 初始化LED GPIO为输出模式</span><br>    gpio_set_direction(LED_GPIO, GPIO_MODE_OUTPUT);<br><br>    <span class="hljs-comment">// 初始化按钮GPIO为输入模式，并设置为上拉</span><br>    gpio_set_direction(BUTTON_GPIO, GPIO_MODE_INPUT);<br>    gpio_set_pull_mode(BUTTON_GPIO, GPIO_PULLUP_ONLY);<br><br>    <span class="hljs-comment">// 安装GPIO服务</span><br>    gpio_install_isr_service(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 配置GPIO中断类型，并注册中断服务函数</span><br>    gpio_set_intr_type(BUTTON_GPIO, GPIO_INTR_ANYEDGE);<br>    gpio_isr_handler_add(BUTTON_GPIO, gpio_isr_handler, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 在中断模式下，主循环可以执行其他任务或进入睡眠状态</span><br>        vTaskDelay(portMAX_DELAY); <span class="hljs-comment">// 使用portMAX_DELAY使任务永久挂起，直到中断唤醒</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注：中断程序要保持简短，不能执行耗时的工作，所以我们一般将中断服务转入其他Task中执行，这部分涉及FreeRTOS，这里不再展开叙述</p></blockquote><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/m0_50064262/article/details/115189865">https://blog.csdn.net/m0_50064262/article/details/115189865</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>基础外设</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>GPIO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用IP核实现DDS</title>
    <link href="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/"/>
    <url>/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>使用IP核实现DDS</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-23</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="使用IP核实现DDS"><a href="#使用IP核实现DDS" class="headerlink" title="使用IP核实现DDS"></a>使用IP核实现DDS</h1><h2 id="一、新建block-design原理图"><a href="#一、新建block-design原理图" class="headerlink" title="一、新建block design原理图"></a>一、新建block design原理图</h2><p>添加DDS IP核：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224103643.png"></p><h2 id="二、配置DDS-IP核"><a href="#二、配置DDS-IP核" class="headerlink" title="二、配置DDS IP核"></a>二、配置DDS IP核</h2><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224120346.png"></p><h3 id="第一页：基础配置"><a href="#第一页：基础配置" class="headerlink" title="第一页：基础配置"></a>第一页：基础配置</h3><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224120944.png"></p><h4 id="1：配置选项"><a href="#1：配置选项" class="headerlink" title="1：配置选项"></a>1：配置选项</h4><p>三种模式可选（相位发生器+sin&#x2F;cos波形发生器、仅有相位发生器、仅有sin&#x2F;cos波形发生器）；</p><h4 id="2：运行时钟aclk；"><a href="#2：运行时钟aclk；" class="headerlink" title="2：运行时钟aclk；"></a>2：运行时钟aclk；</h4><p>100 MHz工作时钟，即100MHz采样率。</p><h4 id="3：通道个数；"><a href="#3：通道个数；" class="headerlink" title="3：通道个数；"></a>3：通道个数；</h4><p>设为1，单通道模式，通道的采样频率等于采样时钟100MHz，当设为多个通道时，每个通道的采样率为工作时钟&#x2F;通道数，比如4通道100MHz时钟，每个通道采样率25MHz。</p><h4 id="4：操作模式；"><a href="#4：操作模式；" class="headerlink" title="4：操作模式；"></a>4：操作模式；</h4><p><strong>Standard标准模式（常用）</strong>，<strong>Rasterized栅格模式</strong>。两种情况下，输出的频率和频率分辨率、相位增量等参量的计算方式不同，具体参见Xilinx的PG141第14~18页。</p><p>Standard Mode 和 Rasterized Mode在实现指定频率、幅度的信号时，输出没有太大的差别，两者均能满足要求，一般使用Standard配置方便。</p><p><strong>主要的区别</strong>：</p><p>Standard模式下计算出来的相位增量可能是小数，而在FPGA中要对<strong>相位进行截断取整</strong>，存在相位误差，对噪声要求较高的场合，可以使用8处的噪声整形配置来弥补，使用<strong>相位抖动（Phase Dithering）</strong>或者<strong>泰勒级数纠正（Taylor Series Correct）</strong>来<strong>补偿相位误差</strong>；</p><p><strong>Rasterized Mode配置下，相位增量一定是整数，不存在截断效应</strong>，没有Standard模式下的时间基抖动。</p><h4 id="5：参数选项（System-parameters、Hardware-parameters）"><a href="#5：参数选项（System-parameters、Hardware-parameters）" class="headerlink" title="5：参数选项（System parameters、Hardware parameters）"></a>5：参数选项（System parameters、Hardware parameters）</h4><p>（1） System parameters</p><p>（2） Hardware parameters</p><p>6、7、8处配置系统参数System parameters，其中：</p><h4 id="6：配置SFDR无杂散动态范围"><a href="#6：配置SFDR无杂散动态范围" class="headerlink" title="6：配置SFDR无杂散动态范围"></a>6：配置SFDR无杂散动态范围</h4><p><strong>SFDR（Spurious Free Dynamic Range，无杂散动态范围），对应幅度</strong>，对应M_AXIS_DATA通道，SFDR越大，用于表示幅度的数据的位宽越大；</p><p>如下图所示计算输出位宽，当使用SFDR &#x3D; 96 dB，配置8处的噪声整形位None或者Dithering时，输出位宽位96&#x2F;6&#x3D;16位，向上取整后为16位；使用SFDR &#x3D; 95 dB，95&#x2F;6&#x3D;15.83，向上取整为16位。</p><h4 id="7：配置频率分辨率"><a href="#7：配置频率分辨率" class="headerlink" title="7：配置频率分辨率"></a>7：配置频率分辨率</h4><p>对应相位的增量配置、位宽，对应M_AXIS_PHASE通道，频率分辨率越小，用于表示相位的数据的位宽越大；</p><h4 id="8：配置噪声整形"><a href="#8：配置噪声整形" class="headerlink" title="8：配置噪声整形"></a>8：配置噪声整形</h4><p>4处配置成Standard标准模式时才会使用噪声整形，Auto根据设计的SFDR参数自动选择是否使用整形；None不整形；Phase Dithering相位抖动，在使用相位截断技术时，产生随机的噪声来使得量化误差随机；Taylor Series Correct 泰勒级数校正；</p><p>4处配置成Rasterized时，不存在相位误差，只能配置None。</p><p><strong>For virtually all applications, the preferred implementation is the dithered DDS.</strong></p><p><strong>对于绝大多数的应用，首选的是带有相位抖动补偿的DDS。</strong></p><p><strong>相位抖动用于提高SFDR，但代价是增加底噪。</strong></p><h4 id="9：Hardware-parameters"><a href="#9：Hardware-parameters" class="headerlink" title="9：Hardware parameters"></a>9：Hardware parameters</h4><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224121016.png"></p><p>这种模式下直接配置输出的位宽，但是具体输出对应的SFDR和频率分辨率会在Summary中体现，也可以自行计算。</p><h4 id="10：最终配置如下："><a href="#10：最终配置如下：" class="headerlink" title="10：最终配置如下："></a>10：最终配置如下：</h4><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224121238.png"></p><h3 id="第二页：具体实现"><a href="#第二页：具体实现" class="headerlink" title="第二页：具体实现"></a>第二页：具体实现</h3><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224121350.png"></p><h4 id="1：相位增量是否支持可编程配置"><a href="#1：相位增量是否支持可编程配置" class="headerlink" title="1：相位增量是否支持可编程配置"></a>1：相位增量是否支持可编程配置</h4><p>Fixed是固定相位增量，DDS运行过程中不可更改，即对应不可变频率；</p><p>Programmable可编程，选中后出现配置接口，可在DDS运行过程中随时写入频率控制字改变输出波形的频率，用于偶尔改变频率；</p><p><strong>Streaming应用于频繁改变频率，或者FM频率调制</strong>；</p><h4 id="2：相位偏移是否支持可编程配置"><a href="#2：相位偏移是否支持可编程配置" class="headerlink" title="2：相位偏移是否支持可编程配置"></a>2：相位偏移是否支持可编程配置</h4><p>None不支持；</p><p>Fixed固定相位偏移；</p><p>Programmable可编程配置（偶尔改变）；</p><p><strong>Streaming经常改变，应用于相位调制；</strong></p><h4 id="3：输出波形选择"><a href="#3：输出波形选择" class="headerlink" title="3：输出波形选择"></a>3：输出波形选择</h4><p>Sine只输出sin波形；Cosine输出cos波形；两个的位宽均为第一页设置的数据位宽，<strong>Sine and Cosine同时输出sin和cos波形，其中高位表示sin，低位表示cos，总的数据位宽加倍</strong>；</p><h4 id="4：极性选择"><a href="#4：极性选择" class="headerlink" title="4：极性选择"></a>4：极性选择</h4><p>sin和cos波形默认使用的是有符号数，勾选相应的选项后，正负取反；</p><h4 id="5：幅度模式"><a href="#5：幅度模式" class="headerlink" title="5：幅度模式"></a>5：幅度模式</h4><p>Full Range：全精度（全范围），针对通信应用，需要最大振幅，但由于自动增益控制导致振幅的值不那么重要的场合，输出幅度接近1；</p><p><strong>Unit Cycle：单位圆</strong>，用于对DDS输出振幅值要求很高的应用，<strong>比如产生FFT旋转因子</strong>。单位圆时，DDS输出幅值为半全量程(即取值范围为01000..(+ 0.5)。110000 . .(-0.5))。</p><h4 id="6：是否输出相位信息"><a href="#6：是否输出相位信息" class="headerlink" title="6：是否输出相位信息"></a>6：是否输出相位信息</h4><p>勾选后含有相位输出通道，不勾选时只输出幅度信息M_AXIS_DATA；</p><h4 id="7：使用的存储资源类型"><a href="#7：使用的存储资源类型" class="headerlink" title="7：使用的存储资源类型"></a>7：使用的存储资源类型</h4><p>Auto由具体所需的资源决定，资源较少时使用DROM，资源多时选择BROM；Distribute ROM选择分布式ROM（DROM），Block ROM选择块ROM资源（BROM）；</p><h4 id="8：综合优化策略"><a href="#8：综合优化策略" class="headerlink" title="8：综合优化策略"></a>8：综合优化策略</h4><p>Area是面积优先，尽可能节省资源用量（LUT、FF等），Speed速度优先，尽可能提升性能；</p><h4 id="9：DSP48资源的使用策略"><a href="#9：DSP48资源的使用策略" class="headerlink" title="9：DSP48资源的使用策略"></a>9：DSP48资源的使用策略</h4><p>Minimal尽可能少用，节省资源，Maximal尽可能多用，提高性能；</p><h4 id="10：最终配置如下：-1"><a href="#10：最终配置如下：-1" class="headerlink" title="10：最终配置如下："></a>10：最终配置如下：</h4><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224133256.png"></p><h3 id="第三页：总线配置"><a href="#第三页：总线配置" class="headerlink" title="第三页：总线配置"></a>第三页：总线配置</h3><p>单通道模式下，总线的配置只包含可选的输出信号的Ready。多通道模式下，通道可选是否包含tlast等信号。</p><h4 id="1：输出ready信号"><a href="#1：输出ready信号" class="headerlink" title="1：输出ready信号"></a>1：输出ready信号</h4><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224133515.png"></p><p>选中则输出的2个通道中增加tready信号（可选），根据<strong>AXI_Stream总线协议</strong>的规则，<strong>由后级接收模块输入一个ready信号（高电平），表示已经准备好接收DDS输出，此时DDS才能输出</strong>；</p><h4 id="2：延时配置"><a href="#2：延时配置" class="headerlink" title="2：延时配置"></a>2：延时配置</h4><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224133551.png"></p><h3 id="第四页-输出频率配置"><a href="#第四页-输出频率配置" class="headerlink" title="第四页 输出频率配置"></a>第四页 输出频率配置</h3><p>配置各通道的输出频率，在第一页中只使用了1个Channel，所以此处只能配置一个通道，直接配置输出频率，单位MHz，比如0.02MHz；</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224133736.png"></p><h3 id="第五页：总结"><a href="#第五页：总结" class="headerlink" title="第五页：总结"></a>第五页：总结</h3><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224133758.png"></p><h2 id="三、生成项目文件"><a href="#三、生成项目文件" class="headerlink" title="三、生成项目文件"></a>三、生成项目文件</h2><p>进行综合</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224134320.png"></p><p>生成顶层文件：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224134613.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224134634.png"></p><h2 id="四、仿真测试"><a href="#四、仿真测试" class="headerlink" title="四、仿真测试"></a>四、仿真测试</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> tb_dds_ip();<br><br><span class="hljs-comment">// 定义信号</span><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]M_AXIS_DATA_0_tdata;<br><span class="hljs-keyword">reg</span> M_AXIS_DATA_0_tready;<br><span class="hljs-keyword">wire</span> M_AXIS_DATA_0_tvalid;<br><span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>]M_AXIS_PHASE_0_tdata;<br><span class="hljs-keyword">reg</span> M_AXIS_PHASE_0_tready;<br><span class="hljs-keyword">wire</span> M_AXIS_PHASE_0_tvalid;<br><span class="hljs-keyword">reg</span> aclk_0;<br><br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    aclk_0 = <span class="hljs-number">0</span>;<br>    M_AXIS_DATA_0_tready = <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-comment">// 使能数据通道</span><br>    M_AXIS_PHASE_0_tready = <span class="hljs-number">1&#x27;b1</span>;<span class="hljs-comment">// 使能相位通道</span><br><br>    #<span class="hljs-number">5000</span>;<br>    <span class="hljs-built_in">$stop</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 时钟</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">5</span> aclk_0 = ~aclk_0; <span class="hljs-comment">// 时钟周期为10ns 100MHz</span><br><br><br><span class="hljs-comment">// 例化DDS顶层模块</span><br>dds_wrapper dds_wrapper<br>   (<br>    <span class="hljs-variable">.M_AXIS_DATA_0_tdata</span>(M_AXIS_DATA_0_tdata),<br>    <span class="hljs-variable">.M_AXIS_DATA_0_tready</span>(M_AXIS_DATA_0_tready),<br>    <span class="hljs-variable">.M_AXIS_DATA_0_tvalid</span>(M_AXIS_DATA_0_tvalid),<br>    <span class="hljs-variable">.M_AXIS_PHASE_0_tdata</span>(M_AXIS_PHASE_0_tdata),<br>    <span class="hljs-variable">.M_AXIS_PHASE_0_tready</span>(M_AXIS_PHASE_0_tready),<br>    <span class="hljs-variable">.M_AXIS_PHASE_0_tvalid</span>(M_AXIS_PHASE_0_tvalid),<br>    <span class="hljs-variable">.aclk_0</span>(aclk_0)<br>    );<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>仿真结果：</p><p>仿真时注意DDSIP核输出的是有符号数，因此需要将DDS输出的数据设置成有符号数，即将仿真数据radix为signed decimal<br><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/%E4%BD%BF%E7%94%A8IP%E6%A0%B8%E5%AE%9E%E7%8E%B0DDS/20240224140908.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.xilinx.com/v/u/en-US/pg141-dds-compiler">https://docs.xilinx.com/v/u/en-US/pg141-dds-compiler</a></li><li><a href="https://www.bilibili.com/video/BV1zh411r76w/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1zh411r76w/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>FPGA</category>
      
      <category>vivado</category>
      
      <category>DDS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>vivado</tag>
      
      <tag>DDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA使用MicroBlaze软核</title>
    <link href="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/"/>
    <url>/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>FPGA使用microblaze软核</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-23</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="FPGA使用MicroBlaze软核"><a href="#FPGA使用MicroBlaze软核" class="headerlink" title="FPGA使用MicroBlaze软核"></a>FPGA使用MicroBlaze软核</h1><h2 id="一、什么是MicroBlaze"><a href="#一、什么是MicroBlaze" class="headerlink" title="一、什么是MicroBlaze"></a>一、什么是MicroBlaze</h2><p>MicroBlaze 是 Xilinx 公司提供的一款 32&#x2F;64 位软核嵌入式处理器，是一款高度灵活可配置的易用型处理器， 它能够利用 FPGA 内部通用资源和相关 IP 核，实现可编程片上系统（SOPC）的设计。该处理器采用的是32 位 RISC（Reduced Insrtction System Computer）优化结构和 Harvard 总线结构，广泛适用于 Spartan、 Virtex 和 Artix 等系列的 FPGA。</p><p>MicroBlaze是基于Xilinx公司FPGA的微处理器IP核·和其它外设IP核一起·可以完成可编程系统芯片(SOPC)的设计。MicroBlaze处理器采用RISC架构和哈佛结构的32位指令和数据总线·可以全速执行存储在片上存储器和外部存储器中的程序,并访问其数据。MicroBlaze可以响应软件和硬件中断·进行异常处理·通过外加控制逻辑·可以扩展外部中断。利用微处理器调试模块(MDM)IP核·可通过]TAG接口来调试处理器系统。多个MicroBlaze处理器可以用1个MDM来完成多处理器调试。</p><p>FPGA是可编程的硬件逻辑电路·microblaze是一种处理器CPU电路·使用microblaze，相当于就是在FPGA内部做了一个CPU在里面，可以用C语言写程序·在这个CPU上跑C语言的软件程序，FPGA偏向逻辑·但是做控制比较麻烦，用CPU跑C程序控制比较方便。这就是嵌入式系统，包括嵌入式硬件系统部分以及运行在其硬件的嵌入式软件。因此嵌入式系统的开发流程需要分为嵌入式硬件与软件两个部分。在FPGA中通过FPGA内部逻辑资源搭建了嵌入式硬件系统，而在其中的CPU核上需要编写嵌入式程序。</p><h2 id="二、使用FPGA进行嵌入式设计"><a href="#二、使用FPGA进行嵌入式设计" class="headerlink" title="二、使用FPGA进行嵌入式设计"></a>二、使用FPGA进行嵌入式设计</h2><p>在Vivado中通常使用Vivado IP核集成器环境来搭建嵌入式系统硬件平台使用Vivado SDK （或者Vitis）来编写、编译以及调试嵌入式系统的软件部分。</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223214141.png"></p><h4 id="2-1-嵌入式硬件平台搭建"><a href="#2-1-嵌入式硬件平台搭建" class="headerlink" title="2.1 嵌入式硬件平台搭建"></a>2.1 嵌入式硬件平台搭建</h4><p>嵌入式硬件平台搭建的流程与普通的FPGA设计并无太大区别·仍然是设计输入、设计综合、设计实现等主要步骤。在硬件平台设计实现并生成Bt文件后，需要执行硬件平台导出的操作，即将所搭建的硬件平台的信息导出至Vivado SDK中，以便在SDK中继续进行软件开发</p><h4 id="2-2-嵌入式系统软件设计"><a href="#2-2-嵌入式系统软件设计" class="headerlink" title="2.2 嵌入式系统软件设计"></a>2.2 嵌入式系统软件设计</h4><p>在Vivado将硬件平台设计导出至SDK（或者Vitis）中后，在SDK中可针对硬件平台进行创建对应的软件应用工程以及BSP板级支持包工程。SDK工具会根据具体的硬件平台信息将对应硬件模块得软件提取至BSP工程中·用户可方便地使用BSP中所提供的驱动函数来进行软件开发。SDK中可以进行软件的编写调试以及FPGA平台的硬件配置。</p><h2 id="二、实际使用"><a href="#二、实际使用" class="headerlink" title="二、实际使用"></a>二、实际使用</h2><h3 id="2-1-整体步骤"><a href="#2-1-整体步骤" class="headerlink" title="2.1 整体步骤"></a>2.1 整体步骤</h3><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223212458.png"></p><h3 id="2-2-设计框图"><a href="#2-2-设计框图" class="headerlink" title="2.2 设计框图"></a>2.2 设计框图</h3><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223212637.png"></p><h3 id="2-3-依赖介绍"><a href="#2-3-依赖介绍" class="headerlink" title="2.3 依赖介绍"></a>2.3 依赖介绍</h3><ol><li>AXI总线，可以参考这篇笔记：<a href="../../%E9%80%9A%E8%AE%AF%E6%80%BB%E7%BA%BF/AXI/AXI%E6%80%BB%E7%BA%BF.md">AXI总线</a></li><li>AXI GPIO IP核简介：PL部分核ARM通信，依靠的就是AXI总线，添加AXI GPIO IP核，利用PL的资源来扩充GPIO资源</li><li>AX-uartlite IP核简介：AXI-uartlite是Xilinx提供的驱动串口的IP核，用AXI-Lite总线接口和用户进行交互，速度根据不同的芯片调整，总的来说使用比较简单，收发数据也比自己写的串口驱动程序要稳定</li></ol><h3 id="2-4-实际设计"><a href="#2-4-实际设计" class="headerlink" title="2.4 实际设计"></a>2.4 实际设计</h3><h5 id="2-4-1-新建block-design设计"><a href="#2-4-1-新建block-design设计" class="headerlink" title="2.4.1 新建block design设计"></a>2.4.1 新建block design设计</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215023.png"></p><h5 id="2-4-2-调用microblaze-IP核"><a href="#2-4-2-调用microblaze-IP核" class="headerlink" title="2.4.2 调用microblaze IP核"></a>2.4.2 调用microblaze IP核</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215129.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215205.png"></p><h5 id="2-4-3-调用其他-IP核"><a href="#2-4-3-调用其他-IP核" class="headerlink" title="2.4.3 调用其他 IP核"></a>2.4.3 调用其他 IP核</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215317.png"></p><h6 id="1-配置GPIO-IP核"><a href="#1-配置GPIO-IP核" class="headerlink" title="1. 配置GPIO IP核"></a>1. 配置GPIO IP核</h6><p>修改名称：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215522.png"></p><p>位宽和输出配置:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215637.png"></p><h6 id="2-配置串口-IP核"><a href="#2-配置串口-IP核" class="headerlink" title="2. 配置串口 IP核"></a>2. 配置串口 IP核</h6><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215835.png"></p><h5 id="2-4-4-自动布线"><a href="#2-4-4-自动布线" class="headerlink" title="2.4.4 自动布线"></a>2.4.4 自动布线</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223215959.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220022.png"></p><p>效果:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220123.png"></p><h6 id="1-修改和调整"><a href="#1-修改和调整" class="headerlink" title="1. 修改和调整:"></a>1. 修改和调整:</h6><p>差分时钟改为单端时钟:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220257.png"></p><p>去掉复位和锁信号</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220421.png"></p><p>右键clk_in 引出引脚:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220530.png"></p><p>效果:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220543.png"></p><p>添加常量IP核 提供始终为一的复位信号(可省)<br><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220815.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223220915.png"></p><h6 id="2-再次连线"><a href="#2-再次连线" class="headerlink" title="2. 再次连线"></a>2. 再次连线</h6><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221040.png"></p><p>选择所有:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221104.png"></p><p>结果:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221141.png"></p><p>可以重新布局:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221307.png"></p><p>效果:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221349.png"></p><h5 id="2-4-5-生成HDL-WAPPER"><a href="#2-4-5-生成HDL-WAPPER" class="headerlink" title="2.4.5 生成HDL_WAPPER"></a>2.4.5 生成HDL_WAPPER</h5><p>综合-生成IP的相关文件:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221656.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223221805.png"></p><p>好了之后选择生成顶层文件:<br><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223222121.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223222130.png"></p><p>生成成功:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223222213.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223222230.png"></p><h5 id="2-4-6-综合实现管脚约束"><a href="#2-4-6-综合实现管脚约束" class="headerlink" title="2.4.6 综合实现管脚约束"></a>2.4.6 综合实现管脚约束</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223222412.png"></p><p>进行引脚约束:(硬件平台: 正点原子达芬奇PRO)</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223223022.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223223417.png"></p><p>综合工程</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223223535.png"></p><p>继续布局布线生成网表:</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223223621.png"></p><h5 id="2-4-7-生成bit文件"><a href="#2-4-7-生成bit文件" class="headerlink" title="2.4.7 生成bit文件"></a>2.4.7 生成bit文件</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223230033.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223230803.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223230832.png"></p><h5 id="2-4-8-使用SDK"><a href="#2-4-8-使用SDK" class="headerlink" title="2.4.8 使用SDK"></a>2.4.8 使用SDK</h5><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223231235.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240223231250.png"></p><h6 id="1、新建SDK工程"><a href="#1、新建SDK工程" class="headerlink" title="1、新建SDK工程"></a>1、新建SDK工程</h6><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224094056.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224094206.png"></p><h6 id="2、使用Hello-World"><a href="#2、使用Hello-World" class="headerlink" title="2、使用Hello World"></a>2、使用Hello World</h6><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224094227.png"></p><p>如下：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224094421.png"></p><p>编译代码：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224094800.png"></p><p>编译成功如下：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224094816.png"></p><p>下载文件到板卡：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224095357.png"></p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224095437.png"></p><p>下载完成：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224095542.png"></p><p>运行代码：</p><p><img src="/2024/02/24/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E4%BD%BF%E7%94%A8MicroBlaze%E8%BD%AF%E6%A0%B8%E6%B5%81%E7%A8%8B/20240224095701.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://www.bilibili.com/video/BV1p54y1B7PY/?spm_id_from=333.880.my_history.page.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1p54y1B7PY/?spm_id_from=333.880.my_history.page.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://blog.csdn.net/weixin_39789553/article/details/118105365">https://blog.csdn.net/weixin_39789553/article/details/118105365</a></li><li><a href="https://www.bilibili.com/video/BV1aK4y147qp/?spm_id_from=333.788.recommend_more_video.-1&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1aK4y147qp/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://www.bilibili.com/video/BV16K411p7Wr/?spm_id_from=333.788.recommend_more_video.-1&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV16K411p7Wr/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>FPGA</category>
      
      <category>vivado</category>
      
      <category>MicroBlaze</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>vivado</tag>
      
      <tag>MicroBlaze</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDF开发入门-4.ESP-IDF组件管理器</title>
    <link href="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <url>/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文介绍ESP-IDF组件管理器的使用</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP-IDF组件管理器</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-18</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP-IDF组件管理器"><a href="#ESP-IDF组件管理器" class="headerlink" title="ESP-IDF组件管理器"></a>ESP-IDF组件管理器</h1><h2 id="一、啥是组件管理器"><a href="#一、啥是组件管理器" class="headerlink" title="一、啥是组件管理器"></a>一、啥是组件管理器</h2><p>ESP-IDF官方对组件管理器的描述是这样的：</p><blockquote><p>The IDF Component Manager is a tool that allows developers to manage components for the ESP-IDF development framework. The tool is compatible with ESP-IDF versions 4.1 and later, and is included by default starting with ESP-IDF version 4.4.</p></blockquote><p>  The ESP Component Registry is a central repository for components that can be used with the ESP-IDF. It is hosted at <a href="https://components.espressif.com/">https://components.espressif.com</a> and provides a convenient way for developers to discover and download components for their projects.</p><blockquote><p>  With the IDF Component Manager, developers can easily install components from the ESP-IDF Component Registry, streamlining the process of adding new functionality to their projects.</p></blockquote><p>说人话就是，世上本没有组件管理器，自定义组件多了，就有了组件库，就有了组件管理器。</p><p>如果用学过node，那我们可以把组件管理器比作npm包管理器，把<code>idf_component.yml</code>比作<code>package.jso</code>,真的一模一样。(不知道node，npm当我没说)。</p><p>我们可以在这：<a href="https://components.espressif.com/"> ESP-IDF components</a>  找到乐鑫发布的一些他们帮我们写好的”自定义组件“。</p><p>使用这些组件我们可以快速的完成一些功能的实现，比如移植还有点难度的LVGL库，现在只要一行命令就能移植完成。</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/20240219001357.png"></p><h2 id="二、组件管理器使用示例："><a href="#二、组件管理器使用示例：" class="headerlink" title="二、组件管理器使用示例："></a>二、组件管理器使用示例：</h2><p>下面我们基于<a href="../2.3-ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6.md">ESP-IDF自定义组件</a>教程中编写的<a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/02.idf_basis/blink_component">blink_component</a>工程来实现使用一下官方的组件管理器，复制工程，重命名为<code>button_component</code></p><h3 id="2-1-组件介绍"><a href="#2-1-组件介绍" class="headerlink" title="2.1 组件介绍"></a>2.1 组件介绍</h3><p>在这部分，我们学着使用官方提供的组件，这里以<a href="https://components.espressif.com/components/espressif/button?language=en">button</a>组件为例：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/20240229163020.png"></p><p>按键组件实现了 GPIO 和 ADC 两种按键，并允许同时创建两种不同的按键。并且提供多种按键事件，包括按下，弹起，按下弹起 1 次，按下弹起 2 次等。</p><p>这里是该组件的中文文档：<a href="https://docs.espressif.com/projects/esp-iot-solution/zh_CN/latest/input_device/button.html">按键组件使用</a></p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/20240229163215.png"></p><h3 id="2-2-引入组件"><a href="#2-2-引入组件" class="headerlink" title="2.2 引入组件"></a>2.2 引入组件</h3><p>输入命令添加依赖   <code>idf.py add-dependency &quot;espressif/button^3.2.0&quot;</code>  ：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/20240229164040.png"></p><p>添加完成：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/20240229164107.png"></p><p>main下多出组件依赖文件，里面写上了我们依赖的组件<code>espressif/button</code></p><p>编译项目：<code>idf.py build</code></p><p>idf会自动下载我们依赖的组件，存放到<code>managed_components</code>文件夹中，如下图：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.4-ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/ESP-IDF%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E5%99%A8/20240229164459.png"></p><h3 id="2-3-组件的使用"><a href="#2-3-组件的使用" class="headerlink" title="2.3 组件的使用"></a>2.3 组件的使用</h3><p>组件的使用各不相同，使用时具体参考对应的组件文档即可:<a href="https://docs.espressif.com/projects/esp-iot-solution/zh_CN/latest/index.html">ESP-IoT-Solution 编程指南</a></p><p>下面的内容参考文档也能完成，这里不再详细描述：</p><h4 id="创建按键"><a href="#创建按键" class="headerlink" title="创建按键"></a>创建按键</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// create gpio button</span><br><span class="hljs-type">button_config_t</span> gpio_btn_cfg = &#123;<br>    .type = BUTTON_TYPE_GPIO,<br>    .long_press_time = CONFIG_BUTTON_LONG_PRESS_TIME_MS,<br>    .short_press_time = CONFIG_BUTTON_SHORT_PRESS_TIME_MS,<br>    .gpio_button_config = &#123;<br>        .gpio_num = <span class="hljs-number">0</span>,<br>        .active_level = <span class="hljs-number">0</span>,<br>    &#125;,<br>&#125;;<br><span class="hljs-type">button_handle_t</span> gpio_btn = iot_button_create(&amp;gpio_btn_cfg);<br><span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == gpio_btn) &#123;<br>    ESP_LOGE(TAG, <span class="hljs-string">&quot;Button create failed&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>详解：</p><ol><li><code>button_config_t gpio_btn_cfg</code>：定义了一个名为 <code>gpio_btn_cfg</code> 的结构体变量，用于配置按钮的参数。</li><li><code>.type = BUTTON_TYPE_GPIO</code>：指定按钮的类型为 GPIO 类型，表示这是一个基于 GPIO 的按钮。</li><li><code>.long_press_ticks = CONFIG_BUTTON_LONG_PRESS_TIME_MS</code>：设置长按触发的时间阈值，单位为毫秒。</li><li><code>.short_press_ticks = CONFIG_BUTTON_SHORT_PRESS_TIME_MS</code>：设置短按触发的时间阈值，单位为毫秒。</li><li><code>.gpio_button_config</code>：GPIO 按钮的具体配置信息。<ul><li><code>.gpio_num = 0</code>：指定了 GPIO 编号为 0，即对应 ESP32 开发板上的某个 GPIO 引脚。</li><li><code>.active_level = 0</code>：指定了按钮的触发电平为低电平（0），即当 GPIO 引脚为低电平时被认为按钮被按下。</li></ul></li><li><code>button_handle_t gpio_btn = iot_button_create(&amp;gpio_btn_cfg)</code>：调用 <code>iot_button_create</code> 函数创建一个按钮实例，并将配置信息传递给该函数，返回一个按钮句柄 <code>gpio_btn</code>。</li><li><code>if(NULL == gpio_btn)</code>：检查按钮实例是否成功创建。<ul><li>如果 <code>gpio_btn</code> 为 <code>NULL</code>，则打印错误日志，提示按钮创建失败。</li></ul></li></ol><h4 id="注册回调函数"><a href="#注册回调函数" class="headerlink" title="注册回调函数"></a>注册回调函数</h4><p>Button 组件支持为多个事件注册回调函数，每个事件都可以注册一个回调函数，当事件发生时，回调函数将会被调用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">button_single_click_cb</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg,<span class="hljs-type">void</span> *usr_data)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;BUTTON_SINGLE_CLICK&quot;</span>);<br>&#125;<br><br>iot_button_register_cb(gpio_btn, BUTTON_SINGLE_CLICK, button_single_click_cb,<span class="hljs-literal">NULL</span>);<br><br></code></pre></td></tr></table></figure><p>详解：</p><ol><li><p><code>static void button_single_click_cb(void *arg, void *usr_data)</code>：定义了一个静态的回调函数 <code>button_single_click_cb</code>，该函数在按钮单击事件发生时被调用。函数接受两个参数，一个是 <code>arg</code>，用于传递按钮相关的参数，另一个是 <code>usr_data</code>，用于传递用户数据。</p></li><li><p><code>iot_button_register_cb(gpio_btn, BUTTON_SINGLE_CLICK, button_single_click_cb, NULL)</code>：调用 <code>iot_button_register_cb</code> 函数注册了一个按钮单击事件的回调函数。</p><ul><li><code>gpio_btn</code>：表示要注册回调函数的按钮实例。</li><li><code>BUTTON_SINGLE_CLICK</code>：指定注册的是单击事件的回调函数。</li><li><code>button_single_click_cb</code>：指定要注册的回调函数，即单击事件发生时调用的函数。</li><li><code>NULL</code>：表示没有用户数据需要传递给回调函数。</li></ul></li></ol><p>结合上一篇教程的LED闪烁的代码，最终代码如下：<code>blink_example_main.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;led_blink.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iot_button.h&quot;</span></span><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;example&quot;</span>;<br><span class="hljs-type">uint8_t</span> s_led_state = <span class="hljs-number">0</span>;<br><br><br><span class="hljs-comment">// 按键回调函数(单击,led灯状态取反)</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">button_single_click_cb</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg,<span class="hljs-type">void</span> *usr_data)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;BUTTON_SINGLE_CLICK&quot;</span>);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Turning the LED %s!&quot;</span>, s_led_state == <span class="hljs-literal">true</span> ? <span class="hljs-string">&quot;ON&quot;</span> : <span class="hljs-string">&quot;OFF&quot;</span>);<br>    s_led_state = !s_led_state;<br>    blink_led(s_led_state);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* Configure the peripheral according to the LED type */</span><br>    configure_led();<br>    <span class="hljs-comment">// create gpio button</span><br>    <span class="hljs-type">button_config_t</span> gpio_btn_cfg = &#123;<br>        .type = BUTTON_TYPE_GPIO,<br>        .long_press_time = CONFIG_BUTTON_LONG_PRESS_TIME_MS,<br>        .short_press_time = CONFIG_BUTTON_SHORT_PRESS_TIME_MS,<br>        .gpio_button_config = &#123;<br>            .gpio_num = <span class="hljs-number">0</span>,<br>            .active_level = <span class="hljs-number">0</span>,<br>        &#125;,<br>    &#125;;<br><br>    <span class="hljs-type">button_handle_t</span> gpio_btn = iot_button_create(&amp;gpio_btn_cfg);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-literal">NULL</span> == gpio_btn) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Button create failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 注册按键回调</span><br>    iot_button_register_cb(gpio_btn, BUTTON_SINGLE_CLICK, button_single_click_cb,<span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        vTaskDelay(CONFIG_BLINK_PERIOD / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>实现的效果为：单击开发板上的按键，可以控制LED翻转。</p><p>以上就是ESP32组件管理器及第三方组件的使用。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/tools/idf-component-manager.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/tools/idf-component-manager.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>IDF开发入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>IDF开发入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDF开发入门-3.ESP-IDF自定义组件</title>
    <link href="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.3-ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
    <url>/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.3-ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP-IDF自定义组件</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-18</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP-IDF自定义组件"><a href="#ESP-IDF自定义组件" class="headerlink" title="ESP-IDF自定义组件"></a>ESP-IDF自定义组件</h1><h2 id="一-、自定义组件介绍："><a href="#一-、自定义组件介绍：" class="headerlink" title="一 、自定义组件介绍："></a>一 、自定义组件介绍：</h2><p>之前在<a href="2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA.md">ESP32工程结构及构建</a>里提到esp-idf项目的结构如下：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.3-ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/20240218174718.png"></p><p>其中components文件夹就是我们自定义的组件。ESP-IDF组件机制就是代码模块化的一种体现，将特定功能的代码封装为一个个组件并对外暴露接口，增强代码的可复用性，提高代码维护效率。</p><h2 id="二-、自定义组件示例："><a href="#二-、自定义组件示例：" class="headerlink" title="二 、自定义组件示例："></a>二 、自定义组件示例：</h2><p>下面我们基于<a href="2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.md">ESP-IDF项目配置</a>中编写的<a href="https://github.com/DuRuofu/ESP32_Learning/tree/master/02.idf_basis/blink_menuconfig">blink_menuconfig</a>工程来实现一个自定义的控制闪烁的组件。</p><p>复制工程，重命名为<code>blink_component</code></p><p>使用命令：<code>idf.py -C components create-component led_blink</code></p><p>目录下多出一个叫<code>blink_component</code>的组件</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.3-ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/ESP-IDF%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/20240218231930.png"></p><p>组件的代码结构如下：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">led_blink/ - CMakeLists.txt</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">Kconfig</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">led_blink.c</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">include/ </span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">led_blink.h</span><br><br></code></pre></td></tr></table></figure><p>将点灯的函数定义裁剪到 <code>led_blink.c</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;led_blink.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;driver/gpio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;led_strip.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;sdkconfig.h&quot;</span></span><br><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;led_blink&quot;</span>;<br><br><span class="hljs-comment">/* Use project configuration menu (idf.py menuconfig) to choose the GPIO to blink,</span><br><span class="hljs-comment">   or you can edit the following line and set a number here.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BLINK_GPIO CONFIG_BLINK_GPIO</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_BLINK_LED_RMT</span><br><br><span class="hljs-type">led_strip_handle_t</span> led_strip;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">blink_led</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* If the addressable LED is enabled */</span><br>    <span class="hljs-keyword">if</span> (s_led_state) &#123;<br>        <span class="hljs-comment">/* Set the LED pixel using RGB from 0 (0%) to 255 (100%) for each color */</span><br>        led_strip_set_pixel(led_strip, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>, <span class="hljs-number">16</span>);<br>        <span class="hljs-comment">/* Refresh the strip to send data */</span><br>        led_strip_refresh(led_strip);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* Set all LED off to clear all pixels */</span><br>        led_strip_clear(led_strip);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">configure_led</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Example configured to blink addressable LED!&quot;</span>);<br>    <span class="hljs-comment">/* LED strip initialization with the GPIO and pixels number*/</span><br>    <span class="hljs-type">led_strip_config_t</span> strip_config = &#123;<br>        .strip_gpio_num = BLINK_GPIO,<br>        .max_leds = <span class="hljs-number">1</span>, <span class="hljs-comment">// at least one LED on board</span><br>    &#125;;<br>    <span class="hljs-type">led_strip_rmt_config_t</span> rmt_config = &#123;<br>        .resolution_hz = <span class="hljs-number">10</span> * <span class="hljs-number">1000</span> * <span class="hljs-number">1000</span>, <span class="hljs-comment">// 10MHz</span><br>    &#125;;<br>    ESP_ERROR_CHECK(led_strip_new_rmt_device(&amp;strip_config, &amp;rmt_config, &amp;led_strip));<br>    <span class="hljs-comment">/* Set all LED off to clear all pixels */</span><br>    led_strip_clear(led_strip);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> CONFIG_BLINK_LED_GPIO</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">blink_led</span><span class="hljs-params">(<span class="hljs-type">int</span> s_led_state)</span><br>&#123;<br>    <span class="hljs-comment">/* Set the GPIO level according to the state (LOW or HIGH)*/</span><br>    gpio_set_level(BLINK_GPIO, s_led_state);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">configure_led</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Example configured to blink GPIO LED!&quot;</span>);<br>    gpio_reset_pin(BLINK_GPIO);<br>    <span class="hljs-comment">/* Set the GPIO as a push/pull output */</span><br>    gpio_set_direction(BLINK_GPIO, GPIO_MODE_OUTPUT);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br></code></pre></td></tr></table></figure><p>在头文件声明函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> LED_BLINK_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_BLINK_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-comment">// Function declarations</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">blink_led</span><span class="hljs-params">(<span class="hljs-type">int</span> s_led_state)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">configure_led</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> __cplusplus</span><br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* LED_BLINK_H */</span></span><br><br></code></pre></td></tr></table></figure><p>组件下新建<code>idf_component.yml</code>文件引入组件依赖的<code>led_strip</code>组件</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">dependencies:</span><br>  espressif/led_strip: <span class="hljs-string">&quot;^2.0.0&quot;</span><br></code></pre></td></tr></table></figure><p>新建Kconfig文件，移植组件配置，参考<a href="2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE.md">ESP-IDF项目配置</a></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">menu <span class="hljs-string">&quot;点灯组件配置&quot;</span><br>    choice <span class="hljs-keyword">BLINK_LED</span><br><span class="hljs-keyword"></span>        prompt <span class="hljs-string">&quot;LED模式&quot;</span><br>        default <span class="hljs-keyword">BLINK_LED_GPIO</span><br><span class="hljs-keyword"></span><br>        <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_LED_GPIO</span><br><span class="hljs-keyword"></span>            <span class="hljs-keyword">bool </span><span class="hljs-string">&quot;GPIO&quot;</span><br>        <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_LED_RMT</span><br><span class="hljs-keyword"></span>            <span class="hljs-keyword">bool </span><span class="hljs-string">&quot;RMT - Addressable LED&quot;</span><br>    endchoice<br><br>    <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_GPIO</span><br><span class="hljs-keyword"></span>        int <span class="hljs-string">&quot;LED引脚&quot;</span><br>        default <span class="hljs-number">2</span><br>        help<br>            This is an int <span class="hljs-keyword">BLINK_GPIO.</span><br><span class="hljs-keyword"></span><br>    <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_PERIOD</span><br><span class="hljs-keyword"></span>        int <span class="hljs-string">&quot;LED周期&quot;</span><br>        default <span class="hljs-number">1000</span><br>        help<br>            This is a int <span class="hljs-keyword">BLINK_GPIO.</span><br><span class="hljs-keyword"></span><br><br>endmenu<br><br></code></pre></td></tr></table></figure><p>这样就编写好了一个组件。</p><p>然后在main组件里引入模块使用即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;led_blink.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;example&quot;</span>;<br><span class="hljs-type">uint8_t</span> s_led_state = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* Configure the peripheral according to the LED type */</span><br>    configure_led();<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Turning the LED %s!&quot;</span>, s_led_state == <span class="hljs-literal">true</span> ? <span class="hljs-string">&quot;ON&quot;</span> : <span class="hljs-string">&quot;OFF&quot;</span>);<br>        blink_led(s_led_state);<br>        <span class="hljs-comment">/* Toggle the LED state */</span><br>        s_led_state = !s_led_state;<br>        vTaskDelay(CONFIG_BLINK_PERIOD / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样就完成了代码的模块化，关于组件依赖，嵌套还有一些值得注意的地方，不过目前入门阶段不必深究，后续学习过程中会娓娓道来。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/build-system.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/build-system.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>IDF开发入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>IDF开发入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDF开发入门-2.ESP-IDF项目配置</title>
    <link href="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP-IDF项目配置</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-18</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP-IDF项目配置-组件配置"><a href="#ESP-IDF项目配置-组件配置" class="headerlink" title="ESP-IDF项目配置(组件配置)"></a>ESP-IDF项目配置(组件配置)</h1><h2 id="一、Menuconfig的使用"><a href="#一、Menuconfig的使用" class="headerlink" title="一、Menuconfig的使用"></a>一、Menuconfig的使用</h2><p>打开示例工程：esp-idf&#x2F;examples&#x2F;get-started&#x2F;blink</p><p>这个历程是用来实现LED闪烁的程序，这个工程使用了一个叫<code>led_strip</code>的组件，所以代码稍显复杂，但这并不重要，我们的重点不再这里。</p><p>编译代码，烧录，发现并没有现象。（哈哈，这是由于我们并没有配置LED的引脚）</p><p>下面使用<code>idf.py  menuconfig </code>  命令打开 <code>Menuconfig</code> (配置菜单)：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218212849.png"></p><p>运行命令后，我们得到了一个位于终端的可视化配置菜单。</p><p>选择 <code>Example Configuration</code> 选项：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218212956.png"></p><p>会看到两个选项，修改Blink GPIO为自己开发板上的引脚，我这里是2号。</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218213211.png"></p><p>重新编译工程，烧录代码。</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218213648.png"></p><p>成功点亮LED(😊)，相信通过这一番操作，我们对menuconfig有了基本的认识，说人话就是这玩意可以方便的帮助我们修改程序里的参数，在不修改代码的情况下。</p><h2 id="二、为什么要用组件配置（Menuconfig）"><a href="#二、为什么要用组件配置（Menuconfig）" class="headerlink" title="二、为什么要用组件配置（Menuconfig）"></a>二、为什么要用组件配置（Menuconfig）</h2><ol><li>组件配置可以将相关配置常量移出代码，增强配置的可复用度</li><li>组件配置变量也可以被CMake访问，可以通过手写逻辑实现根据配置执行不同的构建方案。（如某个源文件要不要添加到构建系统）</li><li>组件配置生成的宏定义，配合C语言的预处理语句，可以针对不同的配置改变代码解结构。</li><li>组件配置生成的宏定义在C语言中是全局的宏定义，可以在任意处访问配置项。只需要#include “sdkconfig.h”即可。</li></ol><h2 id="三、组件配置相关文件"><a href="#三、组件配置相关文件" class="headerlink" title="三、组件配置相关文件"></a>三、组件配置相关文件</h2><p>在 ESP-IDF 构建系统中，有这么几种文件和组件配置相关。它们分别是：</p><ol><li>Kconfig文件</li><li>Kconfig.projbuild文件</li><li>sdkconfig文件</li><li>sdkconfig.default文件</li><li>sdkconfig.old文件</li><li>sdkconfig.ci文件</li><li>sdkconfig.old文件</li></ol><blockquote><p><code>sdkconfig.default</code>文件还可以针对某种设备单独添加，例如：<br>   对于<code>ESP32</code>和<code>ESP32-S3</code>，则分别对应<code>sdkconfig.default.esp32</code>和<code>sdkconfig.default.esp32s3</code>。</p></blockquote><p>在详细讲解组件配置之前，先分别概括这几个文件的作用分别是什么：</p><table><thead><tr><th>文件名</th><th>位置</th><th>作用</th><th>概述</th></tr></thead><tbody><tr><td>Kconfig</td><td>组件目录</td><td>用于生成menuconfig中的菜单项</td><td>菜单模板</td></tr><tr><td>Kconfig.projbuild</td><td>组件目录</td><td>用于生成menuconfig中的顶层菜单</td><td>菜单模板</td></tr><tr><td>sdkconfig</td><td>项目根目录</td><td>用于保存 Kconfig 设置的键值对形式，手动更改无效</td><td>保存设置</td></tr><tr><td>sdkconfig.default</td><td>项目根目录</td><td>自定义 sdkconfig 的默认值，不会被构建系统更改，格式与 sdkconfig 相同</td><td>缺省值清单</td></tr><tr><td>sdkconfig.old</td><td>项目根目录</td><td>当保存旧的 menuconfig 设置时，自动备份原来的 sdkconfig 文件</td><td>备份</td></tr><tr><td>其中<code>Kconfig</code> 和 <code>Kconfig.projbuild</code> 文件用于定义菜单，其余文件用于保存我们配置的值。</td><td></td><td></td><td></td></tr></tbody></table><p>查看main组件文件夹，我们可以发现这个工程里的 <code>Kconfig.projbuild</code> 文件：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218215404.png"></p><p>文件内容如下：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>menu <span class="hljs-string">&quot;Example Configuration&quot;</span><br><br>    <span class="hljs-keyword">orsource </span><span class="hljs-string">&quot;$IDF_PATH/examples/common_components/env_caps/$IDF_TARGET/Kconfig.env_caps&quot;</span><br><br>    choice <span class="hljs-keyword">BLINK_LED</span><br><span class="hljs-keyword"></span>        prompt <span class="hljs-string">&quot;Blink LED type&quot;</span><br>        default <span class="hljs-keyword">BLINK_LED_GPIO </span>if IDF_TARGET_ESP32 <span class="hljs-title">||</span> !SOC_RMT_SUPPORTED<br>        default <span class="hljs-keyword">BLINK_LED_RMT</span><br><span class="hljs-keyword"></span>        help<br>            Defines the default peripheral for <span class="hljs-keyword">blink </span>example<br><br>        <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_LED_GPIO</span><br><span class="hljs-keyword"></span>            <span class="hljs-keyword">bool </span><span class="hljs-string">&quot;GPIO&quot;</span><br>        <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_LED_RMT</span><br><span class="hljs-keyword"></span>            <span class="hljs-keyword">bool </span><span class="hljs-string">&quot;RMT - Addressable LED&quot;</span><br>    endchoice<br><br>    <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_GPIO</span><br><span class="hljs-keyword"></span>        int <span class="hljs-string">&quot;Blink GPIO number&quot;</span><br>        range ENV_GPIO_RANGE_MIN ENV_GPIO_OUT_RANGE_MAX<br>        default <span class="hljs-number">5</span> if IDF_TARGET_ESP32<br>        default <span class="hljs-number">18</span> if IDF_TARGET_ESP32S2<br>        default <span class="hljs-number">48</span> if IDF_TARGET_ESP32S3<br>        default <span class="hljs-number">8</span><br>        help<br>            GPIO number (IOxx) to <span class="hljs-keyword">blink </span>on <span class="hljs-keyword">and </span>off <span class="hljs-keyword">or </span>the RMT signal for the <span class="hljs-keyword">addressable </span>LED.<br>            Some GPIOs are used for other purposes (flash connections, etc.) <span class="hljs-keyword">and </span>cannot <span class="hljs-keyword">be </span>used to <span class="hljs-keyword">blink.</span><br><span class="hljs-keyword"></span><br>    <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_PERIOD</span><br><span class="hljs-keyword"></span>        int <span class="hljs-string">&quot;Blink period in ms&quot;</span><br>        range <span class="hljs-number">10</span> <span class="hljs-number">3600000</span><br>        default <span class="hljs-number">1000</span><br>        help<br>            Define the <span class="hljs-keyword">blinking </span>period in milliseconds.<br><br>endmenu<br><br></code></pre></td></tr></table></figure><p>不难发现，下面这部分就和我们刚才见到的配置项有关：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">config BLINK_GPIO<br>    <span class="hljs-type">int</span> &quot;Blink GPIO number&quot;<br>    range ENV_GPIO_RANGE_MIN ENV_GPIO_OUT_RANGE_MAX<br>    <span class="hljs-keyword">default</span> <span class="hljs-number">5</span> <span class="hljs-keyword">if</span> IDF_TARGET_ESP32<br>    <span class="hljs-keyword">default</span> <span class="hljs-number">18</span> <span class="hljs-keyword">if</span> IDF_TARGET_ESP32S2<br>    <span class="hljs-keyword">default</span> <span class="hljs-number">48</span> <span class="hljs-keyword">if</span> IDF_TARGET_ESP32S3<br>    <span class="hljs-keyword">default</span> <span class="hljs-number">8</span><br>    help<br>        GPIO number (IOxx) <span class="hljs-keyword">to</span> blink <span class="hljs-keyword">on</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">off</span> <span class="hljs-keyword">or</span> the RMT signal <span class="hljs-keyword">for</span> the addressable LED.<br>        <span class="hljs-keyword">Some</span> GPIOs are used <span class="hljs-keyword">for</span> other purposes (flash connections, etc.) <span class="hljs-keyword">and</span> cannot be used <span class="hljs-keyword">to</span> blink.<br><br>config BLINK_PERIOD<br>    <span class="hljs-type">int</span> &quot;Blink period in ms&quot;<br>    <span class="hljs-keyword">range</span> <span class="hljs-number">10</span> <span class="hljs-number">3600000</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-number">1000</span><br>    help<br>        Define the blinking period <span class="hljs-keyword">in</span> milliseconds.<br><br></code></pre></td></tr></table></figure><p>即使不了解 Kconfig （ps： Kconfig 上面这些就是依赖Kconfig写的），我们也能猜出这几行代码干了啥： 定义了两个配置项，<code>BLINK_GPIO</code> 和 <code>BLINK_PERIOD</code> ,  然后添加默认值，添加说明等。</p><p>关于 Kconfig 的写法随便搜索一下就能学会，这里不在赘述。</p><h2 id="四、创建组件配置"><a href="#四、创建组件配置" class="headerlink" title="四、创建组件配置"></a>四、创建组件配置</h2><p>下面我们试着自己写一个组件配置，复制<code>blink</code>历程到自己的目录，重命名为 <code>blink_menuconfig</code></p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218221414.png"></p><p>我们删除原有的 <code>Kconfig.projbuild</code> 文件，自己重新写一个，原来的<code>Kconfig.projbuild</code>里有三个配置项：分别是：</p><ul><li><code>BLINK_LED</code>: 控制LED模式（选项）</li><li><code>BLINK_GPIO</code>：LED连接的引脚</li><li><code>BLINK_PERIOD</code>：LED闪烁的时间</li></ul><h3 id="创建框架（menu）"><a href="#创建框架（menu）" class="headerlink" title="创建框架（menu）"></a>创建框架（menu）</h3><p>我们先创建个框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Kconfig">menu &quot;点灯配置&quot;<br><br>endmenu<br><br></code></pre></td></tr></table></figure><p>这里菜单项可以使用中文，打开配置菜单可以看到：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218222722.png"></p><h3 id="创建单选选项（choice）"><a href="#创建单选选项（choice）" class="headerlink" title="### 创建单选选项（choice）"></a>### 创建单选选项（choice）</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">menu <span class="hljs-string">&quot;点灯配置&quot;</span><br>    choice <span class="hljs-keyword">BLINK_LED</span><br><span class="hljs-keyword"></span>        prompt <span class="hljs-string">&quot;LED模式&quot;</span><br>        default <span class="hljs-keyword">BLINK_LED_GPIO</span><br><span class="hljs-keyword"></span><br>        <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_LED_GPIO</span><br><span class="hljs-keyword"></span>            <span class="hljs-keyword">bool </span><span class="hljs-string">&quot;GPIO&quot;</span><br>        <span class="hljs-built_in">config</span> <span class="hljs-keyword">BLINK_LED_RMT</span><br><span class="hljs-keyword"></span>            <span class="hljs-keyword">bool </span><span class="hljs-string">&quot;RMT - Addressable LED&quot;</span><br>    endchoice<br>endmenu<br><br></code></pre></td></tr></table></figure><p>效果：<br><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218223154.png"></p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218223205.png"></p><h3 id="创建菜单项目（config）"><a href="#创建菜单项目（config）" class="headerlink" title="创建菜单项目（config）"></a>创建菜单项目（config）</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino">config BLINK_GPIO<br>    <span class="hljs-type">int</span> <span class="hljs-string">&quot;LED引脚&quot;</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-number">2</span><br>    help<br>        This is an <span class="hljs-type">int</span> BLINK_GPIO.<br><br>config BLINK_PERIOD<br>    <span class="hljs-type">int</span> <span class="hljs-string">&quot;LED周期&quot;</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-number">1000</span><br>    help<br>        This is a <span class="hljs-type">int</span> BLINK_GPIO.<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.2-ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/ESP-IDF%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/20240218224055.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/kconfig.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/kconfig.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>IDF开发入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>IDF开发入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDF开发入门-1.ESP32工程结构及构建</title>
    <link href="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/"/>
    <url>/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>ESP32工程结构及构建</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-18</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="ESP32工程结构及构建"><a href="#ESP32工程结构及构建" class="headerlink" title="ESP32工程结构及构建"></a>ESP32工程结构及构建</h1><h2 id="一、编译并烧录示例程序"><a href="#一、编译并烧录示例程序" class="headerlink" title="一、编译并烧录示例程序"></a>一、编译并烧录示例程序</h2><p>首先编译一个示例程序：hello_world</p><p>示例程序目录：esp-idf&#x2F;examples&#x2F;get-started&#x2F;hello_world</p><p>使用vscode打开示例程序：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218170437.png"></p><p>使用自定义的命令 <code>get_idf_v5</code> 获取环境变量（<a href="https://duruofu.github.io/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/">关于自定义命令</a>）：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218170817.png"></p><p>使用<code>idf.py set-target esp32</code>配置开发板为ESP32，按照提示使用<code>idf.py build</code>命令编译程序：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218171102.png"></p><p>使用<code>ls /dev/ttyUSB*</code>查询串口（linux）：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218171312.png"></p><p>使用<code>idf.py  -p  &#123;PORT&#125;  flash</code>命令烧录代码到esp32：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218171506.png"></p><p>烧录完成如下：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218171516.png"></p><p>使用<code>idf.py  -p  &#123;PORT&#125;  monitor</code> 命令打开串口监视器：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218171709.png"></p><p>成功输出：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218171754.png"></p><h2 id="二、新建工程"><a href="#二、新建工程" class="headerlink" title="二、新建工程"></a>二、新建工程</h2><h3 id="新建基础工程"><a href="#新建基础工程" class="headerlink" title="新建基础工程"></a>新建基础工程</h3><p>加载idf.py环境变量后，使用<code>idf.py create-project filename</code>  创建工程</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218172510.png"></p><p>创建好的工程如下：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218174120.png"></p><p>进入刚刚创建好的工程下，配置目标芯片，我以ESP32为例  <code>idf.py set-target esp32</code></p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218174256.png"><br>设置目标芯片后，会出现如图结构 , 其中build是编译过程中会出现的文件，sdkconfig是运行用于保存menuconfig的文件。</p><h3 id="新建组件"><a href="#新建组件" class="headerlink" title="新建组件"></a>新建组件</h3><p>不知道组件是啥也不打紧，后面会系统学习，这里只说明如何新建自定义组件：</p><p>使用命令：<code>idf.py -C components create-component my_component</code></p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218175156.png"></p><h2 id="三、工程结构"><a href="#三、工程结构" class="headerlink" title="三、工程结构"></a>三、工程结构</h2><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><p>esp-idf的标准目录如下所示：</p><p><img src="/2024/02/18/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/02.IDF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/2.1-ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/ESP32%E5%B7%A5%E7%A8%8B%E7%BB%93%E6%9E%84%E5%8F%8A%E6%9E%84%E5%BB%BA/20240218174718.png"></p><ul><li><p><code>CMakeLists.txt</code> 文件，这是 CMake 用于学习如何构建项目的主要文件，可以在这个文件中设置项目全局的 CMake 变量。顶层项目 CMakeLists.txt 文件会导入 &#x2F;tools&#x2F;cmake&#x2F;project.cmake 文件，由它负责实现构建系统的其余部分。该文件最后会设置项目的名称，并定义该项目。</p></li><li><p><code>sdkconfig</code> 项目配置文件，执行 idf.py menuconfig 时会创建或更新此文件，文件中保存了项目中所有组件（包括 ESP-IDF 本身）的配置信息。 sdkconfig 文件可能会也可能不会被添加到项目的源码管理系统中。</p></li><li><p>可选的 <code>components</code> 目录中包含了项目的部分自定义组件，并不是每个项目都需要这种自定义组件，但它有助于构建可复用的代码或者导入第三方（不属于 ESP-IDF）的组件。或者，您也可以在顶层 CMakeLists.txt 中设置 EXTRA_COMPONENT_DIRS 变量以查找其他指定位置处的组件。有关详细信息，请参阅 重命名 main 组件。如果项目中源文件较多，建议将其归于组件中，而不是全部放在 “main” 中</p></li><li><ul><li><code>main</code> 目录是一个特殊的组件，它包含项目本身的源代码。”main” 是默认名称，CMake 变量 COMPONENT_DIRS 默认包含此组件，但您可以修改此变量。</li></ul></li><li><p><code>build</code> 目录是存放构建输出的地方，如果没有此目录，idf.py 会自动创建。CMake 会配置项目，并在此目录下生成临时的构建文件。随后，在主构建进程的运行期间，该目录还会保存临时目标文件、库文件以及最终输出的二进制文件。此目录通常不会添加到项目的源码管理系统中，也不会随项目源码一同发布。</p></li></ul><h3 id="项目-CMakeList-txt-文件"><a href="#项目-CMakeList-txt-文件" class="headerlink" title="项目 CMakeList.txt 文件"></a>项目 CMakeList.txt 文件</h3><p>每个项目都有一个顶层 <code>CMakeLists.txt</code> 文件，包含整个项目的构建设置。默认情况下，项目 CMakeLists 文件会非常小。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">cmake_minimum_required</span>(VERSION <span class="hljs-number">3.16</span>)<br><span class="hljs-keyword">include</span>($ENV&#123;IDF_PATH&#125;/tools/cmake/<span class="hljs-keyword">project</span>.cmake)<br><span class="hljs-keyword">project</span>(teat)<br></code></pre></td></tr></table></figure><blockquote><p><code>cmake_minimum_required(VERSION 3.5)</code> 必须放在 CMakeLists.txt 文件的第一行，它会告诉 CMake 构建该项目所需要的最小版本号。ESP-IDF 支持 CMake 3.5 或更高的版本。<br>   <code>include($ENV&#123;IDF_PATH&#125;/tools/cmake/project.cmake)</code> 会导入 CMake 的其余功能来完成配置项目、检索组件等任务。<br>   <code>project(teat)</code> 会创建项目本身，括号内容作为项目名称。</p></blockquote><p>上面的内容为 项目<strong>必要部分</strong>，除此之外，还有一些 <strong>可选部分</strong>。</p><ul><li><code>COMPONENT_DIRS</code>：组件的搜索目录，默认为 <code>IDF_PATH/components</code>、 <code>工程文件夹/components</code>、和变量 <code>EXTRA_COMPONENT_DIRS</code>。如果您不想在这些位置搜索组件，请覆盖此变量。(通常情况下此变量不需要覆盖，如果想要添加额外的组件，请放到) <code>工程文件夹/components</code>或者变<code>EXTRA_COMPONENT_DIRS</code>中</li><li><code>EXTRA_COMPONENT_DIRS</code>：用于搜索组件的其它可选目录列表。路径可以是相对于项目目录的相对路径，也可以是绝对路径。</li><li><code>COMPONENTS</code>：要构建进项目中的组件名称列表，默认为 <code>COMPONENT_DIRS</code> 目录下检索到的所有组件。使用此变量可以“精简”项目以缩短构建时间。请注意，如果一个组件通过 <code>COMPONENT_REQUIRES</code> 指定了它依赖的另一个组件，则会自动将其添加到 <code>COMPONENTS</code> 中，所以 <code>COMPONENTS</code> 列表可能会非常短。<br>以上变量中的路径可以是绝对路径，或者是相对于项目目录的相对路径。<br>要使用 cmake 中的 <code>set()</code> 命令 来设置这些变量。  如 <code>set(VARIABLE &quot;VALUE&quot;)</code>。</li></ul><h3 id="组件-CMakeList-txt-文件"><a href="#组件-CMakeList-txt-文件" class="headerlink" title="组件 CMakeList.txt 文件"></a>组件 CMakeList.txt 文件</h3><p>组件是 COMPONENT_DIRS 列表中的任何目录。此列表中的目录可以是组件自身（即包含 CMakeLists.txt 文件的目录），也可以是子目录为组件的顶级目录，例如<code>$ENV&#123;PROJECT_DIR&#125;/components</code></p><p><code>构建</code> 或 <code>编译</code> 时，ESP-IDF 搜索所有待构建的组件的顺序为<code>COMPONENT_DIRS</code> 指定的顺序依次进行。<br>因此，在默认情况下：</p><ol><li>搜索 ESP-IDF 内部组件（<code>$ENV&#123;IDF_PATH&#125;/components</code>）</li><li>搜索 <code>EXTRA_COMPONENT_DIRS</code> 中的组件</li><li>搜索项目组件（<code>$ENV&#123;PROJECT_DIR&#125;/components</code>）</li></ol><blockquote><p><strong>注意</strong>  :<br>   如果这些目录中的两个或者多个包含具有相同名字的组件，则使用 <strong>搜索到的最后一个</strong> 位置的组件。这就允许将组件复制到项目目录中再修改以覆盖 ESP-IDF 组件。</p></blockquote><p>组件的最小的CMakeList.txt文件只有一句:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs CMake">idf_component_register(SRCS <span class="hljs-string">&quot;my_component.c&quot;</span><br>                    INCLUDE_DIRS <span class="hljs-string">&quot;include&quot;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>SRCS</code> 是源文件列表（_.c、_.cpp、_.cc、_.S），里面所有的源文件都将会编译进组件库中。</li><li><code>INCLUDE_DIRS</code> 是目录列表，里面的路径会被添加到所有需要该组件的组件（包括 main 组件）全局 include 搜索路径中。</li></ul><p>除此之外，还有很多非必须的参数:</p><ul><li><code>REQUIRES</code> 声明组件的public依赖，可供其他依赖者访问</li><li><code>PRIV_REQUIRES</code>声明private依赖，只能被当前组件访问。</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/build-system.html">https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-guides/build-system.html</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>IDF开发入门</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>IDF开发入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32串口进阶(HAL)</title>
    <link href="/2024/02/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E8%BF%9B%E9%98%B6/"/>
    <url>/2024/02/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>STM32串口进阶</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-12</td><td>已同步至博客</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="STM32串口进阶"><a href="#STM32串口进阶" class="headerlink" title="STM32串口进阶"></a>STM32串口进阶</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>我们使用基本的串口接收中断配合回调函数，已经可以完成很多功能。详见<a href="../STM32%E5%A4%96%E8%AE%BE%E4%BD%BF%E7%94%A8/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89.md">STM32串口使用（HAL库）</a>一文。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;uart_it_config.h&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 串口接收中断初始化(总)</span><br><span class="hljs-comment"> * @return &#123;*&#125;Debug_Init</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART_IT_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-comment">//串口1接收中断初始化</span><br>    <span class="hljs-comment">//USART1_Init();</span><br>    <span class="hljs-comment">//串口2接收中断初始化</span><br>    <span class="hljs-comment">//USART2_Init();</span><br>    <span class="hljs-comment">//串口3接收中断初始化</span><br>    UART3_Init();<br>&#125;<br><br><span class="hljs-comment">// 串口接收完成回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_UART_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART1)<br>    &#123;<br>        <span class="hljs-comment">//UART1_RxCpltCallback(huart);</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART2)<br>    &#123;<br>        <span class="hljs-comment">//UART2_RxCpltCallback();</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART3)<br>    &#123;<br>        UART3_RxCpltCallback(huart);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们使用<code>uart_it_config</code>模块代理全局的串口接收数据非空中断<code>HAL_UART_RxCpltCallback</code>，然后在内部实现各个串口的逻辑，以<code>UART3</code>为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;uart_3.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RXBUFFERSIZE_3 256 <span class="hljs-comment">// 最大接收字节数</span></span><br><br><span class="hljs-comment">// 定义串口句柄,使用串口1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UART_HANDLE huart3</span><br><br><br><span class="hljs-type">uint8_t</span> RxBuffer_3[RXBUFFERSIZE_3];  <span class="hljs-comment">// 定义数据缓冲区</span><br><span class="hljs-type">uint8_t</span> Uart_RxBuffer_3;             <span class="hljs-comment">// 接收中断缓冲</span><br><span class="hljs-type">uint8_t</span> Uart_Rx_Cnt_3 = <span class="hljs-number">0</span>;           <span class="hljs-comment">// 接收缓冲计数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART3_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/*串口硬件配置代码(使用cudeMX则不需要此部分)</span><br><span class="hljs-comment">  Init the GPIO of USART1</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">// 使能 USART1 的接收中断</span><br>  __HAL_UART_ENABLE_IT(&amp;UART_HANDLE, UART_IT_RXNE);<br>  <span class="hljs-comment">// 开启 USART1 的连续接收中断，并指定接收缓冲区的地址和长度</span><br>  HAL_UART_Receive_IT(&amp;UART_HANDLE, &amp;Uart_RxBuffer_3, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 串口3接收完成回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART3_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_TxCpltCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">if</span> (Uart_Rx_Cnt_3 &gt;= <span class="hljs-number">255</span>) <span class="hljs-comment">// 溢出判断</span><br>  &#123;<br>    Uart_Rx_Cnt_3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(RxBuffer_3, <span class="hljs-number">0x00</span>, <span class="hljs-keyword">sizeof</span>(RxBuffer_3));<br>    HAL_UART_Transmit(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)<span class="hljs-string">&quot;数据溢出&quot;</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0xFFFF</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    RxBuffer_3[Uart_Rx_Cnt_3++] = Uart_RxBuffer_3;<br>    <span class="hljs-comment">// 单字符判断</span><br><br>    <span class="hljs-keyword">if</span> ((RxBuffer_3[Uart_Rx_Cnt_3 - <span class="hljs-number">1</span>] == <span class="hljs-number">0x0A</span>) &amp;&amp; (RxBuffer_3[Uart_Rx_Cnt_3 - <span class="hljs-number">2</span>] == <span class="hljs-number">0x0D</span>)) <span class="hljs-comment">// 判断结束位</span><br>    &#123;<br>      <span class="hljs-comment">// 这里可以写多字节消息的判断</span><br>      HAL_UART_Transmit(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;RxBuffer_3, Uart_Rx_Cnt_3, <span class="hljs-number">0xFFFF</span>); <span class="hljs-comment">// 将收到的信息发送出去</span><br>      <span class="hljs-keyword">while</span> (HAL_UART_GetState(&amp;UART_HANDLE) == HAL_UART_STATE_BUSY_TX); <span class="hljs-comment">// 检测UART发送结束</span><br><br>      <span class="hljs-comment">// 复位</span><br>      Uart_Rx_Cnt_3 = <span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">memset</span>(RxBuffer_3, <span class="hljs-number">0x00</span>, <span class="hljs-keyword">sizeof</span>(RxBuffer_3)); <span class="hljs-comment">// 清空数组</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">// 重新使能串口接收中断</span><br>  HAL_UART_Receive_IT(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;Uart_RxBuffer_3, <span class="hljs-number">1</span>); <span class="hljs-comment">// 因为接收中断使用了一次即关闭，所以在最后加入这行代码即可实现无限使用</span><br>&#125;<br><br><span class="hljs-comment">// 串口3错误回调函数(主要用来清除溢出中断)</span><br><span class="hljs-comment">//  void UART3_ErrorCallback(UART_HandleTypeDef *huart)</span><br><span class="hljs-comment">//  &#123;</span><br><span class="hljs-comment">//    if(HAL_UART_ERROR_ORE)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//       uint32_t temp = huart-&gt;Instance-&gt;SR;</span><br><span class="hljs-comment">//       temp = huart-&gt;Instance-&gt;DR;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//  &#125;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 函数功能: 重定向c库函数printf到DEBUG_USARTx</span><br><span class="hljs-comment"> * 输入参数: 无</span><br><span class="hljs-comment"> * 返 回 值: 无</span><br><span class="hljs-comment"> * 说    明：无</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span><br>&#123;<br>  HAL_UART_Transmit(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;ch, <span class="hljs-number">1</span>, <span class="hljs-number">0xffff</span>);<br>  <span class="hljs-keyword">return</span> ch;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UART3_RxCpltCallback</code>函数通过判断接收计数器<code>Uart_Rx_Cnt_3</code>的值是否达到上限255，来检测是否发生了溢出。如果没有溢出，将接收到的数据存储到接收缓冲区<code>RxBuffer_3</code>中，并进行结束位的判断。这里只给出了单字符结束位的判断，即判断收到的字符是否是0x0D和0x0A（对应回车换行）。如果满足结束位的条件，则将接收到的信息通过串口发送出去，并等待发送结束。最后，重新使能串口接收中断，以便继续接收后续的数据。</p><p>这样就可以实现结尾为<code>\r\n</code>，的不定长数据接收，但 并不是真正的接收不定长数据，只能算是”伪不定长”(但实际上也能满足业务需求)。</p><h2 id="二、串口单字节连续接收数据-DMA"><a href="#二、串口单字节连续接收数据-DMA" class="headerlink" title="二、串口单字节连续接收数据+DMA"></a>二、串口单字节连续接收数据+DMA</h2><p>上面这样一个字节一个字节的处理，频繁中断会占用cpu时间，我们可以引入DMA代替cpu搬运数据。</p><p>为串口添加DMA通道：</p><p><img src="/2024/02/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E8%BF%9B%E9%98%B6/20240213105705.png"></p><p>为UART_TX,UART_RX分别创建DMA通道。</p><p><img src="/2024/02/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E8%BF%9B%E9%98%B6/20240213105900.png"></p><p>其余的变化不大，只需要再前言的代码基础上将<code>HAL_UART_Receive_IT</code>改为<code>HAL_UART_Receive_DMA</code><br>将<code>HAL_UART_Transmit</code>改为<code>HAL_UART_Transmit_DMA</code>,</p><p><strong>串口DMA方式接收函数：<code>HAL_UART_Receive_DMA</code></strong></p><table><thead><tr><th>函数原型</th><th>HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_Handle TypeDef *huart, uint 8_t *pData, uint 16_t Size)</th></tr></thead><tbody><tr><td>功能描述</td><td>在DMA方式下接收一定数量的数据</td></tr><tr><td>入口参数1</td><td>huart：串口句柄的地址</td></tr><tr><td>入口参数</td><td>pData：待接收数据的首地址</td></tr><tr><td>入口参数3</td><td>Size：待接收数据的个数</td></tr><tr><td>返回值</td><td>HAL状态值：HAL_OK表示发送成功；HAL_ERROR表示参数错误；HAL_BUSY表示串口被占用；</td></tr><tr><td>注意事项</td><td>1. 该函数将启动DMA方式的串口数据接收2. 完成指定数量的数据接收后，可以触发DMA中断，在中断中将调用接收中断回调函数HAL_UART_ExCpltCallback进行后续处理3. 该函数由用户调用户调用</td></tr></tbody></table><p><strong>串口DMA方式发送函数：<code>HAL_UART_Transmit_DMA</code></strong></p><table><thead><tr><th>函数原型</th><th>HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_Handle TypeDef *huart, uint 8_t *pData, uint 16_t Size)</th></tr></thead><tbody><tr><td>功能描述</td><td>在DMA方式下发送一定数量的数据</td></tr><tr><td>入口参数1</td><td>huart：串口句柄的地址</td></tr><tr><td>入口参数</td><td>pData：待发送数据的首地址</td></tr><tr><td>入口参数3</td><td>Size：待发送数据的个数</td></tr><tr><td>返回值</td><td>HAL状态值：HAL_OK表示发送成功；HAL_ERROR表示参数错误；HAL_BUSY表示串口被占用；</td></tr><tr><td>注意事项</td><td>1. 该函数将启动DMA方式的串口数据发送2. 完成指定数量的数据发送后，可以触发DMA中断，在中断中将调用发送中断回调函数HAL_UART_TxCpltCallback进行后续处理3. 该函数由用户调用户调用</td></tr></tbody></table><p>这里有一点值得注意：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-comment">// 这里可以写多字节消息的判断</span><br>HAL_UART_Transmit_DMA(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;RxBuffer_3, Uart_Rx_Cnt_3, <span class="hljs-number">0xFFFF</span>); <span class="hljs-comment">// 将收到的信息发送出去</span><br><span class="hljs-keyword">while</span> (HAL_UART_GetState(&amp;UART_HANDLE) == HAL_UART_STATE_BUSY_TX); <span class="hljs-comment">// 检测UART发送结束</span><br></code></pre></td></tr></table></figure><p>修改为DMA后，这里判断发送结束的函数将失去作用，因此要去掉这句。</p><p>还有就是STM32以DMA方式实现printf函数和普通中断方式不一样。<br>实现printf函数主要就是要改写fputc函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span><br></code></pre></td></tr></table></figure><p>但是fputc函数每次只能发送一个字节，如果我们把fputc函数直接改成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span><br>&#123;<br>  HAL_UART_Transmit_DMA(&amp;PrintUartHandle, (<span class="hljs-type">uint8_t</span> *)&amp;ch, <span class="hljs-number">1</span>); <br>  <span class="hljs-keyword">return</span> (ch);<br>&#125;<br></code></pre></td></tr></table></figure><p>那么至少存在两个问题：<br>1、DMA每次都发送一个字节，效率比较低。<br>2、频繁调用fputc，可能DMA上一次的数据还没有发送完，导致这次发送失败。<br>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;HelloWorld\r\n&quot;</span>);<br></code></pre></td></tr></table></figure><p>printf先发送H,调用fputc函数，此时DMA开始工作。由之前的分析可知，对于9600bps来说，需要1ms才能把字符H发送完成。在这1ms之内elloWolrd\r\n都会调用fputc函数，但由于DMA还没有发送完成，会导致其他的字符发送失败。最终成功发出去的只有第一个字符H。</p><p>如果想用调用DMA，就要想其他的办法。</p><p>简单起见，我们自定义一个使用DMA的打印函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 发送缓冲区</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UART_TX_BUF_SIZE 256</span><br><span class="hljs-type">uint8_t</span> UartTxBuf[UART_TX_BUF_SIZE];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Usart3DmaPrintf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format,...)</span><br>&#123;<br><span class="hljs-type">uint16_t</span> len;<br>va_list args;<br>va_start(args,format);<br>len = vsnprintf((<span class="hljs-type">char</span>*)UartTxBuf,<span class="hljs-keyword">sizeof</span>(UartTxBuf)+<span class="hljs-number">1</span>,(<span class="hljs-type">char</span>*)format,args);<br>va_end(args);<br>HAL_UART_Transmit_DMA(&amp;huart3, UartTxBuf, len);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>在函数开始时，使用 va_start 宏初始化了一个 va_list args 变量，以便访问可变数量的参数。</li><li>然后，使用 vsnprintf 函数将格式化后的字符串写入到 UartTxBuf 缓冲区中，并返回生成的字符串长度 len。vsnprintf 函数的第一个参数是目标缓冲区的地址，第二个参数是缓冲区大小，第三个参数是格式化字符串，最后一个参数是一个 va_list 变量，用于获取可变数量的参数列表。</li><li>在调用 vsnprintf 函数之后，使用 va_end 宏清理 va_list 变量，并结束对可变数量参数的访问。</li><li>最后，使用 HAL 库函数 HAL_UART_Transmit_DMA 发送数据。该函数的参数包括串口句柄 huart3、待发送数据的缓冲区 UartTxBuf，以及数据长度 len（注意：在代码中，len 实际上比 UartTxBuf 的大小小 1，因为 vsnprintf 已经将字符串末尾的 ‘\0’ 字符计算在内了）。</li></ul><p>修改后的代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;uart_3.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RXBUFFERSIZE_3 256 <span class="hljs-comment">// 最大接收字节数</span></span><br><br><span class="hljs-comment">// 定义串口句柄,使用串口1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UART_HANDLE huart3</span><br><br><span class="hljs-comment">// 定义数据缓冲区</span><br><span class="hljs-type">uint8_t</span> RxBuffer_3[RXBUFFERSIZE_3];<br><span class="hljs-type">uint8_t</span> Uart_RxBuffer_3;   <span class="hljs-comment">// 接收中断缓冲</span><br><span class="hljs-type">uint8_t</span> Uart_Rx_Cnt_3 = <span class="hljs-number">0</span>; <span class="hljs-comment">// 接收缓冲计数</span><br><br><span class="hljs-comment">// 发送缓冲区</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UART_TX_BUF_SIZE 256</span><br><span class="hljs-type">uint8_t</span> UartTxBuf[UART_TX_BUF_SIZE];<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART3_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-comment">/*串口硬件配置代码(使用cudeMX则不需要此部分)</span><br><span class="hljs-comment">  Init the GPIO of USART1</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-comment">// 使能 USART1 的接收中断</span><br>  __HAL_UART_ENABLE_IT(&amp;UART_HANDLE, UART_IT_RXNE);<br>  <span class="hljs-comment">// 开启 USART1 的连续接收中断，并指定接收缓冲区的地址和长度</span><br>  HAL_UART_Receive_DMA(&amp;UART_HANDLE, &amp;Uart_RxBuffer_3, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 串口3接收完成回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART3_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_TxCpltCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">if</span> (Uart_Rx_Cnt_3 &gt;= <span class="hljs-number">255</span>) <span class="hljs-comment">// 溢出判断</span><br>  &#123;<br>    Uart_Rx_Cnt_3 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(RxBuffer_3, <span class="hljs-number">0x00</span>, <span class="hljs-keyword">sizeof</span>(RxBuffer_3));<br>    Usart3DmaPrintf(<span class="hljs-string">&quot;数据溢出&quot;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    RxBuffer_3[Uart_Rx_Cnt_3++] = Uart_RxBuffer_3;<br>    <span class="hljs-comment">// 单字符判断</span><br><br>    <span class="hljs-keyword">if</span> ((RxBuffer_3[Uart_Rx_Cnt_3 - <span class="hljs-number">1</span>] == <span class="hljs-number">0x0A</span>) &amp;&amp; (RxBuffer_3[Uart_Rx_Cnt_3 - <span class="hljs-number">2</span>] == <span class="hljs-number">0x0D</span>)) <span class="hljs-comment">// 判断结束位</span><br>    &#123;<br>        <span class="hljs-type">char</span> str[<span class="hljs-number">256</span>];<br>        <span class="hljs-built_in">sprintf</span>(str, <span class="hljs-string">&quot;%s&quot;</span>, RxBuffer_3);<br>        Usart3DmaPrintf(str); <span class="hljs-comment">//将收到的信息发送出去</span><br><br>        <span class="hljs-comment">// 复位</span><br>        Uart_Rx_Cnt_3 = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">memset</span>(RxBuffer_3, <span class="hljs-number">0x00</span>, <span class="hljs-keyword">sizeof</span>(RxBuffer_3)); <span class="hljs-comment">// 清空数组</span><br>    &#125;<br>  &#125;<br><br>  HAL_UART_Receive_DMA(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;Uart_RxBuffer_3, <span class="hljs-number">1</span>); <span class="hljs-comment">// 因为接收中断使用了一次即关闭，所以在最后加入这行代码即可实现无限使用</span><br>&#125;<br><br><span class="hljs-comment">// 串口3错误回调函数(主要用来清除溢出中断)</span><br><span class="hljs-comment">//  void UART3_ErrorCallback(UART_HandleTypeDef *huart)</span><br><span class="hljs-comment">//  &#123;</span><br><span class="hljs-comment">//    if(HAL_UART_ERROR_ORE)</span><br><span class="hljs-comment">//    &#123;</span><br><span class="hljs-comment">//       uint32_t temp = huart-&gt;Instance-&gt;SR;</span><br><span class="hljs-comment">//       temp = huart-&gt;Instance-&gt;DR;</span><br><span class="hljs-comment">//    &#125;</span><br><span class="hljs-comment">//  &#125;</span><br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 串口3发送函数</span><br><span class="hljs-comment"> * @param &#123;char&#125; *format</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Usart3DmaPrintf</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *format,...)</span><br>&#123;<br><span class="hljs-type">uint16_t</span> len;<br>va_list args;<br>va_start(args,format);<br>len = vsnprintf((<span class="hljs-type">char</span>*)UartTxBuf,<span class="hljs-keyword">sizeof</span>(UartTxBuf),(<span class="hljs-type">char</span>*)format,args);<br>va_end(args);<br>HAL_UART_Transmit_DMA(&amp;huart3, UartTxBuf, len);<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是，发送部分使用了自己封装的<code> Usart3DmaPrintf(str);</code>函数。</p><p>效果如下：</p><p><img src="/2024/02/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E8%BF%9B%E9%98%B6/20240213114553.png"></p><p>使用DMA进一步减轻了CPU的负担，但是这样依旧只能一个字节一个字节接收。不是真正的不定长数据接收。</p><h2 id="三、串口空闲中断接收不定长数据"><a href="#三、串口空闲中断接收不定长数据" class="headerlink" title="三、串口空闲中断接收不定长数据"></a>三、串口空闲中断接收不定长数据</h2><p>为了完成接收真正的不定长数据，我们可以使用串口空闲中断，在一帧数据接收完再进行处理，而不是上面这样一个字节一个字节的处理。</p><p>空闲中断是串口RX总线上在一个字节的时间内没有再接收到数据的时候发生的。</p><p>对于HAL库，使用空闲中断接收，只需要在上面的代码基础上将<code>HAL_UART_Receive_DMA</code>改为<code>HAL_UARTEx_ReceiveToIdle_DMA</code> 当然，对于空闲中断也可以不使用DMA，这里我们直接使用DMA。</p><p>如何将串口接收寄存器非空回调更改为：<code>HAL_UARTEx_RxEventCallback</code>串口空闲中断回调函数</p><p>对几个串口的空闲中断进行代理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 串口空闲中断回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_UARTEx_RxEventCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-type">uint16_t</span> Size)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART1)<br>    &#123;<br>        <span class="hljs-comment">//UARTx1_RxEventCallback(huart);</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART2)<br>    &#123;<br>        <span class="hljs-comment">//UARTx2_RxEventCallback();</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART3)<br>    &#123;<br>        UARTx3_RxEventCallback(huart,Size);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在串口模块自行实现逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 串口3空闲中断回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">UARTx3_RxEventCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart, <span class="hljs-type">uint16_t</span> Size)</span><br>&#123;<br>  <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>  UNUSED(huart);<br>  UNUSED(Size);<br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span><br><span class="hljs-comment">           the HAL_UART_TxCpltCallback could be implemented in the user file</span><br><span class="hljs-comment">   */</span><br>  <br>  <span class="hljs-comment">// 将数据发送回去</span><br>  HAL_UART_Transmit_DMA(&amp;UART_HANDLE, RxBuffer_3,Size );<br>  HAL_UARTEx_ReceiveToIdle_DMA(&amp;UART_HANDLE, RxBuffer_3, RXBUFFERSIZE_3);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>这样就真正实现了任意长度数据接收，并且没有任何格式要求了。</p><p><img src="/2024/02/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E8%BF%9B%E9%98%B6/20240213121756.png"></p><p>值得注意的是，DMA的传输过半中断也会触发HAL_UARTEx_RxEventCallback回调函数，在目前的例子里是不需要的，反而会造成问题。所以我们要手动关闭DMA的传输过半中断。</p><p>在开启接收中断的同时关闭DMA的传输过半中断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">HAL_UARTEx_ReceiveToIdle_DMA(&amp;UART_HANDLE, RxBuffer_3, RXBUFFERSIZE_3);<br>__HAL_DMA_DISABLE_IT(&amp;hdma_usart3_rx, DMA_IT_HT);<br></code></pre></td></tr></table></figure><p>如果报错需要在模块前面添加：<code>extern DMA_HandleTypeDef hdma_usart3_rx;</code></p><p>这样就完成了串口模块的进阶。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/soledade/article/details/129030082">https://blog.csdn.net/soledade/article/details/129030082</a></li><li><a href="https://zhuanlan.zhihu.com/p/622278829">https://zhuanlan.zhihu.com/p/622278829</a></li><li><a href="https://blog.csdn.net/youmeichifan/article/details/103133537">https://blog.csdn.net/youmeichifan/article/details/103133537</a></li><li><a href="https://www.bilibili.com/video/BV1do4y1F7wt/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1do4y1F7wt/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>STM32串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32CubeMX项目标准化</title>
    <link href="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/"/>
    <url>/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文主要记录使用STM32CubeMX+keil建立标准化的项目结构。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>STM32CubeMX+keil项目标准化</td><td>v1.0.0</td><td>DuRuofu</td><td>2023-06-12</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="STM32CubeMX-keil项目标准化"><a href="#STM32CubeMX-keil项目标准化" class="headerlink" title="STM32CubeMX+keil项目标准化"></a>STM32CubeMX+keil项目标准化</h1><h2 id="一、使用STM32CubeMX生成keil项目"><a href="#一、使用STM32CubeMX生成keil项目" class="headerlink" title="一、使用STM32CubeMX生成keil项目"></a>一、使用STM32CubeMX生成keil项目</h2><blockquote><p>这里以一个串口项目为例：</p></blockquote><h4 id="1-设置RCC"><a href="#1-设置RCC" class="headerlink" title="1.设置RCC"></a>1.设置RCC</h4><p>设置高速外部时钟HSE 选择外部时钟源</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20230709112156.png"></p><h4 id="2-设置串口"><a href="#2-设置串口" class="headerlink" title="2.设置串口"></a>2.设置串口</h4><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20230709112203.png"></p><ol><li>点击USATR1   </li><li>设置MODE为异步通信(Asynchronous)       </li><li>基础参数：波特率为115200 Bits&#x2F;s。传输数据长度为8 Bit。奇偶检验无，停止位1      接收和发送都使能 </li><li>GPIO引脚设置 USART1_RX&#x2F;USART_TX</li><li>NVIC Settings 一栏使能接收中断</li></ol><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20230709112215.png"></p><h4 id="3-设置时钟"><a href="#3-设置时钟" class="headerlink" title="3.设置时钟"></a>3.设置时钟</h4><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20230709112227.png"></p><p>我的是  外部晶振为8MHz<br>1选择外部时钟HSE 8MHz<br>2PLL锁相环倍频72倍<br>3系统时钟来源选择为PLL<br>4设置APB1分频器为 &#x2F;2</p><h4 id="4-项目文件设置"><a href="#4-项目文件设置" class="headerlink" title="4.项目文件设置"></a>4.项目文件设置</h4><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20230709112235.png"></p><ol><li>设置项目名称</li><li>设置存储路径</li><li>选择所用IDE</li></ol><h4 id="5-创建工程文件"><a href="#5-创建工程文件" class="headerlink" title="5.创建工程文件"></a>5.创建工程文件</h4><p>然后点击<strong>GENERATE CODE</strong>  创建工程<br>配置下载工具<br>新建的工程所有配置都是默认的  我们需要自行选择下载模式，勾选上下载后复位运行<br><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20230709112243.png"></p><h2 id="二、规范目录结构"><a href="#二、规范目录结构" class="headerlink" title="二、规范目录结构"></a>二、规范目录结构</h2><p>默认情况下生成的项目结构如下：</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20240212144252.png"></p><p>我们需要自行添加Users文件夹用于存放我们自己编写的代码，添加Output文件夹用于存放编译产生的文件，如下：</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20240212144502.png"></p><p>并在Keil里设置编译输出文件路径：</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20240212144551.png"></p><h2 id="三、进行git版本管理："><a href="#三、进行git版本管理：" class="headerlink" title="三、进行git版本管理："></a>三、进行git版本管理：</h2><p>这里没什么好说的，主要是需要添加忽略文件<code>.gitignore</code>,内容建议如下：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*Output/*</span><br><span class="hljs-comment">*Output/*.hex</span><br><span class="hljs-comment">*.bak</span><br><span class="hljs-comment">*.scvd</span><br><span class="hljs-comment">*.ini</span><br><span class="hljs-comment">*.Administrator</span><br><span class="hljs-comment">*.hp</span><br><span class="hljs-comment">*.uvoptx</span><br><span class="hljs-comment">*DebugConfig/  </span><br><span class="hljs-comment">*OBJ/</span><br></code></pre></td></tr></table></figure><h2 id="四、项目代码结构及原则："><a href="#四、项目代码结构及原则：" class="headerlink" title="四、项目代码结构及原则："></a>四、项目代码结构及原则：</h2><p>尽量不再STM32CubeMX生成的文件里做任何修改，例如下面的usart.h</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20240212145107.png"></p><p>我们不会在生成的usart.c里编写我们的程序，而是会新建用户usart模块，在新建的模块里引入生成的代码头文件，来实现去耦。</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20240212145438.png"></p><p>以上图为例，只有红框内的代码为自行编写，这样这些模块可以得到很好的复用。</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/20240212145655.png"></p><p>main.c模块也只向下依赖app模块，由app模块负责整个项目的逻辑。</p><p><img src="/2024/02/12/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32CubeMX%E9%A1%B9%E7%9B%AE%E6%A0%87%E5%87%86%E5%8C%96/%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84.svg"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>STM32CubeMX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IIC协议解析</title>
    <link href="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/"/>
    <url>/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要介绍IIC协议的相关概念。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><p>|  文档名称  |  版本  |  作者  |      时间      |   备注   |<br>| —- | —- | ———— | —— |<br>| IIC协议解析 |v1.0.0| DuRuofu | 2024-02-07 | 首次建立 |</p><div STYLE="page-break-after: always;"></div># IIC协议解析<h3 id="1-1-介绍："><a href="#1-1-介绍：" class="headerlink" title="1.1 介绍："></a>1.1 介绍：</h3><p>I2C 通讯协议(Inter－Integrated Circuit)是由 Philips 公司（现在的 NXP 半导体公司）开发的一种简单、双向二线制 同步串行总线，只需要两根线即可在连接于总线上的器件之间传送信息。 I2C 通讯协议和通信接口在很多工程中有广泛的应用，如数据采集领域的串行 AD，图 像处理领域的摄像头配置，工业控制领域的 X 射线管配置等等。除此之外，由于 I2C 协议 占用引脚特别少，硬件实现简单，可扩展型强，现在被广泛地使用在系统内多个集成电路 (IC)间的通讯。</p><h3 id="1-2-硬件连接："><a href="#1-2-硬件连接：" class="headerlink" title="1.2 硬件连接："></a>1.2 硬件连接：</h3><p>I2C 通讯设备之间的常用连接方式，如下图：</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111346.png"></p><ol><li>它是一个支持多设备的总线。“总线”指多个设备共用的信号线。在一个 I2C 通讯 总线中，可连接多个 I2C 通讯设备，支持多个通讯主机及多个通讯从机。</li><li>一个 I2C 总线只使用两条总线线路，一条双向串行数据线(SDA) ，一条串行时钟线 (SCL)。数据线即用来表示数据，时钟线用于数据收发同步。</li><li>每个连接到总线的设备都有一个独立的地址，主机可以利用这个地址进行不同设备 之间的访问。 </li><li>总线通过上拉电阻接到电源。当 I2C 设备空闲时，会输出高阻态，而当所有设备都 空闲，都输出高阻态时，由上拉电阻把总线拉成高电平。</li><li>多个主机同时使用总线时，为了防止数据冲突，会利用仲裁方式决定由哪个设备占 用总线。</li><li>具有三种传输模式：标准模式传输速率为 100kbit&#x2F;s ，快速模式为 400kbit&#x2F;s ，高速 模式下可达 3.4Mbit&#x2F;s，但目前大多 I2C 设备尚不支持高速模式。</li><li>连接到相同总线的 IC 数量受到总线的最大电容 400pF 限制 。</li></ol><h3 id="1-2-I2C-协议层："><a href="#1-2-I2C-协议层：" class="headerlink" title="1.2 I2C 协议层："></a>1.2 I2C 协议层：</h3><h4 id="1、整体时序"><a href="#1、整体时序" class="headerlink" title="1、整体时序"></a>1、整体时序</h4><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111334.png"></p><p>I2C 协议整体时序图分为 4 个部分，图中标注的①②③④表示 I2C 协议的 4 个状态，分别为“总线空闲状态”、“起始信号”、“数据读&#x2F;写状态”和“停止信号”</p><ol><li>图中标注①表示“总线空闲状态”，在此状态下串口时钟信号 SCL 和串行数据信 号 SDA 均保持高电平，此时无 I2C 设备工作。</li><li>图中标注②表示“起始信号”，在 I2C 总线处于“空闲状态”时，SCL 依旧保持高 电平时， SDA 出现由高电平转为低电平的下降沿，产生一个起始信号，此时与总线相连的 所有 I2C 设备在检测到起始信号后，均跳出空闲状态，等待控制字节的输入。</li><li>图中标注③表示“数据读&#x2F;写状态”，“数据读&#x2F;写状态”</li><li>图中标注④表示“停止信号”，完成数据读写后，串口时钟 SCL 保持高电平，当 串口数据信号 SDA 产生一个由低电平转为高电平的上升沿时，产生一个停止信号，I2C 总 线跳转回“总线空闲状态”。</li></ol><p>数据读&#x2F;写状态”，“数据读&#x2F;写状态” 详解：</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111320.png"></p><p>I2C 通讯设备的通讯模式是主从通讯模式，通讯双方有主从之分。</p><p>当主机向从机进行指令或数据的写入时，串行数据线 SDA 上的数据在串行时钟 SCL 为高电平时写入从机设备，每次只写入一位数据；串行数据线 SDA 中的数据在串行时钟 SCL 为低电平时进行数据更新，以保证在 SCL 为高电平时采集到 SDA 数据的稳定状态。 </p><p>当一个完整字节的指令或数据传输完成，从机设备正确接收到指令或数据后，会通过 拉低 SDA 为低电平，向主机设备发送单比特的应答信号，表示数据或指令写入成功。若从 机正确应答，可以结束或开始下一字节数据或指令的传输，否则表明数据或指令写入失 败，主机就可以决定是否放弃写入或者重新发起写入。</p><p>要注意的是数据以 8bit 即一个字节为单位串行发出，其最先发送的是字节的最高位。</p><h4 id="2、I2C-设备器件地址与存储地址"><a href="#2、I2C-设备器件地址与存储地址" class="headerlink" title="2、I2C 设备器件地址与存储地址"></a>2、I2C 设备器件地址与存储地址</h4><p><strong>器件地址</strong>：</p><p>每个 I2C 设备在出厂前都被设置了器件地址，用户不可自主更改；器件地址一般位宽 为 7 位，有的 I2C 设备的器件地址设置了全部位宽，例如OV7725、 OV5640 摄像 头 ； 有 的 I2C 设 备 的 器 件 地址 设 置了 部 分 位 宽 ， 例 如 EEPROM 存储芯片：AT24C64，它的器件地址只设置了高 4 位，剩下的低 3 位由用户在设计硬件时自主设置。</p><p>下面的例子里我们实验使用的是 ATMEL 公司生产的 AT24C 系列中的型号为 AT24C64 的 EEPROM 存储芯片。AT24C64 存储容量为 64Kbit，内部分成 256 页，每页 32 字节， 共有 8192 个字节，且其读写操作都是以字节为基本单位。 AT24C64 EEPROM 存储芯片的器件 地址包括厂商设置的高 4 位 1010 和用户需自主设置的低 3 位 A0、A1、A2 。在硬件设计 时，通过将芯片的 A0、A1、A2 这 3 个引脚分别连接到 VCC 或 GND 来实现器件地址低 3 位的设置，若 3 个引脚均连接到 VCC，则设置后的器件地址为 1010_111；若 3 个引脚均连 接到 GND，则设置后的器件地址为 1010_000。由于 A0、A1、A2 这 3 位只能组合出 8 种 情况，所以一个主机最多只能连接 8 个 AT24C64 存储芯片</p><p>对于本次实验的开发板，这 3 个管脚连接到地，所以 E2PROM 的器件地址为 7’h50。（1010_000）</p><p>进行数据传输时，主机首先向总线上发出开始信号，对应开始位 S，然后按照从高到低的位序发送器 件地址，一般为 7bit，第 8bit 位为读写控制位 R&#x2F;W，该位为 0 时表示主机对从机进行写操作，当该位为 1 时表示主机对从机进行读操作，然后接收从机响应。对于 AT24C64 来说，其传输器件地址格式如下图所示。</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111247.png"></p><p>通常情况下，主机在与从机建立通讯时，并不是直接向想要通讯的从机发送控制命令 (器件地址 + 读&#x2F;写控制位)以建立通讯，而是主机会将控制命令直接发送到串行数据线 SDA 上，与主机硬件相连的从机设备都会接收到主机发送的控制命令。所有从机设备在接收到主机发送的控制命令后会与自身器件地址做对比；若两者地址相同，该从机设备会回应一 个应答信号告知主机设备，主机设备接收到应答信号后，主从设备建立通讯连接，两者可 进行数据通讯。</p><p><strong>存储地址</strong>：</p><p>每一个支持 I2C 通讯协议的设备器件，内部都会包含一些可进行读&#x2F;写操作的寄存器或 存储器。 OV7725、OV5640 摄像头(它们使用的是与 I2C 协议极 为相似的 SCCB 协议)，他们内部包含一些需要进行读&#x2F;写配置的寄 存器，只有向对应寄存器写入正确参数，摄像头才能被正确使用；本文使用的 EEPROM 存储芯片内部则包含许多存储单元，需要存储的数据按照地址被写入对应存储单元</p><p>由于 I2C 设备要配置寄存器的多少或存储容量的大小的不同，存储地址根据位宽分为 单字节和 2 字节两种。例如之后要提到的 OV7725、OV5640 摄像头，两者的寄存器数量不 同，OV7725 摄像头需要配置寄存器较少，单个字节能够实现所有寄存器的寻址，所以他的存储地址位宽为 8 位；而 OV5640 摄像头需要配置寄存器较多，单个字节不能够实现所有寄存器的寻址，所以他的存储地址位宽为 16 位，2 个字节。</p><p>以 EEPROM 存储芯片为例，在 ATMEL 公司生产的 AT24C 系列 EEPROM 存储芯片中 选取两款存储芯片 AT24C04 和 AT24C64。AT24C04 的存储容量为 1Kbit(128byte)，7 位存 储地址即可满足所有存储单元的寻址，存储地址为单字节即可；而 AT24C64 的存储空间为 64 Kbit(8Kbyte)，需要 13 位存储地址才可满足所有存储单元的寻址，存储地址为 2 字节。</p><p>AT24C04、AT24C64 存储地址示意图：</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207104959.png"></p><p>实际通讯如下：</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111229.png"></p><h4 id="3、读写时序"><a href="#3、读写时序" class="headerlink" title="3、读写时序"></a>3、读写时序</h4><p>IIC 读写方法简单总结如下：<br><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207113105.png"></p><h5 id="写操作"><a href="#写操作" class="headerlink" title="写操作"></a>写操作</h5><p>主机发送完字地址，从机正确应答后就把内部的存储单元地址指针指向该单元。如果读写控制位 R&#x2F;W 位为“0”即写命令，从机就处于接收数据的状态，此时，主机就开始写数据了，写数据可分为单次写 （对于 E2PROM 而言，称为字节写）和连续写（对于 E2PROM 而言，称为页写）。</p><p><strong>E2PROM 单次写（字节写）的时序如下图：</strong></p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111210.png"></p><ol><li>主机产生并发送起始信号到从机，并且将写控制命令发送给从机设备，读写控制位设置为低电 平，表示对从机进行写数据操作。注意，写控制命令的发送是高位在前低位在后； </li><li>从机接收到写控制指令后，回传应答信号，如果从机没有应答则会输出 I2C 通信错误信号，如 果主机接收到应答信号，就开始字地址的写入。根据器件类型，我们需要先判断使用的器件是单字节地址 还是双字节地址，若为双字节地址，先向从机写入高 8 位地址，且高位在前低位在后；待接收到从机回传 的应答信号，再写入低 8 位地址，且高位在前低位在后，双字节字地址写入完成后执行步骤（4）；若为单 字节地址跳转到步骤(3)； </li><li>按高位在前低位在后的顺序写入单字节存储地址，单字节字地址写入完成后执行步骤（4）；</li><li>字地址写入完成，主机接收到从机回传的应答信号后，开始单字节数据的写入； </li><li>单字节数据写入完成，主机接收到应答信号后，向从机发送停止信号，单次写（字节写）完成。</li></ol><p><strong>E2PROM 连续写（页写）的时序如下图</strong>：</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207111154.png"></p><p>参照时序图，连续写（页写）操作流程如下： </p><ol><li>主机产生并发送起始信号到从机，并且将写控制命令发送给从机设备，读写控制位设置为低电 平，表示对从机进行写数据操作。注意，写控制命令的发送是高位在前低位在后； </li><li>从机接收到写控制指令后，回传应答信号，如果从机非应答，则会输出 I2C 通信错误信号，如 果主机接收到从机应答信号，就开始字地址的写入。根据器件类型，我们需要先判断使用的器件是单字节地址还是双字节地址，若为双字节地址，先向从机写入高 8 位地址，且高位在前低位在后；待接收到从机 回传的应答信号，再写入低 8 位地址，且高位在前低位在后，双字节字地址写入完成后执行步骤（4）；若为单字节地址跳转到步骤（3）； </li><li>按高位在前低位在后的顺序写入单字节存储地址，单字节字地址写入完成后执行步骤（4）；</li><li>地址写入完成，主机接收到从机回传的应答信号后，开始第一个单字节数据的写入； </li><li>数据写入完成，主机接收到从机回传应答信号后，开始下一个单字节数据的写入； </li><li>直到所有数据写入完成，主机接收到从机回传应答信号后，执行步骤（7）。若数据未完成写 入，跳回到步骤（5）； </li><li>主机向从机发送停止信号，连续写（页写）操作完成。</li></ol><p>两者的区别在于发送完一字节数据后，是发送结束信号还是继续发送 下一字节数据，如果发送的是结束信号，就称为单次写，如果继续发送下一字节数据，就称为连续写。要注意的是，所有 I2C 设备均支持单字节数据写入操作，但只有部分 I2C 设备支持页写操作，对于 AT24C64 的页写，是不能发送超过一页的单元容量的数据的，而 AT24C64 的一页的单元容量为 32Byte， 当写完一页的最后一个单元时，地址指针指向该页的开头，如果再写入数据，就会覆盖该页的起始数据。</p><h5 id="读操作"><a href="#读操作" class="headerlink" title="读操作"></a>读操作</h5><p>在发送控制命令时，如果读写控制位 R&#x2F;W 位为“1”即读命令，主机就处于接收数据的状态，从机从 该地址单元输出数据。读数据有三种方式：当前地址读、随机读和连续读。当前地址读是指在一次读或写 操作后发起读操作。由于 I2C 器件在读写操作后，其内部的地址指针自动加一，因此当前地址读可以读取 下一个字地址的数据。也就是说上次读或写操作的单元地址为 02 时，当前地址读的内容就是地址 03 处的 单元数据，时序图如图所示。</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207112006.png"></p><p>参照时序图，当前地址读操作流程如下：</p><ol><li>主机产生并发送起始信号到从机，并且将读控制命令发送给从机设备，读写控制位设置为高电 平，表示对从机进行读数据操作。注意，读控制命令的发送是高位在前低位在后；</li><li>从机接收到读控制指令后，如果回传非应答信号，则会输出 I2C 通信错误信号，如果回传应答 信号，主机接收到从机回传的应答信号后，开始接收从机传回的单字节数据；</li><li>数据接收完成后，主机产生一个时钟的高电平无应答信号；</li><li>主机向从机发送停止信号，当前地址读操作完成。</li></ol><p>由于当前地址读极不方便读取任意的地址单元的数据，所以就有了随机读，随机读的时序见图</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207112159.png"></p><p>参照时序图，随机地址读操作流程如下：</p><ol><li>主机产生并发送起始信号到从机，并且将写控制命令发送给从机设备，读写控制位设置为低电 平，表示对从机进行写数据操作。注意，写控制命令的发送是高位在前低位在后；</li><li>从机接收到读控制指令后，如果回传非应答信号，则会输出 I2C 通信错误信号，如果回传应答 信号，主机接收到应答信号后开始字地址的写入。根据器件类型，我们需要先判断使用的器件是单字节地 址还是双字节地址，若为双字节地址，先向从机写入高 8 位地址，且高位在前低位在后；待接收到从机回 传的应答信号，再写入低 8 位地址，且高位在前低位在后，双字节字地址写入完成后执行步骤（4）；若为 单字节地址跳转到步骤（3）；</li><li>按高位在前低位在后的顺序写入单字节存储地址，单字节字地址写入完成后执行步骤（4）； </li><li>字地址写入完成，主机接收到从机回传的应答信号后，主机再次向从机发送一个起始信号； </li><li>主机向从机发送读控制命令，读写控制位设置为高电平，表示对从机进行数据读操作； </li><li>主机接收到从机回传的应答信号后，开始接收从机传回的单字节数据； </li><li>数据接收完成后，主机产生一个时钟的高电平无应答信号；</li><li>主机向从机发送停止信号，单字节读操作完成。</li></ol><p>我们需要使从机内的存储单元地址指针指向我们想要读取的存储单元地址处，所以首先发送了一次 Dummy Write 也就是虚写操作，只所以称为虚写，是因为我们并不是真的要写数据，而是通过这种虚写操 作使地址指针指向虚写操作中字地址的位置，等从机应答后，就可以以当前地址读的方式读数据了，所以，随机地址读是没有发送数据的单次写操作和当前地址读操作的结合体。</p><p>当前地址读和随机读都是一次读取一个字节，连续读是将当前地址读或随机读的主机非应答改成应答，表示继续读取数据，如图：</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207112734.png"></p><ol><li>主机产生并发送起始信号到从机，并且将读控制命令发送给从机设备，读写控制位设置为高电 平，表示对从机进行读数据操作。注意，读控制命令的发送是高位在前低位在后；</li><li>从机接收到读控制指令后，如果回传非应答信号，则会输出 I2C 通信错误信号，如果回传应答 信号，主机接收到从机回传的应答信号后，开始接收从机传回的单字节数据；</li><li>数据接收完成后，主机产生应答信号回传给从机，从机接收到应答信号开始下一字节数据的传输，若数据传输完成，主机产生非应答信号回传给从机，执行下一操作步骤；若数据传输未完成，再次执行步骤（3）；</li><li>主机向从机发送停止信号，当前地址连续读时序操作完成。</li></ol><p>有当前地址连续读，当然也有随机地址连续读，随机地址连续读是在随机地址读时序的基础上，主机非应答改成应答，表示继续读取数据。</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/IIC%E5%8D%8F%E8%AE%AE%E8%A7%A3%E6%9E%90/20240207113003.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/shaguahaha/article/details/70766665">https://blog.csdn.net/shaguahaha/article/details/70766665</a></li><li><a href="https://www.bilibili.com/video/BV1E94y1p7jk/?spm_id_from=333.337.search-card.all.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1E94y1p7jk/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://www.bilibili.com/video/BV17z411i7er/?p=190&spm_id_from=333.788.top_right_bar_window_history.content.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV17z411i7er/?p=190&amp;spm_id_from=333.788.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>通讯协议</category>
      
      <category>IIC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通讯协议</tag>
      
      <tag>IIC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA实现硬件频率计</title>
    <link href="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/"/>
    <url>/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>FPGA实现硬件频率计</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-02-05</td><td>首次建立</td></tr></tbody></table><div STYLE="page-break-after: always;"></div><h1 id="FPGA实现硬件频率计"><a href="#FPGA实现硬件频率计" class="headerlink" title="FPGA实现硬件频率计"></a>FPGA实现硬件频率计</h1><h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>频率测量在诸多领域都有广泛的应用，常用的频率测量方法有两种，分别是频率测量 法和周期测量法。 </p><p><strong>频率测量法</strong>：在时间 t 内对被测时钟信号的时钟周期 N 进行计数，然后求出单位时间 内的时钟周期数，即为被测时钟信号的时钟频率。 </p><p><strong>周期测量法</strong>：先测量出被测时钟信号的时钟周期 T，然后根据频率 f &#x3D; 1／T 求出被测 时钟信号的频率。</p><p>但是上述两种方法都会产生±1 个被测时钟周期的误差，在实际应用中有一定的局限 性；而且根据两种方式的测量原理，很容易发现频率测量法适合于测量高频时钟信号，而周期测量法适合于低频时钟信号的测量，但二者都不能兼顾高低频率同样精度的测量要求</p><p>等精度测量法与前两种方式不同，其最大的特点是，测量的实际门控时间不是一个固 定值，它与被测时钟信号相关，是被测时钟信号周期的整数倍。在实际门控信号下，同时 对标准时钟和被测时钟信号的时钟周期进行计数，再通过公式计算得到被测信号的时钟频 率。</p><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/20240206100927.png"></p><p>被测时钟信号的计算方法。<br>首先我们先分别对实际闸门下被测时钟信号和标准时钟信号的时钟周期进行计数。 实际闸门下被测时钟信号周期数为 X，设被测信号时钟周期为 Tfx，它的时钟频率 fx &#x3D; 1&#x2F;Tfx，由此可得等式：X * Tfx &#x3D; X &#x2F; fx &#x3D; Tx(实际闸门)。<br>实际闸门下标准时钟信号周期数为 Y，设被测信号时钟周期为 Tfs，它的时钟频率 fs &#x3D; 1&#x2F;Tfs，由此可得等式：Y * Tfs &#x3D; Y &#x2F; fs &#x3D; Tx(实际闸门)。<br>其次，将两等式结合得到只包含各自时钟周期计数和时钟频率的等式：X &#x2F; fx &#x3D; Y &#x2F; fs &#x3D; Tx(实际闸门)，等式变换，得到被测时钟信号时钟频率计算公式：fx &#x3D; X * fs &#x2F; Y。<br>最后，将已知量标准时钟信号时钟频率 fs 和测量量 X、Y 带入计算公式，得到被测时 钟信号时钟频率 fx。</p><h3 id="二、系统框图"><a href="#二、系统框图" class="headerlink" title="二、系统框图"></a>二、系统框图</h3><p>顶层模块：<br><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/%E9%A1%B6%E5%B1%82%E6%A8%A1%E5%9D%97.svg"></p><p>子功能模块：<br><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/%E5%AD%90%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97.svg"></p><p>整体框图：<br><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/%E6%95%B4%E4%BD%93%E6%A1%86%E5%9B%BE.svg"></p><h3 id="三、-模块波形图"><a href="#三、-模块波形图" class="headerlink" title="三、 模块波形图"></a>三、 模块波形图</h3><h4 id="频率计算模块：freq-meter-calc"><a href="#频率计算模块：freq-meter-calc" class="headerlink" title="频率计算模块：freq_meter_calc"></a>频率计算模块：freq_meter_calc</h4><p><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/%E9%A2%91%E7%8E%87%E8%AE%A1%E7%AE%97%E6%A8%A1%E5%9D%97%E6%B3%A2%E5%BD%A2.svg"></p><h3 id="三、-代码实现"><a href="#三、-代码实现" class="headerlink" title="三、 代码实现"></a>三、 代码实现</h3><h4 id="频率计算模块：freq-meter-calc-1"><a href="#频率计算模块：freq-meter-calc-1" class="headerlink" title="频率计算模块：freq_meter_calc"></a>频率计算模块：freq_meter_calc</h4><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> freq_meter_calc(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_rst_n,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> clk_test,<br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] freq<br>    );<br><span class="hljs-comment">// 参数定义：</span><br><span class="hljs-keyword">parameter</span> CNT_GATE_S_MAX = <span class="hljs-number">27&#x27;d74_999_999</span>; <span class="hljs-comment">//闸门计数器最大值(1.5s)</span><br><span class="hljs-keyword">parameter</span> CNT_RISE_MAX = <span class="hljs-number">27&#x27;d12_500_000</span>-<span class="hljs-number">1</span>; <span class="hljs-comment">//闸门计数器最大值(0.25s)</span><br><span class="hljs-keyword">parameter</span> CLK_STAND_FREQ = <span class="hljs-number">27&#x27;d100_000_000</span>; <span class="hljs-comment">//标准参考时钟频率</span><br><br><br><span class="hljs-comment">// 声明变量：</span><br><span class="hljs-keyword">reg</span>  [<span class="hljs-number">26</span>:<span class="hljs-number">0</span>] cnt_gate_s; <span class="hljs-comment">//软件闸门计数器</span><br><span class="hljs-keyword">reg</span> gate_s; <span class="hljs-comment">//软件闸门标志</span><br><span class="hljs-keyword">reg</span> gate_a; <span class="hljs-comment">//实际闸门标志</span><br><span class="hljs-keyword">reg</span>  [<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] cnt_clk_test; <span class="hljs-comment">//软件闸门计数器</span><br><span class="hljs-keyword">reg</span> gate_a_test_reg; <span class="hljs-comment">//实际闸门标志缓冲（延时一拍）</span><br><span class="hljs-keyword">reg</span>  [<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] cnt_clk_test_reg; <span class="hljs-comment">//软件闸门计数器值</span><br><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] cnt_clk_stand; <span class="hljs-comment">//标准参考时钟计数器</span><br><span class="hljs-keyword">reg</span> gate_a_stand_reg; <span class="hljs-comment">//实际闸门标志缓冲（延时一拍）</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">47</span>:<span class="hljs-number">0</span>] cnt_clk_stand_reg; <span class="hljs-comment">//标准参考时钟计数器值</span><br><br><span class="hljs-keyword">reg</span> calc_flag; <span class="hljs-comment">//计算标志</span><br><span class="hljs-keyword">reg</span> calc_flag_reg; <span class="hljs-comment">//计算标志</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">63</span>:<span class="hljs-number">0</span>] freq_reg; <span class="hljs-comment">//软件闸门计数器值</span><br><br><span class="hljs-keyword">wire</span> gate_a_fall_t; <span class="hljs-comment">//实际闸门下降沿标志(test)</span><br><span class="hljs-keyword">wire</span> gate_a_fall_s; <span class="hljs-comment">//实际闸门下降沿标志(stand)</span><br><span class="hljs-keyword">wire</span> clk_stand; <span class="hljs-comment">//标准参考时钟</span><br><br><br><span class="hljs-comment">// 测量X值</span><br><span class="hljs-comment">// 闸门计数器：</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        cnt_gate_s &lt;= <span class="hljs-number">28&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 清零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt_gate_s == CNT_GATE_S_MAX) <span class="hljs-keyword">begin</span><br>            cnt_gate_s &lt;= <span class="hljs-number">28&#x27;b0</span>;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        cnt_gate_s &lt;= cnt_gate_s + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 闸门标志：</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        gate_s &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 拉高</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((cnt_gate_s &gt; CNT_RISE_MAX) &amp;&amp; (cnt_gate_s &lt;=CNT_GATE_S_MAX-CNT_RISE_MAX)) <span class="hljs-keyword">begin</span><br>        gate_s &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 拉低</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        gate_s &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实际闸门标志：</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_test <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        gate_a &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        gate_a &lt;= gate_s;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 软件闸门计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_test <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        cnt_clk_test &lt;= <span class="hljs-number">48&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 清零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gate_a == <span class="hljs-number">1&#x27;b0</span>) <span class="hljs-keyword">begin</span><br>        cnt_clk_test &lt;= <span class="hljs-number">48&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 计数条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gate_a == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        cnt_clk_test &lt;= cnt_clk_test + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <br>        cnt_clk_test &lt;= <span class="hljs-number">48&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实际闸门标志缓冲（延时一拍）</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        gate_a_test_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        gate_a_test_reg &lt;= gate_a;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实际闸门下降沿标志</span><br><span class="hljs-keyword">assign</span> gate_a_fall_t = (gate_a_test_reg == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (gate_a == <span class="hljs-number">1&#x27;b0</span>)?<span class="hljs-number">1&#x27;b1</span>:<span class="hljs-number">1&#x27;b0</span>;<br><br><span class="hljs-comment">// 软件闸门计数器值</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        cnt_clk_test_reg &lt;= <span class="hljs-number">48&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gate_a_fall_t == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        cnt_clk_test_reg &lt;= cnt_clk_test;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 测量Y值</span><br><span class="hljs-comment">// 实例化倍频模块,产生标准信号</span><br>clk_stand clk_stand_inst<br>(<br><span class="hljs-comment">// Clock out ports</span><br><span class="hljs-variable">.clk_out1</span>(clk_stand),     <span class="hljs-comment">// output clk_out1</span><br><span class="hljs-comment">// Status and control signals</span><br><span class="hljs-variable">.reset</span>(~sys_rst_n), <span class="hljs-comment">// input reset</span><br><span class="hljs-comment">// Clock in ports</span><br><span class="hljs-variable">.clk_in1</span>(sys_clk));      <span class="hljs-comment">// input clk_in1</span><br><br><span class="hljs-comment">// 标准参考时钟计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_stand <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        cnt_clk_stand &lt;= <span class="hljs-number">48&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gate_a == <span class="hljs-number">1&#x27;b0</span>)<br>        cnt_clk_stand &lt;= <span class="hljs-number">48&#x27;d0</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gate_a == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        cnt_clk_stand &lt;= cnt_clk_stand + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span>    <br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实际闸门标志缓冲（延时一拍）</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_stand <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        gate_a_stand_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        gate_a_stand_reg &lt;= gate_a;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实际闸门下降沿标志(stand)</span><br><span class="hljs-keyword">assign</span> gate_a_fall_s = (gate_a_stand_reg == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (gate_a == <span class="hljs-number">1&#x27;b0</span>)?<span class="hljs-number">1&#x27;b1</span>:<span class="hljs-number">1&#x27;b0</span>;<br><br><span class="hljs-comment">// 标准参考时钟计数器值</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk_stand <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        cnt_clk_stand_reg &lt;= <span class="hljs-number">48&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(gate_a_fall_s == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        cnt_clk_stand_reg &lt;= cnt_clk_stand;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 频率计算标志</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        calc_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cnt_gate_s == CNT_GATE_S_MAX) <span class="hljs-keyword">begin</span><br>        calc_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        calc_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">// 频率计算</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        freq_reg &lt;= <span class="hljs-number">32&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(calc_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        freq_reg &lt;= (cnt_clk_test_reg * CLK_STAND_FREQ) / cnt_clk_stand_reg;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 计算标志信号缓冲</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        calc_flag_reg &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        calc_flag_reg &lt;= calc_flag;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出频率</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(~sys_rst_n) <span class="hljs-keyword">begin</span><br>        freq &lt;= <span class="hljs-number">32&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(calc_flag_reg == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        freq &lt;= freq_reg[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>仿真代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> freq_meter_tb;<br><br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> clk_test;<br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] freq;<br><br><br><br><span class="hljs-comment">// 重置</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">0</span>;<br>    sys_rst_n &lt;= <span class="hljs-number">0</span>;<br>    #<span class="hljs-number">100</span>; <span class="hljs-comment">// 等待足够的时间以稳定系统</span><br>    sys_rst_n &lt;= <span class="hljs-number">1</span>;<br>    clk_test =<span class="hljs-number">1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 时钟生成</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><br><span class="hljs-comment">// 待测信号生成</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">50</span> clk_test = ~clk_test;<br><br><span class="hljs-keyword">defparam</span> freq_meter_calc<span class="hljs-variable">.CNT_GATE_S_MAX</span> = <span class="hljs-number">749</span>;<br><span class="hljs-keyword">defparam</span> freq_meter_calc<span class="hljs-variable">.CNT_RISE_MAX</span> = <span class="hljs-number">124</span>;<br><br><span class="hljs-comment">// 实例化被测模块</span><br>freq_meter_calc freq_meter_calc (<br>    <span class="hljs-variable">.sys_clk</span>(sys_clk),<br>    <span class="hljs-variable">.sys_rst_n</span>(sys_rst_n),<br>    <span class="hljs-variable">.clk_test</span>(clk_test),<br>    <span class="hljs-variable">.freq</span>(freq)<br>);<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><p>四、效果<br><img src="/2024/02/05/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6%E9%A2%91%E7%8E%87%E8%AE%A1/20240206152124.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>FPGA</category>
      
      <category>vivado</category>
      
      <category>频率计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>vivado</tag>
      
      <tag>频率计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vscdoe+虚拟机开发ESP32</title>
    <link href="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/"/>
    <url>/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档主要记载一些vscdoe配合虚拟机远程连接开发ESP32的窍门</li></ol><div STYLE="page-break-after: always;"></div><h1 id="vscdoe配合虚拟机远程连接开发"><a href="#vscdoe配合虚拟机远程连接开发" class="headerlink" title="vscdoe配合虚拟机远程连接开发"></a>vscdoe配合虚拟机远程连接开发</h1><h2 id="1-连接虚拟机开发过程"><a href="#1-连接虚拟机开发过程" class="headerlink" title="1. 连接虚拟机开发过程"></a>1. 连接虚拟机开发过程</h2><blockquote><p>这部分不再赘述，主要依靠Remote -SSH插件，然后编译使用命令行。</p></blockquote><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129230625.png"><br>网上搜素vscode远程开发即可</p><h2 id="2-一些问题的处理"><a href="#2-一些问题的处理" class="headerlink" title="2. 一些问题的处理"></a>2. 一些问题的处理</h2><h3 id="2-1-头文件跳转的问题"><a href="#2-1-头文件跳转的问题" class="headerlink" title="2.1 头文件跳转的问题"></a>2.1 头文件跳转的问题</h3><p>不使用esp-idf插件的原因是多版本切换不方便，使用命令行能随时多版本切换，但是这样导致我们的代码头文件无法跳转，写代码没有代码提示。</p><p>无法跳转：<br><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231028.png"><br>无有效代码提示：</p><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129232435.png"></p><p>解决办法：<br>先编译代码：<br><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231103.png"></p><p>然后找到<code>build</code>下的<code>compile_commands.json</code>文件：</p><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231253.png"></p><p>右键复制绝对路径：<br><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231616.png"></p><p>然后打开命令面板：</p><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231412.png"></p><p>找到这一项：<br><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231444.png"></p><p>将绝对路径复制到编译命令：<br><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231711.png"></p><p>然后就能正常跳转到源码了</p><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129231954.png"></p><p>代码提示也有了：</p><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240129232230.png"></p><h3 id="2-2-手输命令太麻烦的问题"><a href="#2-2-手输命令太麻烦的问题" class="headerlink" title="2.2 手输命令太麻烦的问题"></a>2.2 手输命令太麻烦的问题</h3><p>使用Run Terminal Command插件可视化执行命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;runTerminalCommand.commands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <br><br>    <span class="hljs-comment">//------------------V4-----------------//</span><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py fullclean&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fullclean&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 配置</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py menuconfig&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;menuconfig&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 编译</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 查询串口</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ls /dev/ttyUSB*&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Query serial port&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-comment">// 烧录</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py -p &#123;clipboard&#125; flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//打开监视器</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py -p &#123;clipboard&#125; monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>   <br>    <span class="hljs-comment">//一次性编译烧录和打开监视</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py -p &#123;clipboard&#125; flash monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&amp;flash&amp;monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 擦除</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py -p &#123;clipboard&#125; erase_flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erase_flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>   <br>    <span class="hljs-comment">//查询内存剩余</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py size&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;size&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置开发板esp32</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py fullclean &amp;&amp; idf.py set-target esp32&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set-target esp32&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置开发板esp32c3</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py fullclean &amp;&amp; idf.py set-target esp32c3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set-target esp32c3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置开发板esp32s3</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v4 &amp;&amp; idf.py fullclean &amp;&amp; idf.py set-target esp32s3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set-target esp32s3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v4.4.6&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//------------------V5-----------------//</span><br>    <span class="hljs-comment">// 删除</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py fullclean&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fullclean&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 配置</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py menuconfig&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;menuconfig&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 编译</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 查询串口</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ls /dev/tty*&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Query serial port&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-comment">// 烧录</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py -p &#123;clipboard&#125; flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">//打开监视器</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py -p &#123;clipboard&#125; monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>   <br>    <span class="hljs-comment">//一次性编译烧录和打开监视</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py -p &#123;clipboard&#125; flash monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&amp;flash&amp;monitor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 擦除</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py -p &#123;clipboard&#125; erase_flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;erase_flash&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>   <br>    <span class="hljs-comment">//查询内存剩余</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py size&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;size&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置开发板esp32</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py fullclean &amp;&amp; idf.py set-target esp32&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set-target esp32&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置开发板esp32c3</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py fullclean &amp;&amp; idf.py set-target esp32c3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set-target esp32c3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-comment">// 设置开发板esp32s3</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;get_idf_v5 &amp;&amp; idf.py fullclean &amp;&amp; idf.py set-target esp32s3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;auto&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;set-target esp32s3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;preserve&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ESP-IDF-v5.1.2&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br></code></pre></td></tr></table></figure><p>然后就可以使用命令快捷方式来开发ESP32了，效率提示。</p><p><img src="/2024/01/30/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/vscdoe+%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%BC%80%E5%8F%91ESP32/20240130012646.png"></p>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UART串口通信-基于FIFO</title>
    <link href="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/"/>
    <url>/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文记录使用FPGA实现简单UART串口通信-基于FIFO</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>UART串口通信-基于FIFO</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-01-28</td><td>首次建立</td></tr></tbody></table><h1 id="UART串口通信-基于FIFO"><a href="#UART串口通信-基于FIFO" class="headerlink" title="UART串口通信-基于FIFO"></a>UART串口通信-基于FIFO</h1><blockquote><p>代码：<a href="https://github.com/DuRuofu/FPGA_Learning/tree/master/06_uart_fifo">https://github.com/DuRuofu/FPGA_Learning/tree/master/06_uart_fifo</a></p></blockquote><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>实现收发双缓冲的串口回环实验</p><h2 id="一、整体框图"><a href="#一、整体框图" class="headerlink" title="一、整体框图"></a>一、整体框图</h2><p>顶层模块:</p><p><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/%E9%A1%B6%E5%B1%82%E6%A1%86%E5%9B%BE.svg"></p><p>子模块模块:<br><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/%E5%AD%90%E6%A8%A1%E5%9D%97.svg"></p><p>整体框图:</p><p><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/%E6%95%B4%E4%BD%93%E6%A1%86%E5%9B%BE.svg"></p><h2 id="二、模块波形图"><a href="#二、模块波形图" class="headerlink" title="二、模块波形图"></a>二、模块波形图</h2><blockquote><p>以9600波特率为例。</p></blockquote><p>接收模块:<br><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97%E6%B3%A2%E5%BD%A2%E5%9B%BE(rx).svg"></p><p>发送模块：<br><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97%E6%B3%A2%E5%BD%A2%E5%9B%BE(tx).svg"></p><h2 id="三、代码编写"><a href="#三、代码编写" class="headerlink" title="三、代码编写"></a>三、代码编写</h2><h3 id="3-1-串口接收模块"><a href="#3-1-串口接收模块" class="headerlink" title="3.1 串口接收模块"></a>3.1 串口接收模块</h3><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-comment">// 串口接收模块</span><br><span class="hljs-keyword">module</span> uart_rx<br>#(<br>    <span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">&#x27;d9600</span>,        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-keyword">parameter</span> CLK_FREQ = <span class="hljs-number">&#x27;d50_000_000</span>   <span class="hljs-comment">// 时钟频率</span><br>)<br>(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  sys_clk,        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  sys_rst_n,      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  rx,             <span class="hljs-comment">// 串口接收数据</span><br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] po_data,  <span class="hljs-comment">// 模块输出数据</span><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>       po_flag   <span class="hljs-comment">// 串口接收数据完成标志</span><br>);<br><br><span class="hljs-keyword">parameter</span> BAUD_CNT__MAX = CLK_FREQ/UART_BSP; <span class="hljs-comment">// 波特率计数器最大值</span><br><br><span class="hljs-comment">// 中间变量</span><br><span class="hljs-keyword">reg</span> rx_reg_1;       <span class="hljs-comment">// 用于同步数据</span><br><span class="hljs-keyword">reg</span> rx_reg_2;       <span class="hljs-comment">// 用于缓冲数据</span><br><span class="hljs-keyword">reg</span> rx_reg_3;       <span class="hljs-comment">// 用于缓冲数据</span><br><span class="hljs-keyword">reg</span> start_flag;     <span class="hljs-comment">// 用于判断起始位</span><br><span class="hljs-keyword">reg</span> work_en;        <span class="hljs-comment">// 用于使能接收模块</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] baud_cnt;<span class="hljs-comment">// 用于计数波特率</span><br><span class="hljs-keyword">reg</span> bit_flag;       <span class="hljs-comment">// 读取标志</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] bit_cnt;  <span class="hljs-comment">// 读取位数计数</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rx_data;  <span class="hljs-comment">// 读取到的数据</span><br><span class="hljs-keyword">reg</span> rx_flag ;       <span class="hljs-comment">// 读取完成标志</span><br><br><span class="hljs-comment">// 对输入信号进行同步</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_reg_1 &lt;= <span class="hljs-number">1&#x27;b1</span>;  <span class="hljs-comment">// 初值为1</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_reg_1 &lt;= rx;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 用于同步数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_reg_2 &lt;= <span class="hljs-number">1&#x27;b1</span>;  <span class="hljs-comment">// 初值为1</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_reg_2 &lt;= rx_reg_1;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 用于同步数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_reg_3 &lt;= <span class="hljs-number">1&#x27;b1</span>;  <span class="hljs-comment">// 初值为1</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_reg_3 &lt;= rx_reg_2;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 开始标志信号 start_flag</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       start_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((rx_reg_3 == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (rx_reg_2== <span class="hljs-number">1&#x27;b0</span>) &amp;&amp; (work_en == <span class="hljs-number">1&#x27;b0</span>)) <span class="hljs-keyword">begin</span><br>        start_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        start_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 使能信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 开始接收拉高</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(start_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 接收结束拉低(比特计数器为8，且读取标志为高)</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        work_en &lt;= work_en;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 波特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       baud_cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((baud_cnt == BAUD_CNT__MAX - <span class="hljs-number">1&#x27;b1</span>) || (work_en == <span class="hljs-number">1&#x27;b0</span>) ) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= <span class="hljs-number">16&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 波特计数器递增</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (work_en == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= baud_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= baud_cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 波特计数器达到波特率的一半时，比特标志拉高</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(baud_cnt == BAUD_CNT__MAX/<span class="hljs-number">2</span> - <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       bit_cnt &lt;= <span class="hljs-number">4&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 比特计数器递增</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bit_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 数据拼接</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_data &lt;= <span class="hljs-number">8&#x27;d0</span>;  <span class="hljs-comment">// 初值为0</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 数据拼接(串行转并行数据)</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt &gt;= <span class="hljs-number">4&#x27;d1</span>) &amp;&amp; (bit_cnt &lt;= <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        rx_data &lt;= &#123;rx_reg_3, rx_data[<span class="hljs-number">7</span>:<span class="hljs-number">1</span>]&#125;;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_data &lt;= rx_data;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// rx标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        rx_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span>   <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       po_data &lt;= <span class="hljs-number">8&#x27;d0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rx_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        po_data &lt;= rx_data;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        po_data &lt;= po_data;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       po_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        po_flag &lt;= rx_flag;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>模块测试：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> tb_uart_rx();<br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> rx = <span class="hljs-number">1&#x27;b1</span>;<br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] po_data;<br><span class="hljs-keyword">wire</span> po_flag;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">1&#x27;b0</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>    #<span class="hljs-number">20</span><br>    sys_rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 时钟信号</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    #<span class="hljs-number">200</span><br>    rx_bit(<span class="hljs-number">8&#x27;d0</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d1</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d2</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d3</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d4</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d5</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d6</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d7</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 引出输出</span><br><br><br><br><span class="hljs-comment">// 模拟串口数据的任务</span><br><span class="hljs-keyword">task</span> rx_bit (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data<br>);<br><br><span class="hljs-keyword">integer</span> i;<br><span class="hljs-keyword">for</span>( i= <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ; i=i+<span class="hljs-number">1</span> ) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span> (i)<br>        <span class="hljs-number">0</span>: rx &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-number">1</span>: rx &lt;= data[<span class="hljs-number">0</span>];<br>        <span class="hljs-number">2</span>: rx &lt;= data[<span class="hljs-number">1</span>];<br>        <span class="hljs-number">3</span>: rx &lt;= data[<span class="hljs-number">2</span>];<br>        <span class="hljs-number">4</span>: rx &lt;= data[<span class="hljs-number">3</span>];<br>        <span class="hljs-number">5</span>: rx &lt;= data[<span class="hljs-number">4</span>];<br>        <span class="hljs-number">6</span>: rx &lt;= data[<span class="hljs-number">5</span>];<br>        <span class="hljs-number">7</span>: rx &lt;= data[<span class="hljs-number">6</span>];<br>        <span class="hljs-number">8</span>: rx &lt;= data[<span class="hljs-number">7</span>];<br>        <span class="hljs-number">9</span>: rx &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">endcase</span><br>    <span class="hljs-variable">#(5208*20)</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br>uart_rx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(<span class="hljs-number">9600</span>),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(<span class="hljs-number">50_000_000</span>)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_rx_inst<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-variable">.rx</span>                 (rx),             <span class="hljs-comment">// 串口接收数据</span><br><br>    <span class="hljs-variable">.po_data</span>            (po_data),  <span class="hljs-comment">// 模块输出数据</span><br>    <span class="hljs-variable">.po_flag</span>            (po_flag)   <span class="hljs-comment">// 串口接收数据完成标志</span><br>);<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h3 id="3-2-串口发送模块"><a href="#3-2-串口发送模块" class="headerlink" title="3.2 串口发送模块"></a>3.2 串口发送模块</h3><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><span class="hljs-keyword">module</span> uart_tx<br>#(<br>    <span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">&#x27;d9600</span>,        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-keyword">parameter</span> CLK_FREQ = <span class="hljs-number">&#x27;d50_000_000</span>   <span class="hljs-comment">// 时钟频率</span><br>)<br>(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>          sys_clk,        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>          sys_rst_n,      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>   [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  pi_data,        <span class="hljs-comment">// 模块输入数据</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>          pi_flag,        <span class="hljs-comment">// 串口输入数据标志</span><br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>  tx             <span class="hljs-comment">// 数据输出</span><br>);<br><br><span class="hljs-keyword">parameter</span> BAUD_CNT__MAX = CLK_FREQ/UART_BSP; <span class="hljs-comment">// 波特率计数器最大值</span><br><br><span class="hljs-keyword">reg</span>         work_en;  <span class="hljs-comment">// 工作使能</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]  baud_cnt; <span class="hljs-comment">// 波特计数器</span><br><span class="hljs-keyword">reg</span>         bit_flag; <span class="hljs-comment">// 数据标志</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]   bit_cnt;  <span class="hljs-comment">// 比特计数器</span><br><br><span class="hljs-comment">// 使能信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pi_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d9</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <br>        work_en &lt;= work_en;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 波特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= <span class="hljs-number">16&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((work_en == <span class="hljs-number">1&#x27;b0</span>) || (baud_cnt == BAUD_CNT__MAX - <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= <span class="hljs-number">16&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 计数条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(work_en == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= baud_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <br>        baud_cnt &lt;= baud_cnt;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(baud_cnt == <span class="hljs-number">16&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_flag == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (bit_cnt == <span class="hljs-number">4&#x27;d9</span>)) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 计数条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_flag == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (work_en == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt;<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        tx &lt;= <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-comment">//空闲为高</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bit_flag == <span class="hljs-number">1&#x27;b1</span>)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(bit_cnt)<br>            <span class="hljs-number">4&#x27;d0</span>: tx &lt;= <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-comment">//起始位为低</span><br>            <span class="hljs-number">4&#x27;d1</span>: tx &lt;= pi_data[<span class="hljs-number">0</span>];<br>            <span class="hljs-number">4&#x27;d2</span>: tx &lt;= pi_data[<span class="hljs-number">1</span>];<br>            <span class="hljs-number">4&#x27;d3</span>: tx &lt;= pi_data[<span class="hljs-number">2</span>];<br>            <span class="hljs-number">4&#x27;d4</span>: tx &lt;= pi_data[<span class="hljs-number">3</span>];<br>            <span class="hljs-number">4&#x27;d5</span>: tx &lt;= pi_data[<span class="hljs-number">4</span>];<br>            <span class="hljs-number">4&#x27;d6</span>: tx &lt;= pi_data[<span class="hljs-number">5</span>];<br>            <span class="hljs-number">4&#x27;d7</span>: tx &lt;= pi_data[<span class="hljs-number">6</span>];<br>            <span class="hljs-number">4&#x27;d8</span>: tx &lt;= pi_data[<span class="hljs-number">7</span>];<br>            <span class="hljs-number">4&#x27;d9</span>: tx &lt;= <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-comment">//停止位为高</span><br>            <span class="hljs-keyword">default</span>: tx &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br><br><br></code></pre></td></tr></table></figure><p>仿真代码</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> tb_uart_tx();<br><br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] pi_data;<br><span class="hljs-keyword">reg</span> pi_flag;<br><br><span class="hljs-keyword">wire</span> tx;<br><br><span class="hljs-comment">// 系统时钟初始化</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">1&#x27;b0</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>    #<span class="hljs-number">20</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 生成系统时钟</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><span class="hljs-comment">// 测试序列</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d0</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    #<span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 0</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d0</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 1</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d1</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 2</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d2</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 3</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d3</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 4</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d4</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 5</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d5</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 6</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d6</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 7</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d7</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实例化UART发送模块</span><br>uart_tx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(<span class="hljs-number">9600</span>),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(<span class="hljs-number">50_000_000</span>)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_tx_inst<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <br>    <span class="hljs-variable">.pi_data</span>            (pi_data),  <br>    <span class="hljs-variable">.pi_flag</span>            (pi_flag),<br><br>    <span class="hljs-variable">.tx</span>                 (tx)<br>);<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h3 id="3-3-串口接收缓冲"><a href="#3-3-串口接收缓冲" class="headerlink" title="3.3 串口接收缓冲"></a>3.3 串口接收缓冲</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-comment">// 串口输入 + 缓冲</span><br><span class="hljs-keyword">module</span> uart_fifo_rx<br>#(<br>    <span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">&#x27;d9600</span>,        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-keyword">parameter</span> CLK_FREQ = <span class="hljs-number">&#x27;d50_000_000</span>   <span class="hljs-comment">// 时钟频率</span><br>)<br>(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_rst_n,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> rx,         <span class="hljs-comment">// 串口接收数据</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> rd_en,      <span class="hljs-comment">// 串口输入缓冲区读取数据使能</span><br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data_out, <span class="hljs-comment">// 串口输入缓冲区输出数据</span><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> empty      <span class="hljs-comment">// 串口输入缓冲区空标志</span><br>    <span class="hljs-comment">//output wire full        // 串口输入缓冲区满标志</span><br>);<br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data_in;<br><span class="hljs-keyword">wire</span> data_in_flag;<br><br><span class="hljs-comment">// 实例化UART接收模块</span><br>uart_rx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(UART_BSP),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(CLK_FREQ)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_rx<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-variable">.rx</span>                 (rx),             <span class="hljs-comment">// 串口接收数据</span><br><br>    <span class="hljs-variable">.po_data</span>            (data_in),  <span class="hljs-comment">// 模块输出数据</span><br>    <span class="hljs-variable">.po_flag</span>            (data_in_flag)   <span class="hljs-comment">// 串口接收数据完成标志</span><br>);<br><br><br><span class="hljs-comment">// 实例化FIFO</span><br>dcfifo_uart_1024x8 dcfifo_uart_1024x8_rx (<br>  <span class="hljs-variable">.rst</span>(~sys_rst_n),        <span class="hljs-comment">// input wire rst</span><br>  <span class="hljs-variable">.wr_clk</span>(sys_clk),  <span class="hljs-comment">// input wire wr_clk</span><br>  <span class="hljs-variable">.rd_clk</span>(sys_clk),  <span class="hljs-comment">// input wire rd_clk</span><br>  <span class="hljs-variable">.din</span>(data_in),        <span class="hljs-comment">// input wire [7 : 0] din</span><br>  <span class="hljs-variable">.wr_en</span>(data_in_flag),    <span class="hljs-comment">// input wire wr_en</span><br>  <span class="hljs-variable">.rd_en</span>(rd_en),    <span class="hljs-comment">// input wire rd_en</span><br><br>  <span class="hljs-variable">.dout</span>(data_out),      <span class="hljs-comment">// output wire [7 : 0] dout</span><br>  <span class="hljs-variable">.full</span>(),      <span class="hljs-comment">// output wire full</span><br>  <span class="hljs-variable">.empty</span>(empty)    <span class="hljs-comment">// output wire empty</span><br>);<br><br><span class="hljs-keyword">endmodule</span><br><br><br></code></pre></td></tr></table></figure><h3 id="3-3-串口发送缓冲"><a href="#3-3-串口发送缓冲" class="headerlink" title="3.3 串口发送缓冲"></a>3.3 串口发送缓冲</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-comment">// 串口输出 + 缓冲</span><br><br><span class="hljs-keyword">module</span> uart_fifo_tx<br>#(<br>    <span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">&#x27;d9600</span>,        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-keyword">parameter</span> CLK_FREQ = <span class="hljs-number">&#x27;d50_000_000</span>   <span class="hljs-comment">// 时钟频率</span><br>)<br>(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_rst_n,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data_in, <span class="hljs-comment">// 串口输出缓冲区输入数据</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> wr_en,          <span class="hljs-comment">// 串口输出缓冲区输入数据标志(写入使能)</span><br><br>    <span class="hljs-comment">//output wire empty,          // 串口输出缓冲区空标志</span><br>    <span class="hljs-comment">//output wire full,            // 串口输出缓冲区满标志</span><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> tx              <span class="hljs-comment">// 串口发送数据</span><br>);<br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data_out;  <span class="hljs-comment">// 串口输出数据</span><br><span class="hljs-keyword">wire</span> rd_en;<br><span class="hljs-keyword">wire</span> empty;<br><br><span class="hljs-comment">// 缓冲区非空就使能缓冲区数据读出,并且和串口发送模块的写入使能相连</span><br><span class="hljs-keyword">assign</span> rd_en =!empty;<br><br><span class="hljs-comment">// 实例化UART发送模块</span><br>uart_tx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(UART_BSP),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(CLK_FREQ)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_tx<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <br>    <span class="hljs-variable">.pi_data</span>            (data_out),  <br>    <span class="hljs-variable">.pi_flag</span>            (wr_en),<br><br>    <span class="hljs-variable">.tx</span>                 (tx)<br>);<br><br><span class="hljs-comment">// 实例化UART发送缓冲</span><br>dcfifo_uart_1024x8 dcfifo_uart_1024x8_tx (<br>  <span class="hljs-variable">.rst</span>(~sys_rst_n),        <span class="hljs-comment">// input wire rst</span><br>  <span class="hljs-variable">.wr_clk</span>(sys_clk),  <span class="hljs-comment">// input wire wr_clk</span><br>  <span class="hljs-variable">.rd_clk</span>(sys_clk),  <span class="hljs-comment">// input wire rd_clk</span><br>  <span class="hljs-variable">.din</span>(data_in),        <span class="hljs-comment">// input wire [7 : 0] din</span><br>  <span class="hljs-variable">.wr_en</span>(wr_en),    <span class="hljs-comment">// input wire wr_en</span><br>  <span class="hljs-variable">.rd_en</span>(rd_en),    <span class="hljs-comment">// input wire rd_en</span><br><br>  <span class="hljs-variable">.dout</span>(data_out),      <span class="hljs-comment">// output wire [7 : 0] dout</span><br>  <span class="hljs-variable">.full</span>(),      <span class="hljs-comment">// output wire full</span><br>  <span class="hljs-variable">.empty</span>(empty)    <span class="hljs-comment">// output wire empty</span><br>);<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h3 id="3-3-串口顶层模块"><a href="#3-3-串口顶层模块" class="headerlink" title="3.3 串口顶层模块"></a>3.3 串口顶层模块</h3><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> uart_fifo_demo(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_rst_n,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> rx,<br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> tx<br>);<br><br><span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">115200</span> ; <span class="hljs-comment">// 波特率</span><br><span class="hljs-keyword">parameter</span> SYS_CLK_FREQ = <span class="hljs-number">50_000_000</span> ; <span class="hljs-comment">// 系统时钟频率</span><br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data;<br><br><span class="hljs-keyword">wire</span> rx_empty;<br><span class="hljs-keyword">wire</span> rx_rd_en;  <br><span class="hljs-keyword">wire</span> tx_wr_en;<br><br><span class="hljs-comment">// 接收缓冲区读取使能</span><br><span class="hljs-keyword">assign</span> rx_rd_en = !rx_empty;<br><br><span class="hljs-comment">// 发送缓冲区写入使能</span><br><span class="hljs-keyword">assign</span> tx_wr_en = !rx_empty;<br><br><br><br><span class="hljs-comment">// 实例化UART接收模块</span><br>uart_fifo_rx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(UART_BSP),        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(SYS_CLK_FREQ)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_fifo_rx<br>(<br>    <span class="hljs-variable">.sys_clk</span>(sys_clk),<br>    <span class="hljs-variable">.sys_rst_n</span>(sys_rst_n),<br>    <span class="hljs-variable">.rx</span>(rx),         <span class="hljs-comment">// 串口接收数据</span><br>    <span class="hljs-variable">.rd_en</span>(rx_rd_en),      <span class="hljs-comment">// 串口输入缓冲区读取数据使能</span><br><br>    <span class="hljs-variable">.data_out</span>(data), <span class="hljs-comment">// 串口输入缓冲区输出数据</span><br>    <span class="hljs-variable">.empty</span>(rx_empty)   <span class="hljs-comment">// 串口输入缓冲区空标志</span><br>    <span class="hljs-comment">//.full()        // 串口输入缓冲区满标志</span><br>);<br><br><br><span class="hljs-comment">// 实例化UART发送模块</span><br>uart_fifo_tx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(UART_BSP),        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(SYS_CLK_FREQ)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_fifo_tx<br>(<br>    <span class="hljs-variable">.sys_clk</span>(sys_clk),<br>    <span class="hljs-variable">.sys_rst_n</span>(sys_rst_n),<br>    <span class="hljs-variable">.data_in</span>(data),         <span class="hljs-comment">// 串口输出缓冲区输入数据</span><br>    <span class="hljs-variable">.wr_en</span>(tx_wr_en),           <span class="hljs-comment">// 串口输出缓冲区输入数据标志(写入使能)</span><br><br>    <span class="hljs-comment">//.empty(),           // 串口输出缓冲区空标志</span><br>    <span class="hljs-comment">//.full(),            // 串口输出缓冲区满标志</span><br>    <span class="hljs-variable">.tx</span>(tx)               <span class="hljs-comment">// 串口发送数据</span><br>);<br><br><br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>仿真代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-comment">// 串口模块测试，模拟串口数据发送，波特率9600</span><br><br><span class="hljs-keyword">module</span> tb_uart_fifo_demo();<br><br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> rx;<br><span class="hljs-keyword">wire</span> tx;<br><span class="hljs-comment">// 系统时钟初始化</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">1&#x27;b0</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>    rx = <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 生成系统时钟</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    #<span class="hljs-number">200</span>;<br>    rx_byte();<br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">// 字节发送任务</span><br><span class="hljs-keyword">task</span> rx_byte();<br><span class="hljs-keyword">integer</span> j;<br><span class="hljs-keyword">for</span>(j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">8</span>;j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>    rx_bit(j);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-comment">// 模拟串口数据的任务</span><br><span class="hljs-keyword">task</span> rx_bit (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data<br>);<br><br><span class="hljs-keyword">integer</span> i;<br><span class="hljs-keyword">for</span>( i= <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ; i=i+<span class="hljs-number">1</span> ) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span> (i)<br>        <span class="hljs-number">0</span>: rx &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-number">1</span>: rx &lt;= data[<span class="hljs-number">0</span>];<br>        <span class="hljs-number">2</span>: rx &lt;= data[<span class="hljs-number">1</span>];<br>        <span class="hljs-number">3</span>: rx &lt;= data[<span class="hljs-number">2</span>];<br>        <span class="hljs-number">4</span>: rx &lt;= data[<span class="hljs-number">3</span>];<br>        <span class="hljs-number">5</span>: rx &lt;= data[<span class="hljs-number">4</span>];<br>        <span class="hljs-number">6</span>: rx &lt;= data[<span class="hljs-number">5</span>];<br>        <span class="hljs-number">7</span>: rx &lt;= data[<span class="hljs-number">6</span>];<br>        <span class="hljs-number">8</span>: rx &lt;= data[<span class="hljs-number">7</span>];<br>        <span class="hljs-number">9</span>: rx &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">endcase</span><br>    <span class="hljs-variable">#(5208*20)</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><br><span class="hljs-comment">// 实例化串口模块</span><br>uart_fifo_demo uart_fifo_demo(<br>    <span class="hljs-variable">.sys_clk</span>(sys_clk),<br>    <span class="hljs-variable">.sys_rst_n</span>(sys_rst_n),<br>    <span class="hljs-variable">.rx</span>(rx),<br><br>    <span class="hljs-variable">.tx</span>(tx)<br>);<br><br><span class="hljs-comment">// 重定义参数,定义串口波特率为9600</span><br><span class="hljs-keyword">defparam</span> uart_fifo_demo<span class="hljs-variable">.UART_BSP</span> = <span class="hljs-number">9600</span>;<br><br><span class="hljs-keyword">endmodule</span><br><br><br></code></pre></td></tr></table></figure><p>仿真效果(顶层模块)：<br><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/20240214221416.png"></p><h3 id="四、实际测试效果"><a href="#四、实际测试效果" class="headerlink" title="四、实际测试效果"></a>四、实际测试效果</h3><p><img src="/2024/01/28/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/UART%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1-%E5%9F%BA%E4%BA%8EFIFO/20240214221429.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://search.bilibili.com/all?vt=76757802&keyword=%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90fpga&from_source=webtop_search&spm_id_from=333.1007&search_source=5">https://search.bilibili.com/all?vt=76757802&amp;keyword=%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90fpga&amp;from_source=webtop_search&amp;spm_id_from=333.1007&amp;search_source=5</a></li><li><a href="https://www.bilibili.com/video/BV1y34y147s5/?spm_id_from=333.337.top_right_bar_window_history.content.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1y34y147s5/?spm_id_from=333.337.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://blog.csdn.net/wanerXR/article/details/125120315">https://blog.csdn.net/wanerXR/article/details/125120315</a></li><li><a href="https://www.cnblogs.com/lzbmeee/p/17624957.html">https://www.cnblogs.com/lzbmeee/p/17624957.html</a></li><li><a href="https://www.bilibili.com/video/BV1N5411v7GN/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1N5411v7GN/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>FPGA</category>
      
      <category>vivado</category>
      
      <category>UART</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>vivado</tag>
      
      <tag>UART</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vivado工程管理</title>
    <link href="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>vivado 工程版本管理</td><td>v1.0.0</td><td>DuRuofu</td><td>2024-01-20</td><td>首次建立</td></tr></tbody></table><h1 id="vivado-工程版本管理"><a href="#vivado-工程版本管理" class="headerlink" title="vivado 工程版本管理"></a>vivado 工程版本管理</h1><h2 id="一、起因"><a href="#一、起因" class="headerlink" title="一、起因"></a>一、起因</h2><p>vivado一个工程的可能所需要占据的空间有几百兆甚至更大，但大部分都是编译过程中产生的临时文件，想着有没有什么好的办法来管理这些工程。</p><h2 id="一、工程目录"><a href="#一、工程目录" class="headerlink" title="一、工程目录"></a>一、工程目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh">.<br>├── vivado <span class="hljs-comment"># Vivado的工程全都放在Vivado目录下，包括bd以及它的相关文件；</span><br>├── src  <span class="hljs-comment"># 放hdl的源文件以及IP Core的源文件</span><br>│   ├── hdl      <span class="hljs-comment"># 放hdl的源文件</span><br>│   ├── ip_repo  <span class="hljs-comment"># IP Core的源文件</span><br>│   ├── xdc      <span class="hljs-comment"># 存放约束文件</span><br>│   ├── sim      <span class="hljs-comment"># 存放仿真文件 </span><br>├── docs  <span class="hljs-comment"># 放跟工程相关的文档</span><br>├── mcs  <span class="hljs-comment"># 放工程生成的bit和mcs文件</span><br>├── scripts <span class="hljs-comment"># 进行git管理的关键,里面放各种Tcl脚本</span><br>│   ├── build.tcl  <span class="hljs-comment"># 恢复项目脚本</span><br>├── README.md  <span class="hljs-comment"># 自述文件</span><br>├── .gitignore <span class="hljs-comment"># git</span><br></code></pre></td></tr></table></figure><h2 id="二、保存工程"><a href="#二、保存工程" class="headerlink" title="二、保存工程"></a>二、保存工程</h2><blockquote><p>前提：新建工程建立在vivado目录下，其余文件按照上述描述存放。</p></blockquote><p>选择project：<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121105850.png"></p><p>选择write TCl：</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121110011.png"></p><p>选择scripts目录，命名为build.tcl,其他选项默认</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121110139.png"></p><p>.gitingore忽略文件里填写</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">vivado/<br></code></pre></td></tr></table></figure><p>即可使用git对项目源码进行管理。</p><h2 id="三、恢复工程"><a href="#三、恢复工程" class="headerlink" title="三、恢复工程"></a>三、恢复工程</h2><p>克隆项目，打开build.tcl脚本将下面一项做修改：</p><p>修改新工程的创建路径：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><br><span class="hljs-comment"># Create project</span><br>create_project <span class="hljs-variable">$&#123;_xil_proj_name_&#125;</span> ./<span class="hljs-variable">$&#123;_xil_proj_name_&#125;</span> -part xc7a100tfgg484<span class="hljs-number">-2</span><br><br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><br><span class="hljs-comment"># Create project</span><br>create_project <span class="hljs-variable">$origin_dir</span>/../vivado/<span class="hljs-variable">$&#123;_xil_proj_name_&#125;</span> -part xc7a100tfgg484<span class="hljs-number">-2</span><br><br></code></pre></td></tr></table></figure><p>在vivado里使用 tcl console，切换到克隆下面脚本目录</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121114900.png"></p><p>运行脚本：<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121115515.png"></p><p>vivado目录下项目顺利生成：</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121115342.png"></p><p>项目源文件也自动导入了：<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/vivado%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/20240121115614.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/ai_ljh/article/details/108027066">https://blog.csdn.net/ai_ljh/article/details/108027066</a></li><li><a href="https://www.fpgadeveloper.com/2014/08/version-control-for-vivado-projects.html/">https://www.fpgadeveloper.com/2014/08/version-control-for-vivado-projects.html/</a></li><li><a href="https://blog.csdn.net/qq_41332806/article/details/110715083">https://blog.csdn.net/qq_41332806/article/details/110715083</a></li><li><a href="https://zhuanlan.zhihu.com/p/93711367">https://zhuanlan.zhihu.com/p/93711367</a></li><li><a href="https://zhuanlan.zhihu.com/p/161271929">https://zhuanlan.zhihu.com/p/161271929</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>FPGA</category>
      
      <category>vivado</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>vivado</tag>
      
      <tag>工程管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在linux下搭建esp-idf开发环境</title>
    <link href="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="在linux下搭建esp-idf开发环境"><a href="#在linux下搭建esp-idf开发环境" class="headerlink" title="在linux下搭建esp-idf开发环境"></a>在linux下搭建esp-idf开发环境</h2><h2 id="一-、准备工作"><a href="#一-、准备工作" class="headerlink" title="一 、准备工作"></a>一 、准备工作</h2><h3 id="1-准备linux的电脑或者虚拟机"><a href="#1-准备linux的电脑或者虚拟机" class="headerlink" title="1. 准备linux的电脑或者虚拟机"></a>1. 准备linux的电脑或者虚拟机</h3><p>   我这里使用Ubuntu22.04的虚拟机环境</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125114613.png"></p><h3 id="2-下载ESP-IDF包环境"><a href="#2-下载ESP-IDF包环境" class="headerlink" title="2. 下载ESP-IDF包环境"></a>2. 下载ESP-IDF包环境</h3><blockquote><p>这里有两种下载方式：分别针对有魔法和无魔法</p></blockquote><h4 id="1-（有魔法）使用git-clone："><a href="#1-（有魔法）使用git-clone：" class="headerlink" title="1. （有魔法）使用git clone："></a>1. （有魔法）使用git clone：</h4><p>   在终端运行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">mkdir</span> -p ~/esp<br><span class="hljs-built_in">cd</span> ~/esp<br>git <span class="hljs-built_in">clone</span> -b v5.1.2 --recursive https://github.com/espressif/esp-idf.git<br></code></pre></td></tr></table></figure><h4 id="2-无魔法-手动下载："><a href="#2-无魔法-手动下载：" class="headerlink" title="2. (无魔法) 手动下载："></a>2. (无魔法) 手动下载：</h4><p>前往ESP-IDF仓库：<a href="https://github.com/espressif/esp-idf/releases/tag/v5.1.2">https://github.com/espressif/esp-idf/releases/tag/v5.1.2</a> ，如下：</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125120321.png"></p><p>找到： Download an archive with submodules included 一项</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125120428.png"></p><p>下载并解压到 ~&#x2F;esp&#x2F;esp-idf 即可</p><blockquote><p>这里也可以安装多个版本，在这个目录，不冲突</p></blockquote><h2 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h2><p>编译 ESP-IDF 需要以下软件包。请根据使用的 Linux 发行版本，选择合适的安装命令。</p><ul><li><p>Ubuntu 和 Debian:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install git wget flex bison gperf python3 python3-pip python3-venv cmake ninja-build ccache libffi-dev libssl-dev dfu-util libusb-1.0-0<br></code></pre></td></tr></table></figure></li><li><p>CentOS 7 &amp; 8:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo yum -y update &amp;&amp; sudo yum install git wget flex bison gperf python3 python3-setuptools cmake ninja-build ccache dfu-util libusbx<br></code></pre></td></tr></table></figure></li><li><p>Arch:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo pacman -S --needed gcc git make flex bison gperf python cmake ninja ccache dfu-util libusb<br></code></pre></td></tr></table></figure></li></ul><h2 id="三、-安装-ESP-IDF-使用的各种工具"><a href="#三、-安装-ESP-IDF-使用的各种工具" class="headerlink" title="三、 安装 ESP-IDF 使用的各种工具"></a>三、 安装 ESP-IDF 使用的各种工具</h2><p>这里使用全部安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/esp/esp-idf<br>./install.sh all<br></code></pre></td></tr></table></figure><p>ESP-IDF 工具安装器会下载 Github 发布版本中附带的一些工具，如果访问 Github 较为缓慢，可以设置一个环境变量，从而优先选择 Espressif 的下载服务器进行 Github 资源下载。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> ~/esp/esp-idf<br><span class="hljs-built_in">export</span> IDF_GITHUB_ASSETS=<span class="hljs-string">&quot;dl.espressif.com/github_assets&quot;</span><br>./install.sh<br></code></pre></td></tr></table></figure><p>这一步可能会遇到python下载失败的问题：</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125161324.png"></p><p>需要修改镜像源：</p><p>Linux下，修改 ~&#x2F;.pip&#x2F;pip.conf (没有就创建一个文件夹及文件。文件夹要加“.”，表示是隐藏文件夹)<br>内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[global]</span><br><span class="hljs-attr">index-url</span> = https://pypi.tuna.tsinghua.edu.cn/simple<br><span class="hljs-section">[install]</span><br><span class="hljs-attr">trusted-host</span>=mirrors.aliyun.com<br></code></pre></td></tr></table></figure><blockquote><p>如果还失败就去修改：~&#x2F;.config&#x2F;pip&#x2F;pip.conf 这个配置文件</p></blockquote><h2 id="四、-配置快捷指令"><a href="#四、-配置快捷指令" class="headerlink" title="四、 配置快捷指令"></a>四、 配置快捷指令</h2><p>在终端执行<code>. $HOME/esp/esp-idf/export.sh</code>  这个脚本，就可以在当前终端使用esp-idf工具</p><p>但是每次执行都要先使用这个脚本激活环境不太方便，可以为执行 <code>export.sh</code> 创建一个别名</p><p>打开<code>.bashrc</code> 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nano ~/.bashrc<br></code></pre></td></tr></table></figure><p>写入配置文件：<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125164001.png"></p><p>我这里安装了两个版本，于是写两条命令<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125164248.png"></p><h2 id="五、-测试程序s"><a href="#五、-测试程序s" class="headerlink" title="五、 测试程序s"></a>五、 测试程序s</h2><p>打开历程目录下的hello_world程序：</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125165114.png"></p><p>使用<code>idf.py set-target esp32</code> 命令选择芯片</p><p>使用<code>idf.py build  </code>命令编译代码</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125165709.png"><br>编译成功</p><p>使用 <code>idf.py -p PORT 【-b BAUD】 flash</code>命令烧录（先插好开发板） </p><blockquote><p>在linux下可以这样查看单片机的串口端口：</p><pre><code class="hljs">    `cd /dev`    `ls ttyUSB*`</code></pre><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125170645.png"></p></blockquote><p>但是运行后可能会出现：<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125171030.png"></p><p>这是由于我们的linux用户没有读写串口的权限</p><p>可以使用下面的命令添加串口读写权限（也可直接切换root用户）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo chmod a+rw <span class="hljs-regexp">/dev/</span>ttyUSB0<br></code></pre></td></tr></table></figure><p>然后就成功烧录了：<br><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125171933.png"></p><p>接下来使用<code>idf.py -p PORT monitor</code> 来查看串口输出：</p><p><img src="/2024/01/25/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/01.%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/%E6%90%AD%E5%BB%BAesp-idf%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/20240125172139.png"></p><p>到此就完成了一个开发的流程。</p><h2 id="六-、-常用命令"><a href="#六-、-常用命令" class="headerlink" title="六 、 常用命令"></a>六 、 常用命令</h2><p>自定义：</p><ul><li>运行idfV4.4.6环境：<code>get_idf_v4</code></li><li>运行idfV5.1.2环境：<code>get_idf_v5</code></li></ul><p>ESP-IDF；</p><ul><li>清除之前的编译：<code> idf.py fullclean</code>           </li><li>编译:  <code>idf.py build</code>          </li><li>向串口烧录固件: <code>idf.py  -p  COM8  flash</code>                </li><li>打开串口监视器:<code>idf.py  -p  COM8  monitor</code>   </li><li>配置菜单 :<code>idf.py  menuconfig  </code>             </li><li>选择芯片型号：<code>idf.py set-target esp32</code>  不输入参数的话，会列出所有可用型号</li><li>一次性执行构建、烧录和监视过程：idf.py -p PORT flash monitor</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://www.bilibili.com/video/BV1J14y1n7Ve/?spm_id_from=333.337.search-card.all.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1J14y1n7Ve/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li><li><a href="https://blog.csdn.net/ZRongZH/article/details/129237476">https://blog.csdn.net/ZRongZH/article/details/129237476</a></li><li><a href="https://www.bilibili.com/video/BV1Mv4y1U7x9/?spm_id_from=333.999.0.0&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1Mv4y1U7x9/?spm_id_from=333.999.0.0&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>环境搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FPGA实现串口RS232</title>
    <link href="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/"/>
    <url>/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文记录使用FPGA实现简单RS232串口</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><p>|  文档名称  |  版本  |  作者  |      时间      |   备注   |<br>| —- | —- | ———— | —— |<br>| FPGA实现串口RS232 |v1.0.0| DuRuofu | 2024-01-23 | 首次建立 |</p><h1 id="FPGA实现串口RS232"><a href="#FPGA实现串口RS232" class="headerlink" title="FPGA实现串口RS232"></a>FPGA实现串口RS232</h1><h2 id="一、整体框图"><a href="#一、整体框图" class="headerlink" title="一、整体框图"></a>一、整体框图</h2><p>顶层模块:</p><p><img src="/%E9%A1%B6%E5%B1%82%E6%A1%86%E5%9B%BE.svg"><br>发送接收模块:<br><img src="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/%E5%8F%91%E9%80%81%E6%8E%A5%E6%94%B6%E6%A8%A1%E5%9D%97.svg"><br>整体框图:</p><p><img src="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/%E6%95%B4%E4%BD%93%E6%A1%86%E5%9B%BE.svg"></p><h2 id="二、模块波形图"><a href="#二、模块波形图" class="headerlink" title="二、模块波形图"></a>二、模块波形图</h2><p>接收模块:<br><img src="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97%E6%B3%A2%E5%BD%A2%E5%9B%BE(rx).svg"></p><p>发送模块：<br><img src="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/%E4%B8%B2%E5%8F%A3%E6%A8%A1%E5%9D%97%E6%B3%A2%E5%BD%A2%E5%9B%BE(tx).svg"></p><h2 id="三、代码编写"><a href="#三、代码编写" class="headerlink" title="三、代码编写"></a>三、代码编写</h2><h3 id="3-1-串口接收模块"><a href="#3-1-串口接收模块" class="headerlink" title="3.1 串口接收模块"></a>3.1 串口接收模块</h3><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-comment">// 串口接收模块</span><br><span class="hljs-keyword">module</span> uart_rx<br>#(<br>    <span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">&#x27;d9600</span>,        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-keyword">parameter</span> CLK_FREQ = <span class="hljs-number">&#x27;d50_000_000</span>   <span class="hljs-comment">// 时钟频率</span><br>)<br>(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  sys_clk,        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  sys_rst_n,      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>  rx,             <span class="hljs-comment">// 串口接收数据</span><br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] po_data,  <span class="hljs-comment">// 模块输出数据</span><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>       po_flag   <span class="hljs-comment">// 串口接收数据完成标志</span><br>);<br><br><span class="hljs-keyword">parameter</span> BAUD_CNT__MAX = CLK_FREQ/UART_BSP; <span class="hljs-comment">// 波特率计数器最大值</span><br><br><span class="hljs-comment">// 中间变量</span><br><span class="hljs-keyword">reg</span> rx_reg_1;       <span class="hljs-comment">// 用于同步数据</span><br><span class="hljs-keyword">reg</span> rx_reg_2;       <span class="hljs-comment">// 用于缓冲数据</span><br><span class="hljs-keyword">reg</span> rx_reg_3;       <span class="hljs-comment">// 用于缓冲数据</span><br><span class="hljs-keyword">reg</span> start_flag;     <span class="hljs-comment">// 用于判断起始位</span><br><span class="hljs-keyword">reg</span> work_en;        <span class="hljs-comment">// 用于使能接收模块</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] baud_cnt;<span class="hljs-comment">// 用于计数波特率</span><br><span class="hljs-keyword">reg</span> bit_flag;       <span class="hljs-comment">// 读取标志</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] bit_cnt;  <span class="hljs-comment">// 读取位数计数</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] rx_data;  <span class="hljs-comment">// 读取到的数据</span><br><span class="hljs-keyword">reg</span> rx_flag ;       <span class="hljs-comment">// 读取完成标志</span><br><br><span class="hljs-comment">// 对输入信号进行同步</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_reg_1 &lt;= <span class="hljs-number">1&#x27;b1</span>;  <span class="hljs-comment">// 初值为1</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_reg_1 &lt;= rx;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 用于同步数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_reg_2 &lt;= <span class="hljs-number">1&#x27;b1</span>;  <span class="hljs-comment">// 初值为1</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_reg_2 &lt;= rx_reg_1;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 用于同步数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_reg_3 &lt;= <span class="hljs-number">1&#x27;b1</span>;  <span class="hljs-comment">// 初值为1</span><br>    <span class="hljs-keyword">end</span><br>   <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_reg_3 &lt;= rx_reg_2;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 开始标志信号 start_flag</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       start_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((rx_reg_3 == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (rx_reg_2== <span class="hljs-number">1&#x27;b0</span>) &amp;&amp; (work_en == <span class="hljs-number">1&#x27;b0</span>)) <span class="hljs-keyword">begin</span><br>        start_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        start_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 使能信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 开始接收拉高</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(start_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 接收结束拉低(比特计数器为8，且读取标志为高)</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        work_en &lt;= work_en;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 波特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       baud_cnt &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((baud_cnt == BAUD_CNT__MAX - <span class="hljs-number">1&#x27;b1</span>) || (work_en == <span class="hljs-number">1&#x27;b0</span>) ) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= <span class="hljs-number">16&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 波特计数器递增</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (work_en == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= baud_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= baud_cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 波特计数器达到波特率的一半时，比特标志拉高</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(baud_cnt == BAUD_CNT__MAX/<span class="hljs-number">2</span> - <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       bit_cnt &lt;= <span class="hljs-number">4&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= <span class="hljs-number">4&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 比特计数器递增</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bit_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 数据拼接</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_data &lt;= <span class="hljs-number">8&#x27;d0</span>;  <span class="hljs-comment">// 初值为0</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 数据拼接(串行转并行数据)</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt &gt;= <span class="hljs-number">4&#x27;d1</span>) &amp;&amp; (bit_cnt &lt;= <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        rx_data &lt;= &#123;rx_reg_3, rx_data[<span class="hljs-number">7</span>:<span class="hljs-number">1</span>]&#125;;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_data &lt;= rx_data;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// rx标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       rx_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d8</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        rx_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span>   <br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        rx_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出数据</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       po_data &lt;= <span class="hljs-number">8&#x27;d0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(rx_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        po_data &lt;= rx_data;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        po_data &lt;= po_data;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n)<span class="hljs-keyword">begin</span><br>       po_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;  <span class="hljs-comment">// 初值为0</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        po_flag &lt;= rx_flag;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>模块测试：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> tb_uart_rx();<br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> rx = <span class="hljs-number">1&#x27;b1</span>;<br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] po_data;<br><span class="hljs-keyword">wire</span> po_flag;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">1&#x27;b0</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>    #<span class="hljs-number">20</span><br>    sys_rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 时钟信号</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><span class="hljs-comment">// 测试</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    #<span class="hljs-number">200</span><br>    rx_bit(<span class="hljs-number">8&#x27;d0</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d1</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d2</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d3</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d4</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d5</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d6</span>);<br>    rx_bit(<span class="hljs-number">8&#x27;d7</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 引出输出</span><br><br><br><br><span class="hljs-comment">// 模拟串口数据的任务</span><br><span class="hljs-keyword">task</span> rx_bit (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data<br>);<br><br><span class="hljs-keyword">integer</span> i;<br><span class="hljs-keyword">for</span>( i= <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ; i=i+<span class="hljs-number">1</span> ) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span> (i)<br>        <span class="hljs-number">0</span>: rx &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-number">1</span>: rx &lt;= data[<span class="hljs-number">0</span>];<br>        <span class="hljs-number">2</span>: rx &lt;= data[<span class="hljs-number">1</span>];<br>        <span class="hljs-number">3</span>: rx &lt;= data[<span class="hljs-number">2</span>];<br>        <span class="hljs-number">4</span>: rx &lt;= data[<span class="hljs-number">3</span>];<br>        <span class="hljs-number">5</span>: rx &lt;= data[<span class="hljs-number">4</span>];<br>        <span class="hljs-number">6</span>: rx &lt;= data[<span class="hljs-number">5</span>];<br>        <span class="hljs-number">7</span>: rx &lt;= data[<span class="hljs-number">6</span>];<br>        <span class="hljs-number">8</span>: rx &lt;= data[<span class="hljs-number">7</span>];<br>        <span class="hljs-number">9</span>: rx &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">endcase</span><br>    <span class="hljs-variable">#(5208*20)</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br>uart_rx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(<span class="hljs-number">9600</span>),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(<span class="hljs-number">50_000_000</span>)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_rx_inst<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-variable">.rx</span>                 (rx),             <span class="hljs-comment">// 串口接收数据</span><br><br>    <span class="hljs-variable">.po_data</span>            (po_data),  <span class="hljs-comment">// 模块输出数据</span><br>    <span class="hljs-variable">.po_flag</span>            (po_flag)   <span class="hljs-comment">// 串口接收数据完成标志</span><br>);<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h3 id="3-2-串口发送模块"><a href="#3-2-串口发送模块" class="headerlink" title="3.2 串口发送模块"></a>3.2 串口发送模块</h3><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><span class="hljs-keyword">module</span> uart_tx<br>#(<br>    <span class="hljs-keyword">parameter</span> UART_BSP = <span class="hljs-number">&#x27;d9600</span>,        <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-keyword">parameter</span> CLK_FREQ = <span class="hljs-number">&#x27;d50_000_000</span>   <span class="hljs-comment">// 时钟频率</span><br>)<br>(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>          sys_clk,        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>          sys_rst_n,      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>   [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>]  pi_data,        <span class="hljs-comment">// 模块输入数据</span><br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span>          pi_flag,        <span class="hljs-comment">// 串口输入数据标志</span><br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>  tx             <span class="hljs-comment">// 数据输出</span><br>);<br><br><span class="hljs-keyword">parameter</span> BAUD_CNT__MAX = CLK_FREQ/UART_BSP; <span class="hljs-comment">// 波特率计数器最大值</span><br><br><span class="hljs-keyword">reg</span>         work_en;  <span class="hljs-comment">// 工作使能</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>]  baud_cnt; <span class="hljs-comment">// 波特计数器</span><br><span class="hljs-keyword">reg</span>         bit_flag; <span class="hljs-comment">// 数据标志</span><br><span class="hljs-keyword">reg</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>]   bit_cnt;  <span class="hljs-comment">// 比特计数器</span><br><br><span class="hljs-comment">// 使能信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pi_flag == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_cnt == <span class="hljs-number">4&#x27;d9</span>) &amp;&amp; (bit_flag == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        work_en &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <br>        work_en &lt;= work_en;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 波特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= <span class="hljs-number">16&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((work_en == <span class="hljs-number">1&#x27;b0</span>) || (baud_cnt == BAUD_CNT__MAX - <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= <span class="hljs-number">16&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 计数条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(work_en == <span class="hljs-number">1&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        baud_cnt &lt;= baud_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <br>        baud_cnt &lt;= baud_cnt;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特标志信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(baud_cnt == <span class="hljs-number">16&#x27;b1</span>) <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 比特计数器</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 归零条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_flag == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (bit_cnt == <span class="hljs-number">4&#x27;d9</span>)) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= <span class="hljs-number">4&#x27;d0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-comment">// 计数条件</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((bit_flag == <span class="hljs-number">1&#x27;b1</span>) &amp;&amp; (work_en == <span class="hljs-number">1&#x27;b1</span>)) <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt + <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        bit_cnt &lt;= bit_cnt;<br>    <span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 输出信号</span><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> sys_clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">negedge</span> sys_rst_n) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span>(!sys_rst_n) <span class="hljs-keyword">begin</span><br>        tx &lt;= <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-comment">//空闲为高</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(bit_flag == <span class="hljs-number">1&#x27;b1</span>)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">case</span>(bit_cnt)<br>            <span class="hljs-number">4&#x27;d0</span>: tx &lt;= <span class="hljs-number">1&#x27;b0</span>; <span class="hljs-comment">//起始位为低</span><br>            <span class="hljs-number">4&#x27;d1</span>: tx &lt;= pi_data[<span class="hljs-number">0</span>];<br>            <span class="hljs-number">4&#x27;d2</span>: tx &lt;= pi_data[<span class="hljs-number">1</span>];<br>            <span class="hljs-number">4&#x27;d3</span>: tx &lt;= pi_data[<span class="hljs-number">2</span>];<br>            <span class="hljs-number">4&#x27;d4</span>: tx &lt;= pi_data[<span class="hljs-number">3</span>];<br>            <span class="hljs-number">4&#x27;d5</span>: tx &lt;= pi_data[<span class="hljs-number">4</span>];<br>            <span class="hljs-number">4&#x27;d6</span>: tx &lt;= pi_data[<span class="hljs-number">5</span>];<br>            <span class="hljs-number">4&#x27;d7</span>: tx &lt;= pi_data[<span class="hljs-number">6</span>];<br>            <span class="hljs-number">4&#x27;d8</span>: tx &lt;= pi_data[<span class="hljs-number">7</span>];<br>            <span class="hljs-number">4&#x27;d9</span>: tx &lt;= <span class="hljs-number">1&#x27;b1</span>; <span class="hljs-comment">//停止位为高</span><br>            <span class="hljs-keyword">default</span>: tx &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>        <span class="hljs-keyword">endcase</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">endmodule</span><br><br><br></code></pre></td></tr></table></figure><p>仿真代码</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> tb_uart_tx();<br><br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] pi_data;<br><span class="hljs-keyword">reg</span> pi_flag;<br><br><span class="hljs-keyword">wire</span> tx;<br><br><span class="hljs-comment">// 系统时钟初始化</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">1&#x27;b0</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>    #<span class="hljs-number">20</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 生成系统时钟</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><span class="hljs-comment">// 测试序列</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d0</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    #<span class="hljs-number">200</span>;<br>    <span class="hljs-comment">// 0</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d0</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 1</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d1</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 2</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d2</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 3</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d3</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 4</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d4</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 5</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d5</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 6</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d6</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-variable">#(5208*10*20)</span>;<br>    <span class="hljs-comment">// 7</span><br>    pi_data &lt;= <span class="hljs-number">8&#x27;d7</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    pi_flag &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 实例化UART发送模块</span><br>uart_tx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(<span class="hljs-number">9600</span>),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(<span class="hljs-number">50_000_000</span>)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_tx_inst<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <br>    <span class="hljs-variable">.pi_data</span>            (pi_data),  <br>    <span class="hljs-variable">.pi_flag</span>            (pi_flag),<br><br>    <span class="hljs-variable">.tx</span>                 (tx)<br>);<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h3 id="3-3-串口顶层模块"><a href="#3-3-串口顶层模块" class="headerlink" title="3.3 串口顶层模块"></a>3.3 串口顶层模块</h3><p>模块代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> rs232(<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_clk,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> sys_rst_n,<br>    <span class="hljs-keyword">input</span> <span class="hljs-keyword">wire</span> rx,<br><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">wire</span> tx<br>);<br><br><br><span class="hljs-keyword">wire</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] po_data;<br><span class="hljs-keyword">wire</span> po_flag;<br><br><br><span class="hljs-comment">// 实例化UART接收模块</span><br>uart_rx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(<span class="hljs-number">9600</span>),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(<span class="hljs-number">50_000_000</span>)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_rx_inst<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <span class="hljs-comment">// 系统时钟</span><br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <span class="hljs-comment">// 系统复位信号</span><br>    <span class="hljs-variable">.rx</span>                 (rx),             <span class="hljs-comment">// 串口接收数据</span><br><br>    <span class="hljs-variable">.po_data</span>            (po_data),  <span class="hljs-comment">// 模块输出数据</span><br>    <span class="hljs-variable">.po_flag</span>            (po_flag)   <span class="hljs-comment">// 串口接收数据完成标志</span><br>);<br><span class="hljs-comment">// 实例化UART发送模块</span><br>uart_tx<br>#(<br>    <span class="hljs-variable">.UART_BSP</span>(<span class="hljs-number">9600</span>),   <span class="hljs-comment">// 波特率</span><br>    <span class="hljs-variable">.CLK_FREQ</span>(<span class="hljs-number">50_000_000</span>)   <span class="hljs-comment">// 时钟频率</span><br>)<br>uart_tx_inst<br>(<br>    <span class="hljs-variable">.sys_clk</span>            (sys_clk),        <br>    <span class="hljs-variable">.sys_rst_n</span>          (sys_rst_n),      <br>    <span class="hljs-variable">.pi_data</span>            (po_data),  <br>    <span class="hljs-variable">.pi_flag</span>            (po_flag),<br><br>    <span class="hljs-variable">.tx</span>                 (tx)<br>);<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>仿真代码：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> 1ns / 1ns</span><br><br><span class="hljs-keyword">module</span> tb_rs232();<br><br><span class="hljs-keyword">reg</span> sys_clk;<br><span class="hljs-keyword">reg</span> sys_rst_n;<br><span class="hljs-keyword">reg</span> rx;<br><span class="hljs-keyword">wire</span> tx;<br><span class="hljs-comment">// 系统时钟初始化</span><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    sys_clk = <span class="hljs-number">1&#x27;b0</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b0</span>;<br>    rx = <span class="hljs-number">1&#x27;b1</span>;<br>    #<span class="hljs-number">20</span>;<br>    sys_rst_n = <span class="hljs-number">1&#x27;b1</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">// 生成系统时钟</span><br><span class="hljs-keyword">always</span> #<span class="hljs-number">10</span> sys_clk = ~sys_clk;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    #<span class="hljs-number">200</span>;<br>    rx_byte();<br><span class="hljs-keyword">end</span><br><br><br><span class="hljs-comment">// 字节发送任务</span><br><span class="hljs-keyword">task</span> rx_byte();<br><span class="hljs-keyword">integer</span> j;<br><span class="hljs-keyword">for</span>(j =<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">8</span>;j=j+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>    rx_bit(j);<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><span class="hljs-comment">// 模拟串口数据的任务</span><br><span class="hljs-keyword">task</span> rx_bit (<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] data<br>);<br><br><span class="hljs-keyword">integer</span> i;<br><span class="hljs-keyword">for</span>( i= <span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">10</span> ; i=i+<span class="hljs-number">1</span> ) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">case</span> (i)<br>        <span class="hljs-number">0</span>: rx &lt;= <span class="hljs-number">1&#x27;b0</span>;<br>        <span class="hljs-number">1</span>: rx &lt;= data[<span class="hljs-number">0</span>];<br>        <span class="hljs-number">2</span>: rx &lt;= data[<span class="hljs-number">1</span>];<br>        <span class="hljs-number">3</span>: rx &lt;= data[<span class="hljs-number">2</span>];<br>        <span class="hljs-number">4</span>: rx &lt;= data[<span class="hljs-number">3</span>];<br>        <span class="hljs-number">5</span>: rx &lt;= data[<span class="hljs-number">4</span>];<br>        <span class="hljs-number">6</span>: rx &lt;= data[<span class="hljs-number">5</span>];<br>        <span class="hljs-number">7</span>: rx &lt;= data[<span class="hljs-number">6</span>];<br>        <span class="hljs-number">8</span>: rx &lt;= data[<span class="hljs-number">7</span>];<br>        <span class="hljs-number">9</span>: rx &lt;= <span class="hljs-number">1&#x27;b1</span>;<br>    <span class="hljs-keyword">endcase</span><br>    <span class="hljs-variable">#(5208*20)</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endtask</span><br><br><br><span class="hljs-comment">// 实例化串口模块</span><br>rs232 rs232(<br>    <span class="hljs-variable">.sys_clk</span>(sys_clk),<br>    <span class="hljs-variable">.sys_rst_n</span>(sys_rst_n),<br>    <span class="hljs-variable">.rx</span>(rx),<br><br>    <span class="hljs-variable">.tx</span>(tx)<br>);<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><p>仿真效果：<br><img src="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/20240205214955.png"></p><h3 id="四、实际测试效果"><a href="#四、实际测试效果" class="headerlink" title="四、实际测试效果"></a>四、实际测试效果</h3><p><img src="/2024/01/23/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/FPGA/FPGA%E5%AE%9E%E8%B7%B5/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E6%9C%AC%E4%B8%B2%E5%8F%A3/FPGA%E5%AE%9E%E7%8E%B0%E4%B8%B2%E5%8F%A3RS232/20240205222148.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://search.bilibili.com/all?vt=76757802&keyword=%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90fpga&from_source=webtop_search&spm_id_from=333.1007&search_source=5">https://search.bilibili.com/all?vt=76757802&amp;keyword=%E6%AD%A3%E7%82%B9%E5%8E%9F%E5%AD%90fpga&amp;from_source=webtop_search&amp;spm_id_from=333.1007&amp;search_source=5</a></li><li><a href="https://www.bilibili.com/video/BV1y34y147s5/?spm_id_from=333.337.top_right_bar_window_history.content.click&vd_source=ef5a0ab0106372751602034cdd9ab98e">https://www.bilibili.com/video/BV1y34y147s5/?spm_id_from=333.337.top_right_bar_window_history.content.click&amp;vd_source=ef5a0ab0106372751602034cdd9ab98e</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>FPGA</category>
      
      <category>vivado</category>
      
      <category>UART</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FPGA</tag>
      
      <tag>vivado</tag>
      
      <tag>UART</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32G0系列ADC入门</title>
    <link href="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/"/>
    <url>/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文主要介绍STM32G0系列ADC的使用（供个人回忆）。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><p>|  文档名称  |  版本  |  作者  |      时间      |   备注   |<br>| —- | —- | ———— | —— |<br>| STM32G0系列ADC入门 |v1.0.0| DuRuofu | 2024-01-13 | 首次建立 |</p><div STYLE="page-break-after: always;"></div><h1 id="STM32G0系列ADC入门"><a href="#STM32G0系列ADC入门" class="headerlink" title="STM32G0系列ADC入门"></a>STM32G0系列ADC入门</h1><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p><strong>分辨率</strong>：读出的数据的长度，如8位就是最大值为255的意思，即范围[0,255],12位就是最大值为4096，即范围[0,4096]</p><p><strong>通道</strong>：ADC输入引脚，通常一个ADC控制器控制多个通道，如果需要多通道的话，就得进行每个通道扫描了。</p><p><strong>ADC DMA功能</strong>：DMA是内存到内存或内存到存储的直接映射，数据不用经过单片机处理器而直接由硬件进行数据的传递。方便直接将读取的ADC值放到内存变量中。</p><p>ADC芯片通常有正参考电压和负参考电压，通常正参考电压连接到VCC,负参考电压连接到GND</p><p>在STM32中ADC还可以用于采集芯片的温度、RTC供电电压</p><p>*<em>ADC</em>***的转换方式：</p><ol><li>单次转换，一次只转换一个通道</li><li>连续转换，转换完成一个通道后立即自动执行下一个通道的转换、</li><li>扫描模式，开启一次后，自动的连续读取多个通道</li></ol><p>*<em>ADC</em>***的三种工作方式：</p><ol><li>阻塞模式（查询模式）</li><li>中断模式</li><li>DMA模式</li></ol><p>在实际使用过程中我们使用最多的就是阻塞模式和DMA模式，中断模式应用不多，下面就不做演示了。</p><h2 id="二、cubemx初始化项目"><a href="#二、cubemx初始化项目" class="headerlink" title="二、cubemx初始化项目"></a>二、cubemx初始化项目</h2><blockquote><p>这里以STM32G070RBT6为例：</p></blockquote><h3 id="2-1-时钟配置"><a href="#2-1-时钟配置" class="headerlink" title="2.1 时钟配置"></a>2.1 时钟配置</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213172643.png"></p><h3 id="2-2-串口配置"><a href="#2-2-串口配置" class="headerlink" title="2.2 串口配置"></a>2.2 串口配置</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213172829.png"></p><h3 id="2-3-其他配置"><a href="#2-3-其他配置" class="headerlink" title="2.3 其他配置"></a>2.3 其他配置</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213173235.png"></p><h2 id="三、-单个通道，查询阻塞模式"><a href="#三、-单个通道，查询阻塞模式" class="headerlink" title="三、 单个通道，查询阻塞模式"></a>三、 单个通道，查询阻塞模式</h2><h3 id="3-1-ADC配置"><a href="#3-1-ADC配置" class="headerlink" title="3.1 ADC配置"></a>3.1 ADC配置</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213175044.png"></p><p>使能ADC的0号通道，开启连续转换</p><p>业务代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;adc_bsp.h&quot;</span></span><br><br><span class="hljs-comment">// ADC 0号通道测量</span><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">ADC_IN0_Meas</span><span class="hljs-params">()</span><br>&#123;<br>    HAL_ADC_Start(&amp;hadc1);<span class="hljs-comment">//启动ADC装换</span><br>    HAL_ADC_PollForConversion(&amp;hadc1, <span class="hljs-number">50</span>);<span class="hljs-comment">//等待转换完成，第二个参数表示超时时间，单位ms.</span><br>    <span class="hljs-keyword">if</span>(HAL_IS_BIT_SET(HAL_ADC_GetState(&amp;hadc1), HAL_ADC_STATE_REG_EOC))<br>        &#123;<br>    <span class="hljs-keyword">return</span> HAL_ADC_GetValue(&amp;hadc1);<span class="hljs-comment">//读取ADC转换数据，数据为12位</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>使用<code>HAL_ADC_Start(&amp;hadc1)</code>函数启动了ADC转换，其中<code>&amp;hadc1</code>是指向ADC控制结构体的指针，用于表示使用的是哪个ADC实例。</li><li>使用<code>HAL_ADC_PollForConversion(&amp;hadc1, 50)</code>函数等待ADC转换完成，超时时间设置为50毫秒，如果在超时时间内转换完成，则继续执行后续代码。</li><li>使用<code>HAL_IS_BIT_SET(HAL_ADC_GetState(&amp;hadc1), HAL_ADC_STATE_REG_EOC)</code>条件判断语句检查ADC状态是否处于转换完成状态（EOC）。如果是，则执行下一步。</li><li>使用<code>HAL_ADC_GetValue(&amp;hadc1)</code>函数读取ADC转换结果，并将其作为返回值返回。</li></ol><p>使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 系统应用循环任务</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">App_Task</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">uint32_t</span> AD_Value = ADC_IN0_Meas();<br>Usart3DmaPrintf(<span class="hljs-string">&quot;v=%.1f\r\n&quot;</span>,AD_Value*<span class="hljs-number">3300.0</span>/<span class="hljs-number">4096</span>);<span class="hljs-comment">//打印日志</span><br>&#125;<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213182229.png"></p><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213182249.png"></p><h2 id="四、DMA方式多通道采集"><a href="#四、DMA方式多通道采集" class="headerlink" title="四、DMA方式多通道采集"></a>四、DMA方式多通道采集</h2><h3 id="4-1-初始化多个-ADC-通道"><a href="#4-1-初始化多个-ADC-通道" class="headerlink" title="4.1 初始化多个 ADC 通道"></a>4.1 初始化多个 ADC 通道</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213183322.png"></p><h3 id="4-2-ADC多通道配置"><a href="#4-2-ADC多通道配置" class="headerlink" title="4.2 ADC多通道配置"></a>4.2 ADC多通道配置</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213183522.png"></p><ol><li>使能扫描转换模式 (Scan Conversion Mode), 使能连续转换模式 (Continuous Conversion Mode)。 </li><li>ADC 规则组选择转换通道数为 2(Number Of Conversion)。 </li><li>配置 Rank 的输入通道。</li></ol><h3 id="4-3-配置DMA"><a href="#4-3-配置DMA" class="headerlink" title="4.3 配置DMA"></a>4.3 配置DMA</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240213183717.png"></p><p>给ADC1添加DMA ，设置为连续传输模式，数据长度为字</p><h3 id="4-4-编写业务代码"><a href="#4-4-编写业务代码" class="headerlink" title="4.4 编写业务代码:"></a>4.4 编写业务代码:</h3><p>添加变量。其中 ADC_Value 作为转换数据缓存数组，ad1,ad2 存 储 PA0(转换通道 0),PA1(转换通道 1) 的电压值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint32_t</span> ADC_Value[<span class="hljs-number">100</span>]; <span class="hljs-comment">//转换数据缓存数组</span><br><span class="hljs-type">uint8_t</span> i;               <br><span class="hljs-type">uint32_t</span> ad1,ad2;        <span class="hljs-comment">// PA0(转换通道 0),PA1(转换通道 1) 的电压值</span><br></code></pre></td></tr></table></figure><p>以 DMA 方式开启 ADC 装换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">ADC_init</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// ADC校准</span><br>    HAL_ADCEx_Calibration_Start(&amp;hadc1);<br>    <span class="hljs-comment">//以 DMA 方式开启 ADC 装换。HAL_ADC_Start_DMA() 函数第二个参数为数据存储起始地址，第三个参数为 DMA 传输数据的长度。</span><br>    HAL_ADC_Start_DMA(&amp;hadc1, (<span class="hljs-type">uint32_t</span>*)&amp;ADC_Value, <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于 DMA 采用了连续传输的模式，ADC 采集到的数据会不断传到到存储器中（此处即为数组 <code>ADC_Value</code>）。ADC 采集的数据从 <code>ADC_Value[0]</code> 一直存储到 <code>ADC_Value[99]</code>， 然后采集到的数据又重新存储到 <code>ADC_Value[0]</code>，一直到<code> ADC_Value[99]</code>。所以 <code>ADC_Value</code> 数组里面的数据会不断被刷新。这个过程中是通过 DMA 控制的，不需要 CPU 参与。我 们只需读取 <code>ADC_Value</code> 里面的数据即可得到 ADC 采集到的数据。其中 <code>ADC_Value[0]</code> 为 通道 0(PA0) 采集的数据，<code>ADC_Value[1]</code> 为通道 1(PA1) 采集的数据，<code>ADC_Value[2]</code> 为通 道 0 采集的数据，如此类推。数组偶数下标的数据为通道 0 采集数据，数组奇数下标的 数据为通道 1 采集数据。</p><p>添加应用程序，将采集的数据装换为电压值并输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ADC测量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">ADC_Meas</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ad1 = (<span class="hljs-type">float</span>)ADC_Value[<span class="hljs-number">0</span>] * (<span class="hljs-number">3.3</span>/<span class="hljs-number">4096</span>);<br>    ad2 = (<span class="hljs-type">float</span>)ADC_Value[<span class="hljs-number">1</span>] * (<span class="hljs-number">3.3</span>/<span class="hljs-number">4096</span>);<br><br>    Usart3DmaPrintf(<span class="hljs-string">&quot;AD1_value=%1.3f,AD2_value=%1.3f\r\n&quot;</span>, ad1,ad2);<br>    HAL_Delay(<span class="hljs-number">10</span>);<br>    HAL_ADC_Start_DMA(&amp;hadc1, (<span class="hljs-type">uint32_t</span>*)&amp;ADC_Value, <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里值得注意的是我在测量完再次调用了<code>HAL_ADC_Start_DMA</code>，这是由于一个目前尚未解决的bug：开启DMA连续转化后，但是DMA还是只搬运一次就结束了，只好再次开启。目前尚未找到解决办法。但这样也能实现功能。</p><h3 id="4-5-效果："><a href="#4-5-效果：" class="headerlink" title="4.5 效果："></a>4.5 效果：</h3><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240214125527.png"></p><p><img src="/2024/01/13/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32G0%E7%B3%BB%E5%88%97ADC%E5%85%A5%E9%97%A8/20240214125544.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/u012121390/article/details/113363173">https://blog.csdn.net/u012121390/article/details/113363173</a></li><li><a href="https://hui-shao.cn/stm32-adc-dma-continue/">https://hui-shao.cn/stm32-adc-dma-continue/</a></li><li><a href="https://www.bilibili.com/video/BV1q4411d7RX/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1q4411d7RX/?spm_id_from=333.337.search-card.all.click</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>ADC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一种STM32按键消抖写法</title>
    <link href="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/%E8%AE%B0%E4%B8%80%E7%A7%8DSTM32%E6%8C%89%E9%94%AE%E6%B6%88%E6%8A%96%E5%86%99%E6%B3%95/"/>
    <url>/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/%E8%AE%B0%E4%B8%80%E7%A7%8DSTM32%E6%8C%89%E9%94%AE%E6%B6%88%E6%8A%96%E5%86%99%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>消抖是为了避免按键在物理接触时可能引起的抖动信号，从而导致多次触发中断回调函数。以下是一种常见的按键消抖方法：</p><ol><li>在HAL_GPIO_EXTI_Callback函数中，使用延时函数（例如HAL_Delay）等待一个适当的时间，以确保消除按键的抖动。例如，可以延时10毫秒。</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(GPIO_Pin == KEY1_Pin) &#123; <span class="hljs-built_in">HAL_Delay</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 其他处理代码 &#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>在按键的回调函数中，添加一个变量来记录上一次按键触发的时间戳。每次回调函数被调用时，检查当前时间与上一次触发的时间差。如果时间差小于一定阈值，忽略当前触发，否则执行相应的操作。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBOUNCE_DELAY 200 <span class="hljs-comment">// 设置消抖延时为200毫秒</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Key_1_Callback</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> lastTriggerTime = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> currentTime = <span class="hljs-built_in">HAL_GetTick</span>(); <span class="hljs-comment">// 获取当前时间戳</span><br><br>    <span class="hljs-keyword">if</span> (currentTime - lastTriggerTime &gt;= DEBOUNCE_DELAY)<br>    &#123;<br>        <span class="hljs-comment">// 执行按键触发的操作</span><br>        <span class="hljs-comment">// ...</span><br><br>        lastTriggerTime = currentTime; <span class="hljs-comment">// 更新上一次触发的时间戳</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这种方法通过设置一个适当的延时和使用时间戳比较的方式，在一定程度上可以消除按键的抖动效应。</p><p>进阶：使用回调函数给每一个按键独立软件防抖</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @Author: DuRuofu duruofu@qq.com</span><br><span class="hljs-comment"> * @Date: 2023-08-02 12-02-17</span><br><span class="hljs-comment"> * @LastEditors: DuRuofu</span><br><span class="hljs-comment"> * @LastEditTime: 2023-08-03 15-28-12</span><br><span class="hljs-comment"> * @FilePath: \Project\RedServo\STM32\User\KEY\key.c</span><br><span class="hljs-comment"> * @Description: 键盘扫描</span><br><span class="hljs-comment"> * Copyright (c) 2023 by duruofu@foxmail.com All Rights Reserved.</span><br><span class="hljs-comment"> */</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;key.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;led.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;gui.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;yuntai.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Buzzer.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;app.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY1_Pin KEY_1_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_Pin KEY_2_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY3_Pin KEY_3_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY4_Pin KEY_4_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY5_Pin KEY_5_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY6_Pin KEY_6_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY7_Pin KEY_7_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY8_Pin KEY_8_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY9_Pin KEY_9_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY10_Pin KEY_10_Pin</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY11_Pin KEY_11_Pin</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBOUNCE_DELAY 250 <span class="hljs-comment">// 设置消抖延时为200毫秒</span></span><br><br><span class="hljs-comment">//题目切换按钮</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Key_1_Callback</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//按键逻辑代码</span><br>&#125;<br><span class="hljs-comment">// 急停按键</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Key_2_Callback</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">//按键逻辑代码</span><br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @description: 按键检测，外部中断回调函数</span><br><span class="hljs-comment"> * @param &#123;uint16_t&#125; GPIO_Pin</span><br><span class="hljs-comment"> * @return &#123;*&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_GPIO_EXTI_Callback</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> GPIO_Pin)</span><br>&#123;<br>    <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br>    UNUSED(GPIO_Pin);<br>    <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span><br><span class="hljs-comment">            the HAL_GPIO_EXTI_Callback could be implemented in the user file</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span>(GPIO_Pin == KEY1_Pin)<br>    &#123;<br>        Debounce(GPIO_Pin, Key_1_Callback);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(GPIO_Pin == KEY2_Pin)<br>    &#123;<br>        <span class="hljs-comment">// 按键2按下的处理代码</span><br>        Debounce(GPIO_Pin, Key_2_Callback);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 通用的按键消抖函数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Debounce</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> GPIO_Pin, <span class="hljs-type">void</span> (*callback)(<span class="hljs-type">void</span>))</span><br>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> lastTriggerTime = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> currentTime = HAL_GetTick(); <span class="hljs-comment">// 获取当前时间戳</span><br>    <span class="hljs-keyword">if</span> (currentTime - lastTriggerTime &gt;= DEBOUNCE_DELAY)<br>    &#123;<br>        Buzzer_ShortBeep();<br>        callback(); <span class="hljs-comment">// 调用传入的回调函数</span><br>        lastTriggerTime = currentTime; <span class="hljs-comment">// 更新上一次触发的时间戳</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过在每个按键回调函数中独立地记录和比较时间戳，可以确保每个按键都独立地进行消抖处理。这样可以避免一个按键的抖动影响到其他按键的触发。请根据实际情况适当调整消抖延时以满足你的需求。</p>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>MCU</tag>
      
      <tag>软件消抖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>以太网基础知识</title>
    <link href="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li><li>本文档从硬件角度介绍了以太网的基础知识，包括以太网的基础知识、硬件接口、硬件连接示意、MAC 和 PHY 模块、MII&#x2F;RMII&#x2F;GMII&#x2F;RGMII 接口等。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><p>|  文档名称  |  版本  |  作者  |      时间      |   备注   |<br>| —- | —- | ———— | —— |<br>| 以太网概述 |v1.0.0| DuRuofu | 2024-01-06 | 首次建立 |</p><div STYLE="page-break-after: always;"></div><h1 id="以太网基础知识"><a href="#以太网基础知识" class="headerlink" title="以太网基础知识"></a>以太网基础知识</h1><h2 id="一、基础"><a href="#一、基础" class="headerlink" title="一、基础"></a>一、基础</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>以太网(Ethernet)是当今现有局域网采用的最通用的通信协议标准，该标准定义了在局域网中采用的电 缆类型和信号处理方法。以太网凭借其成本低、通信速率高、抗干扰性强等优点被广泛应用在网络远程监 控、交换机、工业自动化等对通信速率要求较高的场合。</p><p>以太网是一种产生较早，使用相当广泛的局域网。其最初是由 Xerox（施乐）公司创建并由 Xerox、 Intel 和 DEC 公司联合开发的基带局域网规范，后来被电气与电子工程师协会（IEEE）所采纳作为 802.3 的 标准。<br>以太网的分类有标准以太网（10Mbit&#x2F;s）、 快速以太网(100Mbit&#x2F;s)和千兆以太网（1000Mbit&#x2F;s）。</p><p>随着以 太网技术的飞速发展，市场上也出现了万兆以太网（10Gbit&#x2F;s），它扩展了 IEEE802.3 协议和 MAC 规范， 使其技术支持 10Gbit&#x2F;s 的传输速率。在实际应用中，千兆以太网理论上最高通信速率为 1000Mbit&#x2F;s，可以 胜任大部分的使用场景。</p><h3 id="1-2-硬件接口"><a href="#1-2-硬件接口" class="headerlink" title="1.2 硬件接口"></a>1.2 硬件接口</h3><p>RJ45 接口俗称“水晶头”，专业术语为 RJ45 连接器，由插头（接头、水晶头）和插座（母座）组成， 属于双绞线以太网接口类型。RJ45 插头只能沿固定方向插入，设有一个塑料弹片与 RJ45 插槽卡住以防止 脱落。</p><p>以太网通信离不开连接端口的支持，网络数据连接的端口就是以太网接口。以太网接口类型有 RJ45 接口、RJ11 接口（电话线接口）、SC 光纤接口等。其中 RJ45 接口是我们现在最常见的网络设备接口 （如：电脑网口），我们开发板使用的就是这种接口。 RJ45 接口俗称“水晶头”，专业术语为 RJ45 连接器，由插头（接头、水晶头）和插座（母座）组成， 属于双绞线以太网接口类型。RJ45 插头只能沿固定方向插入，设有一个塑料弹片与 RJ45 插槽卡住以防止 脱落。 </p><p>RJ45 接口样式如图 所示：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206171420.png"></p><p>RJ45 接口定义以及各引脚功能在不同通信速率下的定义有区别，图 52.1.2 是在 10M&#x2F;100M 通信速率下 的定义，由下图可知，RJ45 插座只使用了 1、2、3、6 这四根线，其中 1、2 这组负责传输数据（TX+、 TX-），而 3、6 这组负责接收数据（RX+、RX-），另外四根线是备用的。</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206171533.png"></p><p>而在 1000M 的通信速率下，RJ45 插座的 8 根线都有用到，且都是双向引脚。需要说明的是，支持千 兆网通信的 RJ45 接口是向下兼容的，即也支持 10M&#x2F;100M 通信速率，只不过不同的通信速率，其引脚功 能有区别。千兆网各引脚功能如下图所示：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206171616.png"></p><p>从硬件的角度来说，以太网接口电路主要由 MAC（Media Access Control）控制器和物理层接口 PHY （Physical Layer，PHY）两大部分构成。MAC 指媒体访问控制子层协议，它和 PHY 接口既可以整合到单 颗芯片内，也可以独立分开，一般MAC 控制器由 FPGA 实现，PHY 芯片指开发板板载的 以太网芯片。 </p><blockquote><p>总结：  物理层芯片称为PHY、数据链路层芯片称为MAC。</p></blockquote><p>PHY 在发送数据的时候，接收 MAC 发过来的数据（对 PHY 来说，没有帧的概念，都是数据而不管什 么地址，数据还是 CRC），把并行数据转化为串行流数据，按照物理层的编码规则把数据编码转换为模拟 信号发送出去，接收数据时的流程反之。PHY 还提供了和对端设备连接的重要功能，并通过 LED 灯显示 出自己目前的连接状态和工作状态。当我们给网卡接入网线的时候，PHY 芯片不断发出脉冲信号来检测对 端是否有设备，它们通过标准的“语言”交流，互相协商并确定连接速度、双工模式、是否采用流控等。 通常情况下，协商的结果是两个设备中能同时支持的最大速度和最好的双工模式。这个技术被称为 Auto Negotiation，即自协商。</p><h3 id="1-3-硬件连接示意"><a href="#1-3-硬件连接示意" class="headerlink" title="1.3 硬件连接示意"></a>1.3 硬件连接示意</h3><p>从硬件角度来看以太网是由CPU，MAC，PHY三部分组成的，如下图示意：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206174702.png"></p><p><strong>将MAC集成进CPU（FPGA）而将PHY留在片外，这种结构是最常见的</strong>：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206172417.png"></p><p>详细一点就是下面的样子：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206174844.png"></p><h3 id="1-4-MAC-和-PHY-模块"><a href="#1-4-MAC-和-PHY-模块" class="headerlink" title="1.4 MAC 和 PHY 模块"></a>1.4 MAC 和 PHY 模块</h3><h5 id="MAC"><a href="#MAC" class="headerlink" title="MAC"></a>MAC</h5><p><strong>MAC(Media Access Control)</strong> 即媒体访问控制层协议。MAC由硬件控制器及MAC通信协议构成。该协议位于OSI七层协议中数据链路层的下半部分，主要负责控制与连接物理层的物理介质。MAC硬件框图如下图所示：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206175100.png"></p><p>在发送数据的时候，MAC协议可以事先判断是否可以发送数据，如果可以发送将给数据加上一些控制信息，最终将数据以及控制信息以规定的格式发送到物理层；在接收数据的时候，MAC协议首先判断输入的信息并是否发生传输错误，如果没有错误，则去掉控制信息发送至LLC(逻辑链路控制)层。该层协议是以太网MAC由IEEE-802. 3以太网标准定义。一般以太网MAC芯片的一端连接PCI总线，另一端连接PHY芯片上通过MII接口连接。</p><h5 id="PHY"><a href="#PHY" class="headerlink" title="PHY"></a>PHY</h5><p>PHY（Physical Layer）是IEEE802.3中定义的一个标准模块，STA（Station Management Entity，管理实体，一般为MAC或CPU）通过MIIM（MII Manage Interface）对PHY的行为、状态进行管理和控制，而具体管理和控制动作是通过读写PHY内部的寄存器实现的。PHY的基本结构如下图：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206175303.png"></p><p>PHY在发送数据的时候,收到MAC过来的数据(对PHY来说,没有帧的概念,对它来说,都是数据）然后把并行数据转化为串行流数据,再按照物理层的编码规则把数据编码,再变为模拟信号把数据送出去，收数据时的流程反之。<br>PHY还有个重要的功能就是实现CSMA&#x2F;CD的部分功能，它可以检测到网络上是否有数据在传送,如果有数据在传送中就等待,一旦检测到网络空闲,再等待一个随机时间后将送数据出去.如果两个碰巧同时送出了数据,那样必将造成冲突,这时候冲突检测机构可以检测到冲突,然后各等待一个随机的时间重新发送数据。</p><p>PHY寄存器的地址空间为5位，从0到31最多可以定义32个寄存器（随着芯片功能不断增加，很多PHY芯片采用分页技术来扩展地址空间以定义更多的寄存器），IEEE802.3定义了地址为0-15这16个寄存器的功能，地址16-31的寄存器留给芯片制造商自由定义。</p><p>MAC 和 PHY 芯片有配置接口，比如 MDIO 接口，可以配置 PHY 芯片的工作模式以及获取 PHY 芯 片的若干状态信息。PHY 芯片内部包含一系列寄存器，用户通过这些寄存器来配置 PHY 芯片的工作模式。以及获取 PHY 芯片的若干状态信息，如连接速率、双工模式、自协商状态等。</p><p>MDIO 接口也称为 SMI 接口（Serial Management Interface，串行管理接口），包括 ETH_MDC（数据管 理时钟）和 ETH_MDIO（数据管理输入输出）两条信号线。ETH_MDC 为 ETH_MDIO 提供时钟， ETH_MDC 的最大时钟不能超过 12.5Mhz。ETH_MDIO 为双向数据引脚，既用于发送数据，也用于接收数据。</p><h3 id="1-5-MII-x2F-RMII-x2F-GMII-x2F-RGMII-接口"><a href="#1-5-MII-x2F-RMII-x2F-GMII-x2F-RGMII-接口" class="headerlink" title="1.5 MII&#x2F;RMII&#x2F;GMII&#x2F;RGMII 接口"></a>1.5 MII&#x2F;RMII&#x2F;GMII&#x2F;RGMII 接口</h3><h4 id="MII"><a href="#MII" class="headerlink" title="MII"></a>MII</h4><p>MII（Media Independent interface）即介质无关接口，它是IEEE-802.3定义的行业标准，是MAC与PHY之间的接口。MII数据接口包含16个信号和2个管理接口信号，如下图所示：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206175702.png"></p><p>信号定义如下：</p><table><thead><tr><th>信号名称</th><th>描述</th><th>方向</th></tr></thead><tbody><tr><td>TX_CLK</td><td>发送时钟</td><td>PHY → MAC</td></tr><tr><td>TX_ER</td><td>发送数据错误</td><td>MAC → PHY</td></tr><tr><td>TX_EN</td><td>发送使能</td><td>MAC → PHY</td></tr><tr><td>TXD0</td><td>发送数据位0（最先传输）</td><td>MAC → PHY</td></tr><tr><td>TXD1</td><td>发送数据位1</td><td>MAC → PHY</td></tr><tr><td>TXD2</td><td>发送数据位2</td><td>MAC → PHY</td></tr><tr><td>TXD3</td><td>发送数据位3</td><td>MAC → PHY</td></tr><tr><td>RX_CLK</td><td>接收时钟</td><td>PHY → MAC</td></tr><tr><td>RX_DV</td><td>接收数据有效</td><td>PHY → MAC</td></tr><tr><td>RX_ER</td><td>接收数据错误</td><td>PHY → MAC</td></tr><tr><td>RXD0</td><td>接收数据位0（最先传输）</td><td>PHY → MAC</td></tr><tr><td>RXD1</td><td>接收数据位1</td><td>PHY → MAC</td></tr><tr><td>RXD2</td><td>接收数据位2</td><td>PHY → MAC</td></tr><tr><td>RXD3</td><td>接收数据位3</td><td>PHY → MAC</td></tr><tr><td>CRS</td><td>载波监测</td><td>PHY → MAC</td></tr><tr><td>COL</td><td>冲突碰撞监测</td><td>PHY → MAC</td></tr><tr><td>MDIO</td><td>管理数据</td><td>双向</td></tr><tr><td>MDC</td><td>管理数据时钟</td><td>MAC → PHY</td></tr><tr><td>MAC 通过MIIM 接口读取PHY 状态寄存器以得知目前PHY 的状态。例如连接速度、双工的能力等。也可以通过 MIIM设置PHY的寄存器达到控制的目的。例如流控的打开关闭、自协商模式还是强制模式等。MII以4位半字节方式传送数据双向传输，时钟速率25MHz。其工作速率可达100Mb&#x2F;s。当时钟频率为2.5MHz时，对应速率为10Mb&#x2F;s。MII接口虽然很灵活但由于信号线太多限制多接口网口的发展，后续又衍生出RMII，SMII等。</td><td></td><td></td></tr></tbody></table><h4 id="RMII"><a href="#RMII" class="headerlink" title="RMII"></a>RMII</h4><p>RMII(Reduced Media Independant Interface),精简MII接口，节省了一半的数据线。RMII收发使用2位数据进行传输，收发时钟均采用50MHz时钟源。信号定义如下：</p><table><thead><tr><th>信号名称</th><th>描述</th><th>方向</th></tr></thead><tbody><tr><td>REF_CLK</td><td>参考时钟</td><td>MAC→PHY或由外部时钟源提供</td></tr><tr><td>TX_EN</td><td>发送数据使能</td><td>MAC → PHY</td></tr><tr><td>TXD0</td><td>发送数据位0（最先传输）</td><td>MAC → PHY</td></tr><tr><td>TXD1</td><td>发送数据位1</td><td>MAC → PHY</td></tr><tr><td>RX_ER</td><td>接收错误</td><td>PHY → MAC</td></tr><tr><td>RXD0</td><td>接收数据位0（最先传输）</td><td>PHY → MAC</td></tr><tr><td>RXD1</td><td>接收数据1</td><td>PHY → MAC</td></tr><tr><td>CRS_DV</td><td>载波和接收数据有效</td><td>PHY → MAC</td></tr><tr><td>MDIO</td><td>管理数据</td><td>双向</td></tr><tr><td>MDC</td><td>管理数据时钟</td><td>MAC → PHY</td></tr></tbody></table><p>其中CRS_DV是MII中RX_DV和CRS两个信号的合并，当物理层接收到载波信号后CRS_DV变得有效，将数据发送给RXD。当载波信号消失后，CRS_DV会变为无效。在100M以太网速率中，MAC层每个时钟采样一次RXD[1:0]上的数据，在10M以太网速率中，MAC层每10个时钟采样一次RXD[1:0]上的数据，此时物理层接收的每个数据会在RXD[1:0]保留10个时钟。</p><h4 id="SMII"><a href="#SMII" class="headerlink" title="SMII"></a><strong>SMII</strong></h4><p>SMII（Serial Media Independant Interface）,串行MII接口。它包括TXD,RXD,SYNC三个信号线，共用一个时钟信号，此时钟信号是125MHz,信号线与此时钟同步。信号定义如下：</p><table><thead><tr><th>信号名称</th><th>描述</th><th>方向</th></tr></thead><tbody><tr><td>REF_CLK</td><td>参考时钟</td><td>外部时钟源提供125MHz</td></tr><tr><td>TXD</td><td>发送数据</td><td>MAC → PHY</td></tr><tr><td>RXD</td><td>接收数据</td><td>PHY → MAC</td></tr><tr><td>SYNC</td><td>同步信号</td><td>-</td></tr><tr><td>MDIO</td><td>管理数据</td><td>双向</td></tr><tr><td>MDC</td><td>管理数据时钟</td><td>MAC → PHY</td></tr></tbody></table><p>SYNC是数据收发的同步信号，每10个时钟同步置高一次电平，表示同步。TXD和RXD上的数据和控制信息，以10bit为一组。发送部分波形如下：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206180411.png"></p><p>从波形可以看出，SYNC变高后的10个时钟周期内，TXD依次输出一组10bit的数据即TX_ER,TX_EN,TXD[0:7]，这些控制信息和MII接口含义相同。在100M速率中，每一组的内容都是变换的，在10M速率中，每一组数据需要重复10次，采样任一一组都可以。</p><h4 id="GMII"><a href="#GMII" class="headerlink" title="GMII"></a>GMII</h4><p>GMII（Gigabit Media Independant Interface），千兆MII接口。GMII采用8位接口数据，工作时钟125MHz，因此传输速率可达1000Mbps。同时兼容MII所规定的10&#x2F;100 Mbps工作方式。GMII接口数据结构符合IEEE以太网标准，该接口定义见IEEE 802.3-2000。信号定义如下：</p><table><thead><tr><th>信号名称</th><th>描述</th><th>方向</th></tr></thead><tbody><tr><td>GTX_CLK</td><td>1000M发送时钟</td><td>MAC → PHY</td></tr><tr><td>TX_CLK</td><td>100&#x2F;10M发送时钟</td><td>MAC → PHY</td></tr><tr><td>TX_ER</td><td>发送数据错误</td><td>MAC → PHY</td></tr><tr><td>TX_EN</td><td>发送使能</td><td>MAC → PHY</td></tr><tr><td>TX_[7:0]</td><td>发送数据8bit</td><td>MAC → PHY</td></tr><tr><td>RX_CLK</td><td>接收时钟</td><td>PHY → MAC</td></tr><tr><td>RX_DV</td><td>接收数据有效</td><td>PHY → MAC</td></tr><tr><td>RX_ER</td><td>接收数据错误</td><td>PHY → MAC</td></tr><tr><td>RX_[7:0]</td><td>接收数据8bit</td><td>PHY → MAC</td></tr><tr><td>CRS</td><td>载波监测</td><td>PHY → MAC</td></tr><tr><td>COL</td><td>冲突碰撞监测</td><td>PHY → MAC</td></tr><tr><td>MDIO</td><td>管理数据</td><td>双向</td></tr><tr><td>MDC</td><td>管理数据时钟</td><td>MAC → PHY</td></tr></tbody></table><h4 id="RGMII"><a href="#RGMII" class="headerlink" title="RGMII"></a>RGMII</h4><p>RGMII(Reduced Gigabit Media Independant Interface),精简GMII接口。相对于GMII相比，RGMII具有如下特征：</p><p>发送&#x2F;接收数据线由8条改为4条<br>TX_ER和TX_EN复用，通过TX_CTL传送<br>RX_ER与RX_DV复用，通过RX_CTL传送<br>1 Gbit&#x2F;s速率下，时钟频率为125MHz<br>100 Mbit&#x2F;s速率下，时钟频率为25MHz<br>10 Mbit&#x2F;s速率下，时钟频率为2.5MHz<br>信号定义如下：</p><table><thead><tr><th>信号名称</th><th>描述</th><th>方向</th></tr></thead><tbody><tr><td>TXC</td><td>发送时钟</td><td>MAC→PHY</td></tr><tr><td>TX_CTL</td><td>发送数据控制</td><td>MAC → PHY</td></tr><tr><td>TXD[3:0]</td><td>发送数据4bit</td><td>MAC → PHY</td></tr><tr><td>RXC</td><td>接收时钟</td><td>PHY → MAC</td></tr><tr><td>RX_CTL</td><td>接收数据控制</td><td>PHY → MAC</td></tr><tr><td>RXD[3:0]</td><td>接收数据4bit</td><td>PHY → MAC</td></tr><tr><td>MDIO</td><td>管理数据</td><td>双向</td></tr><tr><td>MDC</td><td>管理数据时钟</td><td>MAC → PHY</td></tr></tbody></table><p>虽然RGMII信号线减半，但TXC&#x2F;RXC时钟仍为125Mhz，为了达到1000Mbit的传输速率，TXD&#x2F;RXD信号线在时钟上升沿发送接收GMII接口中的TXD[3:0]&#x2F;RXD[3:0]，在时钟下降沿发送接收TXD[7:4]&#x2F;RXD[7:4],并且信号TX_CTL反应了TX_EN和TX_ER状态，即在TXC上升沿发送TX_EN,下降沿发送TX_ER，同样的道理试用于RX_CTL，下图为发送接收的时序：</p><p><img src="/2024/01/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/%E4%BB%A5%E5%A4%AA%E7%BD%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/20240206180750.png"></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://blog.csdn.net/sternlycore/article/details/89065789">https://blog.csdn.net/sternlycore/article/details/89065789</a></li><li><a href="https://en.wikipedia.org/wiki/Media-independent_interface">https://en.wikipedia.org/wiki/Media-independent_interface</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>通讯协议</category>
      
      <category>以太网</category>
      
    </categories>
    
    
    <tags>
      
      <tag>通讯协议</tag>
      
      <tag>以太网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32串口使用（HAL库）</title>
    <link href="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/"/>
    <url>/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ol><li>本文档由DuRuofu撰写，由DuRuofu负责解释及执行。</li></ol><h3 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h3><table><thead><tr><th>文档名称</th><th>版本</th><th>作者</th><th>时间</th><th>备注</th></tr></thead><tbody><tr><td>STM32串口使用（HAL库）</td><td>v1.0.0</td><td>DuRuofu</td><td>2023-07-09</td><td>首次建立</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="STM32串口使用（HAL库）"><a href="#STM32串口使用（HAL库）" class="headerlink" title="STM32串口使用（HAL库）"></a>STM32串口使用（HAL库）</h1><h2 id="一、工程创建"><a href="#一、工程创建" class="headerlink" title="一、工程创建"></a>一、工程创建</h2><h4 id="1-设置RCC"><a href="#1-设置RCC" class="headerlink" title="1.设置RCC"></a>1.设置RCC</h4><p>设置高速外部时钟HSE 选择外部时钟源</p><p><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709112156.png"></p><h4 id="2-设置串口"><a href="#2-设置串口" class="headerlink" title="2.设置串口"></a>2.设置串口</h4><p><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709112203.png"></p><ol><li>点击USATR1   </li><li>设置MODE为异步通信(Asynchronous)       </li><li>基础参数：波特率为115200 Bits&#x2F;s。传输数据长度为8 Bit。奇偶检验无，停止位1      接收和发送都使能 </li><li>GPIO引脚设置 USART1_RX&#x2F;USART_TX</li><li>NVIC Settings 一栏使能接收中断<br><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709112215.png"></li></ol><h4 id="3-设置时钟"><a href="#3-设置时钟" class="headerlink" title="3.设置时钟"></a>3.设置时钟</h4><p><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709112227.png"></p><p>我的是  外部晶振为8MHz<br>1选择外部时钟HSE 8MHz<br>2PLL锁相环倍频72倍<br>3系统时钟来源选择为PLL<br>4设置APB1分频器为 &#x2F;2</p><h4 id="4-项目文件设置"><a href="#4-项目文件设置" class="headerlink" title="4.项目文件设置"></a>4.项目文件设置</h4><p><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709112235.png"></p><ol><li>设置项目名称</li><li>设置存储路径</li><li>选择所用IDE</li></ol><h4 id="5-创建工程文件"><a href="#5-创建工程文件" class="headerlink" title="5.创建工程文件"></a>5.创建工程文件</h4><p>然后点击<strong>GENERATE CODE</strong>  创建工程<br>配置下载工具<br>新建的工程所有配置都是默认的  我们需要自行选择下载模式，勾选上下载后复位运行<br><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709112243.png"></p><h2 id="二、串口发送"><a href="#二、串口发送" class="headerlink" title="二、串口发送"></a>二、串口发送</h2><h3 id="1-相关函数："><a href="#1-相关函数：" class="headerlink" title="1. 相关函数："></a>1. 相关函数：</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">HAL_UART_Transmit</span>();串口发送数据，使用超时管理机制 <br><span class="hljs-built_in">HAL_UART_Receive</span>();串口接收数据，使用超时管理机制<br><span class="hljs-built_in">HAL_UART_Transmit_IT</span>();串口中断模式发送  <br><span class="hljs-built_in">HAL_UART_Receive_IT</span>();串口中断模式接收<br><span class="hljs-built_in">HAL_UART_Transmit_DMA</span>();串口DMA模式发送<br><span class="hljs-built_in">HAL_UART_Transmit_DMA</span>();串口DMA模式接收<br></code></pre></td></tr></table></figure><p>串口发送数据函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">HAL_UART_Transmit(UART_HandleTypeDef *huart, <span class="hljs-type">uint8_t</span> *pData, <span class="hljs-type">uint16_t</span> Size, <span class="hljs-type">uint32_t</span> Timeout)<br><span class="hljs-comment">//功能：串口发送指定长度的数据。如果超时没发送完成，则不再发送，返回超时标志（HAL_TIMEOUT）。</span><br><br></code></pre></td></tr></table></figure><h3 id="2-以重新定义printf函数的方式发送"><a href="#2-以重新定义printf函数的方式发送" class="headerlink" title="2.以重新定义printf函数的方式发送"></a>2.以重新定义printf函数的方式发送</h3><p>在生成的的usart.c里 中包含#include &lt;stdio.h&gt;  <strong>重写fget和fput函数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 函数功能: 重定向c库函数printf到DEBUG_USARTx</span><br><span class="hljs-comment">  * 输入参数: 无</span><br><span class="hljs-comment">  * 返 回 值: 无</span><br><span class="hljs-comment">  * 说    明：无</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span><br>&#123;<br>  HAL_UART_Transmit(&amp;huart1, (<span class="hljs-type">uint8_t</span> *)&amp;ch, <span class="hljs-number">1</span>, <span class="hljs-number">0xffff</span>);<br>  <span class="hljs-keyword">return</span> ch;<br>&#125;<br> <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 函数功能: 重定向c库函数getchar,scanf到DEBUG_USARTx</span><br><span class="hljs-comment">  * 输入参数: 无</span><br><span class="hljs-comment">  * 返 回 值: 无</span><br><span class="hljs-comment">  * 说    明：无</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">(FILE *f)</span><br>&#123;<br>  <span class="hljs-type">uint8_t</span> ch = <span class="hljs-number">0</span>;<br>  HAL_UART_Receive(&amp;huart1, &amp;ch, <span class="hljs-number">1</span>, <span class="hljs-number">0xffff</span>);<br>  <span class="hljs-keyword">return</span> ch;<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以自己建立文件，引入自动生成的usart.c作为依赖，在自己的模块里添加，强烈建议这种方式。</p><h2 id="3-使用"><a href="#3-使用" class="headerlink" title="3.使用"></a>3.使用</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"> <br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>  <span class="hljs-comment">/* USER CODE END WHILE */</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;duruofu测试\n&quot;</span>);<br>HAL_Delay(<span class="hljs-number">1000</span>);<br>  <span class="hljs-comment">/* USER CODE BEGIN 3 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/07/09/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32%E4%B8%B2%E5%8F%A3%E4%BD%BF%E7%94%A8%EF%BC%88HAL%E5%BA%93%EF%BC%89/20230709121537.png"></p><h2 id="二、串口接收"><a href="#二、串口接收" class="headerlink" title="二、串口接收"></a>二、串口接收</h2><p>这里使用中断接收：<br>只需要在接收中断回调函数里编写自己的代码即可：（下面这段代码也建议放在自己的模块里：）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//串口接收完成回调函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_UART_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br>&#123;<br><span class="hljs-keyword">if</span>(huart-&gt;Instance == USART1)<br>&#123;<br> <br>HAL_UART_Transmit(&amp;huart1,&amp;Uart1RX_Data,<span class="hljs-number">1</span>,<span class="hljs-number">0xFFFF</span>);<br>        HAL_UART_Receive_IT(&amp;huart1,&amp;Uart1RX_Data,<span class="hljs-number">1</span>);<br>        <br>&#125;<br><br><span class="hljs-keyword">if</span>(huart-&gt;Instance == USART2)<br>&#123;<br> <br>HAL_UART_Transmit(&amp;huart2,&amp;Uart2RX_Data,<span class="hljs-number">1</span>,<span class="hljs-number">0xFFFF</span>);<br>        HAL_UART_Receive_IT(&amp;huart2,&amp;Uart2RX_Data,<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 使用 <code>if</code> 语句判断是哪个串口接收到了数据。如果是 USART1，会执行相应的操作：</p><ul><li>调用 <code>HAL_UART_Transmit</code> 函数将接收到的数据 <code>Uart1RX_Data</code> 发送出去，第三个参数表示要发送的数据长度为 1。</li><li>调用 <code>HAL_UART_Receive_IT</code> 函数开启 USART1 的连续接收中断，继续准备接收下一组数据。<br>这里需要注意：<br>若定长串口中断接收数据，数据溢出，将会产生数据溢出错误，中断不再接收数据<br>这和前面的开启接收中断有关：<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//使能 USART1 的接收中断</span><br>__HAL_UART_ENABLE_IT(&amp;huart1,UART_IT_RXNE);<br><span class="hljs-comment">//开启 USART1 的连续接收中断，并指定接收缓冲区的地址和长度</span><br>HAL_UART_Receive_IT(&amp;huart1,&amp;Uart1RX_Data,<span class="hljs-number">8</span>);<br></code></pre></td></tr></table></figure></li></ul><p>超出缓冲区就会发生溢出，然后不能再接收</p><p>可以参考下面修改后的代码：</p><p>最后代码总结为：<br>serial_it_config.c</p><p>这段代码实现了串口接收中断相关的初始化和回调函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;serial_it_config.h&quot;</span></span><br><br>  <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * @description: 串口接收中断初始化(总)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * @return &#123;*&#125;Debug_Init</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">USART_IT_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br><br>&#123;<br><br>    <span class="hljs-comment">//串口1接收中断初始化</span><br><br>    Debug_Init();<br><br>    <span class="hljs-comment">//串口2接收中断初始化</span><br><br>  <br><br>    <span class="hljs-comment">//串口3接收中断初始化</span><br><br>&#125;<br><br>  <br><br><span class="hljs-comment">//串口接收完成回调函数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">HAL_UART_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br><br>&#123;<br><br>    <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART1)<br><br>    &#123;<br><br>        UART1_RxCpltCallback(huart);<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART2)<br><br>    &#123;<br><br>        <span class="hljs-comment">//UART2_RxCpltCallback();</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART3)<br><br>    &#123;<br><br>        <span class="hljs-comment">//UART2_RxCpltCallback();</span><br><br>    &#125;<br><br>    &#125;<br><br>  <br>  <br><br><span class="hljs-comment">//错误回调  </span><br><br> <span class="hljs-type">void</span> HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)  <br><br>&#123;      <br><br>    <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART1)<br><br>    &#123;<br><br>        UART1_ErrorCallback(huart);<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART2)<br><br>    &#123;<br><br>        <span class="hljs-comment">//UART2_ErrorCallback();</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(huart-&gt;Instance == USART3)<br><br>    &#123;<br><br>        <span class="hljs-comment">//UART3_ErrorCallback();</span><br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>serial_it_config.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __USART_CONFIG_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __USART_CONFIG_H</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">USART_IT_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// !__USART_CONFIG_H</span></span><br></code></pre></td></tr></table></figure><p>debug.c<br>这段代码是用于在嵌入式系统中实现串口调试功能的代码。主要包含了串口初始化函数、接收完成回调函数、错误回调函数、发送字符串函数以及重定向c库函数printf和scanf到串口的功能。<br>代码中使用了名为<code>UART_HANDLE</code>的宏来定义了串口句柄，指定了使用的是串口1。同时定义了接收缓冲区和接收缓冲计数变量。在串口初始化函数<code>Debug_Init</code>中，使能了串口的接收中断，并设置连续接收中断并指定接收缓冲区的地址和长度。<br>接收完成回调函数<code>UART1_RxCpltCallback</code>中，判断了接收缓冲区溢出的情况，并进行了处理。然后根据接收到的字符进行操作，例如当接收到字符’1’时，输出”发送1”；当接收到字符’2’时，输出”发送2”；以此类推。最后判断是否接收到结束标志位，并把接收到的信息发送出去。<br>错误回调函数<code>UART1_ErrorCallback</code>用于清除溢出中断。发送字符串函数<code>Usart_SendString</code>用于发送字符串。重定向c库函数printf和scanf到串口的功能分别在<code>fputc</code>和<code>fgetc</code>函数中实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;debug.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br>  <br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RXBUFFERSIZE  256     <span class="hljs-comment">//最大接收字节数</span></span><br><br>  <br><br><span class="hljs-comment">//定义串口句柄,使用串口1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> UART_HANDLE huart1</span><br><br>  <br><br><span class="hljs-comment">//定义数据缓冲区</span><br><br><span class="hljs-type">uint8_t</span> RxBuffer[RXBUFFERSIZE];<br><br><span class="hljs-type">uint8_t</span> Uart_RxBuffer;      <span class="hljs-comment">//接收中断缓冲</span><br><br><span class="hljs-type">uint8_t</span> Uart_Rx_Cnt = <span class="hljs-number">0</span>;     <span class="hljs-comment">//接收缓冲计数</span><br><br>  <br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Debug_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br><br>&#123;<br><br>  <span class="hljs-comment">/*串口硬件配置代码(使用cudeMX则不需要此部分)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  Init the GPIO of USART1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  */</span><br><br>  <span class="hljs-comment">//使能 USART1 的接收中断</span><br><br>  __HAL_UART_ENABLE_IT(&amp;UART_HANDLE,UART_IT_RXNE);<br><br>  <span class="hljs-comment">//开启 USART1 的连续接收中断，并指定接收缓冲区的地址和长度</span><br><br>  HAL_UART_Receive_IT(&amp;UART_HANDLE,&amp;Uart_RxBuffer,<span class="hljs-number">1</span>);<br><br>&#125;<br><br>  <br><br><span class="hljs-comment">//串口1接收完成回调函数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART1_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br><br>&#123;<br><br>    <span class="hljs-comment">/* Prevent unused argument(s) compilation warning */</span><br><br>  UNUSED(huart);<br><br>  <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">           the HAL_UART_TxCpltCallback could be implemented in the user file</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br><br>  <span class="hljs-keyword">if</span>(Uart_Rx_Cnt &gt;= <span class="hljs-number">255</span>)  <span class="hljs-comment">//溢出判断</span><br><br>  &#123;<br><br>    Uart_Rx_Cnt = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">memset</span>(RxBuffer,<span class="hljs-number">0x00</span>,<span class="hljs-keyword">sizeof</span>(RxBuffer));<br><br>    HAL_UART_Transmit(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)<span class="hljs-string">&quot;数据溢出&quot;</span>, <span class="hljs-number">10</span>,<span class="hljs-number">0xFFFF</span>);  <br><br>  &#125;<br><br>  <span class="hljs-keyword">else</span><br><br>  &#123;<br><br>    RxBuffer[Uart_Rx_Cnt++] = Uart_RxBuffer;  <br><br>    <span class="hljs-comment">//单字符判断</span><br><br>    <span class="hljs-keyword">if</span>(Uart_RxBuffer == <span class="hljs-string">&#x27;1&#x27;</span>)<span class="hljs-comment">//当发送1时，翻转电平</span><br><br>    &#123;<br><br>      DEBUG_printf(<span class="hljs-string">&quot;发送1&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Uart_RxBuffer == <span class="hljs-string">&#x27;2&#x27;</span>)<span class="hljs-comment">//当发送2时，翻转电平</span><br><br>    &#123;<br><br>      DEBUG_printf(<span class="hljs-string">&quot;发送2&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Uart_RxBuffer == <span class="hljs-string">&#x27;3&#x27;</span>)<span class="hljs-comment">//当发送3时，翻转电平</span><br><br>    &#123;<br><br>      DEBUG_printf(<span class="hljs-string">&quot;发送3&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(Uart_RxBuffer == <span class="hljs-string">&#x27;4&#x27;</span>)<span class="hljs-comment">//当发送4时，翻转电平</span><br><br>    &#123;<br><br>      DEBUG_printf(<span class="hljs-string">&quot;发送4&quot;</span>);<br><br>    &#125;<br><br>    <span class="hljs-keyword">if</span>((RxBuffer[Uart_Rx_Cnt<span class="hljs-number">-1</span>] == <span class="hljs-number">0x0A</span>)&amp;&amp;(RxBuffer[Uart_Rx_Cnt<span class="hljs-number">-2</span>] == <span class="hljs-number">0x0D</span>)) <span class="hljs-comment">//判断结束位</span><br><br>    &#123;<br><br>      <span class="hljs-comment">//这里可以写多字节消息的判断</span><br><br>      HAL_UART_Transmit(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;RxBuffer, Uart_Rx_Cnt,<span class="hljs-number">0xFFFF</span>); <span class="hljs-comment">//将收到的信息发送出去</span><br><br>      <span class="hljs-comment">//while(HAL_UART_GetState(&amp;UART_HANDLE) == HAL_UART_STATE_BUSY_TX);//检测UART发送结束</span><br><br>  <br><br>      <span class="hljs-comment">//复位</span><br><br>      Uart_Rx_Cnt = <span class="hljs-number">0</span>;<br><br>      <span class="hljs-built_in">memset</span>(RxBuffer,<span class="hljs-number">0x00</span>,<span class="hljs-keyword">sizeof</span>(RxBuffer)); <span class="hljs-comment">//清空数组</span><br><br>    &#125;<br><br>  &#125;<br><br>  HAL_UART_Receive_IT(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;Uart_RxBuffer, <span class="hljs-number">1</span>);   <span class="hljs-comment">//因为接收中断使用了一次即关闭，所以在最后加入这行代码即可实现无限使用</span><br><br>  <br><br>&#125;<br><br>  <br><br><span class="hljs-comment">//串口1错误回调函数(主要用来清除溢出中断)</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART1_ErrorCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span><br><br>&#123;<br><br>  <span class="hljs-keyword">if</span>(HAL_UART_ERROR_ORE)<br><br>  &#123;<br><br>     <span class="hljs-type">uint32_t</span> temp = huart-&gt;Instance-&gt;SR;<br><br>     temp = huart-&gt;Instance-&gt;DR;<br><br>  &#125;<br><br>&#125;<br><br>  <br><br><span class="hljs-comment">/*****************  发送字符串 **********************/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Usart_SendString</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> *str)</span><br><br>&#123;<br><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><br>  <span class="hljs-keyword">do</span><br><br>  &#123;<br><br>      HAL_UART_Transmit(&amp;UART_HANDLE,(<span class="hljs-type">uint8_t</span> *)(str + k) ,<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>);<br><br>      k++;<br><br>  &#125; <span class="hljs-keyword">while</span>(*(str + k)!=<span class="hljs-string">&#x27;\0&#x27;</span>);<br><br>&#125;<br><br>  <br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 函数功能: 重定向c库函数printf到DEBUG_USARTx</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 输入参数: 无</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 返 回 值: 无</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 说    明：无</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fputc</span><span class="hljs-params">(<span class="hljs-type">int</span> ch, FILE *f)</span><br><br>&#123;<br><br>  HAL_UART_Transmit(&amp;UART_HANDLE, (<span class="hljs-type">uint8_t</span> *)&amp;ch, <span class="hljs-number">1</span>, <span class="hljs-number">0xffff</span>);<br><br>  <span class="hljs-keyword">return</span> ch;<br><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 函数功能: 重定向c库函数getchar,scanf到DEBUG_USARTx</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 输入参数: 无</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 返 回 值: 无</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  * 说    明：无</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">fgetc</span><span class="hljs-params">(FILE *f)</span><br><br>&#123;<br><br>  <span class="hljs-type">uint8_t</span> ch = <span class="hljs-number">0</span>;<br><br>  HAL_UART_Receive(&amp;UART_HANDLE, &amp;ch, <span class="hljs-number">1</span>, <span class="hljs-number">0xffff</span>);<br><br>  <span class="hljs-keyword">return</span> ch;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>debug.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;main.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;usart.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DEBUG_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __DEBUG_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_printf(format, ...) printf(format <span class="hljs-string">&quot;\r\n&quot;</span>, ##__VA_ARGS__)</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_info(tag,format, ...) printf(<span class="hljs-string">&quot;DEBUG_info[&quot;</span>tag<span class="hljs-string">&quot;]:&quot;</span> format <span class="hljs-string">&quot;\r\n&quot;</span>, ##__VA_ARGS__)</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_warnig(tag,format, ...) printf(<span class="hljs-string">&quot;DEBUG_warnig[&quot;</span>tag<span class="hljs-string">&quot;]:&quot;</span> format <span class="hljs-string">&quot;\r\n&quot;</span>, ##__VA_ARGS__)</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG__error(tag,format, ...) printf(<span class="hljs-string">&quot;DEBUG__error[&quot;</span>tag<span class="hljs-string">&quot;]:&quot;</span> format <span class="hljs-string">&quot;\r\n&quot;</span>,##__VA_ARGS__)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_printf(format, ...) printf(format <span class="hljs-string">&quot;\r\n&quot;</span>, ##__VA_ARGS__)</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_info(tag,format, ...)</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG_warnig(tag,format, ...)</span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG__error(tag,format, ...)</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">//串口1接收中断初始化</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">Debug_Init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><br><span class="hljs-comment">//串口1接收完成回调函数</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART1_RxCpltCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">UART1_ErrorCallback</span><span class="hljs-params">(UART_HandleTypeDef *huart)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// !__DEBUG_H</span></span><br></code></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><h4 id="STM32CubeMX之串口使用（中断方式）"><a href="#STM32CubeMX之串口使用（中断方式）" class="headerlink" title="STM32CubeMX之串口使用（中断方式）"></a>STM32CubeMX之串口使用（中断方式）</h4><p><a href="https://zhuanlan.zhihu.com/p/162732368">https://zhuanlan.zhihu.com/p/162732368</a></p><h4 id="【STM32】HAL库——串口中断通信-二"><a href="#【STM32】HAL库——串口中断通信-二" class="headerlink" title="【STM32】HAL库——串口中断通信(二)"></a>【STM32】HAL库——串口中断通信(二)</h4><p><a href="https://blog.csdn.net/weibo1230123/article/details/80596220">https://blog.csdn.net/weibo1230123/article/details/80596220</a></p>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>STM32串口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于EMQX的mqtt服务器部署</title>
    <link href="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>EMQX 是一款大规模可弹性伸缩的云原生分布式物联网 MQTT 消息服务器。</p><p>作为全球最具扩展性的 MQTT 消息服务器，EMQX 提供了高效可靠海量物联网设备连接，能够高性能实时移动与处理消息和事件流数据，帮助快速构建关键业务的物联网平台与应用。</p><span id="more"></span><h1 id="mqtt部署"><a href="#mqtt部署" class="headerlink" title="mqtt部署"></a>mqtt部署</h1><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><ol><li>本文档由杜若甫撰写，由杜若甫负责解释及执行。</li><li>本文用以记录基于EMQX的mqtt服务器部署过程，一方面替自己记忆细节，一方面方便向别人传播。</li></ol><h4 id="修订历史："><a href="#修订历史：" class="headerlink" title="修订历史："></a>修订历史：</h4><table><thead><tr><th align="center">文档名称</th><th align="center">版本</th><th align="center">作者</th><th align="center">时间</th><th>备注</th></tr></thead><tbody><tr><td align="center">基于EMQX的mqtt服务器部署</td><td align="center">DuRuofu</td><td align="center">2023-04-28</td><td align="center">首次建立</td><td></td></tr><tr><td align="center">基于EMQX的mqtt服务器部署以及ws+wss支持</td><td align="center">DuRuofu</td><td align="center">2023-05-05</td><td align="center">完成编写</td><td></td></tr></tbody></table><h2 id="基于EMQX的mqtt服务器部署"><a href="#基于EMQX的mqtt服务器部署" class="headerlink" title="基于EMQX的mqtt服务器部署"></a>基于EMQX的mqtt服务器部署</h2><h3 id="一、EMQX介绍"><a href="#一、EMQX介绍" class="headerlink" title="一、EMQX介绍"></a>一、EMQX介绍</h3><p>EMQ X 基于 Erlang&#x2F;OTP 平台开发的 MQTT 消息服务器，是开源社区中最流行的 MQTT 消息服务器。</p><p>MQTT属于是物联网的通信协议，在MQTT协议中有两大角色：客户端（发布者&#x2F;订阅者），服务端（Mqtt broker）；针对客户端和服务端需要有遵循该协议的的具体实现，EMQ&#x2F;EMQ X就是MQTT Broker的一种实现。</p><p>EMQ X 是开源百万级分布式 MQTT 消息服务器（MQTT Messaging Broker），用于支持各种接入标准 MQTT 协议的设备，实现从设备端到服务器端的消息传递，以及从服务器端到设备端的设备控制消息转发。从而实现物联 网设备的数据采集，和对设备的操作和控制。</p><p>EMQX官网：<a href="https://www.emqx.io/zh">www.emqx.io/cn/</a><br>EMQX文档:   <a href="https://www.emqx.io/docs/zh/v5.0/getting-started/getting-started.html#%E5%90%AF%E5%8A%A8-emqx">文档快速入门</a></p><h3 id="二、部署过程-以windows为例"><a href="#二、部署过程-以windows为例" class="headerlink" title="二、部署过程(以windows为例)"></a>二、部署过程(以windows为例)</h3><h4 id="1-下载服务器代码："><a href="#1-下载服务器代码：" class="headerlink" title="1.下载服务器代码："></a>1.下载服务器代码：</h4><p><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505202035.png"><br>移动到服务器：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505202408.png"></p><h4 id="2-解压，运行启动命令："><a href="#2-解压，运行启动命令：" class="headerlink" title="2. 解压，运行启动命令："></a>2. 解压，运行启动命令：</h4><p>使用命令行进入服务器源代码bin目录：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505202737.png"><br>输入服务器启动命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">emqx <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>如下便启动成功：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505202852.png"></p><h4 id="3-验证启动是否成功"><a href="#3-验证启动是否成功" class="headerlink" title="3.验证启动是否成功"></a>3.验证启动是否成功</h4><p>可以尝试访问服务器18083端口，服务器的后端管理网页运行于这个端口<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505203255.png"><br>无法访问可能是服务器防火墙规则为放行对应端口，需要自行修改（云服务器如下图）。<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505203522.png"><br>端口放行后可正常打开，默认用户名为：admin     密码：public</p><p><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505203702.png"><br>第一次登录会要求更改管理员密码，建议修改<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505204035.png"><br>如上mqtt服务就部署成功了。<br>可以连接进行测试:<br>使用客户端测试工具进行连接测试：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505204418.png"><br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505204253.png"><br>后台也可以看到连接对象：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505204312.png"><br>此上，mqtt的基本部署完成，如果没有加密传输的需求，到这就结束了。（ps：如果连接失败，建议查看服务器是否开启对应端口，比如mqtt连接使用的1883端口）</p><h4 id="4-服务证书配置"><a href="#4-服务证书配置" class="headerlink" title="4. 服务证书配置"></a>4. 服务证书配置</h4><p>在一些应用开发里，必须使用WebSocket&#x2F;TLS 协议进行通信，不能使用单纯的TCP连接。比如微信小程序：</p><p>微信小程序仅支持通过 WebSocket 进行即时通信，EMQ X 的 MQTT Over WebSocket 能够完全兼容使用在微信小程序上。但由于微信小程序的规范限制，EMQX 使用微信小程序接入时需要注意以下几点：</p><ul><li>使用已经通过<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%25E5%259F%259F%25E5%2590%258D%25E5%25A4%2587%25E6%25A1%2588">域名备案</a>的<strong>域名</strong>接入</li><li>域名需要<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/">微信公众平台</a>登录后在主页面的服务器域名下添加配置服务器域名地址</li><li><strong>仅支持 WebSocket&#x2F;TLS 协议，需要为域名分配受信任 CA 颁发的证书</strong></li><li>由于微信小程序 BUG，安卓真机必须使用 TLS&#x2F;443 端口，否则会连接失败（即连接地址不能带端口）<br>对应第三点，要使微信小程序通过 WSS 连接到 EMQX，我们需要给服务配置证书。</li></ul><h5 id="1-下载证书："><a href="#1-下载证书：" class="headerlink" title="1.下载证书："></a>1.下载证书：</h5><p>找到服务器域名证书选项（）<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505205635.png"></p><p>下载nginx格式证书：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505215345.png"></p><h5 id="2-配置证书："><a href="#2-配置证书：" class="headerlink" title="2.配置证书："></a>2.配置证书：</h5><p>将证书文件夹放入服务器根目录：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505215618.png"></p><p>将证书文件移入默认的证书文件夹“<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505220108.png"><br>移动到：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505220133.png"></p><p>打开配置文件：etc&#x2F;emqx.conf    到配置文件中修改<br>listener.wss.external.keyfile &#x3D; &#x2F;etc&#x2F;emqx&#x2F;certs&#x2F;你的域名.key<br>listener.wss.external.certfile &#x3D; &#x2F;etc&#x2F;emqx&#x2F;certs&#x2F;你的域名_bundle.pem<br>未配置前<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505220909.png"><br>修改框选位置为自己的证书文件：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505221124.png"><br>修改完保存即可（重启mqtt服务器，记得开启对应端口防火墙）。</p><pre><code class="hljs">需要注意的是EMQX默认使用的是8084端口，需要在代码中指定端口，且小程序后台开放wss://你的域名:8084才行  或者修改emqx的8084端口为443也可以</code></pre><h5 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h5><p>配置好证书后可以用dash检测下websocket加上tls能否连接，也可以用检测工具<a href="https://myssl.com/ssl.html">https://myssl.com/ssl.html</a><br>使用检测工具可以检测到证书信息可用即说明证书部署成功：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505222107.png"></p><p>也可以使用测试工具测试wws连接：</p><p><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505222711.png"><br>发现可以连接成功：<br><img src="/2023/06/06/5.%E6%80%BB%E7%BB%93%E8%BE%93%E5%87%BA/%E7%8E%AF%E5%A2%83(%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2)/%E5%9F%BA%E4%BA%8EEMQX%E7%9A%84mqtt%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/0505222734.png"></p><p>至此整个mqtt部署完成。</p><h4 id="5-其他"><a href="#5-其他" class="headerlink" title="5.其他"></a>5.其他</h4><blockquote><p><strong>由于微信小程序 BUG，安卓真机必须使用 TLS&#x2F;443 端口，否则会连接失败（即连接地址不能带端口）</strong></p></blockquote><p>对这个问题  我们需要使用<a href="http://nginx.org/en/download.html">nginx</a>代理，监听端口443并代理转发给EMQX的8084端口。由于本文主要记录mqtt服务器的部署，在此不再赘述。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><p>微信小程序整合MQTT - keitsi - 博客园<br> <a href="https://www.cnblogs.com/keitsi/p/12571383.html">cnblogs.com</a></p></li><li><p>【经验分享】微信小程序连接 EMQX 的证书配置问题 - EMQX - EMQ 问答社区<br> <a href="https://askemq.com/t/topic/1652">askemq.com</a></p></li><li><p>微信小程序连接MQTT服务器全过程_白白的昕的博客-CSDN博客_微�<br><a href="https://blog.csdn.net/qq_43554847/article/details/108587422">csdn.net</a></p></li><li><h1 id="物联网系列-EMQ-X简介与安装"><a href="#物联网系列-EMQ-X简介与安装" class="headerlink" title="物联网系列 - EMQ X简介与安装"></a>物联网系列 - EMQ X简介与安装</h1><p> <a href="https://juejin.cn/post/7026170795386732581">https://juejin.cn/post/7026170795386732581</a></p></li><li><p>小程序使用mqtt连接WebSocket调试工具可以正常连接，真机不行<br> <a href="https://developers.weixin.qq.com/community/develop/doc/00082ca48ec8b00ecc3895ceb53c00?highLine=mqtt">https://developers.weixin.qq.com/community/develop/doc/00082ca48ec8b00ecc3895ceb53c00?highLine=mqtt</a></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>工作或项目相关</category>
      
      <category>环境部署搭建</category>
      
      <category>MQTT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EMQX</tag>
      
      <tag>MQTT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ESP32wifi入门</title>
    <link href="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/"/>
    <url>/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<p>ESP32是Espressif乐鑫信息科技推出的一块WiFi芯片。</p><p>拥有40nm工艺、双核32位MCU、2.4GHz双模Wi-Fi和蓝牙芯片、主频高达230MHz,计算能力可达600DMIPS。</p><p>-涵盖精细分辨时钟门控、省电模式和动态电压调整等特征。</p><p>-它集成了天线和射频巴伦，功率放大器，低噪声放大器，滤波器和电源管理模块等元器件，性能稳定，易于制造，工作温度范围从-40℃到125℃。</p><p>-支持多种通信协议，如：I2C. I2S. SPI. UART. CAN.</p><p>-多种调节管理模式：Active模式、Modem-sleep模式、Light-sleep模式、Deep-sleep模式、Hibernation模式。可根据不同需求，调节所需方案。</p><span id="more"></span><h2 id="ESP32-wifi入门"><a href="#ESP32-wifi入门" class="headerlink" title="ESP32 wifi入门"></a>ESP32 wifi入门</h2><h3 id="1-WiFi工作流程"><a href="#1-WiFi工作流程" class="headerlink" title="1.WiFi工作流程"></a>1.WiFi工作流程</h3><h4 id="WiFi热点工作流程"><a href="#WiFi热点工作流程" class="headerlink" title="WiFi热点工作流程"></a>WiFi热点工作流程</h4><p><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29094818.png"><br>工作流程如下图所示：<br>示例程序位于：<code>Espressif\frameworks\esp-idf-v4.4.3\examples\wifi\getting_started\softAP</code><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29095457.png"></p><h4 id="WiFi设备工作流程"><a href="#WiFi设备工作流程" class="headerlink" title="WiFi设备工作流程"></a>WiFi设备工作流程</h4><p>示例代码位于:&#96;Espressif\frameworks\esp-idf-v4.4.3\examples\wifi\getting_started\station<br>与热点流程相似，但是细节有所不同</p><p><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29102938.png"></p><p>下面是连接wifi的流程：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29103244.png"></p><h3 id="2-TCP协议"><a href="#2-TCP协议" class="headerlink" title="2.TCP协议"></a>2.TCP协议</h3><h4 id="tcp客户端"><a href="#tcp客户端" class="headerlink" title="tcp客户端"></a>tcp客户端</h4><p><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29105003.png"></p><p>标准流程：<br>初始化-连接-数据交换-断开连接<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29105602.png"><br>客户端和服务端的具体细节：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img29105900.png"></p><p>示例代码：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\sockets\tcp_client</code></p><p>tcp_client_task  基本流程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_client_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-type">char</span> host_ip[] = HOST_IP_ADDR;<br><br>    <span class="hljs-type">int</span> addr_family = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> ip_protocol = <span class="hljs-number">0</span>;<br><br>  <br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_EXAMPLE_IPV4)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">dest_addr</span>;</span><br><br>        dest_addr.sin_addr.s_addr = inet_addr(host_ip);<br><br>        dest_addr.sin_family = AF_INET;<br><br>        dest_addr.sin_port = htons(PORT);<br><br>        addr_family = AF_INET;<br><br>        ip_protocol = IPPROTO_IP;<br><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_EXAMPLE_IPV6)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in6</span> <span class="hljs-title">dest_addr</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br><br>        inet6_aton(host_ip, &amp;dest_addr.sin6_addr);<br><br>        dest_addr.sin6_family = AF_INET6;<br><br>        dest_addr.sin6_port = htons(PORT);<br><br>        dest_addr.sin6_scope_id = esp_netif_get_netif_impl_index(EXAMPLE_INTERFACE);<br><br>        addr_family = AF_INET6;<br><br>        ip_protocol = IPPROTO_IPV6;<br><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_EXAMPLE_SOCKET_IP_INPUT_STDIN)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">dest_addr</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br><br>        ESP_ERROR_CHECK(get_addr_from_stdin(PORT, SOCK_STREAM, &amp;ip_protocol, &amp;addr_family, &amp;dest_addr));<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        <span class="hljs-comment">//创建套接字</span><br><br>        <span class="hljs-type">int</span> sock =  socket(addr_family, SOCK_STREAM, ip_protocol);<br><br>        <span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket created, connecting to %s:%d&quot;</span>, host_ip, PORT);<br><br>        <span class="hljs-comment">//连接服务器</span><br><br>        <span class="hljs-type">int</span> err = connect(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;dest_addr, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in6));<br><br>        <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to connect: errno %d&quot;</span>, errno);<br><br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Successfully connected&quot;</span>);<br><br>  <br><br>        <span class="hljs-comment">//发送数据</span><br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>            <span class="hljs-comment">//发送数据</span><br><br>            <span class="hljs-type">int</span> err = send(sock, payload, <span class="hljs-built_in">strlen</span>(payload), <span class="hljs-number">0</span>);<br><br>            <span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) &#123;<br><br>                ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br><br>            <span class="hljs-comment">//接收数据</span><br><br>            <span class="hljs-type">int</span> len = recv(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>            <span class="hljs-comment">// Error occurred during receiving</span><br><br>            <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>) &#123;<br><br>                ESP_LOGE(TAG, <span class="hljs-string">&quot;recv failed: errno %d&quot;</span>, errno);<br><br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br><br>            <span class="hljs-comment">// Data received</span><br><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                rx_buffer[len] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Null-terminate whatever we received and treat like a string</span><br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes from %s:&quot;</span>, len, host_ip);<br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;%s&quot;</span>, rx_buffer);<br><br>            &#125;<br><br>  <br><br>            vTaskDelay(<span class="hljs-number">2000</span> / portTICK_PERIOD_MS);<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (sock != <span class="hljs-number">-1</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Shutting down socket and restarting...&quot;</span>);<br><br>            <span class="hljs-comment">//关闭套接字</span><br><br>            shutdown(sock, <span class="hljs-number">0</span>);<br><br>            <span class="hljs-comment">//删除套接字</span><br><br>            close(sock);<br><br>        &#125;<br><br>    &#125;<br><br>    vTaskDelete(<span class="hljs-literal">NULL</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="tcp服务端："><a href="#tcp服务端：" class="headerlink" title="tcp服务端："></a>tcp服务端：</h4><p>参考例程：<code>Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\sockets\tcp_server</code><br>tcp_server_task:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">do_retransmit</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> sock)</span><br><br>&#123;<br><br>    <span class="hljs-type">int</span> len;<br><br>    <span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">128</span>];<br><br>  <br><br>    <span class="hljs-keyword">do</span> &#123;<br><br>        len = recv(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during receiving: errno %d&quot;</span>, errno);<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGW(TAG, <span class="hljs-string">&quot;Connection closed&quot;</span>);<br><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            rx_buffer[len] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Null-terminate whatever is received and treat it like a string</span><br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes: %s&quot;</span>, len, rx_buffer);<br><br>  <br><br>            <span class="hljs-comment">// send() can return less bytes than supplied length.</span><br><br>            <span class="hljs-comment">// Walk-around for robust implementation.</span><br><br>            <span class="hljs-type">int</span> to_write = len;<br><br>            <span class="hljs-keyword">while</span> (to_write &gt; <span class="hljs-number">0</span>) &#123;<br><br>                <span class="hljs-type">int</span> written = send(sock, rx_buffer + (len - to_write), to_write, <span class="hljs-number">0</span>);<br><br>                <span class="hljs-keyword">if</span> (written &lt; <span class="hljs-number">0</span>) &#123;<br><br>                    ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><br>                &#125;<br><br>                to_write -= written;<br><br>            &#125;<br><br>        &#125;<br><br>    &#125; <span class="hljs-keyword">while</span> (len &gt; <span class="hljs-number">0</span>);<br><br>&#125;<br><br>  <br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tcp_server_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span> addr_str[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-type">int</span> addr_family = (<span class="hljs-type">int</span>)pvParameters;<br><br>    <span class="hljs-type">int</span> ip_protocol = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> keepAlive = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-type">int</span> keepIdle = KEEPALIVE_IDLE;<br><br>    <span class="hljs-type">int</span> keepInterval = KEEPALIVE_INTERVAL;<br><br>    <span class="hljs-type">int</span> keepCount = KEEPALIVE_COUNT;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">dest_addr</span>;</span><br><br>  <br><br>    <span class="hljs-keyword">if</span> (addr_family == AF_INET) &#123;<br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">dest_addr_ip4</span> =</span> (<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;dest_addr;<br><br>        dest_addr_ip4-&gt;sin_addr.s_addr = htonl(INADDR_ANY);<br><br>        dest_addr_ip4-&gt;sin_family = AF_INET;<br><br>        dest_addr_ip4-&gt;sin_port = htons(PORT);<br><br>        ip_protocol = IPPROTO_IP;<br><br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_EXAMPLE_IPV6</span><br><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (addr_family == AF_INET6) &#123;<br><br>        <span class="hljs-keyword">struct</span> sockaddr_in6 *dest_addr_ip6 = (<span class="hljs-keyword">struct</span> sockaddr_in6 *)&amp;dest_addr;<br><br>        bzero(&amp;dest_addr_ip6-&gt;sin6_addr.un, <span class="hljs-keyword">sizeof</span>(dest_addr_ip6-&gt;sin6_addr.un));<br><br>        dest_addr_ip6-&gt;sin6_family = AF_INET6;<br><br>        dest_addr_ip6-&gt;sin6_port = htons(PORT);<br><br>        ip_protocol = IPPROTO_IPV6;<br><br>    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br><br>    <span class="hljs-type">int</span> listen_sock = socket(addr_family, SOCK_STREAM, ip_protocol);<br><br>    <span class="hljs-keyword">if</span> (listen_sock &lt; <span class="hljs-number">0</span>) &#123;<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><br>        vTaskDelete(<span class="hljs-literal">NULL</span>);<br><br>        <span class="hljs-keyword">return</span>;<br><br>    &#125;<br><br>    <span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br><br>    setsockopt(listen_sock, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_EXAMPLE_IPV4) &amp;&amp; defined(CONFIG_EXAMPLE_IPV6)</span><br><br>    <span class="hljs-comment">// Note that by default IPV6 binds to both protocols, it is must be disabled</span><br><br>    <span class="hljs-comment">// if both protocols used at the same time (used in CI)</span><br><br>    setsockopt(listen_sock, IPPROTO_IPV6, IPV6_V6ONLY, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket created&quot;</span>);<br><br>  <br><br>    <span class="hljs-type">int</span> err = bind(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;dest_addr, <span class="hljs-keyword">sizeof</span>(dest_addr));<br><br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>) &#123;<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to bind: errno %d&quot;</span>, errno);<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;IPPROTO: %d&quot;</span>, addr_family);<br><br>        <span class="hljs-keyword">goto</span> CLEAN_UP;<br><br>    &#125;<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket bound, port %d&quot;</span>, PORT);<br><br>  <br><br>    err = listen(listen_sock, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> (err != <span class="hljs-number">0</span>) &#123;<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during listen: errno %d&quot;</span>, errno);<br><br>        <span class="hljs-keyword">goto</span> CLEAN_UP;<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>  <br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket listening&quot;</span>);<br><br>  <br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">source_addr</span>;</span> <span class="hljs-comment">// Large enough for both IPv4 or IPv6</span><br><br>        <span class="hljs-type">socklen_t</span> addr_len = <span class="hljs-keyword">sizeof</span>(source_addr);<br><br>        <span class="hljs-type">int</span> sock = accept(listen_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;addr_len);<br><br>        <span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to accept connection: errno %d&quot;</span>, errno);<br><br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-comment">// Set tcp keepalive option</span><br><br>        setsockopt(sock, SOL_SOCKET, SO_KEEPALIVE, &amp;keepAlive, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>        setsockopt(sock, IPPROTO_TCP, TCP_KEEPIDLE, &amp;keepIdle, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>        setsockopt(sock, IPPROTO_TCP, TCP_KEEPINTVL, &amp;keepInterval, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>        setsockopt(sock, IPPROTO_TCP, TCP_KEEPCNT, &amp;keepCount, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><br>        <span class="hljs-comment">// Convert ip address to string</span><br><br>        <span class="hljs-keyword">if</span> (source_addr.ss_family == PF_INET) &#123;<br><br>            inet_ntoa_r(((<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;source_addr)-&gt;sin_addr, addr_str, <span class="hljs-keyword">sizeof</span>(addr_str) - <span class="hljs-number">1</span>);<br><br>        &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_EXAMPLE_IPV6</span><br><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (source_addr.ss_family == PF_INET6) &#123;<br><br>            inet6_ntoa_r(((<span class="hljs-keyword">struct</span> sockaddr_in6 *)&amp;source_addr)-&gt;sin6_addr, addr_str, <span class="hljs-keyword">sizeof</span>(addr_str) - <span class="hljs-number">1</span>);<br><br>        &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket accepted ip address: %s&quot;</span>, addr_str);<br><br>  <br><br>        do_retransmit(sock);<br><br>  <br><br>        shutdown(sock, <span class="hljs-number">0</span>);<br><br>        close(sock);<br><br>    &#125;<br><br>  <br><br>CLEAN_UP:<br><br>    close(listen_sock);<br><br>    vTaskDelete(<span class="hljs-literal">NULL</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的一点：这里将整个tcpserver的流程放在一个task里，以至于他只能一对一通信，若要连接多个，则需要将连接，接收的部分也作为task来编写。</p><h3 id="3-UDP协议"><a href="#3-UDP协议" class="headerlink" title="3. UDP协议"></a>3. UDP协议</h3><h4 id="UDP客户端"><a href="#UDP客户端" class="headerlink" title="UDP客户端"></a>UDP客户端</h4><p>TCP与UDP之间的差异：<br>流程：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30073951.png"><br>特点及应用：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30074029.png"></p><p>参考例程：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\sockets\udp_client</code><br>udp_client_task:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">udp_client_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-type">char</span> host_ip[] = HOST_IP_ADDR;<br><br>    <span class="hljs-type">int</span> addr_family = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> ip_protocol = <span class="hljs-number">0</span>;<br><br>  <br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>  <br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_EXAMPLE_IPV4)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">dest_addr</span>;</span><br><br>        dest_addr.sin_addr.s_addr = inet_addr(HOST_IP_ADDR);<br><br>        dest_addr.sin_family = AF_INET;<br><br>        dest_addr.sin_port = htons(PORT);<br><br>        addr_family = AF_INET;<br><br>        ip_protocol = IPPROTO_IP;<br><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_EXAMPLE_IPV6)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in6</span> <span class="hljs-title">dest_addr</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br><br>        inet6_aton(HOST_IP_ADDR, &amp;dest_addr.sin6_addr);<br><br>        dest_addr.sin6_family = AF_INET6;<br><br>        dest_addr.sin6_port = htons(PORT);<br><br>        dest_addr.sin6_scope_id = esp_netif_get_netif_impl_index(EXAMPLE_INTERFACE);<br><br>        addr_family = AF_INET6;<br><br>        ip_protocol = IPPROTO_IPV6;<br><br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined(CONFIG_EXAMPLE_SOCKET_IP_INPUT_STDIN)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">dest_addr</span> =</span> &#123; <span class="hljs-number">0</span> &#125;;<br><br>        ESP_ERROR_CHECK(get_addr_from_stdin(PORT, SOCK_DGRAM, &amp;ip_protocol, &amp;addr_family, &amp;dest_addr));<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br><br>        <span class="hljs-type">int</span> sock = socket(addr_family, SOCK_DGRAM, ip_protocol);<br><br>        <span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket created, sending to %s:%d&quot;</span>, HOST_IP_ADDR, PORT);<br><br>  <br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>  <br><br>            <span class="hljs-type">int</span> err = sendto(sock, payload, <span class="hljs-built_in">strlen</span>(payload), <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;dest_addr, <span class="hljs-keyword">sizeof</span>(dest_addr));<br><br>            <span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) &#123;<br><br>                ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Message sent&quot;</span>);<br><br>  <br><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">source_addr</span>;</span> <span class="hljs-comment">// Large enough for both IPv4 or IPv6</span><br><br>            <span class="hljs-type">socklen_t</span> socklen = <span class="hljs-keyword">sizeof</span>(source_addr);<br><br>            <span class="hljs-type">int</span> len = recvfrom(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;socklen);<br><br>  <br><br>            <span class="hljs-comment">// Error occurred during receiving</span><br><br>            <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>) &#123;<br><br>                ESP_LOGE(TAG, <span class="hljs-string">&quot;recvfrom failed: errno %d&quot;</span>, errno);<br><br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br><br>            <span class="hljs-comment">// Data received</span><br><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                rx_buffer[len] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Null-terminate whatever we received and treat like a string</span><br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes from %s:&quot;</span>, len, host_ip);<br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;%s&quot;</span>, rx_buffer);<br><br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(rx_buffer, <span class="hljs-string">&quot;OK: &quot;</span>, <span class="hljs-number">4</span>) == <span class="hljs-number">0</span>) &#123;<br><br>                    ESP_LOGI(TAG, <span class="hljs-string">&quot;Received expected message, reconnecting&quot;</span>);<br><br>                    <span class="hljs-keyword">break</span>;<br><br>                &#125;<br><br>            &#125;<br><br>  <br><br>            vTaskDelay(<span class="hljs-number">2000</span> / portTICK_PERIOD_MS);<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (sock != <span class="hljs-number">-1</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Shutting down socket and restarting...&quot;</span>);<br><br>            shutdown(sock, <span class="hljs-number">0</span>);<br><br>            close(sock);<br><br>        &#125;<br><br>    &#125;<br><br>    vTaskDelete(<span class="hljs-literal">NULL</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="UDP服务端："><a href="#UDP服务端：" class="headerlink" title="UDP服务端："></a>UDP服务端：</h4><p>参考例程：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\sockets\udp_server</code><br>udp_server_task:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">udp_server_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span> rx_buffer[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-type">char</span> addr_str[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-type">int</span> addr_family = (<span class="hljs-type">int</span>)pvParameters;<br><br>    <span class="hljs-type">int</span> ip_protocol = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in6</span> <span class="hljs-title">dest_addr</span>;</span><br><br>  <br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (addr_family == AF_INET) &#123;<br><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">dest_addr_ip4</span> =</span> (<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;dest_addr;<br><br>            dest_addr_ip4-&gt;sin_addr.s_addr = htonl(INADDR_ANY);<br><br>            dest_addr_ip4-&gt;sin_family = AF_INET;<br><br>            dest_addr_ip4-&gt;sin_port = htons(PORT);<br><br>            ip_protocol = IPPROTO_IP;<br><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (addr_family == AF_INET6) &#123;<br><br>            bzero(&amp;dest_addr.sin6_addr.un, <span class="hljs-keyword">sizeof</span>(dest_addr.sin6_addr.un));<br><br>            dest_addr.sin6_family = AF_INET6;<br><br>            dest_addr.sin6_port = htons(PORT);<br><br>            ip_protocol = IPPROTO_IPV6;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-type">int</span> sock = socket(addr_family, SOCK_DGRAM, ip_protocol);<br><br>        <span class="hljs-keyword">if</span> (sock &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Unable to create socket: errno %d&quot;</span>, errno);<br><br>            <span class="hljs-keyword">break</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket created&quot;</span>);<br><br>  <br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_LWIP_NETBUF_RECVINFO) &amp;&amp; !defined(CONFIG_EXAMPLE_IPV6)</span><br><br>        <span class="hljs-type">int</span> enable = <span class="hljs-number">1</span>;<br><br>        lwip_setsockopt(sock, IPPROTO_IP, IP_PKTINFO, &amp;enable, <span class="hljs-keyword">sizeof</span>(enable));<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_EXAMPLE_IPV4) &amp;&amp; defined(CONFIG_EXAMPLE_IPV6)</span><br><br>        <span class="hljs-keyword">if</span> (addr_family == AF_INET6) &#123;<br><br>            <span class="hljs-comment">// Note that by default IPV6 binds to both protocols, it is must be disabled</span><br><br>            <span class="hljs-comment">// if both protocols used at the same time (used in CI)</span><br><br>            <span class="hljs-type">int</span> opt = <span class="hljs-number">1</span>;<br><br>            setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br><br>            setsockopt(sock, IPPROTO_IPV6, IPV6_V6ONLY, &amp;opt, <span class="hljs-keyword">sizeof</span>(opt));<br><br>        &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br><br>        <span class="hljs-type">int</span> err = bind(sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;dest_addr, <span class="hljs-keyword">sizeof</span>(dest_addr));<br><br>        <span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Socket unable to bind: errno %d&quot;</span>, errno);<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Socket bound, port %d&quot;</span>, PORT);<br><br>  <br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_storage</span> <span class="hljs-title">source_addr</span>;</span> <span class="hljs-comment">// Large enough for both IPv4 or IPv6</span><br><br>        <span class="hljs-type">socklen_t</span> socklen = <span class="hljs-keyword">sizeof</span>(source_addr);<br><br>  <br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_LWIP_NETBUF_RECVINFO) &amp;&amp; !defined(CONFIG_EXAMPLE_IPV6)</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iovec</span> <span class="hljs-title">iov</span>;</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msghdr</span> <span class="hljs-title">msg</span>;</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cmsghdr</span> *<span class="hljs-title">cmsgtmp</span>;</span><br><br>        <span class="hljs-type">u8_t</span> cmsg_buf[CMSG_SPACE(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> in_pktinfo))];<br><br>  <br><br>        iov.iov_base = rx_buffer;<br><br>        iov.iov_len = <span class="hljs-keyword">sizeof</span>(rx_buffer);<br><br>        msg.msg_control = cmsg_buf;<br><br>        msg.msg_controllen = <span class="hljs-keyword">sizeof</span>(cmsg_buf);<br><br>        msg.msg_flags = <span class="hljs-number">0</span>;<br><br>        msg.msg_iov = &amp;iov;<br><br>        msg.msg_iovlen = <span class="hljs-number">1</span>;<br><br>        msg.msg_name = (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr;<br><br>        msg.msg_namelen = socklen;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>  <br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Waiting for data&quot;</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_LWIP_NETBUF_RECVINFO) &amp;&amp; !defined(CONFIG_EXAMPLE_IPV6)</span><br><br>            <span class="hljs-type">int</span> len = recvmsg(sock, &amp;msg, <span class="hljs-number">0</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><br>            <span class="hljs-type">int</span> len = recvfrom(sock, rx_buffer, <span class="hljs-keyword">sizeof</span>(rx_buffer) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, &amp;socklen);<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>            <span class="hljs-comment">// Error occurred during receiving</span><br><br>            <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">0</span>) &#123;<br><br>                ESP_LOGE(TAG, <span class="hljs-string">&quot;recvfrom failed: errno %d&quot;</span>, errno);<br><br>                <span class="hljs-keyword">break</span>;<br><br>            &#125;<br><br>            <span class="hljs-comment">// Data received</span><br><br>            <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-comment">// Get the sender&#x27;s ip address as string</span><br><br>                <span class="hljs-keyword">if</span> (source_addr.ss_family == PF_INET) &#123;<br><br>                    inet_ntoa_r(((<span class="hljs-keyword">struct</span> sockaddr_in *)&amp;source_addr)-&gt;sin_addr, addr_str, <span class="hljs-keyword">sizeof</span>(addr_str) - <span class="hljs-number">1</span>);<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(CONFIG_LWIP_NETBUF_RECVINFO) &amp;&amp; !defined(CONFIG_EXAMPLE_IPV6)</span><br><br>                    <span class="hljs-keyword">for</span> ( cmsgtmp = CMSG_FIRSTHDR(&amp;msg); cmsgtmp != <span class="hljs-literal">NULL</span>; cmsgtmp = CMSG_NXTHDR(&amp;msg, cmsgtmp) ) &#123;<br><br>                        <span class="hljs-keyword">if</span> ( cmsgtmp-&gt;cmsg_level == IPPROTO_IP &amp;&amp; cmsgtmp-&gt;cmsg_type == IP_PKTINFO ) &#123;<br><br>                            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_pktinfo</span> *<span class="hljs-title">pktinfo</span>;</span><br><br>                            pktinfo = (<span class="hljs-keyword">struct</span> in_pktinfo*)CMSG_DATA(cmsgtmp);<br><br>                            ESP_LOGI(TAG, <span class="hljs-string">&quot;dest ip: %s\n&quot;</span>, inet_ntoa(pktinfo-&gt;ipi_addr));<br><br>                        &#125;<br><br>                    &#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (source_addr.ss_family == PF_INET6) &#123;<br><br>                    inet6_ntoa_r(((<span class="hljs-keyword">struct</span> sockaddr_in6 *)&amp;source_addr)-&gt;sin6_addr, addr_str, <span class="hljs-keyword">sizeof</span>(addr_str) - <span class="hljs-number">1</span>);<br><br>                &#125;<br><br>  <br><br>                rx_buffer[len] = <span class="hljs-number">0</span>; <span class="hljs-comment">// Null-terminate whatever we received and treat like a string...</span><br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;Received %d bytes from %s:&quot;</span>, len, addr_str);<br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;%s&quot;</span>, rx_buffer);<br><br>  <br><br>                <span class="hljs-type">int</span> err = sendto(sock, rx_buffer, len, <span class="hljs-number">0</span>, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;source_addr, <span class="hljs-keyword">sizeof</span>(source_addr));<br><br>                <span class="hljs-keyword">if</span> (err &lt; <span class="hljs-number">0</span>) &#123;<br><br>                    ESP_LOGE(TAG, <span class="hljs-string">&quot;Error occurred during sending: errno %d&quot;</span>, errno);<br><br>                    <span class="hljs-keyword">break</span>;<br><br>                &#125;<br><br>            &#125;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-keyword">if</span> (sock != <span class="hljs-number">-1</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Shutting down socket and restarting...&quot;</span>);<br><br>            shutdown(sock, <span class="hljs-number">0</span>);<br><br>            close(sock);<br><br>        &#125;<br><br>    &#125;<br><br>    vTaskDelete(<span class="hljs-literal">NULL</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-HTTP协议"><a href="#4-HTTP协议" class="headerlink" title="4.HTTP协议"></a>4.HTTP协议</h3><h4 id="HTTP介绍："><a href="#HTTP介绍：" class="headerlink" title="HTTP介绍："></a>HTTP介绍：</h4><p>HTTP（HyperText Transfer Protocol）是用于传输Web数据的应用层协议，它是基于TCP&#x2F;IP协议栈之上的。HTTP协议的作用是规定客户端和服务器之间通讯的格式和内容，确保客户端能够正确向服务器请求数据，服务器也能够正确地响应请求并返回数据。</p><p>HTTP协议使用客户端&#x2F;服务器模型。客户端向服务器发送HTTP请求，服务器接收到请求后，根据请求的内容进行一定的处理，并将处理结果封装在HTTP响应中返回给客户端。HTTP请求和响应都有一定的结构，通常包含三部分：起始行、首部和主体。</p><p><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30084556.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30084739.png"><br>HTTP的起始行包含了请求方法或响应状态码等信息，如GET、POST等请求方法，200 OK、404 Not Found等响应状态码。HTTP的首部包含了请求或响应的各项属性，如Accept、Content-Type、Set-Cookie等。HTTP的主体则包含了请求或响应的具体内容，如HTML、JSON等文本数据或二进制数据。<br>请求：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30084807.png"><br>响应：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30085006.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30085057.png"><br>HTTP协议也具有无状态性，即服务器不会保存客户端的任何状态信息，每个请求都是独立的，需要客户端通过某种方式将状态信息发送给服务器，如Cookie机制。</p><p>目前主流的HTTP版本为HTTP&#x2F;1.1和HTTP&#x2F;2，其中HTTP&#x2F;1.1采用串行的方式发送和接收数据，而HTTP&#x2F;2支持多路复用，可以同时发送多个请求和响应，性能更好。</p><h4 id="URL格式："><a href="#URL格式：" class="headerlink" title="URL格式："></a>URL格式：</h4><p>URL（Uniform Resource Locator）是用于定位互联网上资源的地址，常见的资源包括网页、图片、视频等。URL由多个部分组成，包括协议、主机名、端口号、路径和查询字符串等。</p><p>一个标准的URL格式如下：</p><p>复制代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">协议</span>&gt;</span>://<span class="hljs-tag">&lt;<span class="hljs-name">主机名</span>&gt;</span>:<span class="hljs-tag">&lt;<span class="hljs-name">端口</span>&gt;</span>/<span class="hljs-tag">&lt;<span class="hljs-name">路径</span>&gt;</span>?<span class="hljs-tag">&lt;<span class="hljs-name">查询字符串</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，协议表示访问资源所采用的协议，如HTTP、HTTPS、FTP等；主机名表示资源所在的主机名或IP地址；端口号表示与主机通信的端口号，默认情况下使用协议默认的端口；路径表示请求的资源路径，可以是一个具体的文件路径，也可以是一个文件夹路径；查询字符串表示请求参数，以问号（?）开头，多个参数之间用&amp;符号分隔。</p><p>例如，以下是一个标准的URL格式：</p><p>复制代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://www.example.com:80/index.html?<span class="hljs-built_in">id</span>=123&amp;name=<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>其中，协议为HTTPS，<a href="http://主机名为www.example.com/">主机名为www.example.com</a>，端口号为80（默认端口号可省略），路径为&#x2F;index.html，查询字符串为id&#x3D;123&amp;name&#x3D;test。</p><h4 id="请求方法（以http-server为例）："><a href="#请求方法（以http-server为例）：" class="headerlink" title="请求方法（以http-server为例）："></a>请求方法（以http-server为例）：</h4><p>示例代码：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\http_server\simple</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">httpd_handle_t</span> <span class="hljs-title function_">start_webserver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br><br>&#123;<br><br>    <span class="hljs-type">httpd_handle_t</span> server = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-type">httpd_config_t</span> config = HTTPD_DEFAULT_CONFIG();<br><br>    config.lru_purge_enable = <span class="hljs-literal">true</span>;<br><br>  <br><br>    <span class="hljs-comment">// Start the httpd server</span><br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Starting server on port: &#x27;%d&#x27;&quot;</span>, config.server_port);<br><br>    <span class="hljs-keyword">if</span> (httpd_start(&amp;server, &amp;config) == ESP_OK) &#123;<br><br>        <span class="hljs-comment">// Set URI handlers</span><br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering URI handlers&quot;</span>);<br><br>        httpd_register_uri_handler(server, &amp;hello);<br><br>        httpd_register_uri_handler(server, &amp;echo);<br><br>        httpd_register_uri_handler(server, &amp;ctrl);<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_EXAMPLE_BASIC_AUTH</span><br><br>        httpd_register_basic_auth(server);<br><br>        <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>        <span class="hljs-keyword">return</span> server;<br><br>    &#125;<br><br>  <br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Error starting server!&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是一个基于ESP32的HTTP服务器程序，通过调用httpd_start()函数启动HTTP服务器，并注册URI处理函数，来实现Web服务的功能。主要包括以下几个步骤：</p><ol><li><p>初始化HTTPD配置，使用HTTPD_DEFAULT_CONFIG()函数可以获得默认的HTTPD配置对象，这里设置了LRU清理使能；</p></li><li><p>启动HTTPD服务器，通过调用httpd_start()函数启动HTTPD服务器，参数server指向创建后的HTTPD句柄，config包含HTTPD的配置信息；</p></li><li><p>注册URI处理函数，通过调用httpd_register_uri_handler()函数将URI处理函数添加到HTTP服务器的URI处理列表中，可以实现不同URI地址的访问和处理；</p></li><li><p>注册基本认证机制，如果开启了CONFIG_EXAMPLE_BASIC_AUTH宏定义，则通过httpd_register_basic_auth()函数在HTTPD服务器上注册基本的用户名密码验证机制。</p></li></ol><p>这里的hello、echo、ctrl都是处理URI请求的处理函数，分别对应不同的URI地址。httpd_handle_t类型是HTTPD服务器的句柄类型，可以用于维护HTTPD服务器的状态等信息.</p><p>下面对这几个处理函数进行分析：</p><h5 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h5><p>注册路由：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> hello = &#123;<br><br>    .uri       = <span class="hljs-string">&quot;/hello&quot;</span>,<br><br>    .method    = HTTP_GET,<br><br>    .handler   = hello_get_handler,<br><br>    <span class="hljs-comment">/* Let&#x27;s pass response string in user</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * context to demonstrate it&#x27;s usage */</span><br><br>    .user_ctx  = <span class="hljs-string">&quot;Hello World!&quot;</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>这段代码是一个基于ESP32的HTTP服务器程序中的URI处理函数，对应的URI地址为&#x2F;hello。具体来说：</p><ol><li><p>.uri表示了要处理的URI地址，即当客户端请求该地址时，调用相应的处理函数进行处理；</p></li><li><p>.method表示了该URI地址所支持的HTTP请求方法，本例中为HTTP_GET，即只支持GET请求；</p></li><li><p>.handler表示了处理函数，当客户端发起请求时，调用该处理函数进行响应；</p></li><li><p>.user_ctx是一个指向用户数据的指针，允许在处理函数中使用该指针来存储一些用户自定义的数据，这里将”Hello World!”传递给处理函数作为响应内容。</p></li></ol><p>在这个例子中，当客户端通过GET方法请求URI地址&#x2F;hello时，会调用hello_get_handler函数进行处理，函数的实现可以根据需求自行编写。</p><p>下面是处理函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">hello_get_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span>*  buf;<br><br>    <span class="hljs-type">size_t</span> buf_len;<br><br>  <br><br>    <span class="hljs-comment">/* Get header value string length and allocate memory for length + 1,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * extra byte for null termination */</span><br><br>    buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Host&quot;</span>) + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>) &#123;<br><br>        buf = <span class="hljs-built_in">malloc</span>(buf_len);<br><br>        <span class="hljs-comment">/* Copy null terminated value string into buffer */</span><br><br>        <span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Host&quot;</span>, buf, buf_len) == ESP_OK) &#123;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Host: %s&quot;</span>, buf);<br><br>        &#125;<br><br>        <span class="hljs-built_in">free</span>(buf);<br><br>    &#125;<br><br>  <br><br>    buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Test-Header-2&quot;</span>) + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>) &#123;<br><br>        buf = <span class="hljs-built_in">malloc</span>(buf_len);<br><br>        <span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Test-Header-2&quot;</span>, buf, buf_len) == ESP_OK) &#123;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Test-Header-2: %s&quot;</span>, buf);<br><br>        &#125;<br><br>        <span class="hljs-built_in">free</span>(buf);<br><br>    &#125;<br><br>  <br><br>    buf_len = httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Test-Header-1&quot;</span>) + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>) &#123;<br><br>        buf = <span class="hljs-built_in">malloc</span>(buf_len);<br><br>        <span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_str(req, <span class="hljs-string">&quot;Test-Header-1&quot;</span>, buf, buf_len) == ESP_OK) &#123;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Found header =&gt; Test-Header-1: %s&quot;</span>, buf);<br><br>        &#125;<br><br>        <span class="hljs-built_in">free</span>(buf);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-comment">/* Read URL query string length and allocate memory for length + 1,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * extra byte for null termination */</span><br><br>    buf_len = httpd_req_get_url_query_len(req) + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (buf_len &gt; <span class="hljs-number">1</span>) &#123;<br><br>        buf = <span class="hljs-built_in">malloc</span>(buf_len);<br><br>        <span class="hljs-keyword">if</span> (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK) &#123;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query =&gt; %s&quot;</span>, buf);<br><br>            <span class="hljs-type">char</span> param[<span class="hljs-number">32</span>];<br><br>            <span class="hljs-comment">/* Get value of expected key from query string */</span><br><br>            <span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query1&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK) &#123;<br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query1=%s&quot;</span>, param);<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query3&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK) &#123;<br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query3=%s&quot;</span>, param);<br><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (httpd_query_key_value(buf, <span class="hljs-string">&quot;query2&quot;</span>, param, <span class="hljs-keyword">sizeof</span>(param)) == ESP_OK) &#123;<br><br>                ESP_LOGI(TAG, <span class="hljs-string">&quot;Found URL query parameter =&gt; query2=%s&quot;</span>, param);<br><br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-built_in">free</span>(buf);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-comment">/* Set some custom headers */</span><br><br>    httpd_resp_set_hdr(req, <span class="hljs-string">&quot;Custom-Header-1&quot;</span>, <span class="hljs-string">&quot;Custom-Value-1&quot;</span>);<br><br>    httpd_resp_set_hdr(req, <span class="hljs-string">&quot;Custom-Header-2&quot;</span>, <span class="hljs-string">&quot;Custom-Value-2&quot;</span>);<br><br>  <br><br>    <span class="hljs-comment">/* Send response with custom headers and body set as the</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * string passed in user context*/</span><br><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* resp_str = (<span class="hljs-type">const</span> <span class="hljs-type">char</span>*) req-&gt;user_ctx;<br><br>    httpd_resp_send(req, resp_str, HTTPD_RESP_USE_STRLEN);<br><br>  <br><br>    <span class="hljs-comment">/* After sending the HTTP response the old HTTP request</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     * headers are lost. Check if HTTP request headers can be read now. */</span><br><br>    <span class="hljs-keyword">if</span> (httpd_req_get_hdr_value_len(req, <span class="hljs-string">&quot;Host&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Request headers lost&quot;</span>);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> ESP_OK;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是一个基于ESP32的HTTP服务器程序中的处理GET请求的函数，对应的URI地址为&#x2F;hello。具体来说：</p><ol><li><p>首先定义了一个名为hello_get_handler的函数，该函数接收一个指向httpd_req_t类型的指针参数req，表示HTTP请求的结构体实例；</p></li><li><p>函数中通过httpd_req_get_hdr_value_len和httpd_req_get_hdr_value_str等函数获取HTTP请求头中特定字段的值，比如Host、Test-Header-1、Test-Header-2等；</p></li><li><p>接着通过httpd_req_get_url_query_len和httpd_req_get_url_query_str等函数获取URL查询字符串，并从中解析出特定键值对的值，比如query1、query2、query3等；</p></li><li><p>通过httpd_resp_set_hdr设置一些自定义的响应头；</p></li><li><p>最后调用httpd_resp_send发送HTTP响应，响应内容为req-&gt;user_ctx所指向的字符串，即在URI处理函数中传入的”Hello World!”。</p></li></ol><h5 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> echo = &#123;<br><br>    .uri       = <span class="hljs-string">&quot;/echo&quot;</span>,<br><br>    .method    = HTTP_POST,<br><br>    .handler   = echo_post_handler,<br><br>    .user_ctx  = <span class="hljs-literal">NULL</span><br><br>&#125;;<br><br></code></pre></td></tr></table></figure><p>处理函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* An HTTP POST handler */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">echo_post_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">100</span>];<br><br>    <span class="hljs-type">int</span> ret, remaining = req-&gt;content_len;<br><br>  <br><br>    <span class="hljs-keyword">while</span> (remaining &gt; <span class="hljs-number">0</span>) &#123;<br><br>        <span class="hljs-comment">/* Read the data for the request */</span><br><br>        <span class="hljs-keyword">if</span> ((ret = httpd_req_recv(req, buf,<br><br>                        MIN(remaining, <span class="hljs-keyword">sizeof</span>(buf)))) &lt;= <span class="hljs-number">0</span>) &#123;<br><br>            <span class="hljs-keyword">if</span> (ret == HTTPD_SOCK_ERR_TIMEOUT) &#123;<br><br>                <span class="hljs-comment">/* Retry receiving if timeout occurred */</span><br><br>                <span class="hljs-keyword">continue</span>;<br><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> ESP_FAIL;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-comment">/* Send back the same data */</span><br><br>        httpd_resp_send_chunk(req, buf, ret);<br><br>        remaining -= ret;<br><br>  <br><br>        <span class="hljs-comment">/* Log data received */</span><br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;=========== RECEIVED DATA ==========&quot;</span>);<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;%.*s&quot;</span>, ret, buf);<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;====================================&quot;</span>);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-comment">// End response</span><br><br>    httpd_resp_send_chunk(req, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> ESP_OK;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="put方法："><a href="#put方法：" class="headerlink" title="put方法："></a>put方法：</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> ctrl = &#123;<br><br>    .uri       = <span class="hljs-string">&quot;/ctrl&quot;</span>,<br><br>    .method    = HTTP_PUT,<br><br>    .handler   = ctrl_put_handler,<br><br>    .user_ctx  = <span class="hljs-literal">NULL</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* An HTTP PUT handler. This demonstrates realtime</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * registration and deregistration of URI handlers</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">ctrl_put_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br><br>&#123;<br><br>    <span class="hljs-type">char</span> buf;<br><br>    <span class="hljs-type">int</span> ret;<br><br>  <br><br>    <span class="hljs-keyword">if</span> ((ret = httpd_req_recv(req, &amp;buf, <span class="hljs-number">1</span>)) &lt;= <span class="hljs-number">0</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (ret == HTTPD_SOCK_ERR_TIMEOUT) &#123;<br><br>            httpd_resp_send_408(req);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ESP_FAIL;<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-keyword">if</span> (buf == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br><br>        <span class="hljs-comment">/* URI handlers can be unregistered using the uri string */</span><br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Unregistering /hello and /echo URIs&quot;</span>);<br><br>        httpd_unregister_uri(req-&gt;handle, <span class="hljs-string">&quot;/hello&quot;</span>);<br><br>        httpd_unregister_uri(req-&gt;handle, <span class="hljs-string">&quot;/echo&quot;</span>);<br><br>        <span class="hljs-comment">/* Register the custom error handler */</span><br><br>        httpd_register_err_handler(req-&gt;handle, HTTPD_404_NOT_FOUND, http_404_error_handler);<br><br>    &#125;<br><br>    <span class="hljs-keyword">else</span> &#123;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Registering /hello and /echo URIs&quot;</span>);<br><br>        httpd_register_uri_handler(req-&gt;handle, &amp;hello);<br><br>        httpd_register_uri_handler(req-&gt;handle, &amp;echo);<br><br>        <span class="hljs-comment">/* Unregister custom error handler */</span><br><br>        httpd_register_err_handler(req-&gt;handle, HTTPD_404_NOT_FOUND, <span class="hljs-literal">NULL</span>);<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-comment">/* Respond with empty body */</span><br><br>    httpd_resp_send(req, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> ESP_OK;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码是一个HTTP PUT请求处理函数，主要用于实现URI处理器（URI handlers）的实时注册和注销。具体来说：</p><ol><li>首先接收HTTP请求的数据并存储到buf中；</li><li>判断buf的值是否为’0’，如果是则调用httpd_unregister_uri函数注销&#x2F;hello和&#x2F;echo的URI处理器，同时调用httpd_register_err_handler函数注册了一个自定义的404错误处理函数http_404_error_handler；如果不是则通过httpd_register_uri_handler函数分别注册&#x2F;hello和&#x2F;echo的URI处理器，并取消注册自定义的404错误处理函数；</li><li>最后通过httpd_resp_send函数回复空的响应消息体。</li></ol><p>总之，该函数可实现URI处理器的实时注册和注销，提高了HTTP请求处理的灵活性和可扩展性。</p><h4 id="request请求（客户端）"><a href="#request请求（客户端）" class="headerlink" title="request请求（客户端）"></a>request请求（客户端）</h4><p>示例代码：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\http_request</code><br>http_get_task:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Constants that aren&#x27;t configurable in menuconfig */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WEB_SERVER <span class="hljs-string">&quot;example.com&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WEB_PORT <span class="hljs-string">&quot;80&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> WEB_PATH <span class="hljs-string">&quot;/&quot;</span></span><br><br>  <br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;example&quot;</span>;<br><br>  <br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *REQUEST = <span class="hljs-string">&quot;GET &quot;</span> WEB_PATH <span class="hljs-string">&quot; HTTP/1.0\r\n&quot;</span><br><br>    <span class="hljs-string">&quot;Host: &quot;</span>WEB_SERVER<span class="hljs-string">&quot;:&quot;</span>WEB_PORT<span class="hljs-string">&quot;\r\n&quot;</span><br><br>    <span class="hljs-string">&quot;User-Agent: esp-idf/1.0 esp32\r\n&quot;</span><br><br>    <span class="hljs-string">&quot;\r\n&quot;</span>;<br><br>  <br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">http_get_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span><br><br>&#123;<br><br>    <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> <span class="hljs-title">hints</span> =</span> &#123;<br><br>        .ai_family = AF_INET,<br><br>        .ai_socktype = SOCK_STREAM,<br><br>    &#125;;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">addrinfo</span> *<span class="hljs-title">res</span>;</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">in_addr</span> *<span class="hljs-title">addr</span>;</span><br><br>    <span class="hljs-type">int</span> s, r;<br><br>    <span class="hljs-type">char</span> recv_buf[<span class="hljs-number">64</span>];<br><br>  <br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br><br>        <span class="hljs-type">int</span> err = getaddrinfo(WEB_SERVER, WEB_PORT, &amp;hints, &amp;res);<br><br>  <br><br>        <span class="hljs-keyword">if</span>(err != <span class="hljs-number">0</span> || res == <span class="hljs-literal">NULL</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;DNS lookup failed err=%d res=%p&quot;</span>, err, res);<br><br>            vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br><br>            <span class="hljs-keyword">continue</span>;<br><br>        &#125;<br><br>  <br><br>        <span class="hljs-comment">/* Code to print the resolved IP.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment"></span><br><span class="hljs-comment">           Note: inet_ntoa is non-reentrant, look at ipaddr_ntoa_r for &quot;real&quot; code */</span><br><br>        addr = &amp;((<span class="hljs-keyword">struct</span> sockaddr_in *)res-&gt;ai_addr)-&gt;sin_addr;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;DNS lookup succeeded. IP=%s&quot;</span>, inet_ntoa(*addr));<br><br>  <br><br>        s = socket(res-&gt;ai_family, res-&gt;ai_socktype, <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">if</span>(s &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;... Failed to allocate socket.&quot;</span>);<br><br>            freeaddrinfo(res);<br><br>            vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br><br>            <span class="hljs-keyword">continue</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;... allocated socket&quot;</span>);<br><br>  <br><br>        <span class="hljs-keyword">if</span>(connect(s, res-&gt;ai_addr, res-&gt;ai_addrlen) != <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;... socket connect failed errno=%d&quot;</span>, errno);<br><br>            close(s);<br><br>            freeaddrinfo(res);<br><br>            vTaskDelay(<span class="hljs-number">4000</span> / portTICK_PERIOD_MS);<br><br>            <span class="hljs-keyword">continue</span>;<br><br>        &#125;<br><br>  <br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;... connected&quot;</span>);<br><br>        freeaddrinfo(res);<br><br>  <br><br>        <span class="hljs-keyword">if</span> (write(s, REQUEST, <span class="hljs-built_in">strlen</span>(REQUEST)) &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;... socket send failed&quot;</span>);<br><br>            close(s);<br><br>            vTaskDelay(<span class="hljs-number">4000</span> / portTICK_PERIOD_MS);<br><br>            <span class="hljs-keyword">continue</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;... socket send success&quot;</span>);<br><br>  <br><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">timeval</span> <span class="hljs-title">receiving_timeout</span>;</span><br><br>        receiving_timeout.tv_sec = <span class="hljs-number">5</span>;<br><br>        receiving_timeout.tv_usec = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">if</span> (setsockopt(s, SOL_SOCKET, SO_RCVTIMEO, &amp;receiving_timeout,<br><br>                <span class="hljs-keyword">sizeof</span>(receiving_timeout)) &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;... failed to set socket receiving timeout&quot;</span>);<br><br>            close(s);<br><br>            vTaskDelay(<span class="hljs-number">4000</span> / portTICK_PERIOD_MS);<br><br>            <span class="hljs-keyword">continue</span>;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;... set socket receiving timeout success&quot;</span>);<br><br>  <br><br>        <span class="hljs-comment">/* Read HTTP response */</span><br><br>        <span class="hljs-keyword">do</span> &#123;<br><br>            bzero(recv_buf, <span class="hljs-keyword">sizeof</span>(recv_buf));<br><br>            r = read(s, recv_buf, <span class="hljs-keyword">sizeof</span>(recv_buf)<span class="hljs-number">-1</span>);<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; r; i++) &#123;<br><br>                <span class="hljs-built_in">putchar</span>(recv_buf[i]);<br><br>            &#125;<br><br>        &#125; <span class="hljs-keyword">while</span>(r &gt; <span class="hljs-number">0</span>);<br><br>  <br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;... done reading from socket. Last read return=%d errno=%d.&quot;</span>, r, errno);<br><br>        close(s);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> countdown = <span class="hljs-number">10</span>; countdown &gt;= <span class="hljs-number">0</span>; countdown--) &#123;<br><br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;%d... &quot;</span>, countdown);<br><br>            vTaskDelay(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Starting again!&quot;</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这是一段 ESP32 上进行 HTTP GET 请求的代码。主要实现了：</p><ol><li>定义了 WEB_SERVER、WEB_PORT 和 WEB_PATH 三个常量，分别表示服务器地址、端口号和请求路径。</li><li>使用 getaddrinfo 函数查询服务器的 IP 地址，并对返回值进行判断处理。</li><li>创建一个套接字，并通过 connect 函数连接服务器。</li><li>将 HTTP GET 请求通过 write 函数发送给服务器。</li><li>设置接收超时时间并通过 read 函数接收服务器的响应报文，将其逐个字符地打印到控制台上。</li><li>关闭套接字并延时一段时间后重复执行上述流程。</li></ol><p>整个过程中使用了一些 ESP32 系统提供的函数和数据结构，如结构体 addrinfo、宏定义 AF_INET 和 SOCK_STREAM、函数 socket、close、read、write、getaddrinfo、freeaddrinfo、setsockopt 等。通过这些函数的调用，可以实现与远程服务器的通信，完成不同的网络应用。</p><h3 id="5-webSocket协议"><a href="#5-webSocket协议" class="headerlink" title="5.webSocket协议"></a>5.webSocket协议</h3><h4 id="webSocket介绍"><a href="#webSocket介绍" class="headerlink" title="webSocket介绍"></a>webSocket介绍</h4><p>WebSocket 是一种在单个 TCP 连接上进行全双工通信的协议。它的主要特点是可以实现实时双向通信，并且可以在客户端和服务器之间传输任意数据，而不受 HTTP 语义限制。<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30100750.png"></p><p>与传统的 HTTP 请求-响应模式不同，WebSocket 采用了类似握手的方法来建立连接。客户端向服务器发送一个 HTTP 请求头，其中包含 Upgrade、Connection、Sec-WebSocket-Key 等字段，通知服务器要进行连接升级。服务器返回一个 HTTP 响应头，其中也包含 Upgrade、Connection 和 Sec-WebSocket-Accept 等字段，表示已同意升级连接。之后，客户端和服务器之间的数据就可以以帧为单位进行传输，每个帧包含一个信息片段，可以是文本也可以是二进制。<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30100636.png"><br>WebSocket 协议的优点是支持实时通信，具有较低的延迟，可减少网络传输的开销，有助于提高应用程序的性能。常见的应用场景包括聊天应用、在线游戏、实时数据监控等。</p><h4 id="webSocket数据帧格式"><a href="#webSocket数据帧格式" class="headerlink" title="webSocket数据帧格式"></a>webSocket数据帧格式</h4><p>WebSocket 数据帧是 WebSocket 协议中传输数据的基本单位，每个帧可以包含一个或多个信息片段（Message Fragment），可以是文本也可以是二进制，由 Header 和 Payload 两部分组成。<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30101356.png"><br>Header 一般包括了以下几个字段：</p><ol><li>FIN：1 位，表示当前帧是否为消息的最后一帧，值为 1 表示是，值为 0 表示不是。</li><li>RSV1、RSV2、RSV3：各占 1 位，用于扩展协议。通常情况下，这三位都被置为 0。</li><li>Opcode：4 位，用于表示消息类型，如 0x1 表示文本消息，0x2 表示二进制消息，0x8 表示关闭连接等。</li><li>Mask：1 位，表示负载数据是否被掩码处理过，值为 1 表示被掩码处理，值为 0 表示未被掩码处理。</li><li>Payload length：7 位或 7+16 位或 7+64 位，表示负载数据的长度。当值为 0~126 时，表示负载数据的长度就是该值；当值为 127 时，额外有两个字节表示长度，当值大于等于 2^16 时，额外有 4 个字节表示长度。<br>如果 Mask 位被设置为 1，则 Header 中还要包含一个 4 字节的掩码码值（Masking Key），用于对负载数据进行反掩码操作。<br>Payload 是实际的数据内容，长度由 Header 中的 Payload length 字段表示，可能是文本也可能是二进制。<br>在整个 WebSocket 连接过程中，客户端和服务器会相互发送一些数据帧，包括握手请求、握手响应、消息片段等，根据不同的功能要求分别使用不同的 Opcode 来表示。</li></ol><h4 id="webSocket服务器"><a href="#webSocket服务器" class="headerlink" title="webSocket服务器"></a>webSocket服务器</h4><p>示例代码<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\http_server\ws_echo_server</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">echo_handler</span><span class="hljs-params">(<span class="hljs-type">httpd_req_t</span> *req)</span><br><br>&#123;<br><br>    <span class="hljs-keyword">if</span> (req-&gt;method == HTTP_GET) &#123;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Handshake done, the new connection was opened&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> ESP_OK;<br><br>    &#125;<br><br>    <span class="hljs-type">httpd_ws_frame_t</span> ws_pkt;<br><br>    <span class="hljs-type">uint8_t</span> *buf = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">memset</span>(&amp;ws_pkt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">httpd_ws_frame_t</span>));<br><br>    ws_pkt.type = HTTPD_WS_TYPE_TEXT;<br><br>    <span class="hljs-comment">/* Set max_len = 0 to get the frame len */</span><br><br>    <span class="hljs-type">esp_err_t</span> ret = httpd_ws_recv_frame(req, &amp;ws_pkt, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed to get frame len with %d&quot;</span>, ret);<br><br>        <span class="hljs-keyword">return</span> ret;<br><br>    &#125;<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;frame len is %d&quot;</span>, ws_pkt.len);<br><br>    <span class="hljs-keyword">if</span> (ws_pkt.len) &#123;<br><br>        <span class="hljs-comment">/* ws_pkt.len + 1 is for NULL termination as we are expecting a string */</span><br><br>        buf = <span class="hljs-built_in">calloc</span>(<span class="hljs-number">1</span>, ws_pkt.len + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">if</span> (buf == <span class="hljs-literal">NULL</span>) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;Failed to calloc memory for buf&quot;</span>);<br><br>            <span class="hljs-keyword">return</span> ESP_ERR_NO_MEM;<br><br>        &#125;<br><br>        ws_pkt.payload = buf;<br><br>        <span class="hljs-comment">/* Set max_len = ws_pkt.len to get the frame payload */</span><br><br>        ret = httpd_ws_recv_frame(req, &amp;ws_pkt, ws_pkt.len);<br><br>        <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br><br>            ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed with %d&quot;</span>, ret);<br><br>            <span class="hljs-built_in">free</span>(buf);<br><br>            <span class="hljs-keyword">return</span> ret;<br><br>        &#125;<br><br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Got packet with message: %s&quot;</span>, ws_pkt.payload);<br><br>    &#125;<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Packet type: %d&quot;</span>, ws_pkt.type);<br><br>    <span class="hljs-keyword">if</span> (ws_pkt.type == HTTPD_WS_TYPE_TEXT &amp;&amp;<br><br>        <span class="hljs-built_in">strcmp</span>((<span class="hljs-type">char</span>*)ws_pkt.payload,<span class="hljs-string">&quot;Trigger async&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br><br>        <span class="hljs-built_in">free</span>(buf);<br><br>        <span class="hljs-keyword">return</span> trigger_async_send(req-&gt;handle, req);<br><br>    &#125;<br><br>  <br><br>    ret = httpd_ws_send_frame(req, &amp;ws_pkt);<br><br>    <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_send_frame failed with %d&quot;</span>, ret);<br><br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(buf);<br><br>    <span class="hljs-keyword">return</span> ret;<br><br>&#125;<br><br>  <br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">httpd_uri_t</span> ws = &#123;<br><br>        .uri        = <span class="hljs-string">&quot;/ws&quot;</span>,<br><br>        .method     = HTTP_GET,<br><br>        .handler    = echo_handler,<br><br>        .user_ctx   = <span class="hljs-literal">NULL</span>,<br><br>        .is_websocket = <span class="hljs-literal">true</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="服务器握手协议"><a href="#服务器握手协议" class="headerlink" title="服务器握手协议"></a>服务器握手协议</h5><p>无</p><h5 id="服务器接收数据"><a href="#服务器接收数据" class="headerlink" title="服务器接收数据"></a>服务器接收数据</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-type">httpd_ws_frame_t</span> ws_pkt;<br><br>    <span class="hljs-type">uint8_t</span> *buf = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-built_in">memset</span>(&amp;ws_pkt, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">httpd_ws_frame_t</span>));<br><br>    ws_pkt.type = HTTPD_WS_TYPE_TEXT;<br><br>    <span class="hljs-comment">/* Set max_len = 0 to get the frame len */</span><br><br>    <span class="hljs-type">esp_err_t</span> ret = httpd_ws_recv_frame(req, &amp;ws_pkt, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (ret != ESP_OK) &#123;<br><br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;httpd_ws_recv_frame failed to get frame len with %d&quot;</span>, ret);<br><br>        <span class="hljs-keyword">return</span> ret;<br><br>    &#125;<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;frame len is %d&quot;</span>, ws_pkt.len);<br></code></pre></td></tr></table></figure><p>数据格式（和帧格式对应）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * @brief WebSocket frame format</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">httpd_ws_frame</span> &#123;</span><br><br>    <span class="hljs-type">bool</span> final;                 <span class="hljs-comment">/*!&lt; Final frame:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                     For received frames this field indicates whether the `FIN` flag was set.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                     For frames to be transmitted, this field is only used if the `fragmented`</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                         option is set as well. If `fragmented` is false, the `FIN` flag is set</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                         by default, marking the ws_frame as a complete/unfragmented message</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                         (esp_http_server doesn&#x27;t automatically fragment messages) */</span><br><br>    <span class="hljs-type">bool</span> fragmented;            <span class="hljs-comment">/*!&lt; Indication that the frame allocated for transmission is a message fragment,</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                     so the `FIN` flag is set manually according to the `final` option.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                     This flag is never set for received messages */</span><br><br>    <span class="hljs-type">httpd_ws_type_t</span> type;       <span class="hljs-comment">/*!&lt; WebSocket frame type */</span><br><br>    <span class="hljs-type">uint8_t</span> *payload;           <span class="hljs-comment">/*!&lt; Pre-allocated data buffer */</span><br><br>    <span class="hljs-type">size_t</span> len;                 <span class="hljs-comment">/*!&lt; Length of the WebSocket data */</span><br><br>&#125; <span class="hljs-type">httpd_ws_frame_t</span>;<br></code></pre></td></tr></table></figure><h5 id="服务器发送数据"><a href="#服务器发送数据" class="headerlink" title="服务器发送数据"></a>服务器发送数据</h5><p>异步发送</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">trigger_async_send(req-&gt;handle, req);<br></code></pre></td></tr></table></figure><p>同步发送：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">httpd<span class="hljs-constructor">_ws_send_frame(<span class="hljs-params">req</span>, &amp;<span class="hljs-params">ws_pkt</span>)</span>;<br></code></pre></td></tr></table></figure><p>这两个函数都调用<code>esp_err_t httpd_ws_send_frame_async(httpd_handle_t hd, int fd, httpd_ws_frame_t *frame)</code><br>httpd_ws_send_frame_async:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">esp_err_t</span> <span class="hljs-title function_">httpd_ws_send_frame_async</span><span class="hljs-params">(<span class="hljs-type">httpd_handle_t</span> hd, <span class="hljs-type">int</span> fd, <span class="hljs-type">httpd_ws_frame_t</span> *frame)</span><br><br>&#123;<br><br>    <span class="hljs-keyword">if</span> (!frame) &#123;<br><br>        ESP_LOGW(TAG, LOG_FMT(<span class="hljs-string">&quot;Argument is invalid&quot;</span>));<br><br>        <span class="hljs-keyword">return</span> ESP_ERR_INVALID_ARG;<br><br>    &#125;<br><br><br>    <span class="hljs-comment">/* Prepare Tx buffer - maximum length is 14, which includes 2 bytes header, 8 bytes length, 4 bytes mask key */</span><br><br>    <span class="hljs-type">uint8_t</span> tx_len = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">uint8_t</span> header_buf[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span> &#125;;<br><br>    <span class="hljs-comment">/* Set the `FIN` bit by default if message is not fragmented. Else, set it as per the `final` field */</span><br><br>    header_buf[<span class="hljs-number">0</span>] |= (!frame-&gt;fragmented) ? HTTPD_WS_FIN_BIT : (frame-&gt;final? HTTPD_WS_FIN_BIT: HTTPD_WS_CONTINUE);<br><br>    header_buf[<span class="hljs-number">0</span>] |= frame-&gt;type; <span class="hljs-comment">/* Type (opcode): 4 bits */</span><br><br><br>    <span class="hljs-keyword">if</span> (frame-&gt;len &lt;= <span class="hljs-number">125</span>) &#123;<br><br>        header_buf[<span class="hljs-number">1</span>] = frame-&gt;len &amp; <span class="hljs-number">0x7f</span>U; <span class="hljs-comment">/* Length for 7 bits */</span><br><br>        tx_len = <span class="hljs-number">2</span>;<br><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (frame-&gt;len &gt; <span class="hljs-number">125</span> &amp;&amp; frame-&gt;len &lt; UINT16_MAX) &#123;<br><br>        header_buf[<span class="hljs-number">1</span>] = <span class="hljs-number">126</span>;                <span class="hljs-comment">/* Length for 16 bits */</span><br><br>        header_buf[<span class="hljs-number">2</span>] = (frame-&gt;len &gt;&gt; <span class="hljs-number">8U</span>) &amp; <span class="hljs-number">0xff</span>U;<br><br>        header_buf[<span class="hljs-number">3</span>] = frame-&gt;len &amp; <span class="hljs-number">0xff</span>U;<br><br>        tx_len = <span class="hljs-number">4</span>;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><br>        header_buf[<span class="hljs-number">1</span>] = <span class="hljs-number">127</span>;                <span class="hljs-comment">/* Length for 64 bits */</span><br><br>        <span class="hljs-type">uint8_t</span> shift_idx = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>; <span class="hljs-comment">/* Shift index starts at 7 */</span><br><br>        <span class="hljs-type">uint64_t</span> len64 = frame-&gt;len; <span class="hljs-comment">/* Raise variable size to make sure we won&#x27;t shift by more bits</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                                      * than the length has (to avoid undefined behaviour) */</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int8_t</span> idx = <span class="hljs-number">2</span>; idx &lt;= <span class="hljs-number">9</span>; idx++) &#123;<br><br>            <span class="hljs-comment">/* Now do shifting (be careful of endianness, i.e. when buffer index is 2, frame length shift index is 7) */</span><br><br>            header_buf[idx] = (len64 &gt;&gt; (shift_idx * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xff</span>U;<br><br>            shift_idx--;<br><br>        &#125;<br><br>        tx_len = <span class="hljs-number">10</span>;<br><br>    &#125;<br>    <span class="hljs-comment">/* WebSocket server does not required to mask response payload, so leave the MASK bit as 0. */</span><br><br>    header_buf[<span class="hljs-number">1</span>] &amp;= (~HTTPD_WS_MASK_BIT);<br><br>  <br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sock_db</span> *<span class="hljs-title">sess</span> =</span> httpd_sess_get(hd, fd);<br><br>    <span class="hljs-keyword">if</span> (!sess) &#123;<br><br>        <span class="hljs-keyword">return</span> ESP_ERR_INVALID_ARG;<br><br>    &#125;<br><br>    <span class="hljs-comment">/* Send off header */</span><br><br>    <span class="hljs-keyword">if</span> (sess-&gt;send_fn(hd, fd, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)header_buf, tx_len, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br><br>        ESP_LOGW(TAG, LOG_FMT(<span class="hljs-string">&quot;Failed to send WS header&quot;</span>));<br><br>        <span class="hljs-keyword">return</span> ESP_FAIL;<br><br>    &#125;<br><br>  <br><br>    <span class="hljs-comment">/* Send off payload */</span><br><br>    <span class="hljs-keyword">if</span>(frame-&gt;len &gt; <span class="hljs-number">0</span> &amp;&amp; frame-&gt;payload != <span class="hljs-literal">NULL</span>) &#123;<br><br>        <span class="hljs-keyword">if</span> (sess-&gt;send_fn(hd, fd, (<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)frame-&gt;payload, frame-&gt;len, <span class="hljs-number">0</span>) &lt; <span class="hljs-number">0</span>) &#123;<br><br>            ESP_LOGW(TAG, LOG_FMT(<span class="hljs-string">&quot;Failed to send WS payload&quot;</span>));<br><br>            <span class="hljs-keyword">return</span> ESP_FAIL;<br><br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ESP_OK;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这是一段 ESP32 上通过 WebSocket 发送帧的代码，该函数会向指定的 WebSocket 连接发送加密后的帧数据。主要实现如下：</p><ol><li>首先对 frame 参数进行校验，如果为空则返回 ESP_ERR_INVALID_ARG 错误。</li><li>根据 WebSocket 数据帧格式，设置 Header 的 FIN、Opcode 以及 Payload length 字段。同时根据负载长度的大小决定 Header 的长度，最多为 10 个字节，包括了 2 个字节的 Header，2 个字节的 Payload length，4 个字节的 Masking key（在此代码中未使用，因为 WebSocket Server 不需要对 Payload 进行掩码处理）。</li><li>通过 httpd_sess_get() 函数获取对应 WebSocket 连接的套接字描述符（socket descriptor），若获取失败则返回 ESP_ERR_INVALID_ARG 错误。</li><li>调用 socket 的 send_fn() 函数，将 Header 和 Payload 发送给客户端。</li><li>函数返回 ESP_OK 表示发送数据成功，返回 ESP_FAIL 表示发送数据失败。</li></ol><h4 id="webSocket客户端"><a href="#webSocket客户端" class="headerlink" title="webSocket客户端"></a>webSocket客户端</h4><p>示例代码：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\websocket</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* ESP HTTP Client Example</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This example code is in the Public Domain (or CC0 licensed, at your option.)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Unless required by applicable law or agreed to in writing, this</span><br><span class="hljs-comment">   software is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR</span><br><span class="hljs-comment">   CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;protocol_examples_common.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/semphr.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/event_groups.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_websocket_client.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NO_DATA_TIMEOUT_SEC 5</span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;WEBSOCKET&quot;</span>;<br><br><span class="hljs-type">static</span> TimerHandle_t shutdown_signal_timer;<br><span class="hljs-type">static</span> SemaphoreHandle_t shutdown_sema;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">shutdown_signaler</span><span class="hljs-params">(TimerHandle_t xTimer)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;No data received for %d seconds, signaling shutdown&quot;</span>, NO_DATA_TIMEOUT_SEC);<br>    xSemaphoreGive(shutdown_sema);<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_WEBSOCKET_URI_FROM_STDIN</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">get_string</span><span class="hljs-params">(<span class="hljs-type">char</span> *line, <span class="hljs-type">size_t</span> size)</span><br>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (count &lt; size) &#123;<br>        <span class="hljs-type">int</span> c = fgetc(<span class="hljs-built_in">stdin</span>);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>            line[count] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span> &amp;&amp; c &lt; <span class="hljs-number">127</span>) &#123;<br>            line[count] = c;<br>            ++count;<br>        &#125;<br>        vTaskDelay(<span class="hljs-number">10</span> / portTICK_PERIOD_MS);<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_WEBSOCKET_URI_FROM_STDIN */</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">websocket_event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span> *handler_args, <span class="hljs-type">esp_event_base_t</span> base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br>    <span class="hljs-type">esp_websocket_event_data_t</span> *data = (<span class="hljs-type">esp_websocket_event_data_t</span> *)event_data;<br>    <span class="hljs-keyword">switch</span> (event_id) &#123;<br>    <span class="hljs-keyword">case</span> WEBSOCKET_EVENT_CONNECTED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_CONNECTED&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> WEBSOCKET_EVENT_DISCONNECTED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_DISCONNECTED&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> WEBSOCKET_EVENT_DATA:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_DATA&quot;</span>);<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Received opcode=%d&quot;</span>, data-&gt;op_code);<br>        <span class="hljs-keyword">if</span> (data-&gt;op_code == <span class="hljs-number">0x08</span> &amp;&amp; data-&gt;data_len == <span class="hljs-number">2</span>) &#123;<br>            ESP_LOGW(TAG, <span class="hljs-string">&quot;Received closed message with code=%d&quot;</span>, <span class="hljs-number">256</span>*data-&gt;data_ptr[<span class="hljs-number">0</span>] + data-&gt;data_ptr[<span class="hljs-number">1</span>]);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ESP_LOGW(TAG, <span class="hljs-string">&quot;Received=%.*s&quot;</span>, data-&gt;data_len, (<span class="hljs-type">char</span> *)data-&gt;data_ptr);<br>        &#125;<br>        ESP_LOGW(TAG, <span class="hljs-string">&quot;Total payload length=%d, data_len=%d, current payload offset=%d\r\n&quot;</span>, data-&gt;payload_len, data-&gt;data_len, data-&gt;payload_offset);<br><br>        xTimerReset(shutdown_signal_timer, portMAX_DELAY);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> WEBSOCKET_EVENT_ERROR:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;WEBSOCKET_EVENT_ERROR&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">websocket_app_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">esp_websocket_client_config_t</span> websocket_cfg = &#123;&#125;;<br><br>    shutdown_signal_timer = xTimerCreate(<span class="hljs-string">&quot;Websocket shutdown timer&quot;</span>, NO_DATA_TIMEOUT_SEC * <span class="hljs-number">1000</span> / portTICK_PERIOD_MS,<br>                                         pdFALSE, <span class="hljs-literal">NULL</span>, shutdown_signaler);<br>    shutdown_sema = xSemaphoreCreateBinary();<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_WEBSOCKET_URI_FROM_STDIN</span><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">128</span>];<br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Please enter uri of websocket endpoint&quot;</span>);<br>    get_string(line, <span class="hljs-keyword">sizeof</span>(line));<br><br>    websocket_cfg.uri = line;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Endpoint uri: %s\n&quot;</span>, line);<br><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    websocket_cfg.uri = CONFIG_WEBSOCKET_URI;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_WEBSOCKET_URI_FROM_STDIN */</span></span><br><br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Connecting to %s...&quot;</span>, websocket_cfg.uri);<br><br>    <span class="hljs-type">esp_websocket_client_handle_t</span> client = esp_websocket_client_init(&amp;websocket_cfg);<br>    esp_websocket_register_events(client, WEBSOCKET_EVENT_ANY, websocket_event_handler, (<span class="hljs-type">void</span> *)client);<br><br>    esp_websocket_client_start(client);<br>    xTimerStart(shutdown_signal_timer, portMAX_DELAY);<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">32</span>];<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-keyword">if</span> (esp_websocket_client_is_connected(client)) &#123;<br>            <span class="hljs-type">int</span> len = <span class="hljs-built_in">sprintf</span>(data, <span class="hljs-string">&quot;hello %04d&quot;</span>, i++);<br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Sending %s&quot;</span>, data);<br>            esp_websocket_client_send_text(client, data, len, portMAX_DELAY);<br>        &#125;<br>        vTaskDelay(<span class="hljs-number">1000</span> / portTICK_RATE_MS);<br>    &#125;<br><br>    xSemaphoreTake(shutdown_sema, portMAX_DELAY);<br>    esp_websocket_client_close(client, portMAX_DELAY);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;Websocket Stopped&quot;</span>);<br>    esp_websocket_client_destroy(client);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;[APP] Startup..&quot;</span>);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;[APP] Free memory: %d bytes&quot;</span>, esp_get_free_heap_size());<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;[APP] IDF version: %s&quot;</span>, esp_get_idf_version());<br>    esp_log_level_set(<span class="hljs-string">&quot;*&quot;</span>, ESP_LOG_INFO);<br>    esp_log_level_set(<span class="hljs-string">&quot;WEBSOCKET_CLIENT&quot;</span>, ESP_LOG_DEBUG);<br>    esp_log_level_set(<span class="hljs-string">&quot;TRANSPORT_WS&quot;</span>, ESP_LOG_DEBUG);<br>    esp_log_level_set(<span class="hljs-string">&quot;TRANS_TCP&quot;</span>, ESP_LOG_DEBUG);<br><br>    ESP_ERROR_CHECK(nvs_flash_init());<br>    ESP_ERROR_CHECK(esp_netif_init());<br>    ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br>    <span class="hljs-comment">/* This helper function configures Wi-Fi or Ethernet, as selected in menuconfig.</span><br><span class="hljs-comment">     * Read &quot;Establishing Wi-Fi or Ethernet Connection&quot; section in</span><br><span class="hljs-comment">     * examples/protocols/README.md for more information about this function.</span><br><span class="hljs-comment">     */</span><br>    ESP_ERROR_CHECK(example_connect());<br><br>    websocket_app_start();<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>工作流程：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30115017.png"></p><h3 id="6-MQTT协议"><a href="#6-MQTT协议" class="headerlink" title="6.MQTT协议"></a>6.MQTT协议</h3><h4 id="MQTT介绍"><a href="#MQTT介绍" class="headerlink" title="MQTT介绍"></a>MQTT介绍</h4><p><a href="https://mqtt.org/">MQTT官网</a><br>MQTT（Message Queuing Telemetry Transport）是一种轻量级的、基于发布-订阅模式的通信协议，主要应用于物联网（IoT）领域中设备间的通信。<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30120007.png"><br>MQTT 协议采用了简单的二进制编码格式，使得它适用于网络带宽较小、延迟较高、网络不稳定的环境下进行通信。同时，MQTT 提供了 QoS（Quality of Service）服务质量保证机制，支持三种不同的 QoS 等级：</p><ul><li>QoS 0：最多发送一次消息，不提供可靠性保证。</li><li>QoS 1：至少发送一次消息，确保消息能到达接收方，但可能会重复。</li><li>QoS 2：恰好发送一次消息，确保消息能到达接收方且只接收一次。</li></ul><p>MQTT 协议的特点包括：可扩展性好、开销小、易于实现、开源、支持多种编程语言等。</p><p>在 MQTT 协议中，存在两个主要的参与者：发布者和订阅者。发布者将消息发布到一个或多个主题（Topic）中，订阅者可以订阅感兴趣的主题，从而接收到发布者发送的消息。主题可以看作是某一个特定类型的消息的分类标准。</p><p>MQTT 协议的使用场景包括但不限于：智能家居、智能灯光、智能安防、农业物联网、工业物联网等。</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><h6 id="轻巧高效"><a href="#轻巧高效" class="headerlink" title="轻巧高效"></a>轻巧高效</h6><p>MQTT 客户端非常小，需要的资源最少，因此可以在小型微控制器上使用。MQTT 消息头很小，可以优化网络带宽。</p><h6 id="双向通信"><a href="#双向通信" class="headerlink" title="双向通信"></a>双向通信</h6><p>MQTT 允许在设备到云和云到设备之间进行消息传递。这使得向事物组广播消息变得容易。</p><h6 id="扩展到数百万个事物"><a href="#扩展到数百万个事物" class="headerlink" title="扩展到数百万个事物"></a>扩展到数百万个事物</h6><p>MQTT 可以扩展以连接数百万个物联网设备。</p><h6 id="可靠的消息传递"><a href="#可靠的消息传递" class="headerlink" title="可靠的消息传递"></a>可靠的消息传递</h6><p>消息传递的可靠性对于许多物联网用例都很重要。这就是为什么 MQTT 有 3 个定义的服务质量级别：0 - 最多一次，1 - 至少一次，2 - 恰好一次</p><h6 id="支持不可靠的网络"><a href="#支持不可靠的网络" class="headerlink" title="支持不可靠的网络"></a>支持不可靠的网络</h6><p>许多物联网设备通过不可靠的蜂窝网络连接。MQTT 对持久会话的支持减少了将客户端与代理重新连接的时间。</p><h6 id="已启用安全性"><a href="#已启用安全性" class="headerlink" title="已启用安全性"></a>已启用安全性</h6><p>MQTT 使使用 TLS 加密消息和使用现代身份验证协议（如 OAuth）对客户端进行身份验证变得容易。</p><h4 id="MQTT包协议"><a href="#MQTT包协议" class="headerlink" title="MQTT包协议"></a>MQTT包协议</h4><p>MQTT 控制数据包的结构：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/ESP32/ESP32wifi%E5%85%A5%E9%97%A8/img30121011.png"><br>········<br>其余具体见规范文档：<a href="mqtt-v5.0.pdf">MQTT协议：mqtt-v5.0.pdf)</a></p><h4 id="MQTT客户端"><a href="#MQTT客户端" class="headerlink" title="MQTT客户端"></a>MQTT客户端</h4><p>示例代码：<code>C:\Espressif\frameworks\esp-idf-v4.4.3\examples\protocols\mqtt\tcp </code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* MQTT (over TCP) Example</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   This example code is in the Public Domain (or CC0 licensed, at your option.)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Unless required by applicable law or agreed to in writing, this</span><br><span class="hljs-comment">   software is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR</span><br><span class="hljs-comment">   CONDITIONS OF ANY KIND, either express or implied.</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_wifi.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_system.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;nvs_flash.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_event.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_netif.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;protocol_examples_common.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/FreeRTOS.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/task.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/semphr.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/queue.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;freertos/timers.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/sockets.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/dns.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;lwip/netdb.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;esp_log.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mqtt_client.h&quot;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *TAG = <span class="hljs-string">&quot;MQTT_EXAMPLE&quot;</span>;<br><span class="hljs-comment">//--------------------------------------------------------------、</span><br><span class="hljs-comment">//定时器</span><br><span class="hljs-type">static</span> <span class="hljs-type">timer_handle_t</span> mqtt_timer;<br><span class="hljs-type">int</span> iID = <span class="hljs-number">0</span>;<br><span class="hljs-type">esp_mqtt_client_handle_t</span> client=<span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//定时器回调函数</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_timer_callback</span><span class="hljs-params">(<span class="hljs-type">timer_handle_t</span> xTimer)</span>;<br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT Timer callback&quot;</span>);<br>    <span class="hljs-type">char</span> str_arr[<span class="hljs-number">15</span>]=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-built_in">sprintf</span>(str_arr, <span class="hljs-string">&quot;data %d&quot;</span>, iID);<br>    iID++;<br>    <span class="hljs-keyword">if</span>(IID &gt; <span class="hljs-number">10</span>)<br>    &#123;<br>        iID = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(client!=<span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-type">int</span> msg_id=esp_mqtt_client_publish(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>, str_arr, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;sent publish successful, msg_id=%d&quot;</span>, msg_id);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT client is NULL&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//--------------------------------------------------------------</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">log_error_if_nonzero</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *message, <span class="hljs-type">int</span> error_code)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (error_code != <span class="hljs-number">0</span>) &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Last error %s: 0x%x&quot;</span>, message, error_code);<br>        <br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * @brief Event handler registered to receive MQTT events</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  This function is called by the MQTT client event loop.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @param handler_args user data registered to the event.</span><br><span class="hljs-comment"> * @param base Event base for the handler(always MQTT Base in this example).</span><br><span class="hljs-comment"> * @param event_id The id for the received event.</span><br><span class="hljs-comment"> * @param event_data The data for the event, esp_mqtt_event_handle_t.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span> *handler_args, <span class="hljs-type">esp_event_base_t</span> base, <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span> *event_data)</span><br>&#123;<br>    ESP_LOGD(TAG, <span class="hljs-string">&quot;Event dispatched from event loop base=%s, event_id=%d&quot;</span>, base, event_id);<br>    <span class="hljs-type">esp_mqtt_event_handle_t</span> event = event_data;<br>    client = event-&gt;client;<br>    <span class="hljs-type">int</span> msg_id;<br>    <span class="hljs-keyword">switch</span> ((<span class="hljs-type">esp_mqtt_event_id_t</span>)event_id) &#123;<br>    <span class="hljs-keyword">case</span> MQTT_EVENT_CONNECTED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_CONNECTED&quot;</span>);<br>        msg_id = esp_mqtt_client_subscribe(client, <span class="hljs-string">&quot;/topic/qos1&quot;</span>, <span class="hljs-number">0</span>);<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;sent subscribe successful, msg_id=%d&quot;</span>, msg_id);<br><br>        mqtt_timer = xTimerCreate(<span class="hljs-string">&quot;mqtt_timer&quot;</span>, pdMS_TO_TICKS(<span class="hljs-number">5000</span>), pdTRUE, <span class="hljs-literal">NULL</span>, mqtt_timer_callback);<br>        timter_start(mqtt_timer, portMAX_DELAY);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> MQTT_EVENT_DISCONNECTED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_DISCONNECTED&quot;</span>);<br>        timter_stop(mqtt_timer, portMAX_DELAY);<br>        <span class="hljs-keyword">break</span>;<br><br>    <span class="hljs-keyword">case</span> MQTT_EVENT_SUBSCRIBED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_SUBSCRIBED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br>        <span class="hljs-comment">//msg_id = esp_mqtt_client_publish(client, &quot;/topic/qos0&quot;, &quot;data&quot;, 0, 0, 0);</span><br>        <span class="hljs-comment">//ESP_LOGI(TAG, &quot;sent publish successful, msg_id=%d&quot;, msg_id);</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> MQTT_EVENT_UNSUBSCRIBED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_UNSUBSCRIBED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> MQTT_EVENT_PUBLISHED:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_PUBLISHED, msg_id=%d&quot;</span>, event-&gt;msg_id);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> MQTT_EVENT_DATA:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_DATA&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;TOPIC=%.*s\r\n&quot;</span>, event-&gt;topic_len, event-&gt;topic);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;DATA=%.*s\r\n&quot;</span>, event-&gt;data_len, event-&gt;data);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> MQTT_EVENT_ERROR:<br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;MQTT_EVENT_ERROR&quot;</span>);<br>        <span class="hljs-keyword">if</span> (event-&gt;error_handle-&gt;error_type == MQTT_ERROR_TYPE_TCP_TRANSPORT) &#123;<br>            log_error_if_nonzero(<span class="hljs-string">&quot;reported from esp-tls&quot;</span>, event-&gt;error_handle-&gt;esp_tls_last_esp_err);<br>            log_error_if_nonzero(<span class="hljs-string">&quot;reported from tls stack&quot;</span>, event-&gt;error_handle-&gt;esp_tls_stack_err);<br>            log_error_if_nonzero(<span class="hljs-string">&quot;captured as transport&#x27;s socket errno&quot;</span>,  event-&gt;error_handle-&gt;esp_transport_sock_errno);<br>            ESP_LOGI(TAG, <span class="hljs-string">&quot;Last errno string (%s)&quot;</span>, strerror(event-&gt;error_handle-&gt;esp_transport_sock_errno));<br><br>        &#125;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:    <br>        ESP_LOGI(TAG, <span class="hljs-string">&quot;Other event id:%d&quot;</span>, event-&gt;event_id);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title function_">mqtt_app_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">esp_mqtt_client_config_t</span> mqtt_cfg = &#123;<br>        .uri = CONFIG_BROKER_URL,<br>    &#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> CONFIG_BROKER_URL_FROM_STDIN</span><br>    <span class="hljs-type">char</span> line[<span class="hljs-number">128</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(mqtt_cfg.uri, <span class="hljs-string">&quot;FROM_STDIN&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter url of mqtt broker\n&quot;</span>);<br>        <span class="hljs-keyword">while</span> (count &lt; <span class="hljs-number">128</span>) &#123;<br>            <span class="hljs-type">int</span> c = fgetc(<span class="hljs-built_in">stdin</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\n&#x27;</span>) &#123;<br>                line[count] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c &gt; <span class="hljs-number">0</span> &amp;&amp; c &lt; <span class="hljs-number">127</span>) &#123;<br>                line[count] = c;<br>                ++count;<br>            &#125;<br>            vTaskDelay(<span class="hljs-number">10</span> / portTICK_PERIOD_MS);<br>        &#125;<br>        mqtt_cfg.uri = line;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Broker url: %s\n&quot;</span>, line);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ESP_LOGE(TAG, <span class="hljs-string">&quot;Configuration mismatch: wrong broker url&quot;</span>);<br>        <span class="hljs-built_in">abort</span>();<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* CONFIG_BROKER_URL_FROM_STDIN */</span></span><br><br>    <span class="hljs-type">esp_mqtt_client_handle_t</span> client = esp_mqtt_client_init(&amp;mqtt_cfg);<br>    <span class="hljs-comment">/* The last argument may be used to pass data to the event handler, in this example mqtt_event_handler */</span><br>    esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, <span class="hljs-literal">NULL</span>);<br>    esp_mqtt_client_start(client);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">app_main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;[APP] Startup..&quot;</span>);<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;[APP] Free memory: %d bytes&quot;</span>, esp_get_free_heap_size());<br>    ESP_LOGI(TAG, <span class="hljs-string">&quot;[APP] IDF version: %s&quot;</span>, esp_get_idf_version());<br><br>    esp_log_level_set(<span class="hljs-string">&quot;*&quot;</span>, ESP_LOG_INFO);<br>    esp_log_level_set(<span class="hljs-string">&quot;MQTT_CLIENT&quot;</span>, ESP_LOG_VERBOSE);<br>    esp_log_level_set(<span class="hljs-string">&quot;MQTT_EXAMPLE&quot;</span>, ESP_LOG_VERBOSE);<br>    esp_log_level_set(<span class="hljs-string">&quot;TRANSPORT_BASE&quot;</span>, ESP_LOG_VERBOSE);<br>    esp_log_level_set(<span class="hljs-string">&quot;esp-tls&quot;</span>, ESP_LOG_VERBOSE);<br>    esp_log_level_set(<span class="hljs-string">&quot;TRANSPORT&quot;</span>, ESP_LOG_VERBOSE);<br>    esp_log_level_set(<span class="hljs-string">&quot;OUTBOX&quot;</span>, ESP_LOG_VERBOSE);<br><br>    ESP_ERROR_CHECK(nvs_flash_init());<br>    ESP_ERROR_CHECK(esp_netif_init());<br>    ESP_ERROR_CHECK(esp_event_loop_create_default());<br><br>    <span class="hljs-comment">/* This helper function configures Wi-Fi or Ethernet, as selected in menuconfig.</span><br><span class="hljs-comment">     * Read &quot;Establishing Wi-Fi or Ethernet Connection&quot; section in</span><br><span class="hljs-comment">     * examples/protocols/README.md for more information about this function.</span><br><span class="hljs-comment">     */</span><br>    ESP_ERROR_CHECK(example_connect());<br><br>    mqtt_app_start();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这是一个 ESP32 的 MQTT 示例程序，用于通过 TCP 连接到 MQTT 代理。程序实现了连接、订阅、发布等 MQTT 协议常用功能，并且使用了定时器来定时发送消息。</p><p>程序的主要框架如下：</p><ul><li>初始化日志记录级别</li><li>初始化 NVS 文件系统、网络接口、事件循环</li><li>连接 Wi-Fi 或者以太网</li><li>启动 MQTT 客户端</li><li>注册 MQTT 事件处理回调函数</li><li>在 MQTT_CONNECTED 事件中创建并启动定时器</li><li>当接收到其他 MQTT 事件时，做相应的处理（如订阅成功、接收到数据等）</li></ul><p>其中，定时器回调函数 mqtt_timer_callback 每隔 5 秒会向 &#x2F;topic&#x2F;qos1 主题发布一条消息，消息内容为 “data iID”，其中 iID 是递增的计数器，每发送 10 条消息后归零重新开始。如果 MQTT 客户端未连接则不进行操作。</p><h3 id="7-ESP-NOW协议"><a href="#7-ESP-NOW协议" class="headerlink" title="7.ESP-NOW协议"></a>7.ESP-NOW协议</h3><h4 id="ESP-NOW介绍"><a href="#ESP-NOW介绍" class="headerlink" title="ESP-NOW介绍"></a>ESP-NOW介绍</h4><p>ESP-NOW 是一种由乐鑫公司定义的无连接 Wi-Fi 通信协议。在 ESP-NOW 中，应用程序数据被封装在各个供应商的动作帧中，然后在无连接的情况下，从一个 Wi-Fi 设备传输到另一个 Wi-Fi 设备。 CTR 与 CBC-MAC 协议 (CCMP) 可用来保护动作帧的安全。ESP-NOW 广泛应用于智能照明、远程控制、传感器等领域。</p><h4 id="ESP-NOW帧格式"><a href="#ESP-NOW帧格式" class="headerlink" title="ESP-NOW帧格式"></a>ESP-NOW帧格式</h4><p>ESP-NOW 使用各个供应商的动作帧传输数据，默认比特率为 1 Mbps。各个供应商的动作帧格式为：</p><table><thead><tr><th>MAC 报头</th><th>分类代码</th><th>组织标识符</th><th>随机值</th><th>供应商特定内容</th><th>FCS</th></tr></thead><tbody><tr><td>24 字节</td><td>1 字节</td><td>3 字节</td><td>4 字节</td><td>7~257 字节</td><td>4 字节</td></tr></tbody></table><ul><li>分类代码：分类代码字段可用于指示各个供应商的类别（比如 127）。</li><li>组织标识符：组织标识符包含一个唯一标识符 (比如 0x18fe34)，为乐鑫指定的 MAC 地址的前三个字节。</li><li>随机值：防止重放攻击。</li><li>供应商特定内容：供应商特定内容包含供应商特定字段，如下所示：</li></ul><table><thead><tr><th>元素 ID</th><th>长度</th><th>组织标识符</th><th>类型</th><th>版本</th><th>正文</th></tr></thead><tbody><tr><td>1 字节</td><td>1 字节</td><td>3 字节</td><td>1 字节</td><td>1 字节</td><td>0～250 字节</td></tr></tbody></table><ul><li><p>元素 ID：元素 ID 字段可用于指示特定于供应商的元素。</p></li><li><p>长度：长度是组织标识符、类型、版本和正文的总长度。</p></li><li><p>组织标识符：组织标识符包含一个唯一标识符 (比如 0x18fe34)，为乐鑫指定的 MAC 地址的前三个字节。</p></li><li><p>类型：类型字段设置为 4，代表 ESP-NOW。</p></li><li><p>版本：版本字段设置为 ESP-NOW 的版本。</p></li><li><p>正文：正文包含 ESP-NOW 数据。</p></li></ul><p>由于 ESP-NOW 是无连接的，因此 MAC 报头与标准帧略有不同。FrameControl 字段的 FromDS 和 ToDS 位均为 0。第一个地址字段用于配置目标地址。第二个地址字段用于配置源地址。第三个地址字段用于配置广播地址 (0xff:0xff:0xff:0xff:0xff:0xff)。</p><h4 id="ESP-NOW发送数据"><a href="#ESP-NOW发送数据" class="headerlink" title="ESP-NOW发送数据"></a>ESP-NOW发送数据</h4><h4 id="ESP-NOW接收数据"><a href="#ESP-NOW接收数据" class="headerlink" title="ESP-NOW接收数据"></a>ESP-NOW接收数据</h4><h4 id="ESP-NOW广播数据"><a href="#ESP-NOW广播数据" class="headerlink" title="ESP-NOW广播数据"></a>ESP-NOW广播数据</h4><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>ESP32</category>
      
      <category>WIFI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ESP32</tag>
      
      <tag>MCU</tag>
      
      <tag>WIFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STM32F1系列移植freertos</title>
    <link href="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/"/>
    <url>/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/</url>
    
    <content type="html"><![CDATA[<p>FreeRTOS 是一个可裁剪的小型 RTOS 系统，其特点包括：</p><p>● FreeRTOS 的内核支持抢占式，合作式和时间片调度。</p><p>● SafeRTOS 衍生自 FreeRTOS，SafeRTOS 在代码完整性上相比 FreeRTOS 更胜一筹。</p><p>● 提供了一个用于低功耗的 Tickless 模式。</p><p>● 系统的组件在创建时可以选择动态或者静态的 RAM，比如任务、消息队列、信号量、 软件定时器等等。</p><p>● 已经在超过 30 种架构的芯片上进行了移植。</p><p>● FreeRTOS-MPU 支持 Corex-M 系列中的 MPU 单元，如 STM32F103。</p><p>● FreeRTOS 系统简单、小巧、易用，通常情况下内核占用 4k-9k 字节的空间。</p><p>● 高可移植性，代码主要 C 语言编写。</p><p>● 支持实时任务和协程(co-routines 也有称为合作式、协同程序，本教程均成为协程)。</p><p>● 任务与任务、任务与中断之间可以使用任务通知、消息队列、二值信号量、数值型信 号量、递归互斥信号量和互斥信号量进行通信和同步。</p><p>● 创新的事件组(或者事件标志)。</p><p>● 具有优先级继承特性的互斥信号量。</p><p>● 高效的软件定时器。</p><p>● 强大的跟踪执行功能。</p><p>● 堆栈溢出检测功能。</p><p>● 任务数量不限。</p><p>● 任务优先级不限。</p><span id="more"></span><h1 id="STM32F1系列移植freertos"><a href="#STM32F1系列移植freertos" class="headerlink" title="STM32F1系列移植freertos"></a>STM32F1系列移植freertos</h1><h2 id="以STM32F103ZET6为例："><a href="#以STM32F103ZET6为例：" class="headerlink" title="以STM32F103ZET6为例："></a>以STM32F103ZET6为例：</h2><h3 id="1-准备空白工程"><a href="#1-准备空白工程" class="headerlink" title="1. 准备空白工程"></a>1. 准备空白工程</h3><p>这里使用STM32cudemx生成示例代码（点灯代码）：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529182242.png"><br>生成代码如下：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529182408.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529182424.png"></p><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>由于<a href="https://so.csdn.net/so/search?q=FreeRTOS&spm=1001.2101.3001.7020">FreeRTOS</a>使用系统嘀嗒定时器当作心跳，HAL库也使用了这个定时器当作超时计数用，FreeRTOS和HAL库不能同时使用SysTick定时器，所在在这里将HAL库的定时器改为其他的定时器，这里改成了定时器4：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529202102.png"></p><p>配置中断，注意这里一定要选择组4，也就是全部为抢占优先级：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529202123.png"></p><h3 id="2-准备freertos源码"><a href="#2-准备freertos源码" class="headerlink" title="2. 准备freertos源码"></a>2. 准备freertos源码</h3><p>去freertos官网下载源码：<a href="https://www.freertos.org/zh-cn-cmn-s/a00104.html">https://www.freertos.org/zh-cn-cmn-s/a00104.html</a><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529183846.png"><br>内容如下：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529184132.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529184333.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529184422.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529184457.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529184524.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529184734.png"></p><h3 id="3-进行代码裁剪："><a href="#3-进行代码裁剪：" class="headerlink" title="3.进行代码裁剪："></a>3.进行代码裁剪：</h3><p>删除不必要的文件：<br><strong>portable文件夹：</strong><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529185245.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529185516.png"><br><strong>MemMang文件夹：</strong><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529185416.png"><br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529185501.png"></p><h3 id="4-将文件添加到工程："><a href="#4-将文件添加到工程：" class="headerlink" title="4. 将文件添加到工程："></a>4. 将文件添加到工程：</h3><p>在项目里新建文件夹：根目录&#x2F;Middlewares &#x2F;FreeRTOS<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529185926.png"><br>将 FreeRTOS  内核源码的 Source 文件夹下的所有文件添加到工程的 FreeRTOS 文件夹中<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529190714.png"></p><p>在工程分组里添加新的分组，分 别 为 Middlewares&#x2F;FreeRTOS_CORE 和  Middlewares&#x2F;FreeRTOS_PORT，如下图所示：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529190427.png"><br>Middlewares&#x2F;FreeRTOS_CORE 分组用于存放 FreeRTOS 的内核 C 源码文件， 将 FreeRTOS 目录下所有的 FreeRTOS 的内核 C 源文件添加到  Middlewares&#x2F;FreeRTOS_CORE 分组中。  </p><p>Middlewares&#x2F;FreeRTOS_PORT 分组用于存放 FreeRTOS 内核的移植文件，需要添加两个文件到这个分组，分别为 heap_x.c 和 port.c。<br>首先是 heap_x.c， 在路径 FreeRTOS&#x2F;portable&#x2F;MemMang 下有五个 C 源文件，这五个 C 源文  件对应了五种 FreeRTOS 提供的内存管理算法，读者在进行 FreeRTOS 移植的时候可以根据需  求选择合适的方法，具体这五种内存管理的算法，在后续 FreeRTOS 内存管理章节会具体分析，  这里就先使用 heap_4.c，将 heap_4.c 添加到 Middlewares&#x2F;FreeRTOS_PORT 分组中。<br>接着是 port.c， port.c 是 FreeRTOS 这个软件与 MCU 这个硬件连接的桥梁，因此对于 STM32 系列不同的开发板，所使用的 port.c 文件是不同的。 port.c 文件的路径在  FreeRTOS&#x2F;portable&#x2F;RVDS 下。进入到 FreeRTOS&#x2F;portable&#x2F;RVDS，可以看到 FreeRTOS 针对不同  的 MCU 提供了不同的 port.c 文件，具体STM32 系列开发板与不同 port.c 的对应关 系如下表所示：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529190854.png"><br>将所有 FreeRTOS 相关的所需文件添加到工程后，如下图所示：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529191013.png"></p><h3 id="5-添加头文件路径"><a href="#5-添加头文件路径" class="headerlink" title="5.添加头文件路径"></a>5.添加头文件路径</h3><p><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529191219.png"></p><h3 id="6-添加并修改-FreeRTOSConfig-h-文件"><a href="#6-添加并修改-FreeRTOSConfig-h-文件" class="headerlink" title="6.添加并修改 FreeRTOSConfig.h 文件"></a>6.添加并修改 FreeRTOSConfig.h 文件</h3><p>FreeRTOSConfig.h 是 FreeRTOS 操作系统的配置文件， FreeRTOS 操作系统是可裁剪的，用  户可以根据需求对 FreeRTOS 进行裁剪，裁剪掉不需要用到的 FreeRTOS 功能.</p><p>新建空白的FreeRTOSConfig.h到core&#x2F;inc文件夹；<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529192131.png"></p><p><strong>修改FreeRTOSConfig.h</strong>：<br>添加代码：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-comment">#ifndef FREERTOS_CONFIG_H__</span><br><span class="hljs-comment">#define FREERTOS_CONFIG_H__</span><br><br>/*<br> * 关于本文件宏的详细说明可参考：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/zhzht19861011/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">50134883</span><span class="hljs-comment">#</span><br> */<br><br><span class="hljs-regexp">//</span> 设置为<span class="hljs-number">1</span>使用抢占式，为<span class="hljs-number">0</span>使用时间片轮转调度。<br><span class="hljs-comment">#define configUSE_PREEMPTION                    1</span><br><br><span class="hljs-regexp">//</span> 设置为<span class="hljs-number">1</span>使能低功耗tickless模式，为<span class="hljs-number">0</span>保持系统节拍（tick）中断一直运行。<br><span class="hljs-comment">#define configUSE_TICKLESS_IDLE                 0</span><br><br><span class="hljs-regexp">//</span> 系统时钟主频<br><span class="hljs-comment">#define configCPU_CLOCK_HZ                      72000000</span><br><br><span class="hljs-regexp">//</span> 系统节拍中断的频率，即<span class="hljs-number">1</span>s进中断的次数，配置为<span class="hljs-number">1000</span>就是一秒进<span class="hljs-number">1000</span>次中断，系统节拍就是<span class="hljs-number">1</span>s。<br><span class="hljs-comment">#define configTICK_RATE_HZ                      1000</span><br><br><span class="hljs-regexp">//</span> 任务最大优先级，对于STM32来说最大不要超过<span class="hljs-number">32</span><br><span class="hljs-comment">#define configMAX_PRIORITIES                    32</span><br><br><span class="hljs-regexp">//</span> 任务最小栈大小<br><span class="hljs-comment">#define configMINIMAL_STACK_SIZE                64</span><br><br><span class="hljs-regexp">//</span> FreeRTOR堆空间大小<br><span class="hljs-comment">#define configTOTAL_HEAP_SIZE                   8192</span><br><br><span class="hljs-regexp">//</span> 任务名称最大长度<br><span class="hljs-comment">#define configMAX_TASK_NAME_LEN                 16</span><br><br><span class="hljs-regexp">//</span> 系统节拍计数器的变量类型，即定义portTickType是表示<span class="hljs-number">16</span>位变量还是<span class="hljs-number">32</span>位变量。<br><span class="hljs-comment">#define configUSE_16_BIT_TICKS                  0</span><br><br><span class="hljs-regexp">//</span> 设置为<span class="hljs-number">1</span>允许任务调度，为<span class="hljs-number">0</span>不允许(时间片耗尽才让出CPU使用权)，该参数抢占式方式下才生效<br><span class="hljs-comment">#define configIDLE_SHOULD_YIELD                 1</span><br><br><span class="hljs-regexp">//</span> 设置是否使用互斥量<br><span class="hljs-comment">#define configUSE_MUTEXES                       1</span><br><br><span class="hljs-regexp">//</span> 设置是否使用递归互斥量<br><span class="hljs-comment">#define configUSE_RECURSIVE_MUTEXES             0</span><br><br><span class="hljs-regexp">//</span> 设置是否使用计数信号量<br><span class="hljs-comment">#define configUSE_COUNTING_SEMAPHORES           0</span><br><br><span class="hljs-regexp">//</span> 设置可以记录的队列和信号量的最大数目<br><span class="hljs-comment">#define configQUEUE_REGISTRY_SIZE               10</span><br><br><span class="hljs-regexp">//</span> 是否使用空闲钩子函数<br><span class="hljs-comment">#define configUSE_IDLE_HOOK                     0</span><br><br><span class="hljs-regexp">//</span> 是否使用TICK嘀嗒钩子函数<br><span class="hljs-comment">#define configUSE_TICK_HOOK                     0</span><br><br><span class="hljs-regexp">//</span> 是否使用栈溢出检查<br><span class="hljs-comment">#define configCHECK_FOR_STACK_OVERFLOW          0</span><br><br><span class="hljs-regexp">//</span> 是否使用内存申请失败钩子函数<br><span class="hljs-comment">#define configUSE_MALLOC_FAILED_HOOK            0</span><br><br><span class="hljs-regexp">//</span> 是否使用软件定时器<br><span class="hljs-comment">#define configUSE_TIMERS                        1</span><br><br><span class="hljs-regexp">//</span> 设置软件定时器服务/守护进程的优先级<br><span class="hljs-comment">#define configTIMER_TASK_PRIORITY               3</span><br><br><span class="hljs-regexp">//</span> 设置软件定时器命令队列的长度<br><span class="hljs-comment">#define configTIMER_QUEUE_LENGTH                10</span><br><br><span class="hljs-regexp">//</span> 设置软件定时器服务/守护进程任务的堆栈深度<br><span class="hljs-comment">#define configTIMER_TASK_STACK_DEPTH            configMINIMAL_STACK_SIZE</span><br><br><span class="hljs-regexp">//</span> STM32的最低优先级<br><span class="hljs-comment">#define configLIBRARY_LOWEST_INTERRUPT_PRIORITY   15</span><br><br><span class="hljs-regexp">//</span> 能够在中断服务函数中安全调用FreeRTOS API的中断最低优先级<br><span class="hljs-comment">#define configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY 1</span><br><br><span class="hljs-comment">#define configKERNEL_INTERRUPT_PRIORITY ( configLIBRARY_LOWEST_INTERRUPT_PRIORITY &lt;&lt; 4 )</span><br><span class="hljs-comment">#define configMAX_SYSCALL_INTERRUPT_PRIORITY ( configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY &lt;&lt; 4 )</span><br><br><br><span class="hljs-regexp">//</span> 将以下定义设置为<span class="hljs-number">1</span>以包含API函数，或设置为<span class="hljs-number">0</span>排除API函数<br><span class="hljs-comment">#define INCLUDE_vTaskPrioritySet                1</span><br><span class="hljs-comment">#define INCLUDE_uxTaskPriorityGet               1</span><br><span class="hljs-comment">#define INCLUDE_vTaskDelete                     1</span><br><span class="hljs-comment">#define INCLUDE_vTaskSuspend                    1</span><br><span class="hljs-comment">#define INCLUDE_xResumeFromISR                  1</span><br><span class="hljs-comment">#define INCLUDE_vTaskDelayUntil                 1</span><br><span class="hljs-comment">#define INCLUDE_vTaskDelay                      1</span><br><span class="hljs-comment">#define INCLUDE_xTaskGetSchedulerState          1</span><br><span class="hljs-comment">#define INCLUDE_xTaskGetCurrentTaskHandle       1</span><br><span class="hljs-comment">#define INCLUDE_uxTaskGetStackHighWaterMark     0</span><br><span class="hljs-comment">#define INCLUDE_xTaskGetIdleTaskHandle          0</span><br><span class="hljs-comment">#define INCLUDE_xTimerGetTimerDaemonTaskHandle  0</span><br><span class="hljs-comment">#define INCLUDE_pcTaskGetTaskName               0</span><br><span class="hljs-comment">#define INCLUDE_eTaskGetState                   0</span><br><span class="hljs-comment">#define INCLUDE_xEventGroupSetBitFromISR        1</span><br><span class="hljs-comment">#define INCLUDE_xTimerPendFunctionCall          0</span><br><br><span class="hljs-comment">#endif  /* FREERTOS_CONFIG_H__ */</span><br><br><br><br><br></code></pre></td></tr></table></figure><h3 id="7-修改-stm32f1xx-it-c文件"><a href="#7-修改-stm32f1xx-it-c文件" class="headerlink" title="7.修改 stm32f1xx_it.c文件"></a>7.修改 stm32f1xx_it.c文件</h3><p>打开<code>stm32f1xx_it.c</code>文件，在头部添加FreeRTOS的三个函数导入：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">xPortPendSVHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">xPortSysTickHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">void</span> <span class="hljs-title function_">vPortSVCHandler</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529201451.png"><br>在函数<code>SVC_Handler</code>中添加函数调用：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529201504.png"><br>在函数<code>PendSV_Handler</code>中添加函数调用：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529201514.png"><br>在函数<code>SysTick_Handler</code>中添加函数调用：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529201526.png"></p><h3 id="8-建立工程进行测试"><a href="#8-建立工程进行测试" class="headerlink" title="8.建立工程进行测试"></a>8.建立工程进行测试</h3><p>main.c里添加头文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FreeRTOSConfig.h&quot;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FreeRTOS.h&quot;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;task.h&quot;</span></span><br></code></pre></td></tr></table></figure><p>新建两个点灯任务：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">LED1Tesk</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">//功能</span><br>        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);<br>        vTaskDelay(<span class="hljs-number">1000</span>);<br>        HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET); <br>        vTaskDelay(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">LED2Tesk</span><span class="hljs-params">(<span class="hljs-type">void</span> *p)</span><br>&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-comment">//功能</span><br>        HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_SET);<br>        vTaskDelay(<span class="hljs-number">500</span>);<br>        HAL_GPIO_WritePin(GPIOE,GPIO_PIN_5,GPIO_PIN_RESET); <br>        vTaskDelay(<span class="hljs-number">500</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>开启任务：<br><img src="/2023/06/06/4.%E7%A1%AC%E4%BB%B6%E7%9B%B8%E5%85%B3/MCU/STM32/STM32F1%E7%B3%BB%E5%88%97%E7%A7%BB%E6%A4%8Dfreertos/0529201902.png"><br>两个灯交替闪烁，移植成功！</p><p>总结：移植FreeRTOS还是相对简单的，主要是配置文件<code>FreeRTOSConfig.h</code>的配置，每个宏定义所代表的意思需要好好查阅！</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>FreeRTOS之在STM32F103移植<br><a href="https://blog.csdn.net/m0_37895576/article/details/120435482">https://blog.csdn.net/m0_37895576/article/details/120435482</a></p><p>STM32CubeMX | STM32使用HAL库手动移植FreeRTOS10.4.1<br><a href="https://blog.csdn.net/qq153471503/article/details/108999523">https://blog.csdn.net/qq153471503/article/details/108999523</a></p>]]></content>
    
    
    <categories>
      
      <category>电子信息硬件相关</category>
      
      <category>MCU</category>
      
      <category>STM32</category>
      
      <category>freeRTOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>MCU</tag>
      
      <tag>freeRTOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记 (linux基础命令)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/linux/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/linux/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><span id="more"></span><h1 id="Linux基础命令-linux"><a href="#Linux基础命令-linux" class="headerlink" title="Linux基础命令 #linux"></a>Linux基础命令 #linux</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png" alt="image-20221027214128453"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="96-反引号"><a href="#96-反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png" alt="image-20221027215841573"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png" alt="image-20221027215846581"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png" alt="image-20221027215849668"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png" alt="image-20221027215858967"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png" alt="image-20221027220005610"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png" alt="image-20221027220009949"></p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>linux</category>
      
      <category>linux基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux学习笔记 (Linux常用操作)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/linux/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/linux/Linux%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><span id="more"></span><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png" alt="image-20221027220514640"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png" alt="image-20221027220525625"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png" alt="image-20221027220429831"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png" alt="image-20221027220449312"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">TYPE=&quot;Ethernet&quot;<br>PROXY_METHOD=&quot;none&quot;<br>BROWSER_ONLY=&quot;no&quot;<br>BOOTPROTO=&quot;static&quot;# 改为static，固定IP<br>DEFROUTE=&quot;yes&quot;<br>IPV4_FAILURE_FATAL=&quot;no&quot;<br>IPV6INIT=&quot;yes&quot;<br>IPV6_AUTOCONF=&quot;yes&quot;<br>IPV6_DEFROUTE=&quot;yes&quot;<br>IPV6_FAILURE_FATAL=&quot;no&quot;<br>IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;<br>NAME=&quot;ens33&quot;<br>UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;<br>DEVICE=&quot;ens33&quot;<br>ONBOOT=&quot;yes&quot;<br>IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围<br>NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0<br>GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致<br>DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可<br></code></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png" alt="image-20221027221303037"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png" alt="image-20221027221241123"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png" alt="image-20221027221129782"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png" alt="image-20221027221148964"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png" alt="image-20221027221210518"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png" alt="image-20221027221340729"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png" alt="image-20221027221354137"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png" alt="image-20221027221413787"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png" alt="image-20221027221439990"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png" alt="image-20221027221514237"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png" alt="image-20221027221545822"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png" alt="image-20221027221939899"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png" alt="image-20221027222021619"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png" alt="image-20221027222035337"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">itheima ALL=(ALL)       NOPASSWD: ALL<br></code></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png" alt="image-20221027222157276"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png" alt="image-20221027222326192"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png" alt="image-20221027222354498"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png" alt="image-20221027222446514"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png" alt="image-20221027222512274"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>linux</category>
      
      <category>linux基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js笔记 (1.node.js基础)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/node.js/01.Nodejs%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/node.js/01.Nodejs%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="初识-Nodejs"><a href="#初识-Nodejs" class="headerlink" title="初识 Nodejs"></a>初识 Nodejs</h2><blockquote><p>Node.js® is a JavaScript runtime built on Chrome’s V8 JavaScript engine</p><p>Node.js® 是一个基于 Chrome V8 引擎 的 JavaScript 运行时环境</p></blockquote><ul><li>基于 <a href="http://www.expressjs.com.cn/">Express 框架 (opens new window)</a>，可以快速构建 Web 应用</li><li>基于 <a href="https://electronjs.org/">Electron 框架 (opens new window)</a>，可以构建跨平台的桌面应用</li><li>基于 <a href="http://restify.com/">restify 框架 (opens new window)</a>，可以快速构建 API 接口项目</li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</li></ul><h2 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer 缓冲区"></a>Buffer 缓冲区</h2><blockquote><p><a href="http://nodejs.cn/api/buffer.html">Buffer 缓冲区文档(opens new window)</a></p></blockquote><ul><li>Buffer 的结构与数组类似，操作方法也与数组类似</li><li>数组不能存储二进制文件，Buffer 是专门存储二进制数据的</li><li>Buffer 存储的是二进制数据，显示时以 16 进制的形式显示</li><li>Buffer 每一个元素范围是 00<del>ff，即 0</del>255、00000000~11111111</li><li>每一个元素占用一个字节内存</li><li>Buffer 是对底层内存的直接操作，因此大小一旦确定就不能修改</li></ul><p>Buffer 常用方法：</p><ul><li><code>Buffer.from(str[, encoding])</code>：将一个字符串转换为 Buffer</li><li><code>Buffer.alloc(size)</code>：创建指定大小的 Buffer</li><li><code>Buffer.alloUnsafe(size)</code>：创建指定大小的 Buffer，可能包含敏感数据（分配内存时不会清除内存残留的数据）</li><li><code>buf.toString()</code>：将 Buffer 数据转为字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;Hello前端&#x27;</span><br><br><span class="hljs-keyword">var</span> buf = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">from</span>(str)<br><br><span class="hljs-comment">// 占用内存的大小，一个汉字3字节 13</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf.<span class="hljs-property">length</span>)<br><span class="hljs-comment">// 字符串的长度 7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>)<br><span class="hljs-comment">// 8进制输出第一个元素 145</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf[<span class="hljs-number">1</span>].<span class="hljs-title function_">toString</span>(<span class="hljs-number">8</span>))<br><br><span class="hljs-comment">//创建一个10个字节的buffer</span><br><span class="hljs-keyword">var</span> buf2 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">alloc</span>(<span class="hljs-number">10</span>)<br><span class="hljs-comment">//通过索引，来操作buf中的元素</span><br>buf2[<span class="hljs-number">0</span>] = <span class="hljs-number">88</span><br>buf2[<span class="hljs-number">1</span>] = <span class="hljs-number">255</span><br>buf2[<span class="hljs-number">2</span>] = <span class="hljs-number">0xaa</span><br>buf2[<span class="hljs-number">3</span>] = <span class="hljs-number">255</span><br><br><span class="hljs-keyword">var</span> buf3 = <span class="hljs-title class_">Buffer</span>.<span class="hljs-title function_">allocUnsafe</span>(<span class="hljs-number">10</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(buf3)<br></code></pre></td></tr></table></figure><h2 id="fs-文件系统模块"><a href="#fs-文件系统模块" class="headerlink" title="fs 文件系统模块"></a>fs 文件系统模块</h2><ul><li>fs 模块中所有的操作都有两种形式可供选择:同步和异步</li><li>同步文件系统会阻塞程序的执行，也就是除非操作完毕，否则不会向下执行代码</li><li>异步文件系统不会阻塞程序的执行，而是在操作完成时，通过回调函数将结果返回</li><li>实际开发很少用同步方式，因此只介绍异步方式</li></ul><p>打开模式：</p><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读取文件，文件不存在抛异常</td></tr><tr><td>r+</td><td>读写文件，文件不存在抛异常</td></tr><tr><td>rs</td><td>同步模式下打开文件用于读取</td></tr><tr><td>rs+</td><td>同步模式下打开文件用于读写</td></tr><tr><td>w</td><td>写文件，不存在则创建，存在则覆盖原有内容</td></tr><tr><td>wx</td><td>写文件，文件存在打开失败</td></tr><tr><td>w+</td><td>读写文件，不存在创建，存在截断</td></tr><tr><td>wx+</td><td>读写，存在打开失败</td></tr><tr><td>a</td><td>追加，不存在创建</td></tr><tr><td>ax</td><td>追加，存在失败</td></tr><tr><td>a+</td><td>追加和读取，不存在创建</td></tr><tr><td>ax+</td><td>追加和读取，存在失败</td></tr></tbody></table><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="简单文件读取"><a href="#简单文件读取" class="headerlink" title="简单文件读取"></a>简单文件读取</h4><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">fs.<span class="hljs-title function_">readFile</span>(path[, options], callback)<br></code></pre></td></tr></table></figure><ul><li><p><code>path</code>：文件路径</p></li><li><pre><code class="hljs">options<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  ：配置选项，若是字符串则指定编码格式<br><br>  - `encoding`：编码格式<br>  - `flag`：打开方式<br><br>- ```<br>  callback<br></code></pre></td></tr></table></figure>：回调函数- `err`：错误信息- `data`：读取的数据，如果未指定编码格式则返回一个 Buffer</code></pre></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span>(err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;failed!&#x27;</span> + err.<span class="hljs-property">message</span>)<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;content:&#x27;</span> + data)<br>&#125;)<br><br><br><span class="hljs-comment">// 复制文件内容</span><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&quot;C:/Users/笔记.mp3&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br><span class="hljs-keyword">if</span>(!err) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br><span class="hljs-comment">// 将data写入到文件中</span><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&quot;C:/Users/hello.jpg&quot;</span>, data, <span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>)&#123;<br><span class="hljs-keyword">if</span>(!err)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;文件写入成功&quot;</span>);<br>&#125;<br>&#125; );<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="流式文件读取"><a href="#流式文件读取" class="headerlink" title="流式文件读取"></a>流式文件读取</h4><ul><li>简单文件读取的方式会一次性读取文件内容到内存中，若文件较大，会占用过多内存影响系统性能，且读取速度慢</li><li>大文件适合用流式文件读取，它会分多次将文件读取到内存中</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 创建一个可读流</span><br><span class="hljs-keyword">var</span> rs = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;C:/Users/笔记.mp3&#x27;</span>)<br><span class="hljs-comment">// 创建一个可写流</span><br><span class="hljs-keyword">var</span> ws = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;a.mp3&#x27;</span>)<br><br><span class="hljs-comment">// 监听流的开启和关闭</span><br><span class="hljs-comment">// 这几个监听不是必须的</span><br>rs.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;可读流打开了~~&#x27;</span>)<br>&#125;)<br><br>rs.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;可读流关闭了~~&#x27;</span>)<br>  <span class="hljs-comment">//数据读取完毕，关闭可写流</span><br>  ws.<span class="hljs-title function_">end</span>()<br>&#125;)<br><br>ws.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;可写流打开了~~&#x27;</span>)<br>&#125;)<br><br>ws.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;可写流关闭了~~&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">//要读取一个可读流中的数据，要为可读流绑定一个data事件，data事件绑定完毕自动开始读取数据</span><br>rs.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>  <span class="hljs-comment">//将读取到的数据写入到可写流中</span><br>  ws.<span class="hljs-title function_">write</span>(data)<br>&#125;)<br></code></pre></td></tr></table></figure><p>简便方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-keyword">var</span> rs = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;C:/Users/lilichao/Desktop/笔记.mp3&#x27;</span>)<br><span class="hljs-keyword">var</span> ws = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;b.mp3&#x27;</span>)<br><br><span class="hljs-comment">// pipe()可以将可读流中的内容，直接输出到可写流中</span><br>rs.<span class="hljs-title function_">pipe</span>(ws)<br></code></pre></td></tr></table></figure><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><h4 id="简单文件写入"><a href="#简单文件写入" class="headerlink" title="简单文件写入"></a>简单文件写入</h4><p>语法格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">fs.<span class="hljs-title function_">writeFile</span>(file, data[, options], callback)<br></code></pre></td></tr></table></figure><ul><li><code>file</code>：文件路径</li><li><code>data</code>：写入内容</li><li><code>options</code>：配置选项，包含 <code>encoding, mode, flag</code>；若是字符串则指定编码格式</li><li><code>callback</code>：回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;./files/2.txt&#x27;</span>, <span class="hljs-string">&#x27;Hello Nodejs&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;failed!&#x27;</span> + err.<span class="hljs-property">message</span>)<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success!&#x27;</span>)<br>&#125;)<br><br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;C:/Users/hello.txt&#x27;</span>, <span class="hljs-string">&#x27;通过 writeFile 写入的内容&#x27;</span>, &#123; <span class="hljs-attr">flag</span>: <span class="hljs-string">&#x27;w&#x27;</span> &#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;写入成功！&#x27;</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="流式文件写入"><a href="#流式文件写入" class="headerlink" title="流式文件写入"></a>流式文件写入</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 同步、异步、简单文件的写入都不适合大文件的写入，性能较差，容易导致内存溢出</span><br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 创建一个可写流</span><br><span class="hljs-keyword">var</span> ws = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;hello3.txt&#x27;</span>)<br><br>ws.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;流打开了~~&#x27;</span>)<br>&#125;)<br><br>ws.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;close&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;流关闭了~~&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 通过ws向文件中输出内容</span><br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;通过可写流写入文件的内容&#x27;</span>)<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;1&#x27;</span>)<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;2&#x27;</span>)<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;3&#x27;</span>)<br>ws.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><span class="hljs-comment">// 关闭流</span><br>ws.<span class="hljs-title function_">end</span>()<br></code></pre></td></tr></table></figure><h3 id="路径动态拼接问题-dirname"><a href="#路径动态拼接问题-dirname" class="headerlink" title="路径动态拼接问题 __dirname"></a>路径动态拼接问题 <code>__dirname</code></h3><ul><li>在使用 fs 模块操作文件时，如果提供的操作路径是以 <code>./</code> 或 <code>../</code> 开头的相对路径时，容易出现路径动态拼接错误的问题</li><li>原因：代码在运行的时候，会以执行 node 命令时所处的目录，动态拼接出被操作文件的完整路径</li><li>解决方案：在使用 fs 模块操作文件时，直接提供完整的路径，从而防止路径动态拼接的问题</li><li><code>__dirname</code> 获取文件所处的绝对路径</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">fs.<span class="hljs-title function_">readFile</span>(__dirname + <span class="hljs-string">&#x27;/files/1.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">err, data</span>) &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h3><p>验证路径是否存在：</p><ul><li><code>fs.exists(path, callback)</code></li><li><code>fs.existsSync(path)</code></li></ul><p>获取文件信息：</p><ul><li><code>fs.stat(path, callback)</code></li><li><code>fs.stat(path)</code></li></ul><p>删除文件：</p><ul><li><code>fs.unlink(path, callback)</code></li><li><code>fs.unlinkSync(path)</code></li></ul><p>列出文件：</p><ul><li><code>fs.readdir(path[,options], callback)</code></li><li><code>fs.readdirSync(path[, options])</code></li></ul><p>截断文件：</p><ul><li><code>fs.truncate(path, len, callback)</code></li><li><code>fs.truncateSync(path, len)</code></li></ul><p>建立目录：</p><ul><li><code>fs.mkdir(path[, mode], callback)</code></li><li><code>fs.mkdirSync(path[, mode])</code></li></ul><p>删除目录：</p><ul><li><code>fs.rmdir(path, callback)</code></li><li><code>fs.rmdirSync(path)</code></li></ul><p>重命名文件和目录：</p><ul><li><code>fs.rename(oldPath, newPath, callback)</code></li><li><code>fs.renameSync(oldPath, newPath)</code></li></ul><p>监视文件更改：</p><ul><li><code>fs.watchFile(filename[, options], listener)</code></li></ul><h2 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h2><p>path 模块是 Node.js 官方提供的、用来处理路径的模块。它提供了一系列的方法和属性，用来满足用户对路径的处理需求。</p><h3 id="路径拼接-path-join"><a href="#路径拼接-path-join" class="headerlink" title="路径拼接 path.join()"></a>路径拼接 <code>path.join()</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>)<br><br><span class="hljs-comment">// 注意 ../ 会抵消前面的路径</span><br><span class="hljs-comment">// ./ 会被忽略</span><br><span class="hljs-keyword">const</span> pathStr = path.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;/a&#x27;</span>, <span class="hljs-string">&#x27;/b/c&#x27;</span>, <span class="hljs-string">&#x27;../../&#x27;</span>, <span class="hljs-string">&#x27;./d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(pathStr) <span class="hljs-comment">// \a\d\e</span><br><br>fs.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;./files/1.txt&#x27;</span>), <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">err, dataStr</span>) &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err.<span class="hljs-property">message</span>)<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(dataStr)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="获取路径中文件名-path-basename"><a href="#获取路径中文件名-path-basename" class="headerlink" title="获取路径中文件名 path.basename()"></a>获取路径中文件名 <code>path.basename()</code></h3><p>使用 <code>path.basename()</code> 方法，可以获取路径中的最后一部分，常通过该方法获取路径中的文件名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">path.<span class="hljs-title function_">basename</span>(path[, ext])<br></code></pre></td></tr></table></figure><p>1</p><ul><li>path: 文件路径</li><li>ext: 文件扩展名</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-comment">// 定义文件的存放路径</span><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span><br><br><span class="hljs-keyword">const</span> fullName = path.<span class="hljs-title function_">basename</span>(fpath)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fullName) <span class="hljs-comment">// index.html</span><br><br><span class="hljs-keyword">const</span> nameWithoutExt = path.<span class="hljs-title function_">basename</span>(fpath, <span class="hljs-string">&#x27;.html&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(nameWithoutExt) <span class="hljs-comment">// index</span><br></code></pre></td></tr></table></figure><h3 id="获取路径中文件扩展名-path-extname"><a href="#获取路径中文件扩展名-path-extname" class="headerlink" title="获取路径中文件扩展名 path.extname()"></a>获取路径中文件扩展名 <code>path.extname()</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-keyword">const</span> fpath = <span class="hljs-string">&#x27;/a/b/c/index.html&#x27;</span><br><br><span class="hljs-keyword">const</span> fext = path.<span class="hljs-title function_">extname</span>(fpath)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fext) <span class="hljs-comment">// .html</span><br></code></pre></td></tr></table></figure><h2 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h2><p>http 模块是 Node.js 官方提供的、用来创建 web 服务器的模块。</p><h3 id="创建基本-Web-服务器"><a href="#创建基本-Web-服务器" class="headerlink" title="创建基本 Web 服务器"></a>创建基本 Web 服务器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><br><span class="hljs-comment">// 创建 web 服务器实例</span><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br><span class="hljs-comment">// 为服务器实例绑定 request 事件，监听客户端的请求</span><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>  <span class="hljs-keyword">const</span> method = req.<span class="hljs-property">method</span><br>  <span class="hljs-keyword">const</span> str = <span class="hljs-string">`Your request url is <span class="hljs-subst">$&#123;url&#125;</span>, and request method is <span class="hljs-subst">$&#123;method&#125;</span>`</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<br><br>  <span class="hljs-comment">// 设置 Content-Type 响应头，解决中文乱码的问题</span><br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>)<br>  <span class="hljs-comment">// 向客户端响应内容</span><br>  res.<span class="hljs-title function_">end</span>(str)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">8080</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="实现简陋路由效果"><a href="#实现简陋路由效果" class="headerlink" title="实现简陋路由效果"></a>实现简陋路由效果</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>)<br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>()<br><br>server.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> url = req.<span class="hljs-property">url</span><br>  <span class="hljs-comment">// 设置默认的响应内容为 404 Not found</span><br>  <span class="hljs-keyword">let</span> content = <span class="hljs-string">&#x27;&lt;h1&gt;404 Not found!&lt;/h1&gt;&#x27;</span><br>  <span class="hljs-comment">// 判断用户请求的是否为 / 或 /index.html 首页</span><br>  <span class="hljs-comment">// 判断用户请求的是否为 /about.html 关于页面</span><br>  <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/&#x27;</span> || url === <span class="hljs-string">&#x27;/index.html&#x27;</span>) &#123;<br>    content = <span class="hljs-string">&#x27;&lt;h1&gt;首页&lt;/h1&gt;&#x27;</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (url === <span class="hljs-string">&#x27;/about.html&#x27;</span>) &#123;<br>    content = <span class="hljs-string">&#x27;&lt;h1&gt;关于页面&lt;/h1&gt;&#x27;</span><br>  &#125;<br><br>  res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/html; charset=utf-8&#x27;</span>)<br>  res.<span class="hljs-title function_">end</span>(content)<br>&#125;)<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><h3 id="模块化概念"><a href="#模块化概念" class="headerlink" title="模块化概念"></a>模块化概念</h3><ul><li>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分为若干模块的过程，模块是可组合、分解和更换的单元。</li><li>模块化可提高代码的复用性和可维护性，实现按需加载。</li><li>模块化规范是对代码进行模块化拆分和组合时需要遵守的规则，如使用何种语法格式引用模块和向外暴露成员。</li></ul><h3 id="Node-js-中模块的分类"><a href="#Node-js-中模块的分类" class="headerlink" title="Node.js 中模块的分类"></a>Node.js 中模块的分类</h3><ul><li>内置模块</li><li>自定义模块</li><li>第三方模块</li></ul><h3 id="Node-js-中的模块作用域"><a href="#Node-js-中的模块作用域" class="headerlink" title="Node.js 中的模块作用域"></a>Node.js 中的模块作用域</h3><ul><li>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域</li><li>防止全局变量污染</li></ul><h3 id="模块作用域的成员"><a href="#模块作用域的成员" class="headerlink" title="模块作用域的成员"></a>模块作用域的成员</h3><ul><li>自定义模块中都有一个 <code>module</code> 对象，存储了和当前模块有关的信息</li><li>在自定义模块中，可以使用 <code>module.exports</code> 对象，将模块内的成员共享出去，供外界使用。导入自定义模块时，得到的就是 <code>module.exports</code> 指向的对象。</li><li>默认情况下，<code>exports</code> 和 <code>module.exports</code> 指向同一个对象。最终共享的结果，以 <code>module.exports</code> 指向的对象为准。</li></ul><h3 id="CommonJS-模块化规范"><a href="#CommonJS-模块化规范" class="headerlink" title="CommonJS 模块化规范"></a>CommonJS 模块化规范</h3><ul><li>每个模块内部，<code>module</code> 变量代表当前模块</li><li><code>module</code> 变量是一个对象，<code>module.exports</code> 是对外的接口</li><li>加载某个模块即加载该模块的 <code>module.exports</code> 属性</li></ul><h3 id="模块加载机制"><a href="#模块加载机制" class="headerlink" title="模块加载机制"></a>模块加载机制</h3><p>模块第一次加载后会被缓存，即多次调用 <code>require()</code> 不会导致模块的代码被执行多次，提高模块加载效率。</p><h4 id="内置模块加载"><a href="#内置模块加载" class="headerlink" title="内置模块加载"></a>内置模块加载</h4><p>内置模块加载优先级最高。</p><h4 id="自定义模块加载"><a href="#自定义模块加载" class="headerlink" title="自定义模块加载"></a>自定义模块加载</h4><p>加载自定义模块时，路径要以 <code>./</code> 或 <code>../</code> 开头，否则会作为内置模块或第三方模块加载。</p><p>导入自定义模块时，若省略文件扩展名，则 Node.js 会按顺序尝试加载文件：</p><ul><li>按确切的文件名加载</li><li>补全 <code>.js</code> 扩展名加载</li><li>补全 <code>.json</code> 扩展名加载</li><li>补全 <code>.node</code> 扩展名加载</li><li>报错</li></ul><h4 id="第三方模块加载"><a href="#第三方模块加载" class="headerlink" title="第三方模块加载"></a>第三方模块加载</h4><ul><li>若导入第三方模块， Node.js 会从<strong>当前模块的父目录</strong>开始，尝试从 <code>/node_modules</code> 文件夹中加载第三方模块。</li><li>如果没有找到对应的第三方模块，则移动到再<strong>上一层父目录</strong>中，进行加载，直到<strong>文件系统的根目录</strong>。</li></ul><p>例如，假设在 <code>C:\Users\bruce\project\foo.js</code> 文件里调用了 <code>require(&#39;tools&#39;)</code>，则 Node.js 会按以下顺序查找：</p><ul><li><code>C:\Users\bruce\project\node_modules\tools</code></li><li><code>C:\Users\bruce\node_modules\tools</code></li><li><code>C:\Users\node_modules\tools</code></li><li><code>C:\node_modules\tools</code></li></ul><h4 id="目录作为模块加载"><a href="#目录作为模块加载" class="headerlink" title="目录作为模块加载"></a>目录作为模块加载</h4><p>当把目录作为模块标识符进行加载的时候，有三种加载方式：</p><ul><li>在被加载的目录下查找 <code>package.json</code> 的文件，并寻找 <code>main</code> 属性，作为 <code>require()</code> 加载的入口</li><li>如果没有 <code>package.json</code> 文件，或者 <code>main</code> 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 <code>index.js</code> 文件。</li><li>若失败则报错</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>编程语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js笔记 (2.Express)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/node.js/02.%20Express/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/node.js/02.%20Express/</url>
    
    <content type="html"><![CDATA[<h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><p><a href="https://www.expressjs.com.cn/">官网传送门(opens new window)</a></p><blockquote><p>基于 Node.js 平台，快速、开放、极简的 Web 开发框架</p></blockquote><p>Express 是用于快速创建服务器的第三方模块。</p><h2 id="Express-初体验"><a href="#Express-初体验" class="headerlink" title="Express 初体验"></a>Express 初体验</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>安装 Express：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install express<br></code></pre></td></tr></table></figure><p>创建服务器，监听客户端请求，并返回内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 创建 web 服务器</span><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 监听客户端的 GET 和 POST 请求，并向客户端响应具体的内容</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">20</span>, <span class="hljs-attr">gender</span>: <span class="hljs-string">&#x27;男&#x27;</span> &#125;)<br>&#125;)<br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;请求成功&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 通过 req.query 可以获取到客户端发送过来的查询参数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">query</span>)<br>  res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">query</span>)<br>&#125;)<br><br><span class="hljs-comment">// 这里的 :id 是一个动态的参数</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:ids/:username&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// req.params 是动态匹配到的 URL 参数，默认是一个空对象</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">params</span>)<br>  res.<span class="hljs-title function_">send</span>(req.<span class="hljs-property">params</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;express server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="托管静态资源"><a href="#托管静态资源" class="headerlink" title="托管静态资源"></a>托管静态资源</h3><ul><li>通过 <code>express.static()</code> 方法可创建静态资源服务器，向外开放访问静态资源。</li><li>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径，存放静态文件的目录名不会出现在 URL 中</li><li>访问静态资源时，会根据托管顺序查找文件</li><li>可为静态资源访问路径添加前缀</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;public&#x27;</span>))<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;files&#x27;</span>))<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/bruce&#x27;</span>, express.<span class="hljs-title function_">static</span>(<span class="hljs-string">&#x27;bruce&#x27;</span>))<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">可直接访问 public, files 目录下的静态资源</span><br><span class="hljs-comment">http://localhost:3000/images/bg.jpg</span><br><span class="hljs-comment">http://localhost:3000/css/style.css</span><br><span class="hljs-comment">http://localhost:3000/js/login.js</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">通过带有 /bruce 前缀的地址访问 bruce 目录下的文件</span><br><span class="hljs-comment">http://localhost:8080/bruce/images/logo.png</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h2><p>创建路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// router.js</span><br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-comment">// 创建路由对象</span><br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>()<br><br><span class="hljs-comment">// 挂载具体路由</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/list&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Get user list.&#x27;</span>)<br>&#125;)<br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/user/add&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Add new user.&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 向外导出路由对象</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router<br></code></pre></td></tr></table></figure><p>注册路由模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> router = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./router&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 注册路由模块，添加访问前缀</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/api&#x27;</span>, router)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><ul><li>中间件是指流程的中间处理环节</li><li>服务器收到请求后，可先调用中间件进行预处理</li><li>中间件是一个函数，包含 <code>req, res, next</code> 三个参数，<code>next()</code> 参数把流转关系交给下一个中间件或路由</li></ul><p>中间件注意事项；</p><ul><li>在注册路由之前注册中间件（错误级别中间件除外）</li><li>中间件可连续调用多个</li><li>别忘记调用 <code>next()</code> 函数</li><li><code>next()</code> 函数后别写代码</li><li>多个中间件共享 <code>req</code>、 <code>res</code>对象</li></ul><h3 id="全局中间件"><a href="#全局中间件" class="headerlink" title="全局中间件"></a>全局中间件</h3><ul><li>通过 <code>app.use()</code> 定义的中间件为全局中间件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 定义第一个全局中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了第1个全局中间件&#x27;</span>)<br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br><span class="hljs-comment">// 定义第二个全局中间件</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了第2个全局中间件&#x27;</span>)<br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;User page.&#x27;</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="局部中间件"><a href="#局部中间件" class="headerlink" title="局部中间件"></a>局部中间件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br><span class="hljs-comment">// 定义中间件函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw1</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了第一个局部生效的中间件&#x27;</span>)<br>  <span class="hljs-title function_">next</span>()<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mw2</span> = (<span class="hljs-params">req, res, next</span>) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;调用了第二个局部生效的中间件&#x27;</span>)<br>  <span class="hljs-title function_">next</span>()<br>&#125;<br><br><span class="hljs-comment">// 两种定义局部中间件的方式</span><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/hello&#x27;</span>, mw2, mw1, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;hello page.&#x27;</span>))<br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/about&#x27;</span>, [mw1, mw2], <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;about page.&#x27;</span>))<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;User page.&#x27;</span>))<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h3><ol><li>应用级别的中间件</li></ol><ul><li>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> ，绑定到 <code>app</code> 实例上的中间件</li></ul><ol><li>路由级别的中间件</li></ol><ul><li>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件。用法和应用级别中间件没有区别。应用级别中间件是绑定到 <code>app</code> 实例上，路由级别中间件绑定到 <code>router</code> 实例上。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>()<br><br>router.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/&#x27;</span>, router)<br></code></pre></td></tr></table></figure><ol><li>错误级别的中间件</li></ol><ul><li>用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</li><li>错误级别中间件的处理函数中，必须有 4 个形参，形参顺序从前到后分别是 <code>(err, req, res, next)</code> 。</li><li>错误级别的中间件必须注册在所有路由之后</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>()<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;服务器内部发生了错误！&#x27;</span>)<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Home page.&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">// 定义错误级别的中间件，捕获整个项目的异常错误，从而防止程序的崩溃</span><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发生了错误！&#x27;</span> + err.<span class="hljs-property">message</span>)<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Error：&#x27;</span> + err.<span class="hljs-property">message</span>)<br>&#125;)<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">80</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Express server running at http://127.0.0.1&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><ol><li>Express 内置中间件</li></ol><p>自 Express 4.16.0 版本开始，Express 内置了 3 个常用的中间件，极大的提高了 Express 项目的开发效率和体验：</p><ul><li><code>express.static</code> 快速托管静态资源的内置中间件，例如： HTML 文件、图片、CSS 样式等（无兼容性）</li><li><code>express.json</code> 解析 JSON 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li><li><code>express.urlencoded</code> 解析 URL-encoded 格式的请求体数据（有兼容性，仅在 4.16.0+ 版本中可用）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>())<br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">urlencoded</span>(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">false</span> &#125;))<br></code></pre></td></tr></table></figure><ol><li>第三方中间件</li></ol><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><h3 id="cors-中间件解决跨域"><a href="#cors-中间件解决跨域" class="headerlink" title="cors 中间件解决跨域"></a>cors 中间件解决跨域</h3><ul><li>安装中间件：<code>npm install cors</code></li><li>导入中间件：<code>const cors = require(&#39;cors&#39;)</code></li><li>配置中间件：<code>app.use(cors())</code></li></ul><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><ul><li>CORS（Cross-Origin Resource Sharing，跨域资源共享）解决跨域，是通过 HTTP 响应头决定浏览器是否阻止前端 JS 代码跨域获取资源</li><li>浏览器的同源安全策略默认会阻止网页“跨域”获取资源。但如果接口服务器配置了 CORS 相关的 HTTP 响应头，就可解除浏览器端的跨域访问限制</li><li>CORS 主要在服务器端进行配置。客户端浏览器无须做任何额外的配置，即可请求开启了 CORS 的接口。</li><li>CORS 在浏览器中有兼容性。只有支持 XMLHttpRequest Level2 的浏览器，才能正常访问开启了 CORS 的服务端接口（例如：IE10+、Chrome4+、FireFox3.5+）。</li></ul><h3 id="CORS-常见响应头"><a href="#CORS-常见响应头" class="headerlink" title="CORS 常见响应头"></a>CORS 常见响应头</h3><ul><li><code>Access-Control-Allow-Origin</code>：制定了允许访问资源的外域 URL</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;http://bruceblog.io&#x27;</span>)<br>res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>Access-Control-Allow-Headers</code></li><li>默认情况下，CORS 仅支持客户端向服务器发送如下的 9 个请求头：<code>Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type （值仅限于 text/plain、multipart/form-data、application/x-www-form-urlencoded 三者之一）</code></li><li>如果客户端向服务器发送了额外的请求头信息，则需要在服务器端，通过 A<code>ccess-Control-Allow-Headers</code> 对额外的请求头进行声明，否则这次请求会失败！</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;Content-Type, X-Custom-Header&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li><code>Access-Control-Allow-Methods</code></li><li>默认情况下，CORS 仅支持客户端发起 GET、POST、HEAD 请求。如果客户端希望通过 PUT、DELETE 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的 HTTP 方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;POST, GET, DELETE, HEAD&#x27;</span>)<br>res.<span class="hljs-title function_">setHEader</span>(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a>CORS 请求分类</h3><h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><ul><li>请求方式：GET、POST、HEAD 三者之一</li><li>HTTP 头部信息不超过以下几种字段：无自定义头部字段、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width 、Content-Type（只有三个值 application&#x2F;x-www-formurlencoded、multipart&#x2F;form-data、text&#x2F;plain）</li></ul><h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><ul><li>请求方式为 GET、POST、HEAD 之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 application&#x2F;json 格式的数据</li></ul><p>在浏览器与服务器正式通信之前，浏览器会先发送 OPTION 请求进行预检，以获知服务器是否允许该实际请求，所以这一次的 OPTION 请求称为“预检请求”。服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>编程语言</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>node.js笔记 (3.数据库和身份认证)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/node.js/03.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/node.js/03.%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="Node-操作-mysql"><a href="#Node-操作-mysql" class="headerlink" title="Node 操作 mysql"></a>Node 操作 mysql</h2><h3 id="配置-mysql-模块"><a href="#配置-mysql-模块" class="headerlink" title="配置 mysql 模块"></a>配置 mysql 模块</h3><ol><li>安装 mysql 模块</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> mysql<br></code></pre></td></tr></table></figure><ol start="2"><li>建立连接</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">mysql</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>)<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">db</span> = mysql.<span class="hljs-title function_ invoke__">createPool</span>(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>测试是否正常工作</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(&#x27;select 1&#x27;, (<span class="hljs-keyword">err</span>, results) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>  console.<span class="hljs-built_in">log</span>(results)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="操作-mysql-数据库"><a href="#操作-mysql-数据库" class="headerlink" title="操作 mysql 数据库"></a>操作 mysql 数据库</h3><ol><li>查询数据</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">db.query(<span class="hljs-string">&#x27;select * from users&#x27;</span>, <span class="hljs-function"><span class="hljs-params">(err, results)</span> =&gt;</span> &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="2"><li>插入数据</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">// ? 表示占位符</span><br><span class="hljs-keyword">const</span> sql = &#x27;insert into users values(?, ?)&#x27;<br><span class="hljs-comment">// 使用数组的形式为占位符指定具体的值</span><br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(sql, [username, password], (<span class="hljs-keyword">err</span>, results) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">err</span>) <span class="hljs-keyword">return</span> console.<span class="hljs-built_in">log</span>(<span class="hljs-keyword">err</span>.message)<br>  <span class="hljs-keyword">if</span> (results.affectedRows === 1) console.<span class="hljs-built_in">log</span>(&#x27;插入成功&#x27;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>向表中新增数据时，如果数据对象的每个属性和数据表的字段一一对应，则可以通过如下方式快速插入数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;Bruce&#x27;</span>, <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;55520&#x27;</span>&#125;<br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&#x27;insert into users set ?&#x27;</span><br>db.<span class="hljs-title function_">query</span>(sql, user, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="3"><li>更新数据</li></ol><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">const</span> sql = &#x27;<span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> username=?, password=? where id=?&#x27;<br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(sql, [username, password, id], (<span class="hljs-keyword">err</span>, results) =&gt; &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>快捷方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> user = &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">7</span>,<span class="hljs-attr">username</span>:<span class="hljs-string">&#x27;Bruce&#x27;</span>,<span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;55520&#x27;</span>&#125;<br><span class="hljs-keyword">const</span> sql = <span class="hljs-string">&#x27;update users set ? where id=?&#x27;</span><br>db.<span class="hljs-title function_">query</span>(sql, [user, user.<span class="hljs-property">id</span>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>删除数据</li></ol><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">const sql = <span class="hljs-string">&#x27;delete from users where id=?&#x27;</span><br>db.query(sql, id, <span class="hljs-function"><span class="hljs-params">(err, results)</span> =&gt;</span> &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>使用 delete 语句会真正删除数据，保险起见，使用标记删除的形式，模拟删除的动作。即在表中设置状态字段，标记当前的数据是否被删除。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">query</span>(&#x27;<span class="hljs-keyword">update</span> users <span class="hljs-keyword">set</span> status=1 where id=?&#x27;, 7, (<span class="hljs-keyword">err</span>, results) =&gt; &#123;<br>  ...<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="Web-开发模式"><a href="#Web-开发模式" class="headerlink" title="Web 开发模式"></a>Web 开发模式</h2><h3 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h3><p>服务器发送给客户端的 HTML 页面，是在服务器通过字符串的拼接动态生成的。因此客户端不需要使用 Ajax 额外请求页面的数据。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/index.html&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bruce&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">29</span> &#125;<br>  <span class="hljs-keyword">const</span> html = <span class="hljs-string">`&lt;h1&gt;username:<span class="hljs-subst">$&#123;user.name&#125;</span>, age:<span class="hljs-subst">$&#123;user.age&#125;</span>&lt;/h1&gt;`</span><br>  res.<span class="hljs-title function_">send</span>(html)<br>&#125;)<br></code></pre></td></tr></table></figure><p>优点：</p><ul><li>前端耗时短。浏览器只需直接渲染页面，无需额外请求数据。</li><li>有利于 SEO。服务器响应的是完整的 HTML 页面内容，有利于爬虫爬取信息。</li></ul><p>缺点：</p><ul><li>占用服务器资源。服务器需要完成页面内容的拼接，若请求比较多，会对服务器造成一定访问压力。</li><li>不利于前后端分离，开发效率低。</li></ul><h3 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h3><p>前后端分离的开发模式，依赖于 Ajax 技术的广泛应用。后端只负责提供 API 接口，前端使用 Ajax 调用接口。</p><p>优点：</p><ul><li>开发体验好。前端专业页面开发，后端专注接口开发。</li><li>用户体验好。页面局部刷新，无需重新请求页面。</li><li>减轻服务器的渲染压力。页面最终在浏览器里生成。</li></ul><p>缺点：</p><ul><li>不利于 SEO。完整的 HTML 页面在浏览器拼接完成，因此爬虫无法爬取页面的有效信息。Vue、React 等框架的 SSR（server side render）技术能解决 SEO 问题。</li></ul><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul><li>企业级网站，主要功能是展示，没有复杂交互，且需要良好的 SEO，可考虑服务端渲染</li><li>后台管理项目，交互性强，无需考虑 SEO，可使用前后端分离</li><li>为同时兼顾首页渲染速度和前后端分离开发效率，可采用首屏服务器端渲染+其他页面前后端分离的开发模式</li></ul><h2 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h2><h3 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h3><p>服务端渲染推荐使用 Session 认证机制</p><h4 id="Session-工作原理"><a href="#Session-工作原理" class="headerlink" title="Session 工作原理"></a>Session 工作原理</h4><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/Session.c66d5499.png" alt="session"></p><h4 id="Express-中使用-Session-认证"><a href="#Express-中使用-Session-认证" class="headerlink" title="Express 中使用 Session 认证"></a>Express 中使用 Session 认证</h4><ol><li>安装 express-session 中间件</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> express-session<br></code></pre></td></tr></table></figure><ol start="2"><li>配置中间件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">session</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express-session&#x27;</span>)<br>app.<span class="hljs-keyword">use</span>(<br>  <span class="hljs-title function_ invoke__">session</span>(&#123;<br>    <span class="hljs-attr">secret</span>: <span class="hljs-string">&#x27;Bruce&#x27;</span>, // secret 的值为任意字符串<br>    <span class="hljs-attr">resave</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">saveUninitalized</span>: <span class="hljs-literal">true</span>,<br>  &#125;)<br>)<br></code></pre></td></tr></table></figure><ol start="3"><li>向 session 中存数据</li></ol><p>中间件配置成功后，可通过 <code>req.session</code> 访问 session 对象，存储用户信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">app<span class="hljs-selector-class">.post</span>(<span class="hljs-string">&#x27;/api/login&#x27;</span>, (req, res) =&gt; &#123;<br>  req<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.user</span> = req<span class="hljs-selector-class">.body</span><br>  req<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.isLogin</span> = true<br><br>  res<span class="hljs-selector-class">.send</span>(&#123; status: <span class="hljs-number">0</span>, msg: <span class="hljs-string">&#x27;login done&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>从 session 取数据</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">app<span class="hljs-selector-class">.get</span>(<span class="hljs-string">&#x27;/api/username&#x27;</span>, (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!req<span class="hljs-selector-class">.session</span>.isLogin) &#123;<br>    return res<span class="hljs-selector-class">.send</span>(&#123; status: <span class="hljs-number">1</span>, msg: <span class="hljs-string">&#x27;fail&#x27;</span> &#125;)<br>  &#125;<br>  res<span class="hljs-selector-class">.send</span>(&#123; status: <span class="hljs-number">0</span>, msg: <span class="hljs-string">&#x27;success&#x27;</span>, username: req<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.user</span><span class="hljs-selector-class">.username</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="5"><li>清空 session</li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">app<span class="hljs-selector-class">.post</span>(<span class="hljs-string">&#x27;/api/logout&#x27;</span>, (req, res) =&gt; &#123;<br>  <span class="hljs-comment">// 清空当前客户端的session信息</span><br>  req<span class="hljs-selector-class">.session</span><span class="hljs-selector-class">.destroy</span>()<br>  res<span class="hljs-selector-class">.send</span>(&#123; status: <span class="hljs-number">0</span>, msg: <span class="hljs-string">&#x27;logout done&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="JWT-认证机制"><a href="#JWT-认证机制" class="headerlink" title="JWT 认证机制"></a>JWT 认证机制</h3><p>前后端分离推荐使用 JWT（JSON Web Token）认证机制，是目前最流行的跨域认证解决方案</p><h4 id="JWT-工作原理"><a href="#JWT-工作原理" class="headerlink" title="JWT 工作原理"></a>JWT 工作原理</h4><p>Session 认证的局限性：</p><ul><li>Session 认证机制需要配合 Cookie 才能实现。由于 Cookie 默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域 Session 认证。</li><li>当前端请求后端接口不存在跨域问题的时候，推荐使用 Session 身份认证机制。</li><li>当前端需要跨域请求后端接口的时候，不推荐使用 Session 身份认证机制，推荐使用 JWT 认证机制</li></ul><p>JWT 工作原理图：</p><p>用户的信息通过 Token 字符串的形式，保存在客户端浏览器中。服务器通过还原 Token 字符串的形式来认证用户的身份。</p><p><img src="https://brucecai55520.gitee.io/bruceblog/assets/img/JWT.6a82c41d.png" alt="JWT"></p><p>JWT 组成部分：</p><ul><li>Header、Payload、Signature</li><li>Payload 是真正的用户信息，加密后的字符串</li><li>Header 和 Signature 是安全性相关部分，保证 Token 安全性</li><li>三者使用 <code>.</code> 分隔</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Header<span class="hljs-selector-class">.Payload</span><span class="hljs-selector-class">.Signature</span><br><br>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9<span class="hljs-selector-class">.eyJpZCI6MTcsInVzZXJuYW1lIjoiQnJ1Y2UiLCJwYXNzd29yZCI6IiIsIm5pY2tuYW1lIjoiaGVsbG8iLCJlbWFpbCI6InNjdXRAcXEuY29tIiwidXNlcl9waWMiOiIiLCJpYXQiOjE2NDE4NjU3MzEsImV4cCI6MTY0MTkwMTczMX0</span>.bmqzAkNSZgD8IZxRGGyVlVwGl7EGMtWitvjGD-a5U5c<br></code></pre></td></tr></table></figure><p>JWT 使用方式：</p><ul><li>客户端会把 JWT 存储在 localStorage 或 sessionStorage 中</li><li>此后客户端与服务端通信需要携带 JWT 进行身份认证，将 JWT 存在 HTTP 请求头 Authorization 字段中</li><li>加上 Bearer 前缀</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Authorization: Bearer <span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="Express-使用-JWT"><a href="#Express-使用-JWT" class="headerlink" title="Express 使用 JWT"></a>Express 使用 JWT</h4><ol><li>安装</li></ol><ul><li>jsonwebtoken 用于生成 JWT 字符串</li><li>express-jwt 用于将 JWT 字符串解析还原成 JSON 对象</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">npm <span class="hljs-keyword">install </span><span class="hljs-keyword">jsonwebtoken </span>express-<span class="hljs-keyword">jwt</span><br></code></pre></td></tr></table></figure><ol start="2"><li>定义 secret 密钥</li></ol><ul><li>为保证 JWT 字符串的安全性，防止其在网络传输过程中被破解，需定义用于加密和解密的 secret 密钥</li><li>生成 JWT 字符串时，使用密钥加密信息，得到加密好的 JWT 字符串</li><li>把 JWT 字符串解析还原成 JSON 对象时，使用密钥解密</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>)<br><span class="hljs-keyword">const</span> expressJWT = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express-jwt&#x27;</span>)<br><br><span class="hljs-comment">// 密钥为任意字符串</span><br><span class="hljs-keyword">const</span> secretKey = <span class="hljs-string">&#x27;Bruce&#x27;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>生成 JWT 字符串</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">app.post(<span class="hljs-string">&#x27;/api/login&#x27;</span>, (req, res) =&gt; &#123;<br>  ...<br>  res.send(&#123;<br>    status: <span class="hljs-number">200</span>,<br>    message: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>    <span class="hljs-regexp">//</span> jwt.sign() 生成 JWT 字符串<br>    <span class="hljs-regexp">//</span> 参数：用户信息对象、加密密钥、配置对象-token有效期<br>    <span class="hljs-regexp">//</span> 尽量不保存敏感信息，因此只有用户名，没有密码<br>    token: jwt.sign(&#123;username: userInfo.username&#125;, secretKey, &#123;expiresIn: <span class="hljs-string">&#x27;10h&#x27;</span>&#125;)<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="4"><li>JWT 字符串还原为 JSON 对象</li></ol><ul><li>客户端访问有权限的接口时，需通过请求头的 <code>Authorization</code> 字段，将 Token 字符串发送到服务器进行身份认证</li><li>服务器可以通过 express-jwt 中间件将客户端发送过来的 Token 解析还原成 JSON 对象</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> unless(&#123; path: [<span class="hljs-regexp">/^\/api\//</span>] &#125;) 指定哪些接口无需访问权限<br>app.use(expressJWT(&#123; secret: secretKey &#125;).unless(&#123; path: [<span class="hljs-regexp">/^\/api\//</span>] &#125;))<br></code></pre></td></tr></table></figure><ol start="5"><li>获取用户信息</li></ol><ul><li>当 express-jwt 中间件配置成功后，即可在那些有权限的接口中，使用 <code>req.user</code> 对象，来访问从 JWT 字符串中解析出来的用户信息</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">app.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;/admin/getinfo&#x27;</span>, (req, res) =&gt; &#123;<br>  console.log(req.<span class="hljs-keyword">user</span>)<br>  res.send(&#123;<br>    status: <span class="hljs-number">200</span>,<br>    message: <span class="hljs-string">&#x27;获取信息成功&#x27;</span>,<br>    data: req.<span class="hljs-keyword">user</span>,<br>  &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><ol start="6"><li>捕获解析 JWT 失败后产生的错误</li></ol><ul><li>当使用 express-jwt 解析 Token 字符串时，如果客户端发送过来的 Token 字符串过期或不合法，会产生一个解析失败的错误，影响项目的正常运行</li><li>通过 Express 的错误中间件，捕获这个错误并进行相关的处理</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">app.<span class="hljs-keyword">use</span>((err, req, res, next) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (err.name === <span class="hljs-string">&#x27;UnauthorizedError&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_ invoke__">send</span>(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">401</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Invalid token&#x27;</span> &#125;)<br>  &#125;<br>  res.<span class="hljs-title function_ invoke__">send</span>(&#123; <span class="hljs-attr">status</span>: <span class="hljs-number">500</span>, <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Unknown error&#x27;</span> &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>node.js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node.js</tag>
      
      <tag>编程语言</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (1.微信小程序介绍)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/01.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/01.%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="微信小程序的介绍"><a href="#微信小程序的介绍" class="headerlink" title="微信小程序的介绍"></a>微信小程序的介绍</h2><h3 id="一-和普通网页的区别："><a href="#一-和普通网页的区别：" class="headerlink" title="一.和普通网页的区别："></a>一.和普通网页的区别：</h3><p>1.运行环境不同<br>2.API不同<br>3.开发模式不同</p><h3 id="二-小程序的项目组成结构："><a href="#二-小程序的项目组成结构：" class="headerlink" title="二.小程序的项目组成结构："></a>二.小程序的项目组成结构：</h3><p>pages：用来存放小程序的所有页面<br>utils；用来存放工具性质的模块<br>app.js：小程序项目的入口文件<br>app.json:微信小程序的全局配置文件<br>app.wxss；小程序项目的全局样式文件<br>project.config.json:项目的配置文件<br>sitemap.json用来配置小程序是否允许被其他微信搜索</p><h3 id="小程序页面的组成部分"><a href="#小程序页面的组成部分" class="headerlink" title="小程序页面的组成部分"></a>小程序页面的组成部分</h3><p>小程序官方建议吧所有小程序的页面，都存放在pages文件目录里，以单独的文件夹存在<br>每个页面文件夹里有四个文件<br>.js文件（页面的脚本文件，存放页面的数据，事件处理函数）<br>.json文件（当前页面的配置文件。配置窗口的外观，表现）<br>.wxml(页面的模板结构文件)<br>.wxss文件（当前页面的样式文件）</p><h3 id="小程序代码的构成"><a href="#小程序代码的构成" class="headerlink" title="小程序代码的构成"></a>小程序代码的构成</h3><h4 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h4><p>是一种数据格式，json总是以配置文件的形式存在，通过不同级别的,json配置文件可以对小程序进行不同级别的配置。</p><h5 id="app-json-微信小程序的全局配置文件"><a href="#app-json-微信小程序的全局配置文件" class="headerlink" title="app.json:微信小程序的全局配置文件"></a>app.json:微信小程序的全局配置文件</h5><p>包括小程序的所有页面路径。窗口外观，界面表现，底部tab<br>demo里的配置文件如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;pages/index/index&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;pages/logs/logs&quot;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//  pages： 这是用来记录小程序所有页面的路径</span><br>  <span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;backgroundTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;light&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarBackgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#fff&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTitleText&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Weixin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;navigationBarTextStyle&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;black&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">//  window 全局定义小程序的所所有页面的背景色，文字颜色等</span><br>  <span class="hljs-attr">&quot;style&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;v2&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-comment">// style  全局定义小程序组件组件所使用的样式板式</span><br>  <span class="hljs-attr">&quot;sitemapLocation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sitemap.json&quot;</span><br><span class="hljs-comment">//sitemapLocation  用来指明sitemap.json的位置</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="project-config-json-项目的配置文件"><a href="#project-config-json-项目的配置文件" class="headerlink" title="project.config.json:项目的配置文件"></a>project.config.json:项目的配置文件</h5><p>记录对小程序的个性化配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;项目配置文件&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;packOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;ignore&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;.eslintrc.js&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;setting&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bundle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;userConfirmedBundleSwitch&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;urlCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;scopeDataCheck&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;coverView&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;es6&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;postcss&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;compileHotReLoad&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lazyloadPlaceholderEnable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;preloadBackgroundData&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minified&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;autoAudits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;newFeature&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uglifyFileName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uploadWithSourceMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;useIsolateContext&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;nodeModules&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;enhance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;useMultiFrameRuntime&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;useApiHook&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;useApiHostProcess&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;showShadowRootInWxmlPanel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;packNpmManually&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;enableEngineNative&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;packNpmRelationList&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minifyWXSS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;showES6CompileOption&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;minifyWXML&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;compileType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;miniprogram&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;libVersion&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.19.4&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;appid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wxc12928e3b8e14d5e&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;projectname&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;debugOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;hidedInDevtools&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;staticServerOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;baseURL&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;servePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;isGameTourist&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;condition&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;search&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;conversation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;game&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;plugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gamePlugin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;miniprogram&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>setting保存编译相关配置<br>projectname保存项目名称<br>appid保存小程序账号id（<strong>拿别人的代码记得改这个id</strong>）</p><h5 id="sitemap-json文件"><a href="#sitemap-json文件" class="headerlink" title="sitemap.json文件"></a>sitemap.json文件</h5><p>用来配置小程序是否允许被其他微信搜索<br>微信现已开放小程序内搜索，效果类似于 PC 网页的 SEO。sitemap.json 文件用来配置小程序页面是否允许<br>微信索引。<br>当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页<br>面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。<br>注意：sitemap 的索引提示是默认开启的，如需要关闭 sitemap 的索引提示，可在小程序项目配置文件<br>project.config.json 的 setting 中配置字段 checkSiteMap 为 false</p><h5 id="页面的-json-配置文件"><a href="#页面的-json-配置文件" class="headerlink" title="页面的 .json 配置文件"></a>页面的 .json 配置文件</h5><p>小程序中的每一个页面，可以使用 .json 文件来对本页面的窗口外观进行配置，页面中的配置项会覆盖<br>app.json 的 window 中相同的配置项。（优先级更大）</p><h4 id="新建小程序页面"><a href="#新建小程序页面" class="headerlink" title="新建小程序页面"></a>新建小程序页面</h4><p>在 app.json -&gt; pages 中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件，如图所示：（这里添加一个页面a）</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650266655180.png" style="zoom:67%;" /><h4 id="修改项目首页"><a href="#修改项目首页" class="headerlink" title="修改项目首页"></a>修改项目首页</h4><p>只需要调整 app.json -&gt; pages 数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页<br>面，当作项目首页进行渲染。</p><h4 id="WXML模板"><a href="#WXML模板" class="headerlink" title="WXML模板"></a>WXML模板</h4><p>WXML（WeiXin Markup Language）是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作<br>用类似于网页开发中的 HTML。</p><ol start="2"><li>WXML 和 HTML 的区别<br>① 标签名称不同<br> HTML （div, span, img, a）<br> WXML（view, text, image, navigator）<br>② 属性节点不同</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>超链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/home/home&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure><p>③ 提供了类似于 Vue 中的模板语法<br> 数据绑定<br> 列表渲染<br> 条件渲染</p><h4 id="wxss模板"><a href="#wxss模板" class="headerlink" title="wxss模板"></a>wxss模板</h4><p> WXSS (WeiXin Style Sheets)是一套样式语言，用于描述 WXML 的组件样式，类似于网页开发中的 CSS。</p><p>WXSS 和 CSS 的区别<br>① 新增了 rpx 尺寸单位<br> CSS 中需要手动进行像素单位换算，例如 rem<br> WXSS 在底层支持新的尺寸单位 rpx，在不同大小的屏幕上小程序会自动进行换算</p><p>② 提供了全局的样式和局部样式<br> 项目根目录中的 app.wxss 会作用于所有小程序页面<br> 局部页面的 .wxss 样式仅对当前页面生效</p><p>③ WXSS 仅支持部分 CSS 选择器<br> .class 和 #id<br> element<br> 并集选择器、后代选择器<br> ::after 和 ::before 等伪类选择器</p><h4 id="JS逻辑交互"><a href="#JS逻辑交互" class="headerlink" title="JS逻辑交互"></a>JS逻辑交互</h4><ol><li>小程序中的 .js 文件<br>一个项目仅仅提供界面展示是不够的，在小程序中，我们通过 .js 文件来处理用户的操作。例如：响应用户的<br>点击、获取用户的位置等等。</li><li>小程序中 .js 文件的分类<br>小程序中的 JS 文件分为三大类，分别是：<br>① app.js<br> 是整个小程序项目的入口文件，通过调用 App() 函数来启动整个小程序<br>② 页面的 .js 文件<br> 是页面的入口文件，通过调用 Page() 函数来创建并运行页面<br>③ 普通的 .js 文件<br> 是普通的功能模块文件，用来封装公共的函数或属性供页面使用</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (3.微信小程序的组件)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/03.%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/03.%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h4 id="1-小程序中组件的分类"><a href="#1-小程序中组件的分类" class="headerlink" title="1. 小程序中组件的分类"></a>1. 小程序中组件的分类</h4><p>小程序中的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程序的组<br>件分为了 9 大类，分别是：<br>① 视图容器（常用）<br>② 基础内容（常用）<br>③ 表单组件（常用）<br>④ 导航组件（常用）<br>⑤ 媒体组件<br>⑥ map 地图组件<br>⑦ canvas 画布组件<br>⑧ 开放能力<br>⑨ 无障碍访问</p><h4 id="常用的视图容器类组件"><a href="#常用的视图容器类组件" class="headerlink" title="常用的视图容器类组件"></a>常用的视图容器类组件</h4><p>① view<br> 普通视图区域<br> 类似于 HTML 中的 div，是一个块级元素<br> 常用来实现页面的布局效果<br>② scroll-view<br> 可滚动的视图区域<br> 常用来实现滚动列表效果<br>③ swiper 和 swiper-item<br> 轮播图容器组件 和 轮播图 item 组件</p><h5 id="view-组件的基本使用"><a href="#view-组件的基本使用" class="headerlink" title="view 组件的基本使用"></a>view 组件的基本使用</h5><p>和html的div没啥区别<br>实现 flex 横向布局效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650267283867.png" style="zoom:67%;" /><p>结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/a/a.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container1&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* pages/a/a.wxss */</span><br><span class="hljs-selector-class">.container1</span>&#123;<br>  <span class="hljs-attribute">display</span>: flex;         <span class="hljs-comment">/* display:flex(弹性盒子布局) */</span><br>  <span class="hljs-attribute">justify-content</span>: space-around;<span class="hljs-comment">/* 均匀排列每个元素，每个元素周围分配相同的空间 */</span><br>&#125;<br><span class="hljs-comment">/*这里是类选择器和后代选择器 */</span><br><span class="hljs-selector-class">.container1</span> view&#123;    <br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;    <br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br><span class="hljs-comment">/*text-align属性规定元素中的文本的水平对齐方式：center水平居中*/</span><br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br><span class="hljs-comment">/*行高，达到纵向居中*/</span><br>&#125;<br><span class="hljs-comment">/*伪类选择器，第n个子元素:nth-child(n) */</span><br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: aqua;  <span class="hljs-comment">/*背景色*/</span><br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: burlywood;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: chocolate;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="view-组件的基本使用-1"><a href="#view-组件的基本使用-1" class="headerlink" title="view 组件的基本使用"></a>view 组件的基本使用</h5><p> scroll-view 组件的基本使用<br>纵向滚动效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650268551841.png" style="zoom:67%;" /><p>结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/a/a.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container1&quot;</span> <span class="hljs-attr">scroll-y</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* pages/a/a.wxss */</span><br><span class="hljs-selector-class">.container1</span>&#123;<br>  <span class="hljs-attribute">border</span>: crimson <span class="hljs-number">1px</span> solid;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">120px</span>;<span class="hljs-comment">/*给scroll-view固定高度，要实现滚动效果，必须设置高度*/</span><br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">display</span>: flex;<br>  <span class="hljs-attribute">justify-content</span>: space-around;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view&#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: burlywood;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) &#123;<br>  <span class="hljs-attribute">background-color</span>: chocolate;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="swiper-和-swiper-item-组件的基本使用"><a href="#swiper-和-swiper-item-组件的基本使用" class="headerlink" title="swiper 和 swiper-item 组件的基本使用"></a>swiper 和 swiper-item 组件的基本使用</h5><p>实现轮播图效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650268877314.png" style="zoom: 67%;" /><p>结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/a/a.wxml--&gt;</span><br><span class="hljs-comment">&lt;!-- 轮播图结构 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swioer-container&quot;</span> <span class="hljs-attr">indicator-dots</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- 是否显示面板指示点 --&gt;</span><br><span class="hljs-comment">&lt;!-- 第一个轮播图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第二个轮播图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 第三个轮播图 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* pages/a/a.wxss */</span><br><span class="hljs-selector-class">.swioer-container</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">150px</span>;<br>&#125;<br><span class="hljs-selector-class">.item</span>&#123;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">150px</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br>swiper-item<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) <span class="hljs-selector-class">.item</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: aqua;<br>&#125;<br>swiper-item<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) <span class="hljs-selector-class">.item</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">101</span>, <span class="hljs-number">211</span>, <span class="hljs-number">116</span>);<br>&#125;<br>swiper-item<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) <span class="hljs-selector-class">.item</span>&#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">231</span>, <span class="hljs-number">102</span>, <span class="hljs-number">113</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>swiper组件的常用属性：</p><p><img src="C:\Users\xin\AppData\Roaming\Typora\typora-user-images\image-20220418162251719.png" alt="image-20220418162251719"></p><h4 id="常用的基础内容组件"><a href="#常用的基础内容组件" class="headerlink" title="常用的基础内容组件"></a>常用的基础内容组件</h4><h5 id="text文本组件"><a href="#text文本组件" class="headerlink" title="text文本组件"></a>text文本组件</h5><p> 类似于 HTML 中的 span 标签，是一个行内元素</p><h5 id="rich-text富文本组件"><a href="#rich-text富文本组件" class="headerlink" title="rich-text富文本组件"></a>rich-text富文本组件</h5><p> 支持把 HTML 字符串渲染为 WXML 结构  </p><h5 id="text-组件的基本使用"><a href="#text-组件的基本使用" class="headerlink" title="text 组件的基本使用"></a>text 组件的基本使用</h5><p>通过 text 组件的 selectable 属性，实现长按选中文本内容的效果：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650271035868.png" style="zoom: 80%;" /><p>结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- pages/a/a.wxml --&gt;</span><br><span class="hljs-comment">&lt;!-- 常用的基础内容组件txet和rich-text的用法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br>手机号支持长按选中效果<br><span class="hljs-tag">&lt;<span class="hljs-name">text</span> <span class="hljs-attr">user-select</span>&gt;</span>1324534623<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="rich-text-组件的基本使用"><a href="#rich-text-组件的基本使用" class="headerlink" title="rich-text 组件的基本使用"></a>rich-text 组件的基本使用</h5><p>通过 rich-text 组件的 nodes 属性节点，把 HTML 字符串渲染为对应的 UI 结构：  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650271343905.png"></p><p>结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">nodes</span>=<span class="hljs-string">&quot;&lt;h1 style=&#x27;color: red;&#x27;&gt;标题&lt;/h1&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="其他常用组件"><a href="#其他常用组件" class="headerlink" title="其他常用组件"></a>其他常用组件</h4><h5 id="button-按钮组件"><a href="#button-按钮组件" class="headerlink" title="button 按钮组件"></a>button 按钮组件</h5><p>功能比 HTML 中的 button 按钮丰富<br> 通过 open-type 属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）</p><h5 id="button-按钮的基本使用"><a href="#button-按钮的基本使用" class="headerlink" title="button 按钮的基本使用"></a>button 按钮的基本使用</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650272488115.png" style="zoom:67%;" /><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- pages/a/a.wxml --&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮组件的基本使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>-----通过type属性指定按钮颜色类型------- <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>普通按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span>&gt;</span>主色调按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warn&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>-----通过size属性指定按钮大小类型------- <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>普通按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>主色调按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>-----通过plain属性设置镂空按钮------- <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">plain</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>普通按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">plain</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>主色调按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">plain</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>警告按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="image图片组件"><a href="#image图片组件" class="headerlink" title="image图片组件"></a>image图片组件</h5><p> image 组件默认宽度约 300px、高度约 240px</p><h5 id="image-组件的基本使用"><a href="#image-组件的基本使用" class="headerlink" title="image 组件的基本使用"></a>image 组件的基本使用</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650273012785.png" style="zoom:67%;" /><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- pages/a/a.wxml --&gt;</span><br><span class="hljs-comment">&lt;!--  image 组件的基本使用--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/images/1.png&quot;</span> <span class="hljs-attr">mode</span>=<span class="hljs-string">&quot;aspectFit&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="image-组件的-mode-属性"><a href="#image-组件的-mode-属性" class="headerlink" title="image 组件的 mode 属性"></a>image 组件的 mode 属性</h6><p>image 组件的 mode 属性用来指定图片的裁剪和缩放模式，常用的 mode 属性值如下：  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650272903084.png"></p><h5 id="navigator（后面课程会专门讲解）页面导航组件"><a href="#navigator（后面课程会专门讲解）页面导航组件" class="headerlink" title="navigator（后面课程会专门讲解）页面导航组件"></a>navigator（后面课程会专门讲解）页面导航组件</h5><p> 类似于 HTML 中的 a 链接  </p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (2.微信小程序宿主环境)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/02.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%BF%E4%B8%BB%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/02.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%AE%BF%E4%B8%BB%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h2 id="小程序的宿主环境"><a href="#小程序的宿主环境" class="headerlink" title="小程序的宿主环境"></a>小程序的宿主环境</h2><h3 id="宿主环境（host-environment）"><a href="#宿主环境（host-environment）" class="headerlink" title="宿主环境（host environment）"></a>宿主环境（host environment）</h3><p>指的是程序运行所必须的依赖环境。例如：<br>Android 系统和 iOS 系统是两个不同的宿主环境。安卓版的微信 App 是不能在 iOS 环境下运行的，所以Android 是安卓软件的宿主环境，脱离了宿主环境的软件是没有任何意义的！</p><h3 id="手机微信是小程序的宿主环境"><a href="#手机微信是小程序的宿主环境" class="headerlink" title="手机微信是小程序的宿主环境"></a>手机微信是小程序的宿主环境</h3><p>小程序借助宿主环境提供的能力，可以完成许多普通网页无法完成的功能，例如：微信扫码、微信支付、微信登录、地理定位、etc</p><h3 id="小程序宿主环境包含的内容"><a href="#小程序宿主环境包含的内容" class="headerlink" title="小程序宿主环境包含的内容"></a>小程序宿主环境包含的内容</h3><h4 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h4><h5 id="1-通信的主体"><a href="#1-通信的主体" class="headerlink" title="1.通信的主体"></a>1.通信的主体</h5><p>小程序中通信的主体是渲染层和逻辑层，其中：<br>① WXML 模板和 WXSS 样式工作在渲染层<br>② JS 脚本工作在逻辑层</p><h5 id="2-小程序的通信模型"><a href="#2-小程序的通信模型" class="headerlink" title="2.小程序的通信模型"></a>2.小程序的通信模型</h5><p>小程序中的通信模型分为两部分：<br>① 渲染层和逻辑层之间的通信<br> 由微信客户端进行转发<br>② 逻辑层和第三方服务器之间的通信<br> 由微信客户端进行转发</p><h4 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h4><h5 id="小程序启动的过程"><a href="#小程序启动的过程" class="headerlink" title="小程序启动的过程"></a>小程序启动的过程</h5><p>① 把小程序的代码包下载到本地<br>② 解析 app.json 全局配置文件<br>③ 执行 app.js 小程序入口文件，调用 App() 创建小程序实例<br>④ 渲染小程序首页<br>⑤ 小程序启动完成</p><h5 id="页面渲染的过程"><a href="#页面渲染的过程" class="headerlink" title="页面渲染的过程"></a>页面渲染的过程</h5><p>① 加载解析页面的 .json 配置文件<br>② 加载页面的 .wxml 模板和 .wxss 样式<br>③ 执行页面的 .js 文件，调用 Page() 创建页面实例<br>④ 页面渲染完成</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (5.微信小程序模板与配置)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/05.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/05.%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A8%A1%E6%9D%BF%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="小程序模板与配置"><a href="#小程序模板与配置" class="headerlink" title="小程序模板与配置"></a>小程序模板与配置</h2><h3 id="WXML-模板语法"><a href="#WXML-模板语法" class="headerlink" title="WXML 模板语法"></a>WXML 模板语法</h3><h4 id="WXML-模板语法-数据绑定"><a href="#WXML-模板语法-数据绑定" class="headerlink" title="WXML 模板语法 - 数据绑定"></a>WXML 模板语法 - 数据绑定</h4><h5 id="1-数据绑定的基本原则"><a href="#1-数据绑定的基本原则" class="headerlink" title="1.数据绑定的基本原则"></a>1.数据绑定的基本原则</h5><p>① 在 data 中定义数据</p><p>② 在 WXML 中使用数据  </p><h5 id="2-在-data-中定义页面的数据"><a href="#2-在-data-中定义页面的数据" class="headerlink" title="2.在 data 中定义页面的数据"></a>2.在 data 中定义页面的数据</h5><p>在页面对应的 .js 文件中，把数据定义到 data 对象中即可： </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650275692933.png" style="zoom: 80%;" /> <h5 id="3-Mustache-语法的格式"><a href="#3-Mustache-语法的格式" class="headerlink" title="3.Mustache 语法的格式"></a>3.Mustache 语法的格式</h5><p>把data中的数据绑定到页面中渲染，使用 Mustache 语法（双大括号）将变量包起来即可。语法格式为：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650275739400.png" style="zoom: 80%;" /><h5 id="4-Mustache-语法的应用场景"><a href="#4-Mustache-语法的应用场景" class="headerlink" title="4.Mustache 语法的应用场景"></a>4.Mustache 语法的应用场景</h5><p>Mustache 语法的主要应用场景如下：<br> 绑定内容<br> 绑定属性<br> 运算（三元运算、算术运算等）  </p><h5 id="5-动态绑定内容"><a href="#5-动态绑定内容" class="headerlink" title="5.动态绑定内容"></a>5.动态绑定内容</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650275930225.png" style="zoom: 67%;" /><h5 id="6-动态绑定属性"><a href="#6-动态绑定属性" class="headerlink" title="6. 动态绑定属性"></a>6. 动态绑定属性</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650275985108.png" style="zoom:67%;" /><p>示例：</p><p>绑定：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650276358968.png" style="zoom:67%;" /><p>调用;</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650276529355.png" style="zoom:67%;" /><h5 id="7-三元运算"><a href="#7-三元运算" class="headerlink" title="7.三元运算"></a>7.三元运算</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650276618862.png" style="zoom:67%;" /><p>示例：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650294533791.png" style="zoom:67%;" /><p>效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650294574834.png" style="zoom:67%;" /><h5 id="8-算数运算"><a href="#8-算数运算" class="headerlink" title="8.算数运算"></a>8.算数运算</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650294848500.png" style="zoom:67%;" /><h4 id="WXML-模板语法-事件绑定"><a href="#WXML-模板语法-事件绑定" class="headerlink" title="WXML 模板语法 - 事件绑定"></a>WXML 模板语法 - 事件绑定</h4><h5 id="1-什么是事件"><a href="#1-什么是事件" class="headerlink" title="1.什么是事件"></a>1.什么是事件</h5><p>事件是渲染层到逻辑层的通讯方式。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650294987804.png" style="zoom:67%;" /><h5 id="2-小程序中常用的事件"><a href="#2-小程序中常用的事件" class="headerlink" title="2. 小程序中常用的事件"></a>2. 小程序中常用的事件</h5><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650295562887.png"></p><h5 id="3-事件对象的属性列表"><a href="#3-事件对象的属性列表" class="headerlink" title="3.事件对象的属性列表"></a>3.事件对象的属性列表</h5><p>当事件回调触发的时候，会收到一个事件对象 event，它的详细属性如下表所示  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650295525316.png"></p><h5 id="4-target-和-currentTarget-的区别"><a href="#4-target-和-currentTarget-的区别" class="headerlink" title="4. target 和 currentTarget 的区别"></a>4. target 和 currentTarget 的区别</h5><p>target 是触发该事件的源头组件，而 currentTarget 则是当前事件所绑定的组件。</p><p> currentTarget 是绑定的那个，target 是实际被点击的那个。</p><p>举例如下：  </p><p><img src="C:\Users\xin\AppData\Roaming\Typora\typora-user-images\image-20220418232647920.png" alt="image-20220418232647920"></p><p>点击内部的按钮时，点击事件以冒泡的方式向外扩散，也会触发外层 view 的 tap 事件处理函数。<br>此时，对于外层的 view 来说：<br> e.target 指向的是触发事件的源头组件，因此，e.target 是内部的按钮组件<br> e.currentTarget 指向的是当前正在触发事件的那个组件，因此，e.currentTarget 是当前的 view 组件  </p><h5 id="5-bindtap-的语法格式"><a href="#5-bindtap-的语法格式" class="headerlink" title="5. bindtap 的语法格式"></a>5. bindtap 的语法格式</h5><p>在小程序中，不存在 HTML 中的 onclick 鼠标点击事件，而是通过 tap 事件来响应用户的触摸行为。<br>① 通过 bindtap，可以为组件绑定 tap 触摸事件，语法如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 绑定事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;bthTapHandler&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>② 在页面的 .js 文件中定义对应的事件处理函数，事件参数通过形参 event（一般简写成 e） 来接收：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page</span>(&#123;<br>    <span class="hljs-comment">//定义事件函数</span><br>    <span class="hljs-title function_">bthTapHandler</span>(<span class="hljs-params">e</span>)&#123; <span class="hljs-comment">//按钮的 tap 事件处理函数</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<span class="hljs-comment">//事件参数对象 e</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="6-在事件处理函数中为-data-中的数据赋值"><a href="#6-在事件处理函数中为-data-中的数据赋值" class="headerlink" title="6. 在事件处理函数中为 data 中的数据赋值"></a>6. 在事件处理函数中为 data 中的数据赋值</h5><p>通过调用 this.setData(dataObject) 方法，可以给页面 data 中的数据重新赋值，示例如下：  </p><p>js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">//修改 count 的值 (加一按钮)</span><br>  <span class="hljs-title function_">changCount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>    &#125;)<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>wxhl文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;changCount&quot;</span>&gt;</span> +1 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：点击+1     count:的值加一</p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650299352548.png"></p><h5 id="7-事件传参"><a href="#7-事件传参" class="headerlink" title="7. 事件传参"></a>7. 事件传参</h5><p>小程序中的事件传参比较特殊，不能在绑定事件的同时为事件处理函数传递参数。例如，下面的代码将不能正常工作：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&#x27;btnHandler(123)&#x27;</span>&gt;</span>事件传参<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为小程序会把 bindtap 的属性值，统一当作事件名称来处理，相当于要调用一个名称为 btnHandler(123)的事件处理函数。  </p><p>可以为组件提供 data-* 自定义属性传参，其中 * 代表的是参数的名字，示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap:</span>=<span class="hljs-string">&quot;btnHandler&quot;</span> <span class="hljs-attr">data-info</span>=<span class="hljs-string">&quot;&#123;&#123;2&#125;&#125;&quot;</span>&gt;</span>事件传参<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终：<br>         info 会被解析为参数的名字<br>         数值 2 会被解析为参数的值  </p><p>在事件处理函数中，通过 event.target.dataset.参数名 即可获取到具体参数的值，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">btnHandler</span>(<span class="hljs-params">event</span>)&#123;<br><span class="hljs-comment">//dataset是一个对象，包含了所有通过data-*传递过来的参数项</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>)<br><span class="hljs-comment">//通过dataset可以访问到具体参数的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">info</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>示例：</strong>利用事件传参实现加二按钮</p><p>js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-comment">//修改 count 的值 (加二按钮)</span><br>  <span class="hljs-title function_">btnHandler</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">count</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + event.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">info</span>  <span class="hljs-comment">//重点！</span><br>    &#125;)<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>wxhl文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;btnHandler&quot;</span> <span class="hljs-attr">data-info</span>=<span class="hljs-string">&quot;&#123;&#123;2&#125;&#125;&quot;</span>&gt;</span> +2 <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：按下+2，count的值加2</p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650299546321.png"></p><h5 id="8-bindinput-的语法格式"><a href="#8-bindinput-的语法格式" class="headerlink" title="8.bindinput 的语法格式"></a>8.bindinput 的语法格式</h5><p>在小程序中，通过 input 事件来响应文本框的输入事件，语法格式如下：<br>① 通过 bindinput，可以为文本框绑定输入事件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;inputHandler&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>② 在页面的 .js 文件中定义事件处理函数：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//输入框事件处理函数</span><br><span class="hljs-title function_">inputHandler</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-comment">//e.detail.value是变化过后，文本框的最新值</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span>)<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="9-实现文本框和-data-之间的数据同步"><a href="#9-实现文本框和-data-之间的数据同步" class="headerlink" title="9.实现文本框和 data 之间的数据同步"></a>9.实现文本框和 data 之间的数据同步</h5><p>实现步骤：<br>① 定义数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">page</span>(&#123;<br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">msg</span>:<span class="hljs-string">&#x27;你好，&#x27;</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>② 渲染结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#123;&#123;msg&#125;&#125;&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;inputHandler&quot;</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>③ 美化样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>&#123;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#eee</span>;<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;<br><span class="hljs-attribute">margin</span>:<span class="hljs-number">5px</span>;<br><span class="hljs-attribute">border-radius</span>:<span class="hljs-number">3px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>④ 绑定 input 事件处理函数  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//文本框内容改变事件</span><br><span class="hljs-title function_">inputHandler</span>(<span class="hljs-params">e</span>)&#123;<br> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>  <span class="hljs-comment">//e.detail.value是变化过后，文本框的最新值</span><br>  <span class="hljs-attr">msg</span>:e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span><br>    &#125;)     <br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="WXML-模板语法-条件渲染"><a href="#WXML-模板语法-条件渲染" class="headerlink" title="WXML 模板语法 - 条件渲染"></a>WXML 模板语法 - 条件渲染</h4><h5 id="1-wx-if"><a href="#1-wx-if" class="headerlink" title="1.wx:if"></a>1.wx:if</h5><p>在小程序中，使用 wx:if&#x3D;”“ 来判断是否需要渲染该代码块：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span>True <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用 wx:elif 和 wx:else 来添加 else 判断：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;type ==1&#125;&#125;&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;&#123;&#123;type ==2&#125;&#125;&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span>保密<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-结合-block-使用-wx-if"><a href="#2-结合-block-使用-wx-if" class="headerlink" title="2.结合 block 使用 wx:if"></a>2.结合 block 使用 wx:if</h5><p>如果要一次性控制多个组件的展示与隐藏，可以使用一个 <block></block>标签将多个组件包装起来，并在<br><block> 标签上使用 wx:if 控制属性，示例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>view1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>view2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意： <block> 并不是一个组件，它只是一个包裹性质的容器，不会在页面中做任何渲染。  </p><h5 id="4-hidden"><a href="#4-hidden" class="headerlink" title="4. hidden"></a>4. hidden</h5><p>在小程序中，直接使用 hidden&#x3D;”“ 也能控制元素的显示与隐藏：  </p><p>根据condition的值（true&#x2F;false）来判断：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">hidden</span>=<span class="hljs-string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span>条件为true隐藏，条件为false显示<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-wx-if-与-hidden-的对比"><a href="#4-wx-if-与-hidden-的对比" class="headerlink" title="4.wx:if 与 hidden 的对比"></a>4.wx:if 与 hidden 的对比</h5><p>① 运行方式不同<br> wx:if 以动态创建和移除元素的方式，控制元素的展示与隐藏<br> hidden 以切换样式的方式（display: none&#x2F;block;），控制元素的显示与隐藏</p><p>② 使用建议<br> 频繁切换时，建议使用 hidden<br> 控制条件复杂时，建议使用 wx:if 搭配 wx:elif、wx:else 进行展示与隐藏的切换  </p><h4 id="WXML-模板语法-列表渲染"><a href="#WXML-模板语法-列表渲染" class="headerlink" title="WXML 模板语法 - 列表渲染"></a>WXML 模板语法 - 列表渲染</h4><h5 id="1-wx-for"><a href="#1-wx-for" class="headerlink" title="1.wx:for"></a>1.wx:for</h5><p>通过 wx:for 可以根据指定的数组，循环渲染重复的组件结构，语法示例如下：</p><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">array</span>:[<span class="hljs-string">&#x27;苹果&#x27;</span>,<span class="hljs-string">&#x27;华为&#x27;</span>,<span class="hljs-string">&#x27;小米&#x27;</span>]<br>&#125;,<br></code></pre></td></tr></table></figure><p>wxml:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span><br>索引是：&#123;&#123;index&#125;&#125;当前项是：&#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650331942932.png" style="zoom:67%;" /><p>默认情况下，当前循环项的索引用 index 表示；当前循环项用 item 表示。  </p><h5 id="2-手动指定索引和当前项的变量名"><a href="#2-手动指定索引和当前项的变量名" class="headerlink" title="2.手动指定索引和当前项的变量名"></a>2.手动指定索引和当前项的变量名</h5><p> 使用 wx:for-index 可以指定当前循环项的索引的变量名<br> 使用 wx:for-item 可以指定当前项的变量名<br>示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span><span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span><span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;itemName&quot;</span>&gt;</span><br>索引是：&#123;&#123;idx&#125;&#125;当前项是：&#123;itemName&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-wx-key-的使用"><a href="#3-wx-key-的使用" class="headerlink" title="3.wx:key 的使用"></a>3.wx:key 的使用</h5><p>类似于 Vue 列表渲染中的 :key，小程序在实现列表渲染时，也建议为渲染出来的列表项指定唯一的 key 值，<br>从而提高渲染的效率，示例代码如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//.js  data数据</span><br><span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">userList</span>:[<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小红&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小黄&#x27;</span>&#125;,<br>      &#123;<span class="hljs-attr">id</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;小白&#x27;</span>&#125;<br>     ]<br>&#125;<br></code></pre></td></tr></table></figure><p>wxml代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;userList&#125;&#125;&quot;</span><span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="WXSS-模板样式"><a href="#WXSS-模板样式" class="headerlink" title="WXSS 模板样式"></a>WXSS 模板样式</h3><h4 id="1-什么是-WXSS"><a href="#1-什么是-WXSS" class="headerlink" title="1. 什么是 WXSS"></a>1. 什么是 WXSS</h4><p>WXSS (WeiXin Style Sheets)是一套样式语言，用于美化 WXML 的组件样式，类似于网页开发中的 CSS。  </p><h4 id="2-WXSS-和-CSS-的关系"><a href="#2-WXSS-和-CSS-的关系" class="headerlink" title="2.WXSS 和 CSS 的关系"></a>2.WXSS 和 CSS 的关系</h4><p>WXSS 具有 CSS 大部分特性，同时，WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。<br>与 CSS 相比，WXSS 扩展的特性有：</p><p>WXSS 具有 CSS 大部分特性，同时，WXSS 还对 CSS 进行了扩充以及修改，以适应微信小程序的开发。<br>与 CSS 相比，WXSS 扩展的特性有：</p><ol><li>rpx 尺寸单位</li><li>@import 样式导入</li></ol><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650333929028.png" style="zoom:67%;" /><h4 id="WXSS-模板样式-rpx"><a href="#WXSS-模板样式-rpx" class="headerlink" title="WXSS 模板样式- rpx"></a>WXSS 模板样式- rpx</h4><h5 id="1-什么是-rpx-尺寸单位"><a href="#1-什么是-rpx-尺寸单位" class="headerlink" title="1.什么是 rpx 尺寸单位"></a>1.什么是 rpx 尺寸单位</h5><p>rpx（responsive pixel）是微信小程序独有的，用来解决屏适配的尺寸单位。  </p><h5 id="2-rpx-的实现原理"><a href="#2-rpx-的实现原理" class="headerlink" title="2.rpx 的实现原理"></a>2.rpx 的实现原理</h5><p>rpx 的实现原理非常简单：鉴于不同设备屏幕的大小不同，为了实现屏幕的自动适配，rpx 把所有设备的屏幕，<br>在宽度上等分为 750 份（即：当前屏幕的总宽度为 750rpx）。<br>在较小的设备上，1rpx 所代表的宽度较小<br>在较大的设备上，1rpx 所代表的宽度较大<br>小程序在不同设备上运行的时候，会自动把 rpx 的样式单位换算成对应的像素单位来渲染，从而实现屏幕适配。  </p><h5 id="3-rpx-与-px-之间的单位换算"><a href="#3-rpx-与-px-之间的单位换算" class="headerlink" title="3.rpx 与 px 之间的单位换算*"></a>3.rpx 与 px 之间的单位换算*</h5><p>在 iPhone6 上，屏幕宽度为375px，共有 750 个物理像素，等分为 750rpx。则：<br>750rpx &#x3D; 375px &#x3D; 750 物理像素<br>1rpx &#x3D; 0.5px &#x3D; 1物理像素  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650334417413.png" style="zoom:67%;" /><p>官方建议：开发微信小程序时，设计师可以用 iPhone6 作为视觉稿的标准。<br>开发举例：在 iPhone6 上如果要绘制宽100px，高20px的盒子，换算成rpx单位，宽高分别为 200rpx 和 40rpx。  </p><h4 id="WXSS-模板样式-样式导入"><a href="#WXSS-模板样式-样式导入" class="headerlink" title="WXSS 模板样式 - 样式导入"></a>WXSS 模板样式 - 样式导入</h4><h5 id="1-什么是样式导入"><a href="#1-什么是样式导入" class="headerlink" title="1.什么是样式导入"></a>1.什么是样式导入</h5><p>使用 WXSS 提供的 @import 语法，可以导入外联的样式表。  </p><h5 id="2-import-的语法格式"><a href="#2-import-的语法格式" class="headerlink" title="2.@import 的语法格式"></a>2.@import 的语法格式</h5><p>@import 后跟需要导入的外联样式表的相对路径，用 ; 表示语句结束。示例如下：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650334716433.png" style="zoom:67%;" /><h4 id="WXSS-模板样式-全局样式和局部样式"><a href="#WXSS-模板样式-全局样式和局部样式" class="headerlink" title="WXSS 模板样式 - 全局样式和局部样式"></a>WXSS 模板样式 - 全局样式和局部样式</h4><h5 id="1-全局样式"><a href="#1-全局样式" class="headerlink" title="1. 全局样式"></a>1. 全局样式</h5><p>定义在 app.wxss 中的样式为全局样式，作用于每一个页面。  </p><h5 id="2-局部样式"><a href="#2-局部样式" class="headerlink" title="2.局部样式"></a>2.局部样式</h5><p>在页面的 .wxss 文件中定义的样式为局部样式，只作用于当前页面。<br>注意：<br>① 当局部样式和全局样式冲突时，根据就近原则，局部样式会覆盖全局样式<br>② 当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局的样式  </p><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="全局配置文件及常用的配置项"><a href="#全局配置文件及常用的配置项" class="headerlink" title="全局配置文件及常用的配置项"></a>全局配置文件及常用的配置项</h4><p>小程序根目录下的 app.json 文件是小程序的全局配置文件。常用的配置项如下：<br>① pages<br> 记录当前小程序所有页面的存放路径<br>② window<br> 全局设置小程序窗口的外观<br>③ tabBar<br> 设置小程序底部的 tabBar 效果<br>④ style<br> 是否启用新版的组件样式  </p><h4 id="全局配置-window"><a href="#全局配置-window" class="headerlink" title="全局配置 - window"></a>全局配置 - window</h4><h5 id="1-小程序窗口的组成部分"><a href="#1-小程序窗口的组成部分" class="headerlink" title="1.小程序窗口的组成部分"></a>1.小程序窗口的组成部分</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650335447115.png" style="zoom:67%;" /><h5 id="2-了解-window-节点常用的配置项"><a href="#2-了解-window-节点常用的配置项" class="headerlink" title="2.了解 window 节点常用的配置项"></a>2.了解 window 节点常用的配置项</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650335548757.png" style="zoom:67%;" /><h5 id="3-设置导航栏的标题"><a href="#3-设置导航栏的标题" class="headerlink" title="3.设置导航栏的标题"></a>3.设置导航栏的标题</h5><p>设置步骤：app.json -&gt; window -&gt; navigationBarTitleText<br>需求：把导航栏上的标题，从默认的 “WeChat”修改为“黑马程序员”，效果如图所示：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650335704219.png" style="zoom:67%;" /><h5 id="4-设置导航栏的背景色"><a href="#4-设置导航栏的背景色" class="headerlink" title="4.设置导航栏的背景色"></a>4.设置导航栏的背景色</h5><p>设置步骤：app.json -&gt; window -&gt; navigationBarBackgroundColor<br>需求：把导航栏标题的背景色，从默认的 #fff 修改为 #2b4b6b ，效果如图所示：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650335768810.png" style="zoom:67%;" /><h5 id="5-设置导航栏的标题颜色"><a href="#5-设置导航栏的标题颜色" class="headerlink" title="5. 设置导航栏的标题颜色"></a>5. 设置导航栏的标题颜色</h5><p>设置步骤：app.json -&gt; window -&gt; navigationBarTextStyle<br>需求：把导航栏上的标题颜色，从默认的 black 修改为 white ，效果如图所示：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650335910069.png" style="zoom:67%;" /><p>注意： navigationBarTextStyle 的可选值只有 black 和 white  </p><h5 id="6-全局开启下拉刷新功能"><a href="#6-全局开启下拉刷新功能" class="headerlink" title="6. 全局开启下拉刷新功能"></a>6. 全局开启下拉刷新功能</h5><p>概念：下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行为。<br>设置步骤：app.json -&gt; window -&gt; 把 enablePullDownRefresh 的值设置为 true</p><p>注意：在 app.json 中启用下拉刷新功能，会作用于每个小程序页面！  </p><h5 id="7-设置下拉刷新时窗口的背景色"><a href="#7-设置下拉刷新时窗口的背景色" class="headerlink" title="7.设置下拉刷新时窗口的背景色"></a>7.设置下拉刷新时窗口的背景色</h5><p>当全局开启下拉刷新功能之后，默认的窗口背景为白色。如果自定义下拉刷新窗口背景色，设置步骤为:<br>app.json -&gt; window -&gt; 为 backgroundColor 指定16进制的颜色值 #efefef。效果如下：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650336417559.png" style="zoom:67%;" /><h5 id="8-设置下拉刷新时-loading-的样式"><a href="#8-设置下拉刷新时-loading-的样式" class="headerlink" title="8. 设置下拉刷新时 loading 的样式"></a>8. 设置下拉刷新时 loading 的样式</h5><p>当全局开启下拉刷新功能之后，默认窗口的 loading 样式为白色，如果要更改 loading 样式的效果，设置步<br>骤为 app.json -&gt; window -&gt; 为 backgroundTextStyle 指定 dark 值。效果如下：  </p><img src="C:\Users\xin\AppData\Roaming\Typora\typora-user-images\image-20220419104857074.png" alt="image-20220419104857074" style="zoom:67%;" /><p>注意： backgroundTextStyle 的可选值只有 light 和 dark  </p><h5 id="9-设置上拉触底的距离"><a href="#9-设置上拉触底的距离" class="headerlink" title="9.设置上拉触底的距离"></a>9.设置上拉触底的距离</h5><p>概念：上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。<br>设置步骤： app.json -&gt; window -&gt; 为 onReachBottomDistance 设置新的数值<br>注意：默认距离为50px，如果没有特殊需求，建议使用默认值即可。  </p><h4 id="全局配置-tabBar"><a href="#全局配置-tabBar" class="headerlink" title="全局配置 - tabBar"></a>全局配置 - tabBar</h4><h5 id="1-什么是-tabBar"><a href="#1-什么是-tabBar" class="headerlink" title="1.什么是 tabBar"></a>1.什么是 tabBar</h5><p>tabBar 是移动端应用常见的页面效果，用于实现多页面的快速切换。小程序中通常将其分为：<br>底部 tabBar      顶部 tabBar</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650337142163.png" style="zoom:67%;" /><p>注意：<br> tabBar中只能配置最少 2 个、最多 5 个 tab 页签. 当渲染顶部 tabBar 时，不显示 icon，只显示文本  </p><h5 id="2-tabBar-的-6-个组成部分"><a href="#2-tabBar-的-6-个组成部分" class="headerlink" title="2. tabBar 的 6 个组成部分"></a>2. tabBar 的 6 个组成部分</h5><p>① backgroundColor：tabBar 的背景色<br>② selectedIconPath：选中时的图片路径<br>③ borderStyle：tabBar 上边框的颜色<br>④ iconPath：未选中时的图片路径<br>⑤ selectedColor：tab 上的文字选中时的颜色<br>⑥ color：tab 上文字的默认（未选中）颜 色</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650337250686.png" style="zoom:67%;" /><h5 id="3-tabBar-节点的配置项"><a href="#3-tabBar-节点的配置项" class="headerlink" title="3. tabBar 节点的配置项"></a>3. tabBar 节点的配置项</h5><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650337827339.png"></p><h5 id="4-每个-tab-项的配置选项"><a href="#4-每个-tab-项的配置选项" class="headerlink" title="4.每个 tab 项的配置选项"></a>4.每个 tab 项的配置选项</h5><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650337815060.png"></p><p>示例：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650338101311.png" style="zoom:67%;" /><h5 id="全局配置-案例：配置-tabBar"><a href="#全局配置-案例：配置-tabBar" class="headerlink" title="全局配置 - 案例：配置 tabBar"></a>全局配置 - 案例：配置 tabBar</h5><h6 id="1-根据资料中提供的小图标、在小程序中配置如图所示的tabBar-效果"><a href="#1-根据资料中提供的小图标、在小程序中配置如图所示的tabBar-效果" class="headerlink" title="1.根据资料中提供的小图标、在小程序中配置如图所示的tabBar 效果"></a>1.根据资料中提供的小图标、在小程序中配置如图所示的tabBar 效果</h6><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650338275888.png" style="zoom:67%;" /><h6 id="2-实现步骤"><a href="#2-实现步骤" class="headerlink" title="2.实现步骤"></a>2.实现步骤</h6><p>① 拷贝图标资源<br>② 新建 3 个对应的 tab 页面<br>③ 配置 tabBar 选项  </p><h6 id="3-步骤1-拷贝图标资源"><a href="#3-步骤1-拷贝图标资源" class="headerlink" title="3. 步骤1 - 拷贝图标资源"></a>3. 步骤1 - 拷贝图标资源</h6><p>① 把资料目录中的 images 文件夹，拷贝到小程序项目根目录中<br>② 将需要用到的小图标分为 3 组，每组两个，其中：<br> 图片名称中包含 -active 的是选中之后的图标<br> 图片名称中不包含 -active 的是默认图标<br>截图如下  ：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650338407777.png" style="zoom:67%;" /><h6 id="步骤2-新建-3-个对应的-tab-页面"><a href="#步骤2-新建-3-个对应的-tab-页面" class="headerlink" title="步骤2 - 新建 3 个对应的 tab 页面"></a>步骤2 - 新建 3 个对应的 tab 页面</h6><p>通过 app.json 文件的 pages 节点，快速新建 3 个对应的 tab 页面，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <br><span class="hljs-string">&quot;pages&quot;</span>:[<br>    <span class="hljs-string">&quot;pages/home/home&quot;</span>,<br>    <span class="hljs-string">&quot;pages/message/message&quot;</span>,<br>    <span class="hljs-string">&quot;pages/contact/contact&quot;</span><br>  ],<br>&#125;<br></code></pre></td></tr></table></figure><p>其中，home 是首页，message 是消息页面，contact 是联系我们页面。  </p><h6 id="步骤3-配置-tabBar-选项"><a href="#步骤3-配置-tabBar-选项" class="headerlink" title="步骤3 - 配置 tabBar 选项"></a>步骤3 - 配置 tabBar 选项</h6><p>① 打开 app.json 配置文件，和 pages、window 平级，新增 tabBar 节点<br>② tabBar 节点中，新增 list 数组，这个数组中存放的，是每个 tab 项的配置对象<br>③ 在 list 数组中，新增每一个 tab 项的配置对象。对象中包含的属性如下：<br> pagePath 指定当前 tab 对应的页面路径【必填】<br> text 指定当前 tab 上按钮的文字【必填】<br> iconPath 指定当前 tab 未选中时候的图片路径【可选】<br> selectedIconPath 指定当前 tab 被选中后高亮的图片路径【可选】  </p><p>代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;tabBar&quot;</span>: &#123;<br>  <span class="hljs-string">&quot;list&quot;</span>: [&#123;<br>    <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/home/home&quot;</span>,<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;首页&quot;</span>,<br>    <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/images/tabs/home.png&quot;</span>,<br>    <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/images/tabs/home-active.png&quot;</span><br>  &#125;,&#123;<br>    <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/message/message&quot;</span>,<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;消息&quot;</span>,<br>    <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/images/tabs/message.png&quot;</span>,<br>    <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/images/tabs/message-active.png&quot;</span><br>  &#125;,&#123;<br>    <span class="hljs-string">&quot;pagePath&quot;</span>: <span class="hljs-string">&quot;pages/contact/contact&quot;</span>,<br>    <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;联系我们&quot;</span>,<br>    <span class="hljs-string">&quot;iconPath&quot;</span>: <span class="hljs-string">&quot;/images/tabs/contact.png&quot;</span>,<br>    <span class="hljs-string">&quot;selectedIconPath&quot;</span>: <span class="hljs-string">&quot;/images/tabs/contact-active.png&quot;</span><br>  &#125;]<br>&#125;,<br></code></pre></td></tr></table></figure><p>效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650339313283.png" style="zoom:67%;" /><h3 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h3><h4 id="1-页面配置文件的作用"><a href="#1-页面配置文件的作用" class="headerlink" title="1. 页面配置文件的作用"></a>1. 页面配置文件的作用</h4><p>小程序中，每个页面都有自己的 .json 配置文件，用来对当前页面的窗口外观、页面效果等进行配置。  </p><h4 id="2-页面配置和全局配置的关系"><a href="#2-页面配置和全局配置的关系" class="headerlink" title="2.页面配置和全局配置的关系"></a>2.页面配置和全局配置的关系</h4><p>小程序中，app.json 中的 window 节点，可以全局配置小程序中每个页面的窗口表现。<br>如果某些小程序页面想要拥有特殊的窗口表现，此时，“页面级别的 .json 配置文件”就可以实现这种需求。<br>注意：当页面配置与全局配置冲突时，根据就近原则，最终的效果以页面配置为准。  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650340309160.png"></p><h3 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h3><h4 id="1-小程序中网络数据请求的限制"><a href="#1-小程序中网络数据请求的限制" class="headerlink" title="1.小程序中网络数据请求的限制"></a>1.小程序中网络数据请求的限制</h4><p>出于安全性方面的考虑，小程序官方对数据接口的请求做出了如下两个限制：<br>① 只能请求 HTTPS 类型的接口<br>② 必须将接口的域名添加到信任列表中  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650343146330.png" style="zoom:67%;" /><h4 id="2-配置-request-合法域名"><a href="#2-配置-request-合法域名" class="headerlink" title="2.配置 request 合法域名"></a>2.配置 request 合法域名</h4><p>需求描述：假设在自己的微信小程序中，希望请求 <a href="https://www.escook.cn/">https://www.escook.cn/</a> 域名下的接口<br>配置步骤：登录微信小程序管理后台 -&gt; 开发 -&gt; 开发设置 -&gt; 服务器域名 -&gt; 修改 request 合法域名<br>注意事项：<br>① 域名只支持 https 协议<br>② 域名不能使用 IP 地址或 localhost<br>③ 域名必须经过 ICP 备案<br>④ 服务器域名一个月内最多可申请 5 次修改  </p><h4 id="3-发起-GET-请求"><a href="#3-发起-GET-请求" class="headerlink" title="3. 发起 GET 请求"></a>3. 发起 GET 请求</h4><p>调用微信小程序提供的 wx.request() 方法，可以发起 GET 数据请求，示例代码如下：  </p><p>wxml:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;getinfo&quot;</span>&gt;</span>发起get请求<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//发起get 数据请求</span><br><span class="hljs-title function_">getinfo</span>(<span class="hljs-params"></span>)&#123;<br>  wx.<span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://w.escook.cn/api/get&#x27;</span>,<span class="hljs-comment">//请求的接口地址，必须基于https协议</span><br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,  <span class="hljs-comment">//请求的方式</span><br>    <span class="hljs-attr">data</span>:    <span class="hljs-comment">//发送到服务器的数据</span><br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">22</span><br>    &#125;,<br>    <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>&#123;                    <span class="hljs-comment">//请求成功之后的回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>    &#125;<br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="4-发起-POST-请求"><a href="#4-发起-POST-请求" class="headerlink" title="4.发起 POST 请求"></a>4.发起 POST 请求</h4><p>调用微信小程序提供的 wx.request() 方法，可以发起 POST 数据请求，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">postInfo</span>(<span class="hljs-params"></span>)&#123;<br>  wx.<span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://www.escook.cn/api/post&#x27;</span>,<span class="hljs-comment">//请求的接口地址，必须基于https协议</span><br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,  <span class="hljs-comment">//请求的方式</span><br>    <span class="hljs-attr">data</span>:    <span class="hljs-comment">//发送到服务器的数据</span><br>    &#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;Ls&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">22</span><br>    &#125;,<br>    <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span>&#123;                    <span class="hljs-comment">//请求成功之后的回调函数</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>)<br>    &#125;<br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="5-在页面刚加载时请求数据"><a href="#5-在页面刚加载时请求数据" class="headerlink" title="5.在页面刚加载时请求数据"></a>5.在页面刚加载时请求数据</h4><p>在很多情况下，我们需要在页面刚加载的时候，自动请求一些初始化的数据。此时需要在页面的 onLoad 事件<br>中调用获取数据的函数，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生命周期函数--监听页面加载</span><br><span class="hljs-comment"> */</span><br><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<span class="hljs-comment">//页面加载就会调用这两个方法</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">getinfo</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">postInfo</span><br>&#125;,<br><br></code></pre></td></tr></table></figure><h4 id="6-跳过-request-合法域名校验"><a href="#6-跳过-request-合法域名校验" class="headerlink" title="6.跳过 request 合法域名校验"></a>6.跳过 request 合法域名校验</h4><p>如果后端程序员仅仅提供了 http 协议的接口、暂时没有提供 https协议的接口。<br>此时为了不耽误开发的进度，我们可以在微信开发者工具中，临时开启「开发环境不校验请求域名、TLS 版本及 HTTPS 证书」选项，<br>跳过 request 合法域名的校验。<br>注意：跳过 request 合法域名校验的选项，仅限在开发与调试阶段使用！  </p><h4 id="6-关于跨域和-Ajax-的说明"><a href="#6-关于跨域和-Ajax-的说明" class="headerlink" title="6.关于跨域和 Ajax 的说明"></a>6.关于跨域和 Ajax 的说明</h4><p>跨域问题只存在于基于浏览器的 Web 开发中。由于小程序的宿主环境不是浏览器，而是微信客户端，所以小<br>程序中不存在跨域的问题。<br>Ajax 技术的核心是依赖于浏览器中的 XMLHttpRequest 这个对象，由于小程序的宿主环境是微信客户端，所<br>以小程序中不能叫做“发起 Ajax 请求”，而是叫做“发起网络数据请求”。  </p><h3 id="案例：本地生活首页："><a href="#案例：本地生活首页：" class="headerlink" title="案例：本地生活首页："></a>案例：本地生活首页：</h3><h5 id="1-首页效果以及实现步骤"><a href="#1-首页效果以及实现步骤" class="headerlink" title="1.首页效果以及实现步骤"></a>1.首页效果以及实现步骤</h5><p>① 新建项目并梳理项目结构<br>② 配置导航栏效果<br>③ 配置 tabBar 效果<br>④ 实现轮播图效果<br>⑤ 实现九宫格效果<br>⑥ 实现图片布局  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650362353675.png" style="zoom:67%;" /><h5 id="接口地址"><a href="#接口地址" class="headerlink" title="接口地址"></a>接口地址</h5><p>① 获取轮播图数据列表的接口<br> 【GET】<a href="https://www.escook.cn/slides">https://www.escook.cn/slides</a><br>② 获取九宫格数据列表的接口<br> 【GET】<a href="https://www.escook.cn/categorie">https://www.escook.cn/categorie</a></p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (4.微信小程序的API)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/04.api/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/04.api/</url>
    
    <content type="html"><![CDATA[<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="小程序-API-概述"><a href="#小程序-API-概述" class="headerlink" title="小程序 API 概述"></a>小程序 API 概述</h3><p>小程序中的 API 是由宿主环境提供的，通过这些丰富的小程序 API，开发者可以方便的调用微信提供的能力，<br>例如：获取用户信息、本地存储、支付功能等。  </p><h3 id="小程序-API-的-3-大分类"><a href="#小程序-API-的-3-大分类" class="headerlink" title="小程序 API 的 3 大分类"></a>小程序 API 的 3 大分类</h3><p>小程序官方把 API 分为了如下 3 大类：</p><h4 id="事件监听-API"><a href="#事件监听-API" class="headerlink" title="事件监听 API"></a>事件监听 API</h4><p> 特点：以 <strong>on</strong> 开头，用来监听某些事件的触发<br> 举例：wx.onWindowResize(function callback) 监听窗口尺寸变化的事件</p><h4 id="同步-API"><a href="#同步-API" class="headerlink" title="同步 API"></a>同步 API</h4><p> 特点1：以 <strong>Sync</strong> 结尾的 API 都是同步 API<br> 特点2：同步 API 的执行结果，可以通过函数返回值直接获取，如果执行出错会抛出异常<br> 举例：wx.setStorageSync(‘key’, ‘value’) 向本地存储中写入内容</p><h4 id="异步-API"><a href="#异步-API" class="headerlink" title="异步 API"></a>异步 API</h4><p> 特点：类似于 jQuery 中的 $.ajax(options) 函数，需要通过 success、fail、complete 接收调用的结果<br> 举例：wx.request() 发起网络数据请求，通过 success 回调函数接收数据  </p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (6.微信小程序视图与逻辑)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/06.%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/06.%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E8%A7%86%E5%9B%BE%E4%B8%8E%E9%80%BB%E8%BE%91/</url>
    
    <content type="html"><![CDATA[<h2 id="小程序-视图与逻辑"><a href="#小程序-视图与逻辑" class="headerlink" title="小程序 - 视图与逻辑"></a>小程序 - 视图与逻辑</h2><h3 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h3><h4 id="1-什么是页面导航"><a href="#1-什么是页面导航" class="headerlink" title="1.什么是页面导航"></a>1.什么是页面导航</h4><p>页面导航指的是页面之间的相互跳转。例如，浏览器中实现页面导航的方式有如下两种：<br>① <a> 链接<br>② location.href  </p><h4 id="2-小程序中实现页面导航的两种方式"><a href="#2-小程序中实现页面导航的两种方式" class="headerlink" title="2. 小程序中实现页面导航的两种方式"></a>2. 小程序中实现页面导航的两种方式</h4><p>① 声明式导航<br> 在页面上声明一个 <navigator> 导航组件<br> 通过点击 <navigator> 组件实现页面跳转<br>② 编程式导航<br> 调用小程序的导航 API，实现页面的跳转  </p><h4 id="页面导航-声明式导航"><a href="#页面导航-声明式导航" class="headerlink" title="页面导航 - 声明式导航"></a>页面导航 - 声明式导航</h4><h5 id="1-导航到-tabBar-页面"><a href="#1-导航到-tabBar-页面" class="headerlink" title="1.导航到 tabBar 页面"></a>1.导航到 tabBar 页面</h5><p>tabBar 页面指的是被配置为 tabBar 的页面。<br>在使用 <navigator> 组件跳转到指定的 tabBar 页面时，需要指定 url 属性和 open-type 属性，其中：<br> url 表示要跳转的页面的地址，必须以 &#x2F; 开头<br> open-type 表示跳转的方式，必须为 switchTab<br>示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/message/message&quot;</span><span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;switchTab&quot;</span>&gt;</span>导航到消息页面<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-导航到非-tabBar-页面"><a href="#2-导航到非-tabBar-页面" class="headerlink" title="2.导航到非 tabBar 页面"></a>2.导航到非 tabBar 页面</h5><p>非 tabBar 页面指的是没有被配置为 tabBar 的页面。<br>在使用 <navigator> 组件跳转到普通的非 tabBar 页面时，则需要指定 url 属性和 open-type 属性，其中：<br> url 表示要跳转的页面的地址，必须以 &#x2F; 开头<br> open-type 表示跳转的方式，必须为 navigate<br>示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/info/info&quot;</span><span class="hljs-attr">open-type</span>=<span class="hljs-string">&quot;navigate&quot;</span>&gt;</span>导航到info页面<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：为了简便，在导航到非 tabBar 页面时，open-type&#x3D;”navigate” 属性可以省略。  </p><h5 id="3-后退导航"><a href="#3-后退导航" class="headerlink" title="3.后退导航"></a>3.后退导航</h5><p>如果要后退到上一页面或多级页面，则需要指定 open-type 属性和 delta 属性，其中：<br> open-type 的值必须是 navigateBack，表示要进行后退导航<br> delta 的值必须是数字，表示要后退的层级<br>示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">open-type</span>=<span class="hljs-string">&#x27;navigateBack&#x27;</span><span class="hljs-attr">delta-</span>&#x27;<span class="hljs-attr">1</span>&#x27;&gt;</span>返▣上一页<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意：为了简便，如果只是后退到上一页面，则可以省略 delta 属性，因为其默认值就是 1。  </p><h4 id="页面导航-编程式导航"><a href="#页面导航-编程式导航" class="headerlink" title="页面导航 - 编程式导航"></a>页面导航 - 编程式导航</h4><h5 id="导航到-tabBar-页面"><a href="#导航到-tabBar-页面" class="headerlink" title="导航到 tabBar 页面"></a>导航到 tabBar 页面</h5><p>调用 wx.switchTab(Object object) 方法，可以跳转到 tabBar 页面。其中 Object 参数对象的属性列表如下：  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650428622847.png"></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//页面结构<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;gotoMessage&quot;</span>&gt;</span>跳转到消息页面<span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过编程式导航，跳转到message页面</span><br> <span class="hljs-title function_">gotoMessage</span>(<span class="hljs-params"></span>) &#123;<br>   wx.<span class="hljs-title function_">switchTab</span>(&#123;<br>      <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;/pages/message/message&#x27;</span><br> &#125;)<br> &#125;,<br></code></pre></td></tr></table></figure><h5 id="导航到非-tabBar-页面"><a href="#导航到非-tabBar-页面" class="headerlink" title="导航到非 tabBar 页面"></a>导航到非 tabBar 页面</h5><p>调用 wx.navigateTo(Object object) 方法，可以跳转到非 tabBar 的页面。其中 Object 参数对象的属性列表如下：  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650429017745.png"></p><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//页面结构<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;gotoInfo&quot;</span>&gt;</span>跳转到info页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过编程式导航，跳转到info页面</span><br><span class="hljs-title function_">gotoInfo</span>(<span class="hljs-params"></span>)&#123;<br>  wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/info/info&#x27;</span>,<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="后退导航"><a href="#后退导航" class="headerlink" title="后退导航"></a>后退导航</h5><p>调用 wx.navigateBack(Object object) 方法，可以返回上一页面或多级页面。其中 Object 参数对象可选的<br>属性列表如下：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650429378222.png" style="zoom:67%;" /><p>示例代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;goBack&quot;</span>&gt;</span>后退<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过编程式导航，进行后退</span><br><span class="hljs-title function_">goBack</span>(<span class="hljs-params"></span>)&#123;<br>  wx.<span class="hljs-title function_">navigateBack</span>(&#123;<br>    <span class="hljs-attr">delta</span>: <span class="hljs-number">1</span>,<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="页面导航-导航传参"><a href="#页面导航-导航传参" class="headerlink" title="页面导航 - 导航传参"></a>页面导航 - 导航传参</h4><h5 id="1-声明式导航传参"><a href="#1-声明式导航传参" class="headerlink" title="1.声明式导航传参"></a>1.声明式导航传参</h5><p>navigator 组件的 url 属性用来指定将要跳转到的页面的路径。同时，路径的后面还可以携带参数：<br> 参数与路径之间使用 ? 分隔<br> 参数键与参数值用 &#x3D; 相连<br> 不同参数用 &amp; 分隔<br>代码示例如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">x 1<span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/pages/info/info?name=zs&amp;age=20&quot;</span>&gt;</span>跳转到info页面<span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-编程式导航传参"><a href="#2-编程式导航传参" class="headerlink" title="2.编程式导航传参"></a>2.编程式导航传参</h5><p>调用 wx.navigateTo(Object object) 方法跳转页面时，也可以携带参数，代码示例如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//页面结构<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;gotoInfo.2&quot;</span>&gt;</span>跳转到info页面<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//通过编程式导航，跳转到info页面，并携带参数</span><br><span class="hljs-title function_">gotoInfo2</span>(<span class="hljs-params"></span>)&#123;<br>    wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/info/info?name=zs&amp;age=20&#x27;</span>,<br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="3-x2F-在-onLoad-中接收导航参数"><a href="#3-x2F-在-onLoad-中接收导航参数" class="headerlink" title="3&#x2F;在 onLoad 中接收导航参数"></a>3&#x2F;在 onLoad 中接收导航参数</h5><p>通过声明式导航传参或编程式导航传参所携带的参数，可以直接在 onLoad 事件中直接获取到，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">query</span>:&#123;&#125;<span class="hljs-comment">//定义一个用来保存传参的变量</span><br>  &#125;,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 生命周期函数--监听页面加载</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-comment">//options就是导航传递过来的参数对象</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(options)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">query</span>:options<span class="hljs-comment">//将得到的值赋值给变量query</span><br>    &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h3><h4 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h4><h5 id="1-什么是下拉刷新"><a href="#1-什么是下拉刷新" class="headerlink" title="1.什么是下拉刷新"></a>1.什么是下拉刷新</h5><p>下拉刷新是移动端的专有名词，指的是通过手指在屏幕上的下拉滑动操作，从而重新加载页面数据的行为。  </p><h5 id="2-启用下拉刷新"><a href="#2-启用下拉刷新" class="headerlink" title="2. 启用下拉刷新"></a>2. 启用下拉刷新</h5><p>启用下拉刷新有两种方式：<br>① 全局开启下拉刷新<br> 在 app.json 的 window 节点中，将 enablePullDownRefresh 设置为 true<br>② 局部开启下拉刷新<br> 在页面的 .json 配置文件中，将 enablePullDownRefresh 设置为 true<br>在实际开发中，推荐使用第 2 种方式，为需要的页面单独开启下拉刷新的效果。  </p><h5 id="3-配置下拉刷新窗口的样式"><a href="#3-配置下拉刷新窗口的样式" class="headerlink" title="3.配置下拉刷新窗口的样式"></a>3.配置下拉刷新窗口的样式</h5><p>在全局或页面的 .json 配置文件中，通过 backgroundColor 和 backgroundTextStyle 来配置下拉刷新窗口<br>的样式，其中：<br> backgroundColor 用来配置下拉刷新窗口的背景颜色，仅支持16 进制的颜色值<br> backgroundTextStyle 用来配置下拉刷新 loading 的样式，仅支持 dark 和 light  </p><h5 id="4-监听页面的下拉刷新事件"><a href="#4-监听页面的下拉刷新事件" class="headerlink" title="4.监听页面的下拉刷新事件"></a>4.监听页面的下拉刷新事件</h5><p>在页面的 .js 文件中，通过 onPullDownRefresh() 函数即可监听当前页面的下拉刷新事件。<br>例如，在页面的 wxml 中有如下的 UI 结构，点击按钮可以让 count 值自增 +1：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/message/message.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>count值为：&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;countAdd&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pages/message/message.js</span><br><span class="hljs-comment">//+1按钮的点击事件处理函数,count要在data里先定义</span><br><span class="hljs-title function_">countAdd</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>    <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> <span class="hljs-number">1</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在触发页面的下拉刷新事件的时候，如果要把 count 的值重置为 0，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pages/message/message.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">onPullDownRefresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//触发消息页面的下拉刷新</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><h5 id="5-停止下拉刷新的效果"><a href="#5-停止下拉刷新的效果" class="headerlink" title="5. 停止下拉刷新的效果"></a>5. 停止下拉刷新的效果</h5><p>当处理完下拉刷新后，下拉刷新的 loading 效果会一直显示，不会主动消失，所以需要手动隐藏下拉刷新的<br>loading 效果。此时，调用 wx.stopPullDownRefresh() 可以停止当前页面的下拉刷新。示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// pages/message/message.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 页面相关事件处理函数--监听用户下拉动作</span><br><span class="hljs-comment">*/</span><br><span class="hljs-attr">onPullDownRefresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//触发消息页面的下拉刷新</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>    &#125;)<br>    wx.<span class="hljs-title function_">stopPullDownRefresh</span>()<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="上拉触底"><a href="#上拉触底" class="headerlink" title="上拉触底"></a>上拉触底</h4><h5 id="1-什么是上拉触底"><a href="#1-什么是上拉触底" class="headerlink" title="1.什么是上拉触底"></a>1.什么是上拉触底</h5><p>上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。</p><h5 id="2-监听页面的上拉触底事件"><a href="#2-监听页面的上拉触底事件" class="headerlink" title="2. 监听页面的上拉触底事件"></a>2. 监听页面的上拉触底事件</h5><p>在页面的 .js 文件中，通过 onReachBottom() 函数即可监听当前页面的上拉触底事件。示例代码如下：   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-attr">onReachBottom</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;触发了上拉触底的事件&quot;</span>)<br>&#125;,<br></code></pre></td></tr></table></figure><h5 id="3-配置上拉触底距离"><a href="#3-配置上拉触底距离" class="headerlink" title="3.配置上拉触底距离"></a>3.配置上拉触底距离</h5><p>上拉触底距离指的是触发上拉触底事件时，滚动条距离页面底部的距离。<br>可以在全局或页面的 .json 配置文件中，通过 onReachBottomDistance 属性来配置上拉触底的距离。<br>小程序默认的触底距离是 50px，在实际开发中，可以根据自己的需求修改这个默认值。  </p><h5 id="4-上拉触底案例"><a href="#4-上拉触底案例" class="headerlink" title="4.上拉触底案例"></a>4.上拉触底案例</h5><h6 id="1、示例效果："><a href="#1、示例效果：" class="headerlink" title="1、示例效果："></a>1、示例效果：</h6>  <img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650535113574.png" style="zoom:67%;" /><h6 id="2-案例的实现步骤"><a href="#2-案例的实现步骤" class="headerlink" title="2.案例的实现步骤"></a>2.案例的实现步骤</h6><p>① 定义获取随机颜色的方法<br>② 在页面加载时获取初始数据<br>③ 渲染 UI 结构并美化页面效果<br>④ 在上拉触底时调用获取随机颜色的方法<br>⑤ 添加 loading 提示效果<br>⑥ 对上拉触底进行节流处理  </p><h6 id="3-步骤1-定义获取随机颜色的方法"><a href="#3-步骤1-定义获取随机颜色的方法" class="headerlink" title="3. 步骤1 - 定义获取随机颜色的方法"></a>3. 步骤1 - 定义获取随机颜色的方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">colorlsit</span>:[]<span class="hljs-comment">//随机颜色列表</span><br>&#125;,<br><span class="hljs-title function_">getClors</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//获取颜色的方法</span><br>  wx.<span class="hljs-title function_">request</span>(&#123;<span class="hljs-comment">//发起请求</span><br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.escook.cn/api/color&#x27;</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">&#123;data:res&#125;</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">colorlsit</span>:[...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">colorlsit</span>,...res.<span class="hljs-property">data</span>]<span class="hljs-comment">//将获取到的新数组和原数组通过展开运算符进行拼接</span><br>      &#125;)<br>    &#125;,<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h6 id="3-步骤2-在页面加载时获取初始数据"><a href="#3-步骤2-在页面加载时获取初始数据" class="headerlink" title="3. 步骤2 - 在页面加载时获取初始数据"></a>3. 步骤2 - 在页面加载时获取初始数据</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生命周期函数--监听页面加载</span><br><span class="hljs-comment"> */</span><br><span class="hljs-attr">onLoad</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClors</span>()<br>&#125;,<br><br></code></pre></td></tr></table></figure><h6 id="3-步骤3-渲染-UI-结构并美化页面效果"><a href="#3-步骤3-渲染-UI-结构并美化页面效果" class="headerlink" title="3. 步骤3 - 渲染 UI 结构并美化页面效果"></a>3. 步骤3 - 渲染 UI 结构并美化页面效果</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/contact/contact.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;colorlsit&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;num-iten&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgba(&#123;&#123;item&#125;&#125;);&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* pages/contact/contact.wxss */</span><br><span class="hljs-selector-class">.num-iten</span>&#123;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1</span>rpx solid <span class="hljs-number">#efefef</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8</span>rpx;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200</span>rpx;<br>  <span class="hljs-attribute">margin</span>: <span class="hljs-number">15</span>rpx;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span>rpx  <span class="hljs-number">0</span>rpx  <span class="hljs-number">5</span>rpx <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">box-shadow</span>:<span class="hljs-number">1</span>rpx  <span class="hljs-number">1</span>rpx  <span class="hljs-number">6</span>rpx <span class="hljs-number">#aaa</span> ;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="3-步骤4-上拉触底时获取随机颜色"><a href="#3-步骤4-上拉触底时获取随机颜色" class="headerlink" title="3. 步骤4 - 上拉触底时获取随机颜色"></a>3. 步骤4 - 上拉触底时获取随机颜色</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-attr">onReachBottom</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//调用获取随机颜色的方法</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClors</span>()<br>&#125;,<br></code></pre></td></tr></table></figure><h6 id="3-步骤5-添加-loading-提示效果"><a href="#3-步骤5-添加-loading-提示效果" class="headerlink" title="3. 步骤5 - 添加 loading 提示效果"></a>3. 步骤5 - 添加 loading 提示效果</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getClors</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//展示loading效果</span><br>  wx.<span class="hljs-title function_">showLoading</span>(&#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;数据加载中...&#x27;</span>,<br>  &#125;)<br>  wx.<span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.escook.cn/api/color&#x27;</span>,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>    <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">&#123;data:res&#125;</span>)=&gt;</span>&#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">colorlsit</span>:[...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">colorlsit</span>,...res.<span class="hljs-property">data</span>]<br>      &#125;)<br>    &#125;,<br>    <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>      wx.<span class="hljs-title function_">hideLoading</span>()<span class="hljs-comment">//关闭loading效果</span><br>    &#125;<br>  &#125;)<br>&#125;,<br></code></pre></td></tr></table></figure><h6 id="3-步骤6-对上拉触底进行节流处理"><a href="#3-步骤6-对上拉触底进行节流处理" class="headerlink" title="3. 步骤6 - 对上拉触底进行节流处理"></a>3. 步骤6 - 对上拉触底进行节流处理</h6><p>① 在 data 中定义 isloading 节流阀<br> false 表示当前没有进行任何数据请求<br> true 表示当前正在进行数据请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">colorlsit</span>:[],<br>  <span class="hljs-attr">isloding</span>:<span class="hljs-literal">false</span><span class="hljs-comment">//节流阀</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>② 在 getColors() 方法中修改 isloading 节流阀的值<br> 在刚调用 getColors 时将节流阀设置 true<br> 在网络请求的 complete 回调函数中，将节流阀重置为 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getClors</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<span class="hljs-comment">//节流阀</span><br>      <span class="hljs-attr">isloding</span>:<span class="hljs-literal">true</span><br>    &#125;),<br>    <span class="hljs-comment">//需要展示loading效果</span><br>    wx.<span class="hljs-title function_">showLoading</span>(&#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;数据加载中...&#x27;</span>,<br>    &#125;)<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;https://www.escook.cn/api/color&#x27;</span>,<br>      <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;GET&quot;</span>,<br>      <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">&#123;data:res&#125;</span>)=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">colorlsit</span>:[...<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">colorlsit</span>,...res.<span class="hljs-property">data</span>]<br>        &#125;)<br>      &#125;,<br>      <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>        wx.<span class="hljs-title function_">hideLoading</span>(),<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>          <span class="hljs-attr">isloding</span>:<span class="hljs-literal">false</span><span class="hljs-comment">//节流阀</span><br>        &#125;)<br>      &#125;<br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><p>③ 在 onReachBottom 中判断节流阀的值，从而对数据请求进行节流控制<br> 如果节流阀的值为 true，则阻止当前请求<br> 如果节流阀的值为 false，则发起数据请求  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 页面上拉触底事件的处理函数</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-attr">onReachBottom</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>   <span class="hljs-comment">//调用获取随机颜色的方法</span><br>   <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">isloding</span>)<span class="hljs-keyword">return</span><span class="hljs-comment">//判断节流阀</span><br>   <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getClors</span>()<br> &#125;,<br></code></pre></td></tr></table></figure><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><h4 id="1-什么是生命周期"><a href="#1-什么是生命周期" class="headerlink" title="1.什么是生命周期"></a>1.什么是生命周期</h4><p>生命周期（Life Cycle）是指一个对象从创建 -&gt; 运行 -&gt; 销毁的整个阶段，强调的是一个时间段。例如：<br> 张三出生，表示这个人生命周期的开始<br> 张三离世，表示这个人生命周期的结束<br> 中间张三的一生，就是张三的生命周期<br>我们可以把每个小程序运行的过程，也概括为生命周期：<br> 小程序的启动，表示生命周期的开始<br> 小程序的关闭，表示生命周期的结束<br> 中间小程序运行的过程，就是小程序的生命周期  </p><h4 id="2-生命周期的分类"><a href="#2-生命周期的分类" class="headerlink" title="2.生命周期的分类"></a>2.生命周期的分类</h4><p>在小程序中，生命周期分为两类，分别是：<br>① 应用生命周期<br> 特指小程序从启动 -&gt; 运行 -&gt; 销毁的过程<br>② 页面生命周期<br> 特指小程序中，每个页面的加载 -&gt; 渲染 -&gt; 销毁的过程<br>其中，页面的生命周期范围较小，应用程序的生命周期范围较大，如图所示：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650543517547.png" style="zoom:67%;" /><h4 id="3-什么是生命周期函数"><a href="#3-什么是生命周期函数" class="headerlink" title="3.什么是生命周期函数"></a>3.什么是生命周期函数</h4><p>生命周期函数：是由小程序框架提供的内置函数，会伴随着生命周期，自动按次序执行。<br>生命周期函数的作用：允许程序员在特定的时间点，执行某些特定的操作。例如，页面刚加载的时候，可以在<br>onLoad 生命周期函数中初始化页面的数据。<br>注意：生命周期强调的是时间段，生命周期函数强调的是时间点。  </p><h4 id="4-生命周期函数的分类"><a href="#4-生命周期函数的分类" class="headerlink" title="4.. 生命周期函数的分类"></a>4.. 生命周期函数的分类</h4><p>小程序中的生命周期函数分为两类，分别是：<br>① 应用的生命周期函数<br> 特指小程序从启动 -&gt; 运行 -&gt; 销毁期间依次调用的那些函数<br>② 页面的生命周期函数<br> 特指小程序中，每个页面从加载 -&gt; 渲染 -&gt; 销毁期间依次调用的那些函数  </p><h4 id="5-应用的生命周期函数"><a href="#5-应用的生命周期函数" class="headerlink" title="5.应用的生命周期函数"></a>5.应用的生命周期函数</h4><p>小程序的应用生命周期函数需要在 app.js 中进行声明，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//app.js文件</span><br><span class="hljs-title class_">App</span>(&#123;<br>ithe<br><span class="hljs-comment">//小程序初始化完成时，执行此函数，全局只触发一次。可以做些初始化的工作。</span><br><span class="hljs-attr">onLaunch</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;&#125;<br><span class="hljs-comment">//小程序启动，或从后台进入前台显示时触发。</span><br>onShow <span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;&#125;,<br><span class="hljs-comment">//小程序从前台进入后台时触发。</span><br>onHide <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="6-页面的生命周期函数"><a href="#6-页面的生命周期函数" class="headerlink" title="6. 页面的生命周期函数"></a>6. 页面的生命周期函数</h4><p>小程序的页面生命周期函数需要在页面的 .js 文件中进行声明，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//页面的.js文件</span><br><span class="hljs-title class_">Page</span>(&#123;<br>onLoad:<span class="hljs-keyword">function</span>(<span class="hljs-params">options</span>)&#123;&#125;,<span class="hljs-comment">//监听页面加载，一个页面只调用1次</span><br>onShow :<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//监听页面显示</span><br>onReady: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<span class="hljs-comment">//监听页面初次渲染完成，一个页面只调用1次</span><br>onHide:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<span class="hljs-comment">//监听页面隐藏</span><br><span class="hljs-attr">onUnload</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<span class="hljs-comment">//监听页面卸载，一个页面只调用1次</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="WXS-脚本"><a href="#WXS-脚本" class="headerlink" title="WXS 脚本"></a>WXS 脚本</h3><h4 id="1-什么是-wxs"><a href="#1-什么是-wxs" class="headerlink" title="1.什么是 wxs"></a>1.什么是 wxs</h4><p>WXS（WeiXin Script）是小程序独有的一套脚本语言，结合 WXML，可以构建出页面的结构。</p><h4 id="2-wxs-的应用场景"><a href="#2-wxs-的应用场景" class="headerlink" title="2. wxs 的应用场景"></a>2. wxs 的应用场景</h4><p>wxml 中无法调用在页面的 .js 中定义的函数，但是，wxml 中可以调用 wxs 中定义的函数。因此，小程序中<br>wxs 的典型应用场景就是“过滤器”。    </p><h4 id="3-wxs-和-JavaScript-的关系"><a href="#3-wxs-和-JavaScript-的关系" class="headerlink" title="3.wxs 和 JavaScript 的关系*"></a>3.wxs 和 JavaScript 的关系*</h4><p>虽然 wxs 的语法类似于 JavaScript，但是 wxs 和 JavaScript 是完全不同的两种语言：</p><p>① wxs 有自己的数据类型<br> number 数值类型、string 字符串类型、boolean 布尔类型、object 对象类型、<br> function 函数类型、array 数组类型、 date 日期类型、 regexp 正则</p><p>② wxs 不支持类似于 ES6 及以上的语法形式<br> 不支持：let、const、解构赋值、展开运算符、箭头函数、对象属性简写、etc…<br> 支持：var 定义变量、普通 function 函数等类似于 ES5 的语法</p><p>③ wxs 遵循 CommonJS 规范<br> module 对象<br> require() 函数<br> module.exports 对象  </p><h4 id="WXS-脚本-基础语法"><a href="#WXS-脚本-基础语法" class="headerlink" title="WXS 脚本 - 基础语法"></a>WXS 脚本 - 基础语法</h4><h5 id="1-内嵌-wxs-脚本"><a href="#1-内嵌-wxs-脚本" class="headerlink" title="1. 内嵌 wxs 脚本"></a>1. 内嵌 wxs 脚本</h5><p>wxs 代码可以编写在 wxml 文件中的 <wxs> 标签内，就像 Javascript 代码可以编写在 html 文件中的 <script><br>标签内一样。<br>wxml 文件中的每个 <wxs></wxs> 标签，必须提供 module 属性，用来指定当前 wxs 的模块名称，方便在<br>wxml 中访问模块中的成员  ：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>username为&#123;&#123;m1.toUpper(username)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">wxs</span> <span class="hljs-attr">module</span>=<span class="hljs-string">&quot;m1&quot;</span>&lt;<span class="hljs-attr">--将文本转换为大写形式--</span>&gt;</span><br>module.exports.toUpper = function(str)&#123;<br>  return str.toUpperCase()<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">wxs</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-定义外联的-wxs-脚本"><a href="#2-定义外联的-wxs-脚本" class="headerlink" title="2. 定义外联的 wxs 脚本"></a>2. 定义外联的 wxs 脚本</h5><p>wxs 代码还可以编写在以 .wxs 为后缀名的文件内，就像 javascript 代码可以编写在以 .js 为后缀名的文件中<br>一样。示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">toLower</span>(<span class="hljs-params">str</span>)&#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">toLowerCase</span>()<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>=&#123;<br>  <span class="hljs-attr">toLower</span>:toLower<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-使用外联的-wxs-脚本"><a href="#3-使用外联的-wxs-脚本" class="headerlink" title="3.使用外联的 wxs 脚本"></a>3.使用外联的 wxs 脚本</h5><p>在 wxml 中引入外联的 wxs 脚本时，必须为 <wxs> 标签添加 module 和 src 属性，其中：<br> module 用来指定模块的名称<br> src 用来指定要引入的脚本的路径，且必须是相对路径<br>示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>country为&#123;&#123;m2.toLower(country)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wxs</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../utils/tools.wxs&quot;</span> <span class="hljs-attr">module</span>=<span class="hljs-string">&quot;m2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wxs</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="WXS-脚本-WXS-的特点"><a href="#WXS-脚本-WXS-的特点" class="headerlink" title="WXS 脚本 - WXS 的特点"></a>WXS 脚本 - WXS 的特点</h4><h5 id="1-与-JavaScript-不同"><a href="#1-与-JavaScript-不同" class="headerlink" title="1. 与 JavaScript 不同"></a>1. 与 JavaScript 不同</h5><p>为了降低 wxs（WeiXin Script）的学习成本， wxs 语言在设计时借大量鉴了 JavaScript 的语法。但是本质上，<br>wxs 和 JavaScript 是完全不同的两种语言！  </p><h5 id="2-不能作为组件的事件回调"><a href="#2-不能作为组件的事件回调" class="headerlink" title="2.不能作为组件的事件回调"></a>2.不能作为组件的事件回调</h5><p>wxs 典型的应用场景就是“过滤器”，经常配合 Mustache 语法进行使用，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;m2.toLower(country)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但是，在 wxs 中定义的函数不能作为组件的事件回调函数。例如，下面的用法是错误的： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtaps</span>=<span class="hljs-string">&quot;m2.toLower&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-隔离性"><a href="#3-隔离性" class="headerlink" title="3. 隔离性"></a>3. 隔离性</h5><p>隔离性指的是 wxs 的运行环境和其他 JavaScript 代码是隔离的。体现在如下两方面：<br>① wxs 不能调用 js 中定义的函数<br>② wxs 不能调用小程序提供的 API  </p><h5 id="4-性能好"><a href="#4-性能好" class="headerlink" title="4. 性能好"></a>4. 性能好</h5><p> 在 iOS 设备上，小程序内的 WXS 会比 JavaScript 代码快 2 ~ 20 倍<br> 在 android 设备上，二者的运行效率无差异  </p><h3 id="案例-本地生活（列表页面）"><a href="#案例-本地生活（列表页面）" class="headerlink" title="案例 - 本地生活（列表页面）"></a>案例 - 本地生活（列表页面）</h3><p><strong>注意：判断是否还有下一页数据</strong><br>如果下面的公式成立，则证明没有下一页数据了：<br>页码值 * 每页显示多少条数据 >= 总数据条数<br>page * pageSize >= total<br>案例1：总共有 77 条数据，如果每页显示 10 条数据，则总共分为 8 页，其中第 8 页只有 7 条数据<br>page（7）* pageSize（10） >= total（77）<br>page（8）* pageSize（10） >= total（77）<br>案例2：总共有 80 条数据，如果每页显示 10 条数据，则总共分为 8 页，其中第 8 页面有 10 条数据<br>page（7）* pageSize（10） >= total（80）<br>page（8）* pageSize（10） >= total（80）</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序笔记 (7.微信小程序基础加强)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/07.%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/07.%E5%B0%8F%E7%A8%8B%E5%BA%8F%20-%20%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="小程序-基础加强"><a href="#小程序-基础加强" class="headerlink" title="小程序 - 基础加强"></a>小程序 - 基础加强</h2><h3 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h3><h4 id="自定义组件-组件的创建与引用"><a href="#自定义组件-组件的创建与引用" class="headerlink" title="自定义组件 - 组件的创建与引用"></a>自定义组件 - 组件的创建与引用</h4><h5 id="1-创建组件"><a href="#1-创建组件" class="headerlink" title="1. 创建组件"></a>1. 创建组件</h5><p>① 在项目的根目录中，鼠标右键，创建 components -&gt; test 文件夹<br>② 在新建的 components -&gt; test 文件夹上，鼠标右键，点击“新建 Component”<br>③ 键入组件的名称之后回车，会自动生成组件对应的 4 个文件，后缀名分别为 .js，.json， .wxml 和 .wxss<br>注意：为了保证目录结构的清晰，建议把不同的组件，存放到单独目录中，例如：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650590028961.png" style="zoom:67%;" /><h5 id="2-引用-组件"><a href="#2-引用-组件" class="headerlink" title="2.引用 组件"></a>2.引用 组件</h5><p>组件的引用方式分为“局部引用”和“全局引用”，顾名思义：<br> 局部引用：组件只能在当前被引用的页面内使用<br> 全局引用：组件可以在每个小程序页面中使用  </p><h5 id="3-局部引用组件"><a href="#3-局部引用组件" class="headerlink" title="3.局部引用组件"></a>3.局部引用组件</h5><p>在页面的 .json 配置文件中引用组件的方式，叫做“局部引用”。示例代码如下  ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//在页面的.json文件中，引入组件</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span><br><span class="hljs-attr">&quot;my-test1&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/components/test1/test1&quot;</span><span class="hljs-comment">//键值对（名称：路径）</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//在页面的.wxml文件中，使用组件<br><span class="hljs-tag">&lt;<span class="hljs-name">my-test1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-test1</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-全局引用"><a href="#4-全局引用" class="headerlink" title="4.全局引用"></a>4.全局引用</h5><p>在 app.json 全局配置文件中引用组件的方式，叫做“全局引用”。示例代码如下：  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//在app.json文件中，引入组件</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;pages&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-comment">/*省略不必要的代码*/</span><span class="hljs-punctuation">]</span>，<br><span class="hljs-attr">&quot;window&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">/*省略不必要的代码*/</span><span class="hljs-punctuation">&#125;</span>，<br><span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;my-test2&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;/components/test2/test2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">//在页面的.wxml文件中，使用组件<br><span class="hljs-tag">&lt;<span class="hljs-name">my-test2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-test2</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-全局引用-VS-局部引用"><a href="#5-全局引用-VS-局部引用" class="headerlink" title="5.全局引用 VS 局部引用"></a>5.全局引用 VS 局部引用</h5><p>根据组件的使用频率和范围，来选择合适的引用方式：<br> 如果某组件在多个页面中经常被用到，建议进行“全局引用”<br> 如果某组件只在特定的页面中被用到，建议进行“局部引用”  </p><h5 id="6-组件和页面的区别"><a href="#6-组件和页面的区别" class="headerlink" title="6.组件和页面的区别"></a>6.组件和页面的区别</h5><p>从表面来看，组件和页面都是由 .js、.json、.wxml 和 .wxss 这四个文件组成的。但是，组件和页面的 .js 与<br>.json 文件有明显的不同：<br> 组件的 .json 文件中需要声明 “component”: true 属性<br> 组件的 .js 文件中调用的是 Component() 函数<br> 组件的事件处理函数需要定义到 methods 节点中  </p><h4 id="自定义组件-样式"><a href="#自定义组件-样式" class="headerlink" title="自定义组件 - 样式"></a>自定义组件 - 样式</h4><h5 id="1-组件样式隔离"><a href="#1-组件样式隔离" class="headerlink" title="1. 组件样式隔离"></a>1. 组件样式隔离</h5><p>默认情况下，自定义组件的样式只对当前组件生效，不会影响到组件之外的<br>UI 结构，如图所示：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650606972182.png" style="zoom:50%;" /><p> 组件 A 的样式不会影响组件 C 的样式<br> 组件 A 的样式不会影响小程序页面的样式<br> 小程序页面的样式不会影响组件 A 和 C 的样式<br>好处：<br>① 防止外界的样式影响组件内部的样式<br>② 防止组件的样式破坏外界的样式  </p><h5 id="2-组件样式隔离的注意点"><a href="#2-组件样式隔离的注意点" class="headerlink" title="2. 组件样式隔离的注意点"></a>2. 组件样式隔离的注意点</h5><p> app.wxss 中的全局样式对组件无效<br> 只有 class 选择器会有样式隔离效果，id 选择器、属性选择器、标签选择器不受样式隔离的影响<br>建议：在组件和引用组件的页面中建议使用 class 选择器，不要使用 id、属性、标签选择器！  </p><h5 id="3-修改组件的样式隔离选项"><a href="#3-修改组件的样式隔离选项" class="headerlink" title="3. 修改组件的样式隔离选项"></a>3. 修改组件的样式隔离选项</h5><p>默认情况下，自定义组件的样式隔离特性能够防止组件内外样式互相干扰的问题。但有时，我们希望在外界能<br>够控制组件内部的样式，此时，可以通过 styleIsolation 修改组件的样式隔离选项，用法如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在组件的.js文件中新增如下配置</span><br><span class="hljs-title class_">Component</span> (<br><span class="hljs-attr">options</span>:<br><span class="hljs-attr">styleIsolation</span>:<span class="hljs-string">&#x27;isolated&#x27;</span><br>)<br><br><span class="hljs-comment">//或在组件的.json文件中新增如下配置</span><br>&#123;<br>  <span class="hljs-string">&quot;styleIsolation&quot;</span>:<span class="hljs-string">&quot;isolated&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-styleIsolation-的可选值"><a href="#4-styleIsolation-的可选值" class="headerlink" title="4. styleIsolation 的可选值"></a>4. styleIsolation 的可选值</h5><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650614712464.png"></p><h4 id="自定义组件-数据、方法和属性"><a href="#自定义组件-数据、方法和属性" class="headerlink" title="自定义组件 - 数据、方法和属性"></a>自定义组件 - 数据、方法和属性</h4><h5 id="1-data-数据"><a href="#1-data-数据" class="headerlink" title="1. data 数据"></a>1. data 数据</h5><p>在小程序组件中，用于组件模板渲染的私有数据，需要定义到 data 节点中，示例如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/text/test.js</span><br><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 组件的初始数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">data</span>: &#123;<br><span class="hljs-attr">count</span>: <span class="hljs-number">0</span><br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="2-methods-方法"><a href="#2-methods-方法" class="headerlink" title="2. methods 方法"></a>2. methods 方法</h5><p>在小程序组件中，事件处理函数和自定义方法需要定义到 methods 节点中，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">//点击加一按钮的事件处理函数</span><br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>      &#125;)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_showCount</span>()<br>    &#125;,<br>    <span class="hljs-title function_">_showCount</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//展示count的值的方法</span><br>      wx.<span class="hljs-title function_">showToast</span>(&#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;count是&#x27;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span>,<br>        <span class="hljs-attr">icon</span>:<span class="hljs-string">&#x27;none&#x27;</span><br>      &#125;)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="3-properties-属性"><a href="#3-properties-属性" class="headerlink" title="3. properties 属性"></a>3. properties 属性</h5><p>在小程序组件中，properties 是组件的对外属性，用来接收外界传递到组件中的数据，示例代码如下  :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 组件的属性列表</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">properties</span>: &#123;<br>    <span class="hljs-comment">//第一种方式：简化的方式（无法指定默认值）</span><br>    <span class="hljs-attr">max</span>:<span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">//第一种方式：完整的的方式（可以指定默认值）</span><br>    <span class="hljs-attr">max</span>:&#123;<br>      <span class="hljs-attr">type</span>:<span class="hljs-title class_">Number</span>,<span class="hljs-comment">//数据类型</span><br>      <span class="hljs-attr">value</span>:<span class="hljs-number">10</span>   <span class="hljs-comment">//默认值为10</span><br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class="hljs-comment">//结构文件就可以传递值,如下：          </span><br>&lt;my-test1 max=<span class="hljs-string">&quot;9&quot;</span>&gt;&lt;/my-test1&gt;                    <br></code></pre></td></tr></table></figure><h5 id="4-data-和-properties-的区别"><a href="#4-data-和-properties-的区别" class="headerlink" title="4.data 和 properties 的区别"></a>4.data 和 properties 的区别</h5><p>在小程序的组件中，properties 属性和 data 数据的用法相同，它们都是可读可写的，只不过：<br> data 更倾向于存储组件的私有数据<br> properties 更倾向于存储外界传递到组件中的数据  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">showInfo</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//定义一个按钮点击打印数据的方法</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">properties</span>)<br>  <span class="hljs-comment">//上面两行的打印结果是一模一样的</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">properties</span>===<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>)<span class="hljs-comment">//结果为true，说明他们是一样的</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-使用-setData-修改-properties-的值"><a href="#5-使用-setData-修改-properties-的值" class="headerlink" title="5. 使用 setData 修改 properties 的值"></a>5. 使用 setData 修改 properties 的值</h5><p>由于 data 数据和 properties 属性在本质上没有任何区别，因此 properties 属性的值也可以用于页面渲染，<br>或使用 setData 为 properties 中的属性重新赋值，示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;-在结构文件中使用-&gt;<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>max的属性值是：&#123;&#123;max&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-comment">//点击加一按钮的事件处理函数</span><br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">max</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">properties</span>.<span class="hljs-property">max</span> +<span class="hljs-number">1</span><span class="hljs-comment">//同样可以修改max的值</span><br>      &#125;)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_showCount</span>()<br>    &#125;,<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="自定义组件-数据监听器"><a href="#自定义组件-数据监听器" class="headerlink" title="自定义组件 - 数据监听器"></a>自定义组件 - 数据监听器</h4><p>数据监听器用于监听和响应任何属性和数据字段的变化，从而执行特定的操作。它的作用类似于 vue 中的<br>watch 侦听器。在小程序组件中，数据监听器的基本语法格式如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">observers</span>:&#123;<br><span class="hljs-string">&#x27;字段A,字段B&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">字段A的新值，字段B的新值</span>)&#123;<br>     <span class="hljs-comment">//do something</span><br>&#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="2-数据监听器的基本用法"><a href="#2-数据监听器的基本用法" class="headerlink" title="2.. 数据监听器的基本用法"></a>2.. 数据监听器的基本用法</h5><p>ui结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">//组件的UI结构如下<br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;n1&#125;&#125;&#123;&#123;n2&#125;&#125;=&#123;&#123;sum&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span><span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addN1&quot;</span>&gt;</span>n1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span><span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addN2&quot;</span>&gt;</span>n2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-attr">data</span>: &#123;<span class="hljs-comment">//数值节点</span><br>    <span class="hljs-attr">n1</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">n2</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">sum</span>:<span class="hljs-number">0</span><br>  &#125;<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">addN1</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//方法节点</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">n1</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">n1</span>+<span class="hljs-number">1</span>  <br>      &#125;)<br>      &#125;,<br>    <span class="hljs-title function_">addN2</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">n2</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">n2</span>+<span class="hljs-number">1</span>  <br>        &#125;)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">observers</span>:&#123;<span class="hljs-comment">//监听节点</span><br>    <span class="hljs-string">&#x27;n1,n2&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newn1,newn2</span>)&#123;<span class="hljs-comment">//利用数据监听器获取新值</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">sum</span>:newn1+newn2<span class="hljs-comment">//通过监听器自动计算n1+n2</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-监听对象属性的变化"><a href="#3-监听对象属性的变化" class="headerlink" title="3.监听对象属性的变化"></a>3.监听对象属性的变化</h5><p>数据监听器支持监听对象中单个或多个属性的变化，示例语法如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">observers</span>:&#123;<br><span class="hljs-string">&#x27;对象.属性A,对象.属性B&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">属性A的新值，属性B的新值</span>)&#123;<br>    <span class="hljs-comment">//触发此监听器的3种情况：</span><br>    <span class="hljs-comment">//【为属性A赋值】使用setData  设置this.data.对象.属性A时触发</span><br>    <span class="hljs-comment">//【为属性B赋值】使用setData  设置this.data.对象.属性B时触发</span><br>    <span class="hljs-comment">//【直接为对象赋值】使用setData设置this.data.对象 时触发</span><br>    <span class="hljs-comment">//do something...</span><br>&#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="4-数据监听案例（色值监听并渲染）"><a href="#4-数据监听案例（色值监听并渲染）" class="headerlink" title="4.数据监听案例（色值监听并渲染）"></a>4.数据监听案例（色值监听并渲染）</h5><p>效果：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650623427659.png" style="zoom:67%;" /><h5 id="2-渲染-UI-结构"><a href="#2-渲染-UI-结构" class="headerlink" title="2. 渲染 UI 结构"></a>2. 渲染 UI 结构</h5><p>结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background-color: rgb(&#123;&#123;fullcolor&#125;&#125;);&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;colorbox&quot;</span>&gt;</span>颜色值：&#123;&#123;fullcolor&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;changeR&quot;</span>&gt;</span>R<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;changeG&quot;</span>&gt;</span>G<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;mini&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;changeB&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;rgb.r&#125;&#125;,&#123;&#123;rgb.g&#125;&#125;,&#123;&#123;rgb.b&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.colorbox</span>&#123;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">200</span>rpx;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24</span>rpx;<br>  <span class="hljs-attribute">color</span>: wheat;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span>rpx  <span class="hljs-number">0</span>rpx  <span class="hljs-number">2</span>rpx black;<br>  <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-定义-button-的事件处理函数"><a href="#3-定义-button-的事件处理函数" class="headerlink" title="3. 定义 button 的事件处理函数"></a>3. 定义 button 的事件处理函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">changeR</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-string">&#x27;rgb.r&#x27;</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">r</span> +<span class="hljs-number">5</span> &gt;<span class="hljs-number">255</span> ? <span class="hljs-number">255</span> :<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">r</span> +<span class="hljs-number">5</span> <br>      &#125;)<br>    &#125;,<br>    <span class="hljs-title function_">changeG</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-string">&#x27;rgb.g&#x27;</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">g</span> +<span class="hljs-number">5</span> &gt;<span class="hljs-number">255</span> ? <span class="hljs-number">255</span> :<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">g</span> +<span class="hljs-number">5</span> <br>      &#125;)<br>    &#125;,<br>    <span class="hljs-title function_">changeB</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-string">&#x27;rgb.b&#x27;</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">b</span> +<span class="hljs-number">5</span> &gt;<span class="hljs-number">255</span> ? <span class="hljs-number">255</span> :<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">rgb</span>.<span class="hljs-property">b</span> +<span class="hljs-number">5</span> <br>      &#125;)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="4-监听对象中指定属性的变化"><a href="#4-监听对象中指定属性的变化" class="headerlink" title="4. 监听对象中指定属性的变化"></a>4. 监听对象中指定属性的变化</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">observers</span>:&#123;<br>    <span class="hljs-string">&#x27;rgb.r,rgb.g,rgb.b&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">r,g,b</span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">fullcolor</span>:<span class="hljs-string">`<span class="hljs-subst">$&#123;r&#125;</span>,<span class="hljs-subst">$&#123;g&#125;</span>,<span class="hljs-subst">$&#123;b&#125;</span>`</span><br>      &#125;)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="5-监听对象中所有属性的变化"><a href="#5-监听对象中所有属性的变化" class="headerlink" title="5. 监听对象中所有属性的变化"></a>5. 监听对象中所有属性的变化</h5><p>如果某个对象中需要被监听的属性太多，为了方便，可以使用通配符 ** 来监听对象中所有属性的变化，示例<br>代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">observers</span>:&#123;<br>    <span class="hljs-string">&#x27;rgb.**&#x27;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">fullcolor</span>:<span class="hljs-string">`<span class="hljs-subst">$&#123;obj.r&#125;</span>,<span class="hljs-subst">$&#123;obj.g&#125;</span>,<span class="hljs-subst">$&#123;obj.b&#125;</span>`</span><br>        &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义组件-纯数据字段"><a href="#自定义组件-纯数据字段" class="headerlink" title="自定义组件 - 纯数据字段"></a>自定义组件 - 纯数据字段</h4><h5 id="1-什么是纯数据字段"><a href="#1-什么是纯数据字段" class="headerlink" title="1.什么是纯数据字段"></a>1.什么是纯数据字段</h5><p>概念：纯数据字段指的是那些不用于界面渲染的 data 字段。<br>应用场景：例如有些情况下，某些 data 中的字段既不会展示在界面上，也不会传递给其他组件，仅仅在当前<br>组件内部使用。带有这种特性的 data 字段适合被设置为纯数据字段。<br>好处：纯数据字段有<strong>助于提升页面更新的性能。</strong>  </p><h5 id="2-使用规则"><a href="#2-使用规则" class="headerlink" title="2. 使用规则"></a>2. 使用规则</h5><p>在 Component 构造器的 options 节点中，指定 pureDataPattern 为一个正则表达式，字段名符合这个正则<br>表达式的字段将成为纯数据字段，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>    <span class="hljs-attr">options</span>:&#123;<br>        <span class="hljs-comment">//指定所有开头的数据字段为纯数据字段</span><br>        <span class="hljs-attr">pureDataPattern</span>:<span class="hljs-regexp">/^_/</span><br>    &#125;，<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//普通数据字段</span><br>        <span class="hljs-attr">_b</span>:<span class="hljs-literal">true</span>,<span class="hljs-comment">//纯数据字段</span><br>     &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-使用纯数据字段改造数据监听器案例"><a href="#3-使用纯数据字段改造数据监听器案例" class="headerlink" title="3. 使用纯数据字段改造数据监听器案例"></a>3. 使用纯数据字段改造数据监听器案例</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/test3/test3.js</span><br><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">options</span>:&#123;<br>    <span class="hljs-attr">pureDataPattern</span>:<span class="hljs-regexp">/^_/</span><br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 组件的初始数据</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">_rgb</span>:&#123;<span class="hljs-comment">//rgb颜色值对象</span><br>      <span class="hljs-attr">r</span>:<span class="hljs-number">0</span>,<br>      <span class="hljs-attr">g</span>:<span class="hljs-number">0</span>,<br>      <span class="hljs-attr">b</span>:<span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">fullcolor</span>:<span class="hljs-string">&#x27;0,0,0&#x27;</span><span class="hljs-comment">//根据rgb值的三个属性，动态计算fullcolor的值</span><br>  &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义组件-组件的生命周期"><a href="#自定义组件-组件的生命周期" class="headerlink" title="自定义组件 - 组件的生命周期"></a>自定义组件 - 组件的生命周期</h4><h5 id="1-组件全部的生命周期函数"><a href="#1-组件全部的生命周期函数" class="headerlink" title="1.组件全部的生命周期函数"></a>1.组件全部的生命周期函数</h5><p>小程序组件可用的全部生命周期如下表所示：  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650626485619.png"></p><h5 id="2-组件主要的生命周期函数"><a href="#2-组件主要的生命周期函数" class="headerlink" title="2. 组件主要的生命周期函数"></a>2. 组件主要的生命周期函数</h5><p>在小程序组件中，最重要的生命周期函数有 3 个，分别是 created、attached、detached。它们各自的特点<br>如下：<br>① 组件实例刚被创建好的时候，created 生命周期函数会被触发<br>⚫ 此时还不能调用 setData<br>⚫ 通常在这个生命周期函数中，只应该用于给组件的 this 添加一些自定义的属性字段<br>② 在组件完全初始化完毕、进入页面节点树后， attached 生命周期函数会被触发<br>⚫ 此时， this.data 已被初始化完毕<br>⚫ 这个生命周期很有用，绝大多数初始化的工作可以在这个时机进行（例如发请求获取初始数据）<br>③ 在组件离开页面节点树后， detached 生命周期函数会被触发<br>⚫ 退出一个页面时，会触发页面内每个自定义组件的 detached 生命周期函数<br>⚫ 此时适合做一些清理性质的工作  </p><h5 id="3-lifetimes-节点"><a href="#3-lifetimes-节点" class="headerlink" title="3. lifetimes 节点"></a>3. lifetimes 节点</h5><p>在小程序组件中，生命周期函数可以直接定义在 Component 构造器的第一级参数中，可以在 lifetimes 字段<br>内进行声明（这是推荐的方式，其优先级最高）。示例代码如下  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-comment">//推荐用法</span><br><span class="hljs-attr">lifetimes</span>:&#123;<br><span class="hljs-title function_">attached</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//在组件实例进入页面节点树时执行</span><br><span class="hljs-title function_">detached</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//在组件实例被从页面节点树移除时执行</span><br>&#125;<br><span class="hljs-comment">//以下是旧式的定义方式</span><br><span class="hljs-title function_">attached</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//在组件实例进入页面节点树时执行</span><br><span class="hljs-title function_">detached</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//在组件实例被从页面节点树移除时执行</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="自定义组件-组件所在页面的生命周期"><a href="#自定义组件-组件所在页面的生命周期" class="headerlink" title="自定义组件 - 组件所在页面的生命周期"></a>自定义组件 - 组件所在页面的生命周期</h4><h5 id="1-什么是组件所在页面的生命周期"><a href="#1-什么是组件所在页面的生命周期" class="headerlink" title="1.什么是组件所在页面的生命周期"></a>1.什么是组件所在页面的生命周期</h5><p>有时，自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期。<br>例如：每当触发页面的 show 生命周期函数的时候，我们希望能够重新生成一个随机的 RGB 颜色值。<br>在自定义组件中，组件所在页面的生命周期函数有如下 3 个，分别是：  </p><p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650628222265.png"></p><h5 id="2-pageLifetimes-节点"><a href="#2-pageLifetimes-节点" class="headerlink" title="2. pageLifetimes 节点"></a>2. pageLifetimes 节点</h5><p>组件所在页面的生命周期函数，需要定义在 pageLifetimes 节点中，示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br><span class="hljs-attr">pageLifetimes</span>:&#123;<br>    <span class="hljs-attr">show</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//页面被展示</span><br>    <span class="hljs-attr">hide</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//页面被隐藏</span><br>    <span class="hljs-attr">resize</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">siZe</span>)&#123;&#125;<span class="hljs-comment">//页面尺寸变化</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="3-生成随机的-RGB-颜色值"><a href="#3-生成随机的-RGB-颜色值" class="headerlink" title="3.生成随机的 RGB 颜色值"></a>3.生成随机的 RGB 颜色值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">_randomColor</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">_rgb</span>:&#123;<br>          <span class="hljs-attr">r</span>:<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">256</span>),<br>          <span class="hljs-attr">g</span>:<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">256</span>),<br>          <span class="hljs-attr">b</span>:<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">256</span>)<br>        &#125;<br>      &#125;)<br>    &#125;<br><span class="hljs-attr">pageLifetimes</span>:&#123;<span class="hljs-comment">//所在页面的生命周期函数</span><br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_randomColor</span>()<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="自定义组件-插槽"><a href="#自定义组件-插槽" class="headerlink" title="自定义组件 - 插槽"></a>自定义组件 - 插槽</h4><h4 id="1-什么是插槽"><a href="#1-什么是插槽" class="headerlink" title="1.什么是插槽"></a>1.什么是插槽</h4><p>在自定义组件的 wxml 结构中，可以提供一个 <slot> 节点（插槽），用于承载组件使用者提供的 wxml 结构。  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650629473452.png" style="zoom:67%;" /><h5 id="2-单个插槽"><a href="#2-单个插槽" class="headerlink" title="2. 单个插槽"></a>2. 单个插槽</h5><p>在小程序中，默认每个自定义组件中只允许使用一个 <slot> 进行占位，这种个数上的限制叫做单个插槽  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--组件的封装者--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>这里是组件的内部节点<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!--对于不确定的内容，可以使用&lt;s1ot&gt;进行占位，具体的内容由组件的使用者决定--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <br><span class="hljs-comment">&lt;!--组件的使用者--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component-tag-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--这部分内容将被放置在组件&lt;s1ot&gt;的位置上--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>这里是插入到组件slot中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">component-tag-name</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-启用多个插槽"><a href="#3-启用多个插槽" class="headerlink" title="3.启用多个插槽"></a>3.启用多个插槽</h5><p>在小程序的自定义组件中，需要使用多 <slot> 插槽时，可以在组件的 .js 文件中，通过如下方式进行启用。<br>示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">options</span>:&#123;<br><span class="hljs-attr">multipleSlots</span>:<span class="hljs-literal">true</span><span class="hljs-comment">//在组件定义时的选项中启用多slot支持</span><br>&#125;,<br><span class="hljs-attr">properties</span>:&#123;<span class="hljs-comment">/*...*/</span>&#125;,<br><span class="hljs-attr">methods</span>:&#123;<span class="hljs-comment">/*...*/</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="4-定义多个插槽"><a href="#4-定义多个插槽" class="headerlink" title="4.定义多个插槽"></a>4.定义多个插槽</h5><p>可以在组件的 .wxml 中使用多个 <slot> 标签，以不同的 name 来区分不同的插槽。示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--组件模板-&gt;</span><br><span class="hljs-comment">&lt;view class=&quot;wrapper&quot;&gt;</span><br><span class="hljs-comment">&lt;!--name为before的第一个slot插槽--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>这是一段固定的文本内容<span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!--name为after的第二个slot插槽--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="5-使用多个插槽"><a href="#5-使用多个插槽" class="headerlink" title="5. 使用多个插槽"></a>5. 使用多个插槽</h5><p>在使用带有多个插槽的自定义组件时，需要用 slot 属性来将节点插入到不同的 <slot> 中。示例代码如下：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--引用组件的页面模板--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">component-tag-name</span>&gt;</span><br><span class="hljs-comment">&lt;!--这部分内容将被放置在组件&lt;slot name=&quot;before&quot;&gt;的位置上--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span>这里是插入到组件slot name=&quot;before&quot;中的内容<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!--这部分内容将被放置在组件&lt;slot name=&quot;after&quot;&gt;的位置上--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span>这里是插入到组件slot name=&quot;after&quot;中的内容<span class="hljs-tag">&lt;<span class="hljs-name">view</span></span><br><span class="hljs-tag">&lt;/<span class="hljs-attr">component-tag-name</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义组件-父子组件之间的通信"><a href="#自定义组件-父子组件之间的通信" class="headerlink" title="自定义组件 - 父子组件之间的通信"></a>自定义组件 - 父子组件之间的通信</h4><h5 id="1-父子组件之间通信的-3-种方式"><a href="#1-父子组件之间通信的-3-种方式" class="headerlink" title="1. 父子组件之间通信的 3 种方式"></a>1. 父子组件之间通信的 3 种方式</h5><p>① 属性绑定<br>⚫ 用于父组件向子组件的指定属性设置数据，仅能设置 JSON 兼容的数据<br>② 事件绑定<br>⚫ 用于子组件向父组件传递数据，可以传递任意数据<br>③ 获取组件实例<br>⚫ 父组件还可以通过 this.selectComponent() 获取子组件实例对象<br>⚫ 这样就可以直接访问子组件的任意数据和方法  </p><h5 id="2-属性绑定"><a href="#2-属性绑定" class="headerlink" title="2. 属性绑定"></a>2. 属性绑定</h5><p>属性绑定用于实现父向子传值，而且只能传递普通类型的数据，无法将方法传递给子组件。父组件的示例代码<br>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//父组件的data节点</span><br><span class="hljs-attr">data</span>:&#123;<br><span class="hljs-attr">count</span>:<span class="hljs-number">0</span><br>&#125;<br><span class="hljs-comment">//父组件的Wxml结构</span><br>&lt;my-test5 count=<span class="hljs-string">&quot;&#123;&#123;count&#125;&#125;&quot;</span>&gt;&lt;/my-test5&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>~~~~<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>父组件中，count值为：&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>子组件在 properties 节点中声明对应的属性并使用。示例代码如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//子组件的properties节点</span><br><span class="hljs-attr">properties</span>:&#123;<br><span class="hljs-attr">count</span>:<span class="hljs-title class_">Number</span><br>&#125;,<br><span class="hljs-comment">//子组件的wxml结构</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>子组件中，count值为：&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="3-事件绑定"><a href="#3-事件绑定" class="headerlink" title="3. 事件绑定"></a>3. 事件绑定</h5><p>事件绑定用于实现子向父传值，可以传递任何类型的数据。使用步骤如下：<br>① 在父组件的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件<br>② 在父组件的 wxml 中，通过自定义事件的形式，将步骤 1 中定义的函数引用，传递给子组件<br>③ 在子组件的 js 中，通过调用 this.triggerEvent(‘自定义事件名称’, { &#x2F;* 参数对象 *&#x2F; }) ，将数据发送到父组件<br>④ 在父组件的 js 中，通过 e.detail 获取到子组件传递过来的数据  </p><p>步骤1：在父组件的 js 中，定义一个函数，这个函数即将通过自定义事件的形式，传递给子组件。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在父组件中定义syncCount方法</span><br><span class="hljs-comment">//将来，这个方法会被传递给子组件，供子组件进行调用</span><br><span class="hljs-title function_">syncCount</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-comment">// console.log(&#x27;syncCount&#x27;)</span><br>    <span class="hljs-comment">// console.log(e.detail.value)</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">count</span>:e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><p>步骤2：在父组件的 wxml 中，通过自定义事件的形式，将步骤 1 中定义的函数引用，传递给子组件。  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--使用bind:自定义事件名称（推荐：结构清晰--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-test3</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;&#123;&#123;count&#125;&#125;&quot;</span><span class="hljs-attr">bind:sync</span>=<span class="hljs-string">&quot;syncCount&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-test3</span>&gt;</span><br><span class="hljs-comment">&lt;!--或在bind后面直接写上自定义事件名称--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">my-test3</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&quot;&#123;&#123;count&#125;&#125;&quot;</span><span class="hljs-attr">bindsync</span>=<span class="hljs-string">&quot;syncCount&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-test3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>步骤3：在子组件的 js 中，通过调用 this.triggerEvent(‘自定义事件名称’, { &#x2F;* 参数对象 *&#x2F; }) ，将数据发送到父组件。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//子组件的wxml结构</span><br>&lt;text&gt;子组件中，count值为：&#123;&#123;count&#125;&#125;&lt;/text&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;addCount&quot;</span>&gt;</span>count+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="hljs-comment">//子组件的js代码</span><br> <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">addCount</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span>+<span class="hljs-number">1</span><br>      &#125;)<br>      <span class="hljs-comment">//触发自定义事件，将数值同步给组件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">triggerEvent</span>(<span class="hljs-string">&#x27;sync&#x27;</span>,&#123;<span class="hljs-attr">value</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">properties</span>.<span class="hljs-property">count</span>&#125;)<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>步骤4：在父组件的 js 中，通过 e.detail 获取到子组件传递过来的数据。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">syncCount</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>      <span class="hljs-attr">count</span>:e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span><br>    &#125;)<br>  &#125;,<br></code></pre></td></tr></table></figure><h5 id="4-获取组件实例-没太懂2022-4-23"><a href="#4-获取组件实例-没太懂2022-4-23" class="headerlink" title="4. 获取组件实例(没太懂2022.4.23)"></a>4. 获取组件实例(没太懂2022.4.23)</h5><p>可在父组件里调用 this.selectComponent(“id或class选择器”) ，获取子组件的实例对象，从而直接访问子组<br>件的任意数据和方法。调用时需要传入一个选择器，例如 this.selectComponent(“.my-component”)。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Xml结构</span><br>&lt;my-test3 count=<span class="hljs-string">&quot;&#123;&#123;count&#125;&#125;&quot;</span><span class="hljs-attr">bind</span>:sync=<span class="hljs-string">&quot;syncCount&quot;</span><span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;customA&quot;</span>id=<span class="hljs-string">&quot;CA&quot;</span>&gt;<br>&lt;/my-test3&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;getChild&quot;</span>&gt;</span>获取子组件实例<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><br><span class="hljs-comment">//js</span><br><span class="hljs-title function_">getChild</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//按钮的tap事件处理函数</span><br>/切记下面参数不能传递标签选择器<span class="hljs-string">&#x27;my-test3&#x27;</span>,不然返回的是nul1<br>    <span class="hljs-keyword">const</span> child=<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectComponent</span>(<span class="hljs-string">&#x27;.customA&#x27;</span>)<span class="hljs-comment">//也可以传递id选择器#cA</span><br>    child.<span class="hljs-title function_">setData</span>(&#123;<span class="hljs-attr">count</span>:child.<span class="hljs-property">properties</span>.<span class="hljs-property">count</span>+<span class="hljs-number">1</span>&#125;)<span class="hljs-comment">//调用子组件的setData方法</span><br>    child.<span class="hljs-title function_">addCount</span>()<span class="hljs-comment">//调用子组件的addCount方法</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义组件-behaviors"><a href="#自定义组件-behaviors" class="headerlink" title="自定义组件 - behaviors"></a>自定义组件 - behaviors</h4><h5 id="1-什么是-behaviors"><a href="#1-什么是-behaviors" class="headerlink" title="1.什么是 behaviors"></a>1.什么是 behaviors</h5><p>behaviors 是小程序中，用于实现组件间代码共享的特性，类似于 Vue.js 中的 “mixins”。  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650675866671.png" style="zoom:67%;" /><h5 id="2-behaviors-的工作方式"><a href="#2-behaviors-的工作方式" class="headerlink" title="2.behaviors 的工作方式"></a>2.behaviors 的工作方式</h5><p>每个 behavior 可以包含一组属性、数据、生命周期函数和方法。组件引用它时，它的属性、数据和方法会被<br>合并到组件中。<br>每个组件可以引用多个 behavior，behavior 也可以引用其它 behavior。</p><h5 id="3-创建-behavior"><a href="#3-创建-behavior" class="headerlink" title="3.创建 behavior"></a>3.创建 behavior</h5><p>调用 Behavior(Object object) 方法即可创建一个共享的 behavior 实例对象，供所有的组件使用：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//调用Behavior()方法，创建实例对象</span><br><span class="hljs-comment">//并使用module.exports将behavior实例对象共享出去</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Behavior</span>(&#123;<br>  <span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">uesrname</span>:<span class="hljs-string">&#x27;zs&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">properties</span>:&#123;&#125;,<br>  <span class="hljs-attr">methods</span>:&#123;&#125;<br>  &#125;)<br></code></pre></td></tr></table></figure><h4 id="4-导入并使用-behavior"><a href="#4-导入并使用-behavior" class="headerlink" title="4. 导入并使用 behavior"></a>4. 导入并使用 behavior</h4><p>在组件中，使用 require() 方法导入需要的 behavior，挂载后即可访问 behavior 中的数据或方法，示例代码<br>如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/test5/test5.js</span><br><span class="hljs-comment">//使用 require() 方法导入需要的 behavior</span><br><span class="hljs-keyword">const</span> myBehavior=<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../../behaviors/my-behavior&#x27;</span>)<br><span class="hljs-title class_">Component</span>(&#123;<br>    <span class="hljs-comment">//将实例挂载到behavior 中的数组结点</span><br>  <span class="hljs-attr">behaviors</span>:[myBehavior],<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="5-behavior-中所有可用的节点"><a href="#5-behavior-中所有可用的节点" class="headerlink" title="5. behavior 中所有可用的节点"></a>5. behavior 中所有可用的节点</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650677157797.png" style="zoom:67%;" /><h5 id="6-同名字段的覆盖和组合规则"><a href="#6-同名字段的覆盖和组合规则" class="headerlink" title="6. 同名字段的覆盖和组合规则*"></a>6. 同名字段的覆盖和组合规则*</h5><p>组件和它引用的 behavior 中可以包含同名的字段，此时可以参考如下 3 种同名时的处理规则：<br>① 同名的数据字段 (data)<br>② 同名的属性 (properties) 或方法 (methods)<br>③ 同名的生命周期函数<br>关于详细的覆盖和组合规则，大家可以参考微信小程序官方文档给出的说明：<br><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html">https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html</a>  </p><h3 id="使用-npm-包"><a href="#使用-npm-包" class="headerlink" title="使用 npm 包"></a>使用 npm 包</h3><h4 id="使用-npm-包—Vant-Weapp"><a href="#使用-npm-包—Vant-Weapp" class="headerlink" title="使用 npm 包—Vant Weapp"></a>使用 npm 包—Vant Weapp</h4><h5 id="小程序对-npm-的支持与限制"><a href="#小程序对-npm-的支持与限制" class="headerlink" title="小程序对 npm 的支持与限制"></a>小程序对 npm 的支持与限制</h5><p>目前，小程序中已经支持使用 npm 安装第三方包，从而来提高小程序的开发效率。但是，在小程序中使用<br>npm 包有如下 3 个限制：<br>① 不支持依赖于 Node.js 内置库的包<br>② 不支持依赖于浏览器内置对象的包<br>③ 不支持依赖于 C++ 插件的包<br>总结：虽然 npm 上的包有千千万，但是能供小程序使用的包却“为数不多”。  </p><h5 id="什么是-Vant-Weapp"><a href="#什么是-Vant-Weapp" class="headerlink" title="什么是 Vant Weapp"></a>什么是 Vant Weapp</h5><p>Vant Weapp 是有赞前端团队开源的一套小程序 UI 组件库，助力开发者快速搭建小程序应用。它所使用的是<br>MIT 开源许可协议，对商业使用比较友好。<br>官方文档地址 <a href="https://youzan.github.io/vant-weapp">https://youzan.github.io/vant-weapp</a>  </p><h5 id="2-安装-Vant-组件库"><a href="#2-安装-Vant-组件库" class="headerlink" title="2. 安装 Vant 组件库"></a>2. 安装 Vant 组件库</h5><p>在小程序项目中，安装 Vant 组件库主要分为如下 3 步：<br>① 通过 npm 安装（建议指定版本为@1.3.3）<br>② 构建 npm 包<br>③ 修改 app.json<br>详细的操作步骤，大家可以参考 Vant 官方提供的快速上手教程：<br><a href="https://youzan.github.io/vant-weapp/#/quickstart#an-zhuang">https://youzan.github.io/vant-weapp/#/quickstart#an-zhuang</a>  </p><h5 id="3-使用-Vant-组件"><a href="#3-使用-Vant-组件" class="headerlink" title="3. 使用 Vant 组件"></a>3. 使用 Vant 组件</h5><p>安装完 Vant 组件库之后，可以在 app.json 的 usingComponents 节点中引入需要的组件，即可在 wxml 中<br>直接使用组件。示例代码如下：  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;van-button&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path/to/vant-weapp/dist/button/index&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="4-定制全局主题样式"><a href="#4-定制全局主题样式" class="headerlink" title="4. 定制全局主题样式"></a>4. 定制全局主题样式</h5><p>Vant Weapp 使用 CSS 变量来实现定制主题。 关于 CSS 变量的基本用法，请参考 MDN 文档：<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties</a>  </p><h5 id="5-定制全局主题样式"><a href="#5-定制全局主题样式" class="headerlink" title="5.定制全局主题样式"></a>5.定制全局主题样式</h5><p>在 app.wxss 中，写入 CSS 变量，即可对全局生效：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/**app.wxss**/</span><br> page&#123;<span class="hljs-comment">/*page是根结点*/</span><br>     <span class="hljs-comment">/*自定义告警结点的样式*/</span><br>  <span class="hljs-attr">--button-danger-background-color</span>:<span class="hljs-number">#C00000</span>;<br>  <span class="hljs-attr">--button-danger-border-color</span>:<span class="hljs-number">#D60000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>所有可用的颜色变量，请参考 Vant 官方提供的配置文件：<br><a href="https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less">https://github.com/youzan/vant-weapp/blob/dev/packages/common/style/var.less</a>  </p><h4 id="使用-npm-包-API-Promise化"><a href="#使用-npm-包-API-Promise化" class="headerlink" title="使用 npm 包 - API Promise化"></a>使用 npm 包 - API Promise化</h4><h5 id="1-基于回调函数的异步-API-的缺点"><a href="#1-基于回调函数的异步-API-的缺点" class="headerlink" title="1.基于回调函数的异步 API 的缺点"></a>1.基于回调函数的异步 API 的缺点</h5><p>默认情况下，小程序官方提供的异步 API 都是基于回调函数实现的，例如，网络请求的 API 需要按照如下的方<br>式调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">wx.<span class="hljs-title function_">request</span>(&#123;<br><span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-attr">data</span>:&#123;&#125;,<br><span class="hljs-attr">success</span>:<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-comment">//请求成功的回调函数</span><br><span class="hljs-attr">fail</span>:<span class="hljs-function">()=&gt;</span>&#123;&#125;,<span class="hljs-comment">//请求失败的回调函数</span><br><span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>&#123;&#125;<span class="hljs-comment">//请求完成的回调函数</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>缺点：容易造成回调地狱的问题，代码的可读性、维护性差！  </p><h5 id="2-什么是-API-Promise-化"><a href="#2-什么是-API-Promise-化" class="headerlink" title="2. 什么是 API Promise 化"></a>2. 什么是 API Promise 化</h5><p>API Promise化，指的是通过额外的配置，将官方提供的、基于回调函数的异步 API，升级改造为基于<br>Promise 的异步 API，从而提高代码的可读性、维护性，避免回调地狱的问题。  </p><h5 id="3-实现-API-Promise-化"><a href="#3-实现-API-Promise-化" class="headerlink" title="3. 实现 API Promise 化"></a>3. 实现 API Promise 化</h5><p>在小程序中，实现 API Promise 化主要依赖于 miniprogram-api-promise 这个第三方的 npm 包。它的安装<br>和使用步骤如下：  </p><p>命令行安装命令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">npm install --save miniprogram-api-promise@<span class="hljs-number">1.0</span><span class="hljs-number">.4</span><br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在小程序入口文件中(app.js),只需调用一次promisifyAll()方法，</span><br><span class="hljs-comment">//即可实现异步API的Promise化</span><br><span class="hljs-keyword">import</span> &#123;promisifyAll&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;miniprogram-api-promise&#x27;</span><br><span class="hljs-keyword">const</span> wxp wx.<span class="hljs-property">p</span> =&#123;&#125;<br><span class="hljs-comment">//promisify all wx&#x27;s api</span><br><span class="hljs-title function_">promisifyAll</span>(wx,wxp)<br></code></pre></td></tr></table></figure><h5 id="4-调用-Promise-化之后的异步-API"><a href="#4-调用-Promise-化之后的异步-API" class="headerlink" title="4. 调用 Promise 化之后的异步 API"></a>4. 调用 Promise 化之后的异步 API</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getInfo</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">const</span> res= wx.<span class="hljs-property">p</span>.<span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;https://www.escook.cn/api/get&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>      <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>      <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>    &#125;<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;,<br></code></pre></td></tr></table></figure><h3 id="全局数据共享"><a href="#全局数据共享" class="headerlink" title="全局数据共享"></a>全局数据共享</h3><h4 id="1-什么是全局数据共享"><a href="#1-什么是全局数据共享" class="headerlink" title="1. 什么是全局数据共享"></a>1. 什么是全局数据共享</h4><p>全局数据共享（又叫做：状态管理）是为了解决组件之间数据共享的问题。<br>开发中常用的全局数据共享方案有：Vuex、Redux、MobX 等。  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650682083381.png" style="zoom:67%;" /><h4 id="2-小程序中的全局数据共享方案"><a href="#2-小程序中的全局数据共享方案" class="headerlink" title="2. 小程序中的全局数据共享方案"></a>2. 小程序中的全局数据共享方案</h4><p>在小程序中，可使用 mobx-miniprogram 配合 mobx-miniprogram-bindings 实现全局数据共享。其中：<br> mobx-miniprogram 用来创建 Store 实例对象<br> mobx-miniprogram-bindings 用来把 Store 中的共享数据或方法，绑定到组件或页面中使用  </p><h4 id="全局数据共享-MobX"><a href="#全局数据共享-MobX" class="headerlink" title="全局数据共享 - MobX"></a>全局数据共享 - MobX</h4><h5 id="1-安装-MobX-相关的包"><a href="#1-安装-MobX-相关的包" class="headerlink" title="1. 安装 MobX 相关的包"></a>1. 安装 MobX 相关的包</h5><p>在项目中运行如下的命令，安装 MobX 相关的包：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install --save mobx-miniprogram@<span class="hljs-number">4</span>.<span class="hljs-number">13</span>.<span class="hljs-number">2</span> mobx-miniprogram-bindings@<span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>注意：MobX 相关的包安装完毕之后，记得重新构建 npm。  </p><h5 id="2-创建-MobX-的-Store-实例"><a href="#2-创建-MobX-的-Store-实例" class="headerlink" title="2. 创建 MobX 的 Store 实例"></a>2. 创建 MobX 的 Store 实例</h5><p><a href="https://blog.csdn.net/ct5211314/article/details/120322080?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165068256216780357299904%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165068256216780357299904&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-120322080.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=%E5%B0%8F%E7%A8%8B%E5%BA%8FMobX&spm=1018.2226.3001.4187">参考：微信小程序中的vuex（MobX）</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//在这个js，文件中，专门创建store实例对象</span><br><span class="hljs-keyword">import</span> &#123;observable,action&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mobx-miniprogram&#x27;</span><span class="hljs-comment">//这里导出observable和action方法，后面才能使用</span><br><span class="hljs-comment">//observable创建仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> store = <span class="hljs-title function_">observable</span>(&#123;<br>  <span class="hljs-comment">// 数据字段</span><br>  <span class="hljs-attr">numA</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">numB</span>: <span class="hljs-number">2</span>,<br><br>  <span class="hljs-comment">// 计算属性 数据改变时会执行，vue中的计算属性，返回sum这个变量</span><br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">sum</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">numA</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">numB</span><br>  &#125;,<br><br>  <span class="hljs-comment">//actions 方法用于改变仓库的值</span><br>  <span class="hljs-attr">updateNum1</span>: <span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">step</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">numA</span> += step   <br>  &#125;),<br>  <span class="hljs-attr">updateNum2</span>: <span class="hljs-title function_">action</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">step</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">numB</span> += step<br>  &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="3-将-Store-中的成员绑定到页面中"><a href="#3-将-Store-中的成员绑定到页面中" class="headerlink" title="3. 将 Store 中的成员绑定到页面中"></a>3. 将 Store 中的成员绑定到页面中</h5><p>页面的JS文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; createStoreBindings &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;mobx-miniprogram-bindings&quot;</span>;<span class="hljs-comment">//导入createStoreBindings的方法，可以将数据绑定至页面</span><br><span class="hljs-keyword">import</span> &#123; store &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../../store/store&quot;</span>;<span class="hljs-comment">//导入store实例</span><br><span class="hljs-title class_">Page</span>(&#123;<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">someData</span>: <span class="hljs-string">&quot;...&quot;</span>,<br>  &#125;,<br>  <span class="hljs-title function_">onLoad</span>() <span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>)&#123;<span class="hljs-comment">//生命周期函数--监听页面加载</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storeBindings</span> = <span class="hljs-title function_">createStoreBindings</span>(<span class="hljs-variable language_">this</span>, &#123;<br>      store,<span class="hljs-comment">//数据源</span><br>      <span class="hljs-attr">fields</span>: [<span class="hljs-string">&quot;numA&quot;</span>, <span class="hljs-string">&quot;numB&quot;</span>, <span class="hljs-string">&quot;sum&quot;</span>],<span class="hljs-comment">//公共变量</span><br>      <span class="hljs-attr">actions</span>: [<span class="hljs-string">&quot;update&quot;</span>],<span class="hljs-comment">//公共方法</span><br>    &#125;)<br>  &#125;,<br>  <span class="hljs-title function_">onUnload</span>() <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//生命周期函数--监听页面卸载</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">storeBindings</span>.<span class="hljs-title function_">destroyStoreBindings</span>();<span class="hljs-comment">//数据清理</span><br>  &#125;,<br>  <span class="hljs-title function_">myMethod</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">sum</span>; <span class="hljs-comment">// 来自于 MobX store 的字段</span><br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="4-在页面使用store的成员"><a href="#4-在页面使用store的成员" class="headerlink" title="4.在页面使用store的成员"></a>4.在页面使用store的成员</h5><p>页面结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--pages/message/message.wxml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">text</span>&gt;</span>pages/message/message.wxml<span class="hljs-tag">&lt;/<span class="hljs-name">text</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;btnHandler1&quot;</span> <span class="hljs-attr">data-step</span>=<span class="hljs-string">&quot;&#123;&#123;1&#125;&#125;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--加一按钮--&gt;</span><br>    numA + 1<br><span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>  <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;btnHandler1&quot;</span> <span class="hljs-attr">data-step</span>=<span class="hljs-string">&quot;&#123;&#123;-1&#125;&#125;&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--减一按钮--&gt;</span><br>    numA -1<br><span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;numA&#125;&#125;+&#123;&#123;numB&#125;&#125;=&#123;&#123;sum&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js函数方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//加一减一按钮的事件处理函数</span><br>  <span class="hljs-title function_">btnHandler1</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateNum1</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">step</span>)<br>  &#125;,<br></code></pre></td></tr></table></figure><h5 id="5-将-Store-中的成员绑定到组件中"><a href="#5-将-Store-中的成员绑定到组件中" class="headerlink" title="5.将 Store 中的成员绑定到组件中"></a>5.将 Store 中的成员绑定到组件中</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// components/numbes/numnes.js</span><br><span class="hljs-keyword">import</span> &#123;storeBindingsBehavior&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mobx-miniprogram-bindings&#x27;</span><span class="hljs-comment">//导入mobx-miniprogram-bindings包的storeBindingsBehavior</span><br><span class="hljs-keyword">import</span> &#123;store&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../../store/store&#x27;</span><span class="hljs-comment">//导入stord实例</span><br><span class="hljs-title class_">Component</span>(&#123;<br>  <span class="hljs-attr">behaviors</span>:[storeBindingsBehavior],<span class="hljs-comment">//通过storeBindingsBehavior实现自动绑定</span><br>  <span class="hljs-attr">storeBindings</span>:&#123;<br>    <span class="hljs-comment">//指定要绑定的Store</span><br>    store,<br>    <span class="hljs-attr">fields</span>:&#123;<span class="hljs-comment">//指定要绑定的字段数据</span><br>      <span class="hljs-attr">numA</span>:<span class="hljs-string">&#x27;numA&#x27;</span>,<span class="hljs-comment">//前者是组件中自定义的数据名后者是对应store中的数据,前者可以自定义</span><br>      <span class="hljs-attr">numB</span>:<span class="hljs-string">&#x27;numB&#x27;</span>,<br>      <span class="hljs-attr">sum</span>:<span class="hljs-string">&#x27;sum&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">actions</span>: [<span class="hljs-string">&quot;updateNum2&quot;</span>],<span class="hljs-comment">//公共方法updateNum2</span><br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h5 id="6-在组件中使用-Store-中的成员"><a href="#6-在组件中使用-Store-中的成员" class="headerlink" title="6. 在组件中使用 Store 中的成员"></a>6. 在组件中使用 Store 中的成员</h5><p>结构:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;btnHandler2&quot;</span> <span class="hljs-attr">data-step</span>=<span class="hljs-string">&quot;&#123;&#123;1&#125;&#125;&quot;</span>&gt;</span>numB + 1<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">van-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;danger&quot;</span>  <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;btnHandler2&quot;</span> <span class="hljs-attr">data-step</span>=<span class="hljs-string">&quot;&#123;&#123;-1&#125;&#125;&quot;</span>&gt;</span>numB -1<span class="hljs-tag">&lt;/<span class="hljs-name">van-button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;numA&#125;&#125;+&#123;&#123;numB&#125;&#125;=&#123;&#123;sum&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>处理函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">methods</span>: &#123;<br>   <span class="hljs-title function_">btnHandler2</span>(<span class="hljs-params">e</span>)&#123;<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>     <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">updateNum2</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">step</span>)<br>   &#125;   <br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="分包"><a href="#分包" class="headerlink" title="分包"></a>分包</h3><h4 id="分包-基础概念"><a href="#分包-基础概念" class="headerlink" title="分包-基础概念"></a>分包-基础概念</h4><h5 id="1-什么是分包"><a href="#1-什么是分包" class="headerlink" title="1.什么是分包"></a>1.什么是分包</h5><p>分包指的是把一个完整的小程序项目，按照需求划分为不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载。 </p><h5 id="2-分包的好处"><a href="#2-分包的好处" class="headerlink" title="2. 分包的好处"></a>2. 分包的好处</h5><p>对小程序进行分包的好处主要有以下两点：<br> 可以优化小程序首次启动的下载时间<br>在多团队共同开发时可以更好的解耦协作   </p><h5 id="3-分包前项目的构成"><a href="#3-分包前项目的构成" class="headerlink" title="3.分包前项目的构成"></a>3.分包前项目的构成</h5><p>分包前，小程序项目中所有的页面和资源都被打包到了一起，导致整个项目体积过大，影响小程序首次启动的下载时间。  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651288715815.png" style="zoom:67%;" /><h5 id="4-分包后项目的构成"><a href="#4-分包后项目的构成" class="headerlink" title="4.分包后项目的构成"></a>4.分包后项目的构成</h5><p>分包后，小程序项目由 1 个主包 + 多个分包组成：<br> 主包：一般只包含项目的启动页面或 TabBar 页面、以及所有分包都需要用到的一些公共资源<br> 分包：只包含和当前分包有关的页面和私有资源  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651288805650.png" style="zoom:67%;" /><h5 id="5-分包的加载规则"><a href="#5-分包的加载规则" class="headerlink" title="5. 分包的加载规则"></a>5. 分包的加载规则</h5><p>① 在小程序启动时，默认会下载主包并启动主包内页面<br> tabBar 页面需要放到主包中<br>② 当用户进入分包内某个页面时，客户端会把对应分包下载下来，下载完成后再进行展示<br> 非 tabBar 页面可以按照功能的不同，划分为不同的分包之后，进行按需下载  </p><h5 id="6-分包的体积限制"><a href="#6-分包的体积限制" class="headerlink" title="6. 分包的体积限制"></a>6. 分包的体积限制</h5><p>目前，小程序分包的大小有以下两个限制：<br> 整个小程序所有分包大小不超过 16M（主包 + 所有分包）<br> 单个分包&#x2F;主包大小不能超过 2M  </p><h4 id="分包-使用分包"><a href="#分包-使用分包" class="headerlink" title="分包 - 使用分包"></a>分包 - 使用分包</h4><h5 id="1-配置方法"><a href="#1-配置方法" class="headerlink" title="1.配置方法"></a>1.配置方法</h5><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651289216956.png" style="zoom:67%;" /><h5 id="2-打包原则"><a href="#2-打包原则" class="headerlink" title="2.打包原则"></a>2.打包原则</h5><p>① 小程序会按 subpackages 的配置进行分包，subpackages 之外的目录将被打包到主包中<br>② 主包也可以有自己的 pages（即最外层的 pages 字段）<br>③ tabBar 页面必须在主包内<br>④ 分包之间不能互相嵌套  </p><h5 id="3-引用原则"><a href="#3-引用原则" class="headerlink" title="3.引用原则"></a>3.引用原则</h5><p>① 主包无法引用分包内的私有资源<br>② 分包之间不能相互引用私有资源<br>③ 分包可以引用主包内的公共资源  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651289751946.png" style="zoom:67%;" /><h4 id="分包-独立分包"><a href="#分包-独立分包" class="headerlink" title="分包-独立分包"></a>分包-独立分包</h4><h5 id="1-什么是独立分包"><a href="#1-什么是独立分包" class="headerlink" title="1. 什么是独立分包"></a>1. 什么是独立分包</h5><p>独立分包本质上也是分包，只不过它比较特殊，可以独立于主包和其他分包而单独运行。  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651289989478.png" style="zoom:67%;" /><h5 id="2-独立分包和普通分包的区别"><a href="#2-独立分包和普通分包的区别" class="headerlink" title="2. 独立分包和普通分包的区别"></a>2. 独立分包和普通分包的区别</h5><p>最主要的区别：是否依赖于主包才能运行<br> 普通分包必须依赖于主包才能运行<br> 独立分包可以在不下载主包的情况下，独立运行  </p><h5 id="3-独立分包的应用场景"><a href="#3-独立分包的应用场景" class="headerlink" title="3. 独立分包的应用场景"></a>3. 独立分包的应用场景</h5><p>开发者可以按需，将某些具有一定功能独立性的页面配置到独立分包中。原因如下：<br>当小程序从普通的分包页面启动时，需要首先下载主包<br>而独立分包不依赖主包即可运行，可以很大程度上提升分包页面的启动速度<br>注意：一个小程序中可以有多个独立分包。  </p><h5 id="4-独立分包的配置方法"><a href="#4-独立分包的配置方法" class="headerlink" title="4. 独立分包的配置方法"></a>4. 独立分包的配置方法</h5><p>在分包配置里加入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;independent&quot;</span>: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651290400594.png" style="zoom:67%;" /><h5 id="5-引用原则"><a href="#5-引用原则" class="headerlink" title="5. 引用原则"></a>5. 引用原则</h5><p>独立分包和普通分包以及主包之间，是相互隔绝的，不能相互引用彼此的资源！例如：<br>① 主包无法引用独立分包内的私有资源<br>② 独立分包之间，不能相互引用私有资源<br>③ 独立分包和普通分包之间，不能相互引用私有资源<br>④ <strong>特别注意：</strong>独立分包中不能引用主包内的公共资源  </p><h4 id="分包-分包预下载"><a href="#分包-分包预下载" class="headerlink" title="分包 - 分包预下载"></a>分包 - 分包预下载</h4><h5 id="1-什么是分包预下载"><a href="#1-什么是分包预下载" class="headerlink" title="1. 什么是分包预下载"></a>1. 什么是分包预下载</h5><p>分包预下载指的是：在进入小程序的某个页面时，由框架自动预下载可能需要的分包，从而提升进入后续分包<br>页面时的启动速度。  </p><h5 id="2-配置分包的预下载"><a href="#2-配置分包的预下载" class="headerlink" title="2. 配置分包的预下载"></a>2. 配置分包的预下载</h5><p>预下载分包的行为，会在进入指定的页面时触发。在 app.json 中，使用 preloadRule 节点定义分包的预下载<br>规则，示例代码如下：  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;preloadRule&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//分包预下载的规则</span><br>    <span class="hljs-attr">&quot;pages/contact/contact&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-comment">//触发分包预下载的页面路径</span><br>        <span class="hljs-comment">//packages表示进入页面后，预下载哪些分包</span><br>        <span class="hljs-attr">&quot;packages&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;pagA&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;network&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;all&quot;</span><br>        <span class="hljs-comment">//network表示在指定的网络模式下进行预下载，</span><br>        <span class="hljs-comment">//可选值为：al1(不限网络)和wifi(仅wifi模式下进行预下载)</span><br>    <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="3-分包预下载的限制"><a href="#3-分包预下载的限制" class="headerlink" title="3. 分包预下载的限制"></a>3. 分包预下载的限制</h5><p>同一个分包中的页面享有共同的预下载大小限额 2M，例如：  </p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651291569392.png" style="zoom:67%;" /><h3 id="案例-自定义-tabBar"><a href="#案例-自定义-tabBar" class="headerlink" title="案例 - 自定义 tabBar"></a>案例 - 自定义 tabBar</h3><h4 id="1-案例效果"><a href="#1-案例效果" class="headerlink" title="1.案例效果"></a>1.案例效果</h4><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651291693861.png" style="zoom:67%;" /><h4 id="自定义tabBar"><a href="#自定义tabBar" class="headerlink" title="自定义tabBar"></a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">自定义tabBar</a></h4><h5 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h5><h6 id="1-配置信息"><a href="#1-配置信息" class="headerlink" title="1. 配置信息"></a>1. 配置信息</h6><ul><li>在 <code>app.json</code> 中的 <code>tabBar</code> 项指定 <code>custom</code> 字段，同时其余 <code>tabBar</code> 相关配置也补充完整。</li><li>所有 tab 页的 json 里需声明 <code>usingComponents</code> 项，也可以在 <code>app.json</code> 全局开启。</li></ul><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;custom&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;color&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;selectedColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;backgroundColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000000&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;page/component/index&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;组件&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;page/API/index&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;接口&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;usingComponents&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h6 id="2-添加-tabBar-代码文件"><a href="#2-添加-tabBar-代码文件" class="headerlink" title="2. 添加 tabBar 代码文件"></a>2. 添加 tabBar 代码文件</h6><p>在代码根目录下添加入口文件:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">custom-tab-bar/index.js<br>custom-tab-bar/index.json<br>custom-tab-bar/index.wxml<br>custom-tab-bar/index.wxss<br></code></pre></td></tr></table></figure><p>######3. 编写 tabBar 代码</p><p>用自定义组件的方式编写即可，该自定义组件完全接管 tabBar 的渲染。另外，自定义组件新增 <code>getTabBar</code> 接口，可获取当前页面下的自定义 tabBar 组件实例。</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (1.总体介绍)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/01.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/01.%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="总体介绍："><a href="#总体介绍：" class="headerlink" title="总体介绍："></a>总体介绍：</h1><h3 id="前端开发-客户端"><a href="#前端开发-客户端" class="headerlink" title="前端开发(客户端):"></a>前端开发(客户端):</h3><h4 id="1-文字客户端"><a href="#1-文字客户端" class="headerlink" title="1.文字客户端"></a>1.文字客户端</h4><h4 id="2-图形化客户端（C-x2F-S架构（client-x2F-server））"><a href="#2-图形化客户端（C-x2F-S架构（client-x2F-server））" class="headerlink" title="2.图形化客户端（C&#x2F;S架构（client&#x2F;server））"></a>2.图形化客户端（C&#x2F;S架构（client&#x2F;server））</h4><h4 id="3-网页（B-x2F-S架构-browser-x2F-server-）"><a href="#3-网页（B-x2F-S架构-browser-x2F-server-）" class="headerlink" title="3.网页（B&#x2F;S架构(browser&#x2F;server)）"></a>3.网页（B&#x2F;S架构(browser&#x2F;server)）</h4><h5 id="网页的优点（相比图形化）"><a href="#网页的优点（相比图形化）" class="headerlink" title="网页的优点（相比图形化）"></a>网页的优点（相比图形化）</h5><p>跨平台  无需安装  无需更新（客户）</p><h5 id="网页使用的语言"><a href="#网页使用的语言" class="headerlink" title="网页使用的语言"></a>网页使用的语言</h5><p>HTML CSS JavaScript</p><h3 id="网页开发概览："><a href="#网页开发概览：" class="headerlink" title="网页开发概览："></a>网页开发概览：</h3><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>浏览器：渲染网页</p><h4 id="开发标准："><a href="#开发标准：" class="headerlink" title="开发标准："></a>开发标准：</h4><p>W3C(万维网联盟)—-&gt;统一的标准使网页在不同的浏览器有统一的渲染效果</p><h4 id="由W3C标准，网页分为结构表现和行为"><a href="#由W3C标准，网页分为结构表现和行为" class="headerlink" title="由W3C标准，网页分为结构表现和行为"></a>由W3C标准，网页分为结构表现和行为</h4><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>HTML用于描述网页结构</p><h5 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h5><p>CSS用于控制页面中元素的样式</p><h5 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h5><p>JavaScript用于相应用户操作</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (3. HTML语法/特性学习)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/03HTML%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/03HTML%E8%AF%AD%E6%B3%95%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML语法-x2F-特性学习"><a href="#HTML语法-x2F-特性学习" class="headerlink" title="HTML语法&#x2F;特性学习"></a>HTML语法&#x2F;特性学习</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><h4 id="实体的作用："><a href="#实体的作用：" class="headerlink" title="实体的作用："></a>实体的作用：</h4><p>在网页里编写的多个空格默认被解析为一个空格，不能直接书写一些特殊符号：多个空格，大于，小于号等<br>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）</p><h4 id="实体的语法"><a href="#实体的语法" class="headerlink" title="实体的语法"></a>实体的语法</h4><pre><code class="hljs">&amp;实体的名字</code></pre><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;nbsp;</span>      <span class="hljs-comment">&lt;!--不间断空格--&gt;</span><br><span class="hljs-symbol">&amp;lt;</span>        <span class="hljs-comment">&lt;!--小于号--&gt;</span><br><span class="hljs-symbol">&amp;gt;</span>        <span class="hljs-comment">&lt;!--大于号--&gt;</span><br><span class="hljs-symbol">&amp;copy;</span>      <span class="hljs-comment">&lt;!--版权符号--&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/html/html-entities.html">详细实体参考：</a></p><h3 id="meat标签"><a href="#meat标签" class="headerlink" title="meat标签"></a>meat标签</h3><h4 id="meat标签作用"><a href="#meat标签作用" class="headerlink" title="meat标签作用"></a>meat标签作用</h4><p>元数据（Metadata）是数据的数据信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。<br>META元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。<br>元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用。<br><a href="https://www.runoob.com/tags/tag-meta.html">meat标签文档</a></p><h4 id="meat示例"><a href="#meat示例" class="headerlink" title="meat示例"></a>meat示例</h4><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;前端，html,css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的keywords表示网页的关键字，搜索时会检索这个关键字的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;免费在线教程&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>description用于网页介绍描述，就是搜索引擎搜索显示结果的小字部分。title标签里的是搜索结果的标题。</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>在网页里，HTML负责网页结构使用HTML标签时我们更应该关注其语义，而不是样式。</p><h4 id="h标题标签"><a href="#h标题标签" class="headerlink" title="h标题标签"></a>h标题标签</h4><p>h1-h6一共有六级标题，重要性依次递减，h1在网页中仅次于title标签，一般情况下只有一个。一般情况下标题标签只用到h1-h6.</p><h5 id="标题组："><a href="#标题组：" class="headerlink" title="标题组："></a>标题组：</h5><p>hgroup标签被用来对标题元素进行分组。</p><p>当标题有多个层级（副标题）时，hgroup 元素被用来对一系列 h1 - h6 元素进行分组。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hgroup</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to my WWF<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>For a living planet<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">hgroup</span>&gt;</span><br></code></pre></td></tr></table></figure><p>独占一行的元素叫块元素</p><h4 id="P标签-段落"><a href="#P标签-段落" class="headerlink" title="P标签(段落)"></a>P标签(段落)</h4><p>P标签表示一个段落。<br>是一个块元素。</p><h4 id="em标签：强调文本"><a href="#em标签：强调文本" class="headerlink" title="em标签：强调文本"></a>em标签：强调文本</h4><p>呈现为被强调的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>强调文本<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样的还有strong标签:定义重要的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗文本<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="blockquote标签：引用"><a href="#blockquote标签：引用" class="headerlink" title="blockquote标签：引用"></a>blockquote标签：引用</h4><p>定义一个摘自另一个源的块引用：浏览器通常会对 blockquote元素进行缩进<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span><br>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有同样的短引用：q标签<br>q 标签定义一个短的引用。</p><p>浏览器经常会在这种引用的周围插入引号。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>WWF&#x27;s goal is to:<br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>Build a future where people live in harmony with nature.<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br>We hope they succeed.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="br标签：换行"><a href="#br标签：换行" class="headerlink" title="br标签：换行"></a>br标签：换行</h4><p>br 标签插入一个简单的换行符。<br>br 标签是一个空标签，意味着它没有结束标签。</p><h4 id="header标签（网页的头部）"><a href="#header标签（网页的头部）" class="headerlink" title="header标签（网页的头部）"></a>header标签（网页的头部）</h4><p>header标签定义文档或者文档的一部分区域的页眉。<br>header 元素应该作为介绍内容或者导航链接栏的容器。<br>在一个文档中，您可以定义多个 header&gt;元素。<br>注释：header标签不能被放在 footer，address或者另一个 header元素内部。</p><h4 id="main标签"><a href="#main标签" class="headerlink" title="main标签"></a>main标签</h4><p>main&gt; 标签用于指定文档的主体内容。<br>main 标签中的内容在文档中是唯一的。它不应包含在文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。</p><h4 id="footer标签"><a href="#footer标签" class="headerlink" title="footer标签"></a>footer标签</h4><p>footer 标签定义文档或者文档的一部分区域的页脚。</p><p>footer 元素应该包含它所包含的元素的信息。</p><p>在典型情况下，该元素会包含文档创作者的姓名、文档的版权信息、使用条款的链接、联系信息等等。</p><p>在一个文档中，您可以定义多个 footer元素。</p><h4 id="nav标签"><a href="#nav标签" class="headerlink" title="nav标签"></a>nav标签</h4><p>nav 标签定义导航链接的部分。</p><p>并不是所有的 HTML 文档都要使用到 nav元素。nav元素只是作为标注一个导航链接的区域。</p><p>在不同设备上（手机或者PC）可以制定导航链接是否显示，以适应不同屏幕的需求。</p><h4 id="aside标签"><a href="#aside标签" class="headerlink" title="aside标签"></a>aside标签</h4><p>aside的内容可用作文章的侧栏。、</p><h4 id="article标签"><a href="#article标签" class="headerlink" title="article标签"></a>article标签</h4><p>article标签定义独立的内容。（文章）<br>article标签定义的内容本身必须是有意义的且必须是独立于文档的其余部分。<br>article的潜在来源：</p><h4 id="section标签"><a href="#section标签" class="headerlink" title="section标签"></a>section标签</h4><p>section 标签定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域。</p><h4 id="div标签（定义区块，用的最多）"><a href="#div标签（定义区块，用的最多）" class="headerlink" title="div标签（定义区块，用的最多）"></a>div标签（定义区块，用的最多）</h4><p>div 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</p><p>div标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。</p><h4 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h4><p>span 用于对文档中的行内元素进行组合。</p><p>span 标签没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 span 应用样式，那么 span 元素中的文本与其他文本不会任何视觉上的差异。</p><p>span标签提供了一种将文本的一部分或者文档的一部分独立出来的方式</p><h3 id="块元素-行内元素"><a href="#块元素-行内元素" class="headerlink" title="块元素  行内元素"></a>块元素  行内元素</h3><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>在网页中一般通过块元素来布局<br>会在块元素里放行内元素，但不会会在行内元素里放块元素。<br>P元素里不能放块元素。</p><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>用于包裹文字</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>HTML 支持有序、无序和定义列表:<br>列表之间可以互相嵌套</p><h4 id="无序列表：（用的最多）"><a href="#无序列表：（用的最多）" class="headerlink" title="无序列表：（用的最多）"></a>无序列表：（用的最多）</h4><p>使用ul标签来创建有序列表<br>使用li来创建列表项<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表始于 ol标签。每个列表项始于 li 标签。<br>列表项使用数字来标记。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。<br>自定义列表以 dl 标签开始。每个自定义列表项以 dt（下定义） 开始。每个自定义列表项的定义以 dd （定义内容）开始。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>HTML 使用超级链接与网络上的另一个文档相连。。点击链接可以从一张页面跳转到另一张页面。或者当前页面的特定位置。</p><h4 id="超链接的定义"><a href="#超链接的定义" class="headerlink" title="超链接的定义"></a>超链接的定义</h4><p>HTML使用标签 a来设置超文本链接,a标签里可以嵌套除它自身的的所有标签。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>  超链接 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="超链接的属性"><a href="#超链接的属性" class="headerlink" title="超链接的属性"></a>超链接的属性</h4><h5 id="href跳转到指定目标"><a href="#href跳转到指定目标" class="headerlink" title="href跳转到指定目标"></a>href跳转到指定目标</h5><p>值可以是外部网页的地址<br>也可以是内部页面地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="target-属性"><a href="#target-属性" class="headerlink" title="target 属性"></a>target 属性</h5><p>使用 target 属性，你可以定义被链接的文档在何处显示。<br>可选值：<br>_self默认值，在当前页面打开超链接<br>_blank在一个新页面打开超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.runoob.com/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span>&gt;</span>访问菜鸟教程!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ID属性（锚点）"><a href="#ID属性（锚点）" class="headerlink" title="ID属性（锚点）"></a>ID属性（锚点）</h4><p>每一个标签都可以添加一个id属性<br>id属性就是元素的唯一的标识，同一页面不能出现相同的id属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bottle&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="跳转到当前页面的任意地方"><a href="#跳转到当前页面的任意地方" class="headerlink" title="跳转到当前页面的任意地方"></a>跳转到当前页面的任意地方</h5><p>href 写#，就是直接跳转到当前页面的顶部</p><p>在开发中，#可以作为一种占位符（没确定跳转页面，先拿#代替）</p><p>也可以使用JavaScript：；来作为占位符，点击后什么都不发生。</p><p>跳转到页面指定位置，只需要将href属性设置为#目标元素的ID属性值</p><h4 id="路径："><a href="#路径：" class="headerlink" title="路径："></a>路径：</h4><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>当我们跳转到一个服务器内部的页面时我们使用相对路径，相对路径一般以.或..开头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">./ <br></code></pre></td></tr></table></figure><p> 表示当前文件所在的目录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">../ 表示当前文件所在的目录的上一级目录<br></code></pre></td></tr></table></figure><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>图像由img标签定义。使用img引入外部图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>img 是空标签，意思是说，它只包含属性，并且没有闭合标签。它属于一种替换元素（介于行内元素和块元素之间）</p><h4 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h4><p>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。（外部图片的路径)<br>路径规则和超链接一样。</p><h4 id="alt属性"><a href="#alt属性" class="headerlink" title="alt属性"></a>alt属性</h4><p>alt属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。（图片的描述）一般会在图片加载不出来的时候显示。<br>搜索引擎会根据alt中的内容来搜索图片内容。</p><h4 id="图片的高和宽"><a href="#图片的高和宽" class="headerlink" title="图片的高和宽"></a>图片的高和宽</h4><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。</p><p>属性值默认单位为像素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;304&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;228&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>宽高中修改一个，则另一个会等比缩放。pc端，一般不建议修改图片大小，需要多大就裁多大。</p><p>指定图像的高度和宽度是一个很好的习惯。如果图像指定了高度宽度，页面加载时就会保留指定的尺寸。如果没有指定图片的大小，加载页面时有可能会破坏HTML页面的整体布局。</p><h4 id="图片的格式"><a href="#图片的格式" class="headerlink" title="图片的格式"></a>图片的格式</h4><p>jpeg(jpg)<br>支持颜色丰富，不支持透明效果，不支持动图<br>gif<br>支持颜色少，支持简单透明，支持动图<br>png<br>支持颜色丰富，支持复杂透明，不支持动图<br>webp<br>谷歌推出的专门用于网页的图片，具备所有优点，本身还小<br>效果一样，尽量选小的图片，但是兼容性不好<br>base64<br> 使用这个编码，可以将图片转化为字符，通过字符来引入图片，一般是需要和网页一起加载的图片才使用base64</p><h3 id="内联框架-很少使用"><a href="#内联框架-很少使用" class="headerlink" title="内联框架(很少使用)"></a>内联框架(很少使用)</h3><p>通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。<br>使用iframe标签定义一个内联的框架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src指定引入网页的路径<br>height 和 width 属性用来定义iframe标签的高度与宽度。</p><p>属性默认以像素为单位, 但是你可以指定其按比例显示 (如：”80%”)。</p><p>frameborder 属性用于定义iframe表示是否显示边框。</p><p>设置属性值为 “0” 移除iframe的边框:</p><h3 id="引入音视频"><a href="#引入音视频" class="headerlink" title="引入音视频"></a>引入音视频</h3><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p>audio标签用来向页面引入一个外部的音频文件，默认不允许用户自己控制播放停止。<br>可以添加controls属性来允许用户自己播放<br>autoplay属性用来控制音频自动播放（大部分网页不会自动播放，为了好的用户体验）（很少用）<br>loop属性 :音乐循环播放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">loop</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般这样写更多一点,兼容性更好。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>    您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>使用video标签来引入视频,与audio相似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp4&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="基础表格"><a href="#基础表格" class="headerlink" title="基础表格"></a>基础表格</h4><p>表格在日常生活中使用的非常的多，比如excel就是专门用来创建表格的工具，<br>表格就是用来表示一些格式化的数据的，比如：课程表、银行对账单<br>在网页中也可以来创建出不同的表格。<br>    在HTML中，使用table标签来创建一个表格<br>    在table标签中使用tr来表示表格中的一行，有几行就有几个tr<br>    在tr中需要使用td来创建一个单元格，有几个单元格就有几个td</p><p>colspan横向的合并单元格:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>D3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><p>rowspan用来设置纵向的合并单元格   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>B4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h4><p>有一些情况下表格是非常的长的，<br>        这时就需要将表格分为三个部分，表头，表格的主体，表格底部<br>    在HTML中为我们提供了三个标签：<br>        thead 表头<br>        tbody 表格主体<br>        tfoot 表格底部</p><pre><code class="hljs">这三个标签的作用，就来区分表格的不同的部分，他们都是table的子标签，    都需要直接写到table中，tr需要写在这些标签当中    thead中的内容，永远会显示在表格的头部tfoot中的内容，永远都会显示表格的底部tbody中的内容，永远都会显示表格的中间如果表格中没有写tbody，浏览器会自动在表格中添加tbody并且将所有的tr都放到tbody中，所以注意tr并不是table的子元素，而是tbody的子元素通过table &gt; tr 无法选中行 需要通过tbody &gt; tr</code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>表单的作用就是用来将用户信息提交给服务器的<br>                比如：百度的搜索框 注册 登录这些操作都需要填写表单<br>创建一个表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;target.html&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>form标签中必须指定一个action属性，该属性指向的是一个服务器的地址<br>    当我们提交表单时将会提交到action属性对应的地址<br>使用form创建的仅仅是一个空白的表单，<br>    我们还需要向form中添加不同的表单项</p><h4 id="文本框："><a href="#文本框：" class="headerlink" title="文本框："></a>文本框：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="提交按钮："><a href="#提交按钮：" class="headerlink" title="提交按钮："></a>提交按钮：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>使用input来创建一个文本框，它的type属性是text<br>    如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性<br>    name表示提交内容的名字</p><p>用户填写的信息会附在url地址的后边以查询字符串的形式发送给服务器<br>    url地址?查询字符串<br>格式：<br>    属性名&#x3D;属性值&amp;属性名&#x3D;属性值&amp;属性名&#x3D;属性值&amp;属性名&#x3D;属性值<br>在文本框中也可以指定value属性值，该值将会作为文本框的默认值显示</p><p>在html中还为我们提供了一个标签，专门用来选中表单中的提示文字的<br>label标签<br>该标签可以指定一个for属性，该属性的值需要指定一个表单项的id值</p><h4 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span> <br></code></pre></td></tr></table></figure><p>密码框<br>    - 使用input创建一个密码框，它的type属性值是password</p><h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><pre><code class="hljs">- 使用input来创建一个单选按钮，它的type属性使用radio- 单选按钮通过name属性进行分组，name属性相同是一组按钮- 像这种需要用户选择但是不需要用户直接填写内容的表单项，    还必须指定一个value属性，这样被选中的表单项的value属性值将会最终提交给服务器    如果希望在单选按钮或者是多选框中指定默认选中的选项，    则可以在希望选中的项中添加checked=&quot;checked&quot;属性</code></pre><p>多选框<br>    - 使用input创建一个多选框，它的type属性使用checkbox</p><h5 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h5><pre><code class="hljs">- 使用select来创建一个下拉列表下拉列表的name属性需要指定给select，而value属性需要指定给option可以通过在option中添加selected=&quot;selected&quot;来将选项设置为默认选中当为select添加一个multiple=&quot;multiple&quot;，则下拉列表变为一个多选的下拉列表在select中可以使用optgroup对选项进行分组同一个optgroup中的选项是一组可以通过label属性来指定分组的名字</code></pre><p>提交按钮可以将表单中的信息提交给服务器<br>        使用input创建一个提交按钮,它的type属性值是submit<br>        在提交按钮中可以通过value属性来指定按钮上的文字</p><p>input type&#x3D;”reset” 可以创建一个重置按钮，<br>    点击重置按钮以后表单中内容将会恢复为默认值</p><p>使用input type&#x3D;button可以用来创建一个单纯的按钮，<br>                    这个按钮没有任何功能，只能被点击</p><p>除了使用input，也可以使用button标签来创建按钮<br>                这种方式和使用input类似，只不过由于它是成对出现的标签<br>                    使用起来更加的灵活</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (2.HTML基础学习)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/02.HTML%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/02.HTML%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="HTML基础学习"><a href="#HTML基础学习" class="headerlink" title="HTML基础学习"></a>HTML基础学习</h2><h3 id="1-HTML介绍："><a href="#1-HTML介绍：" class="headerlink" title="1.HTML介绍："></a>1.HTML介绍：</h3><p>HTML（超文本标记语言——HyperText Markup Language）是构成 Web 世界的一砖一瓦。它定义了网页内容的含义和结构。除 HTML 以外的其它技术则通常用来描述一个网页的表现与展示效果（如 CSS），或功能与行为（如 JavaScript）。</p><p>“超文本”（hypertext）是指连接单个网站内或多个网站间的网页的链接。链接是网络的一个基本方面。只要将内容上传到互联网，并将其与他人创建的页面相链接，你就成为了万维网的积极参与者。</p><p>HTML 使用“标记”（markup）来注明文本、图片和其他内容，以便于在 Web 浏览器中显示。<br>HTML 元素通过“标签”（tag）将文本从文档中引出，标签由在“&lt;”和“&gt;”中包裹的元素名组成，HTML 标签里的元素名不区分大小写。也就是说，它们可以用大写，小写或混合形式书写。</p><p>HTML文件的后缀为.html</p><h3 id="2-编写第一个网页程序"><a href="#2-编写第一个网页程序" class="headerlink" title="2.编写第一个网页程序"></a>2.编写第一个网页程序</h3><h4 id="标签："><a href="#标签：" class="headerlink" title="标签："></a>标签：</h4><p>&lt;标签&gt; 开始标签…..中间就是内容….. &lt;&#x2F;标签&gt;结束标签</p><h5 id="标题标签："><a href="#标题标签：" class="headerlink" title="标题标签："></a>标题标签：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>共有六级标题</p><h5 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 这是一个段落 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="根标签-子标签（层级关系）"><a href="#根标签-子标签（层级关系）" class="headerlink" title="根标签,子标签（层级关系）"></a>根标签,子标签（层级关系）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>    <br>      <br></code></pre></td></tr></table></figure><p>根标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>子标签（头部）<br>用户不可见，是给浏览器看的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子标签（身体）<br>用户可见部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="第一个网页示例："><a href="#第一个网页示例：" class="headerlink" title="第一个网页示例："></a>第一个网页示例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> 第一个网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 将进酒 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>  李白<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见高堂明镜悲白发，朝如青丝暮成雪。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人生得意须尽欢，莫使金樽空对月。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天生我材必有用，千金散尽还复来。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="3-细化一个网页"><a href="#3-细化一个网页" class="headerlink" title="3.细化一个网页"></a>3.细化一个网页</h3><h4 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这是一个注释 --&gt;</span><br></code></pre></td></tr></table></figure><p>注释不可嵌套</p><h4 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a>标签的属性</h4><p>HTML 标签可以设置属性<br>属性可以在标签中添加附加信息<br>属性一般描述于开始标签，不用于结束标签<br>属性总是以名称&#x2F;值对的形式出现，比如：name&#x3D;”value”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是我的<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>网页！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>font 规定文本的字体、字体尺寸、字体颜色。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;font&gt;</span>   <span class="hljs-section">&lt;/font&gt;</span><br></code></pre></td></tr></table></figure><p>这里的color&#x3D;”red”就是属性，让中间字体变为红色。<br>属性和标签名或其他属性应该用空格隔开。<br>属性值应该始终被包括在引号内。<br>双引号是最常用的，不过使用单引号也没有问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><p>color就是属性名   red就是属性值 ，属性不能随便写，是有相应规定的。</p><h5 id="添加了属性的网页代码："><a href="#添加了属性的网页代码：" class="headerlink" title="添加了属性的网页代码："></a>添加了属性的网页代码：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第二个网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是我的<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>网页！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-网页的基本结构"><a href="#4-网页的基本结构" class="headerlink" title="4.网页的基本结构"></a>4.网页的基本结构</h3><h4 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h4><h5 id="HTML5的版本声明"><a href="#HTML5的版本声明" class="headerlink" title="HTML5的版本声明"></a>HTML5的版本声明</h5><p>文档声明用来告诉浏览器当前网页的版本，写在第一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">HTML</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">htm</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>              <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">htm</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="文档字符编码声明"><a href="#文档字符编码声明" class="headerlink" title="文档字符编码声明"></a>文档字符编码声明</h5><p>字符编码有很多方式，网页一般使用UTF-8字符集编码。<br>声明，置于head内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="完整基本结构："><a href="#完整基本结构：" class="headerlink" title="完整基本结构："></a>完整基本结构：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--网页版本声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--HTML的根标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--子元素，头部（帮助浏览器解析网页）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--meat用来设置网页元数据--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--网页的标题，搜索引擎搜索的就是这个--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--body是HTML的子元素，所有可见内容都应该写在body里--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--网页的一级标题--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (5.css基本语法)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/06.CSS%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/06.CSS%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="css基本语法"><a href="#css基本语法" class="headerlink" title="css基本语法"></a>css基本语法</h3><p>在style标签内部，不属于html，与html隔离，需要遵守CSS的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-comment">/* style标签内部,就不归html管理了*/</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="css的注释"><a href="#css的注释" class="headerlink" title="css的注释"></a>css的注释</h4><p>使用&#x2F;*   *&#x2F;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*这是个注释*/</span><br><span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-comment">/*这是另一个注释*/</span><br>    <span class="hljs-attribute">color</span>:black;<br>    <span class="hljs-attribute">font-family</span>:arial;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>通过选择器选择页面中的元素，比如使用P标签就是选中页面所有P元素。</p><h4 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h4><p>通过声明块来指定要为元素设定的样式，声明块由一个个声明组成，声明是一个名值对结构一个样式对应一个样式值，名和值之间以：连接，以；结束。</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (4.使用css来修改网页中原始的样式)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/05%E4%BD%BF%E7%94%A8css%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E6%A0%B7%E5%BC%8F/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/05%E4%BD%BF%E7%94%A8css%E4%BF%AE%E6%94%B9%E7%BD%91%E9%A1%B5%E6%A0%B7%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h3><p>CSS用于控制页面中元素的样式(表现)<br>（层叠样式表）是一个多层结构，用CSS给每层设计样式，最终看见的是网页上最上面的一层（ps图层的原理）</p><h3 id="使用css来修改网页中原始的样式"><a href="#使用css来修改网页中原始的样式" class="headerlink" title="使用css来修改网页中原始的样式"></a>使用css来修改网页中原始的样式</h3><h4 id="1-style属性（内联样式）"><a href="#1-style属性（内联样式）" class="headerlink" title="1.style属性（内联样式）"></a>1.style属性（内联样式）</h4><p>在标签内部通过style属性来设置元素的样式(不推荐使用)<br>内联样式只能对一个标签生效，影响多个元素要写很多遍，样式变化不方便修改和维护。<br>！开发时不要使用内联样式<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: brown; font-size: 60px;&quot;</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-内部样式表-将样式编写到head里"><a href="#2-内部样式表-将样式编写到head里" class="headerlink" title="2.(内部样式表)将样式编写到head里"></a>2.(内部样式表)将样式编写到head里</h4><p>将样式编写到head里的style标签里。只对一个网页起作用。不能跨页面复用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>       统一写到这里<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过css选择器选中元素并为其设置格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    &#125;    </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以为所有p元素设置样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: burlywood;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: brown; font-size: 60px;&quot;</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见高堂明镜悲白发，朝如青丝暮成雪。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人生得意须尽欢，莫使金樽空对月。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天生我材必有用，千金散尽还复来。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-（外部样式表）将样式写在外部css文件里"><a href="#3-（外部样式表）将样式写在外部css文件里" class="headerlink" title="3.（外部样式表）将样式写在外部css文件里"></a>3.（外部样式表）将样式写在外部css文件里</h4><p>将样式写在外部css文件里,然后通过link标签引入外部的css文件,外部样式的好处在于样式可以在不同页面复用。将样式编写到css里可以很好使用到浏览器的缓存机制，从而加快网页的加载速度。<br>这是开发的最佳样式<br>css程序：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">color</span>: blue ;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>html引入css样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./样式.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (7.样式的继承)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/08.%E6%A0%B7%E5%BC%8F%E7%9A%84%E7%BB%A7%E6%89%BF/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/08.%E6%A0%B7%E5%BC%8F%E7%9A%84%E7%BB%A7%E6%89%BF/</url>
    
    <content type="html"><![CDATA[<h3 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h3><p>继承：为一个元素设置的样式会被应用到其后代元素身上<br>继承是发生在祖先和后代元素之间<br>继承是为了方便进行开发<br>并不是所有的样式都会被继承，比如背景，布局等元素。</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (6.CSS选择器)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/07.%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/07.%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>根据标签名来选中指定的元素<br>语法：标签名｛｝<br>例子：P{} h1{}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span> :red;<br><br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>根据元素ID来选中指定的元素<br>(ID属性不要以数字开头，数字开头的ID在 Mozilla&#x2F;Firefox 浏览器中不起作用。)<br>语法：  #id属性值｛｝<br>例子：#box｛｝   #red｛｝</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#red</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="class选择器（类选择器）"><a href="#class选择器（类选择器）" class="headerlink" title="class选择器（类选择器）"></a>class选择器（类选择器）</h4><p>根据class属性来选中指定的元素组<br>class是一个html的标签属性，和ID相似，但是它可以重复。可以同时为一个元素指定多个class元素。<br>可以解决拿ID选择器不好给多个元素指定样式的弊端，<br>可以通过class给元素分组<br>语法：  .class属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="统配选择器"><a href="#统配选择器" class="headerlink" title="统配选择器"></a>统配选择器</h4><p>选中页面里所有元素<br>语法：*</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><p>交集选择器：<br>作用：选中复合多个条件的元素<br>语法：选择器1选择器2选择器3选择器N｛｝<br>注意点：如果有元素选择器，必须使用元素选择器开头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是P标签<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>同时选中多个选择器对应的元素<br>语法：选择器1，选择器2，选择器3，选择器N｛｝<br>例子：#bi,h1,p,div{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span>，<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是P标签<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h4><h6 id="关系描述"><a href="#关系描述" class="headerlink" title="关系描述"></a>关系描述</h6><p>父元素：<br>        -直接包含子元素的元素叫父元素<br>子元素：<br>        —直接被父元素包含的元素叫子元素<br>祖先元素：<br>        -直接或间接包含后代元素的元素叫祖先元素<br>        -一个元素的父元素也是它的祖先元素<br>后代元素<br>        -直接或间接被祖先元素包含的元素叫后代元素<br>        -一个元素的子元素也是它的后代元素<br>兄弟元素<br>        -拥有相同父元素的元素是兄弟元素</p><h5 id="子元素选择器："><a href="#子元素选择器：" class="headerlink" title="子元素选择器："></a>子元素选择器：</h5><p>选中指定父元素的子元素<br>语法：父元素&gt;子元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">        为div的子元素设置一个字体颜色红色</span></span><br><span class="hljs-comment"><span class="language-css">        子元素选择器：选中指定父元素的子元素</span></span><br><span class="hljs-comment"><span class="language-css">        语法：父元素&gt;子元素</span></span><br><span class="hljs-comment"><span class="language-css">        */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box</span>&gt;<span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">P</span> &gt;</span><br>            这里是div里的P标签<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是p里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是div里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        这里是div<br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是第一个div外的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="后代元素选择器："><a href="#后代元素选择器：" class="headerlink" title="后代元素选择器："></a>后代元素选择器：</h5><p>选中指定元素的指定后代元素<br>语法：祖先 （空格）后代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">         后代元素选择器：</span></span><br><span class="hljs-comment"><span class="language-css">         选中指定元素的指定后代元素        </span></span><br><span class="hljs-comment"><span class="language-css">         语法：祖先 （空格）后代</span></span><br><span class="hljs-comment"><span class="language-css">         */</span></span><br><span class="language-css">         <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">             <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">P</span> &gt;</span><br>            这里是div里的P标签<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是p里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是div里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        这里是div<br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是第一个div外的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="并列标签选择器"><a href="#并列标签选择器" class="headerlink" title="并列标签选择器"></a>并列标签选择器</h5><h6 id="选择下一个兄弟"><a href="#选择下一个兄弟" class="headerlink" title="选择下一个兄弟"></a>选择下一个兄弟</h6><p>语法：前一个+下一个</p><h6 id="选择下方所有的兄弟"><a href="#选择下方所有的兄弟" class="headerlink" title="选择下方所有的兄弟"></a>选择下方所有的兄弟</h6><p>语法：兄~弟<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">          选择下一个兄弟</span></span><br><span class="hljs-comment"><span class="language-css">          语法：前一个+下一个</span></span><br><span class="hljs-comment"><span class="language-css">          */</span></span><br><span class="language-css">          <span class="hljs-selector-tag">p</span>+<span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">              <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">          &#125;</span><br><span class="language-css">          <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">          选择下方所有的兄弟</span></span><br><span class="hljs-comment"><span class="language-css">          语法：兄~弟 </span></span><br><span class="hljs-comment"><span class="language-css">           */</span></span><br><span class="language-css">           <span class="hljs-selector-tag">P</span>~<span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>: crimson;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">P</span> &gt;</span><br>            这里是div里的P标签<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是p里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是div里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是第一个div外的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>[属性名]选择含有指定属性的元素<br>[属性名&#x3D;属性值]选择含有指定属性值的元素<br>[属性名^&#x3D;属性值]选择属性值以指定属性值开头的元素<br>[属性名$&#x3D;属性值]选择属性值以指定属性值结尾的元素<br>[属性名*&#x3D;属性值]选择属性值含有指定属性值的元素<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名]选择含有指定属性的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名=属性值]选择含有指定属性值的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名^=属性值]选择属性值以指定属性值开头的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名$=属性值]选择属性值以指定属性值结尾的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名*=属性值]选择属性值含有指定属性值的元素</span></span><br><span class="hljs-comment"><span class="language-css">         */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[title]</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[title=abc]</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[title^=abc]</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>将进酒<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abcde&quot;</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;deabc&quot;</span>&gt;</span>君不见高堂明镜悲白发，朝如青丝暮成雪。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人生得意须尽欢，莫使金樽空对月。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天生我材必有用，千金散尽还复来。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>伪类：不存在的类，特殊的类。用来描述元素的特殊状态。比如：第一个子元素，被点击的元素，鼠标处在上面的元素。<br>伪类一般以：开头</p><h5 id="常用的伪类选择器"><a href="#常用的伪类选择器" class="headerlink" title="常用的伪类选择器"></a>常用的伪类选择器</h5><p>第一个子元素 ：first-child<br>最后一个子元素：last-child<br>第n个子元素:nth-child(n)<br>n&#x3D;n是选中除第零个元素之外的所有元素<br>n&#x3D;2n或n&#x3D;even表示偶数元素<br>n&#x3D;2n+1或n&#x3D;odd表示奇数元素<br> 以上几个伪类都是根据所有元素的顺序排列的<br>:first-of-type<br>:last-of-type<br>:nth-of-type()<br>这几个和上面三个功能相似，但是是根据同类一元素的顺序进行排列的</p><h5 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h5><p>:not()去除满足条件的元素<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 将ul里第一个li设为红色 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 第一个子元素 ：first-child*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: brown;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 最后一个子元素：last-child */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">        第n个子元素:nth-child(n) </span></span><br><span class="hljs-comment"><span class="language-css">        n=n是选中除第零个元素之外的所有元素</span></span><br><span class="hljs-comment"><span class="language-css">        n=2n或n=even表示偶数元素</span></span><br><span class="hljs-comment"><span class="language-css">        n=2n+1或n=odd表示奇数元素        */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 以上几个伪类都是根据所有元素的顺序排列的 */</span></span><br><span class="language-css">        <span class="hljs-selector-pseudo">:first</span>-of-type</span><br><span class="language-css">        <span class="hljs-selector-pseudo">:last-of-type</span></span><br><span class="language-css">        <span class="hljs-selector-pseudo">:nth-of-type</span>()</span><br><span class="language-css">        <span class="hljs-comment">/* 这几个和上面三个功能相似，但是是根据同类一元素的顺序进行排列的 */</span></span><br><span class="language-css">         <span class="hljs-comment">/* 否定伪类选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>))&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: seagreen;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第一个span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第四个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第五个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="a元素的伪类（超链接）"><a href="#a元素的伪类（超链接）" class="headerlink" title="a元素的伪类（超链接）"></a>a元素的伪类（超链接）</h5><p>超链接可以分为特殊状态：<br>1.访问过的超链接<br>2.没有访问过的超链接<br>：link 表示没有访问过的链接（正常的链接） （a独有）<br>:visited表示是访问过的链接 （a独有）<br>由于隐私原因，这个伪类只能修改链接的颜色，不能修改其他字体大小等属性<br>：hover表示鼠标移入的状态<br>:active表示鼠标点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: seagreen;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* :link表示没访问过的链接 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: sienna;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* :visited表示是访问过的链接 </span></span><br><span class="hljs-comment"><span class="language-css">       由于隐私原因，这个伪类只能修改链接的颜色，不能修改其他字体大小等属性*/</span></span><br><span class="language-css">       <span class="hljs-comment">/* ：hover表示鼠标移入的状态 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: skyblue;</span><br><span class="language-css">           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* :active表示鼠标点击 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: springgreen;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baibu.com&quot;</span>&gt;</span>baidu（访问过）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu123.com&quot;</span>&gt;</span>baidu123（没访问过）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>伪元素：不真实存在的元素，特殊的位置的元素。<br>伪元素使用::开头<br>::first-letter表示第一个字母（字符）<br>::first-line表示第一行<br>::selection表示选中的文本</p><p>::before表示元素开始的位置<br>::after表示元素结束的位置<br>     –&gt;必须配合属性content来使用<br>     这两个应用很多，是重点内容<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">P</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* ::first-letter表示第一个字母（字符） */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-letter</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* ::first-line表示第一行 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* p::selection表示选中的文本 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::selection</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: springgreen;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;123&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: tan;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;hh&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello ,how are you.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (8.CSS选择器的权重)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/09.%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E6%9D%83%E9%87%8D/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/09.%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E6%9D%83%E9%87%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h3><h4 id="样式的冲突："><a href="#样式的冲突：" class="headerlink" title="样式的冲突："></a>样式的冲突：</h4><p>当我们通过不同选择器，选择相同的元素，并且为其设置不同的样式（不同的值），此时发生样式冲突。<br>发生样式冲突时由选择器权重（优先级）决定。(选择器越具体权重越高)</p><h4 id="选择器的权重值："><a href="#选择器的权重值：" class="headerlink" title="选择器的权重值："></a>选择器的权重值：</h4><p>内联样式          优先级：1000<br>ID选择器          优先级：0100<br>类和伪元素选择器   优先级：0010<br>元素选择器        优先级: 0001<br>统配选择器         优先级：0000<br>继承的样式         没有优先级<br>比较优先级时要将所有选择器的优先级进行相加计算，最后优先级越高，越优先显示。（分组选择器是单独计算的）<br>选择器再累加也不会超过其最大数量级<br>优先级相同，后面的会覆盖前面的。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"><span class="hljs-comment">/* 这里会优先变为白色 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">box1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第一个div <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在样式后面加一个！important，则此时该样式会获取到最高的优先级，甚至超过内联样式。<br>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-tag">div</span>&#123;<br>            <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;<br><br>        &#125;<br>        <span class="hljs-selector-class">.red</span>&#123;<br>            <span class="hljs-attribute">color</span>: white;<br>        &#125;<br>&lt;/style&gt;<br><span class="hljs-comment">/* 优先变为红色 */</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (9.像素和百分比)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/10.%E5%83%8F%E7%B4%A0%E5%92%8C%E7%99%BE%E5%88%86%E6%AF%94/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/10.%E5%83%8F%E7%B4%A0%E5%92%8C%E7%99%BE%E5%88%86%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h3 id="像素和百分比"><a href="#像素和百分比" class="headerlink" title="像素和百分比"></a>像素和百分比</h3><p>显示器是由一个个小方格组成的<br>不同屏幕的像素的大小是不同的，像素点越小的屏幕越清晰。<br>所以同样的200px在不同 的设备下显示效果不一样。</p><h4 id="像素的单位"><a href="#像素的单位" class="headerlink" title="像素的单位"></a>像素的单位</h4><h5 id="px表示像素："><a href="#px表示像素：" class="headerlink" title="px表示像素："></a>px表示像素：</h5><p>200px  300px</p><h5 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h5><p>将属性值设置为相对于父元素的百分比<br>例子：<br>后面两个.box2的效果是一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: turquoise;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"><span class="hljs-comment">/* 后面两个.box2的效果是一样的 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="em和rem"><a href="#em和rem" class="headerlink" title="em和rem"></a>em和rem</h4><p>em是相对于自身字体大小大小来计算的<br>1em&#x3D;1font-size(默认为16)<br>rem是相对于根元素（html）字体大小来计算的（移动端用的多）<br> 例：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box3</span>&#123;<br>           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;<br>           <span class="hljs-comment">/* 相当于300px */</span><br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">10em</span>;<br>           <span class="hljs-attribute">background-color</span>: tomato;<br>       &#125;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (11.CSS布局)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/12.%E5%B8%83%E5%B1%80/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/12.%E5%B8%83%E5%B1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="文档流（normal-flow）"><a href="#文档流（normal-flow）" class="headerlink" title="文档流（normal flow）"></a>文档流（normal flow）</h4><p>网页是一个多层结构，一层摞着一层<br>通过css可以分别为每一层来设置样式<br>作为用户来讲只能看见最上面一层(ps图层的概念)<br>这些层中最底下一层称为文档流，文档流是网页的基础，我们创建的元素默认都是在文档流中进行排列的<br>元素有两个状态：在文档流中，和不在文档流中（默认在）</p><h5 id="元素在文档流中的特点"><a href="#元素在文档流中的特点" class="headerlink" title="元素在文档流中的特点"></a>元素在文档流中的特点</h5><h6 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h6><p>块元素独占一行（自上向下垂直排列  ）<br>默认宽度是父元素的全部（把父元素盛满）<br>默认高度是被内容撑开（子元素），比如子元素是一行字，那高度默认就是一行字的高度</p><h6 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h6><p>行内元素不独占一行，只占自身大小。<br>行内元素在页面中从左往右水平排列，如果一行之中不能全部容纳，就会自动换行继续自左向右排列<br>行元素的默认宽度和高度都是被内容撑开。</p><h4 id="盒模型-框模型（box-model）"><a href="#盒模型-框模型（box-model）" class="headerlink" title="盒模型 框模型（box model）"></a>盒模型 框模型（box model）</h4><p>css将页面中的所有元素设置为了一个矩形的盒子<br>将元素设置为矩形的盒子后，对页面布局就是将不同的盒子摆放到不同的位置<br>每一个盒子都由以下几个部分组成：</p><h5 id="内容区：（content）"><a href="#内容区：（content）" class="headerlink" title="内容区：（content）"></a>内容区：（content）</h5><p>元素中的所有子元素和文本内容都在内容区中排列，内容区的大小由width和height两个属性设置。<br>width:宽度<br>height：高度</p><h5 id="边框（border）-边框的大小会影响到整个盒子的大小"><a href="#边框（border）-边框的大小会影响到整个盒子的大小" class="headerlink" title="边框（border）:边框的大小会影响到整个盒子的大小"></a>边框（border）:边框的大小会影响到整个盒子的大小</h5><p>设置边框，至少需要设置三个样式、</p><h6 id="边框的宽度：border-width"><a href="#边框的宽度：border-width" class="headerlink" title="边框的宽度：border-width"></a>边框的宽度：border-width</h6><p>可以不写，默认是三个像素。用来指定四个方向边框的宽度。<br>可以这么写（四个值）：border-width：10px 20px 30px 40px;<br>三个值：border-width：10px（上） 20px（左右）  40px（下）;<br>两个值：border-width：10px（上下） 20px（左右）；<br>一个值：border-width：10px（上下左右）;<br>除了border-width还有一组：border-XXX-width，XXX可以是top right bottom left；可以分别指定某一个边的宽度。</p><h6 id="边框的颜色：border-color"><a href="#边框的颜色：border-color" class="headerlink" title="边框的颜色：border-color"></a>边框的颜色：border-color</h6><p>用于指定四个边框的颜色：可以写四个值，三个值……和上面的border-width相似<br>也可以不写，默认为color（字体）的颜色</p><h6 id="边框的样式：border-style"><a href="#边框的样式：border-style" class="headerlink" title="边框的样式：border-style"></a>边框的样式：border-style</h6><p>solid：表示实线<br>dotted:表示点状虚线<br>dashed:虚线<br>double：双实线<br>同样有四个值，同样可以具体指定一个边的样式同border-width<br>border-style的默认值为none(没有边框)</p><h6 id="border的简写"><a href="#border的简写" class="headerlink" title="border的简写"></a>border的简写</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span>;<br>           <span class="hljs-attribute">border-color</span>: coral;<br>           <span class="hljs-attribute">border-style</span>: solid;<br></code></pre></td></tr></table></figure><p>可简写为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>:<span class="hljs-number">10px</span> coral solid;<br></code></pre></td></tr></table></figure><p>这三个值的顺序是可以发生变化的，同样border-XXX也可以这么写三个值。</p><h6 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h6><p>内容和边框的距离，一共有四个方向的内边距<br>padding-top<br>padding-right<br>padding-bottom<br>padding-left<br>内边距的设置会影响盒子的大小，背景颜色会延伸到内边距上。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="language-css">          <span class="hljs-attribute">border</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">200</span>, <span class="hljs-number">206</span>, <span class="hljs-number">117</span>) <span class="hljs-number">10px</span> solid;</span><br><span class="language-css">          <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 用box2来显示内容真实大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkcyan;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>内容部分的真实大小<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>一个盒子的可见框大小</strong>：由内容区 内边距 边框共同决定。计算盒子大小时，需要将这三个区域加到一起计算。<br>padding可以简写：<br>padding：20px 30px 40px 50px;(和border的简写相同)</p><h6 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h6><p>外边距不会影响可见框的大小。但是会影响盒子实际占地位置。<br>一共有四个方向的外边距<br>margin-top<br>-上外边距：设置一个正直，元素会向下移动<br>margin-right<br>-右外边距（默认情况下设置它不会有任何效果）<br>margin-bottom<br>-下外边距，设置一个正值，元素会向右移动。<br>margin-left<br>-左外边距：设置一个正值，元素会向右移动</p><p>如果是负值则往相反方向走。<br>元素在页面中是按照自左向右的顺序排列<br>所以默认情况下设置左和上外边距则会移动元素自身，<br>margin-top    margin-left<br>而设置下和右边距会移动其他元素（挤别人）<br>margin-right    margin-bottom</p><p>margin同样可以进行简写，和和border的简写相同<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkturquoise;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: gray <span class="hljs-number">20px</span> solid;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">90</span>, <span class="hljs-number">194</span>, <span class="hljs-number">137</span>);</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">91</span>, <span class="hljs-number">201</span>, <span class="hljs-number">201</span>) <span class="hljs-number">20px</span> solid;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h5><p>元素在其父元素中的水平方向位置由以下几个属性共同决定<br>margin-left<br>border-left<br>padding-left<br>width<br>margin-right<br>border-right<br>padding-right<br><strong>一个元素在其父元素中，水平布局必须要满足以下等式：</strong><br>margin-left+border-left+padding-left+width+margin-right+border-right+padding-right&#x3D;其父元素区的宽度（必须满足）<br><strong>如果没满足就称为过渡约束，浏览器会默认进行调整。</strong></p><p>调整规则：如果这七个值里没有为auto的情况，则浏览器会自动调整margin-right（右外边距）到满足等式<br>这七个值里有三个值可以设置为auto：<br>width<br>margin-left<br>margin-right<br>如果某个值为auto，则浏览器自动调整auto的值以使等式满足。(width的值如果不写，默认就是auto)<br>如果将一个一个宽度和一个外边距设置为auto，则宽度自动最大，设置为auto外边距会自动变为0;<br>如果将三个值都设置为auto，则外边距都是0，宽度最大<br>如果将两个外边距设置为auto，宽度值固定，则两外边会相等：利用这个特点给元素水平居中<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.outer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: lightcoral <span class="hljs-number">10px</span> solid;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.inner</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">73</span>, <span class="hljs-number">126</span>, <span class="hljs-number">59</span>);</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: auto; </span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="盒子垂直方向的布局"><a href="#盒子垂直方向的布局" class="headerlink" title="盒子垂直方向的布局"></a>盒子垂直方向的布局</h5><p>垂直布局比较简单:默认情况下不指定高度父元素的高度会被内容撑开</p><p>子元素是在父元素的内容中排列的<br>如果子元素的大小超过了父元素，则子元素会从父元素中溢出<br>使用overflow来设置父元素如何处理溢出的子元素<br>可选值：<br>visible默认值  会溢出，在父元素外边显示<br>hidden 溢出内容不显示，直接裁剪掉<br>scroll 生成两个滚动条<br>auto   根据需要生成滚动条<br>还可以使用overflow-x 或overflow-y来单独设置x和y 方向的溢出问题</p><h5 id="盒子模型外边距的折叠"><a href="#盒子模型外边距的折叠" class="headerlink" title="盒子模型外边距的折叠"></a>盒子模型外边距的折叠</h5><p>相邻方向垂直外边距会发生重叠现象<br><strong>兄弟元素</strong><br>兄弟元素间的相邻外边距会取两者之间的一个较大值(两者都是正值)<br>特殊情况：相邻的外边距一正一负，取两者的和<br>如果两个外边距都是负值，则取两者中绝对值较大的<br>兄弟元素外边距的重叠对开发是有利的，所以不需要处理<br><strong>父子元素</strong><br>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）<br>父子外边距的折叠会影响到页面的布局，必须要进行处理</p><h5 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h5><p>行内元素不支持设置宽度和大小<br>可以设置padding，但垂直方向不会影响页面的布局<br>可以设置border，但垂直方向不会影响页面的布局。<br>可以设置margin，但垂直方向的margin不影响页面布局</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.s1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*行内元素不支持设置宽度和大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 可以设置padding，但垂直方向不会影响页面的布局 */</span></span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cyan;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;s1&#x27;</span>&gt;</span>This is a span <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>超链接是行内元素，如果要设置它的宽高可以使用display属性（少用）<br>        block   –&gt;将元素设置为块元素<br>        inline-block–&gt;将元素设置为行内块元素（既可以设置宽高，有不会独占一行）<br>        table   –&gt;将元素设置为表格<br>        none    –&gt;元素不在页面里显示       </p><p>visibility属性：可以设置元素的可见状态<br>可选值：visible默认值，元素在页面里正常显示<br>       hidden   元素在页面中隐藏不显示，但依然占据位置</p><h5 id="浏览器的默认样式"><a href="#浏览器的默认样式" class="headerlink" title="浏览器的默认样式"></a>浏览器的默认样式</h5><p>通常情况下，浏览器会为元素设置一些默认样式<br>默认样式会影响到页面的布局，通常情况下编写网页必须要去除浏览器的默认样式（pc端页面）<br>可以具体针对元素进行设置：<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       </span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 去除p标签之间的外边距 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-comment">/* 去除项目符号 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但简单考虑：一般写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">*&#123;<br>    margin:0;<br>    padding:0;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法不够完美，可能去除不干净，所以要把所有的标签都看一遍，都重置一遍，这时候可以引入一个完整的重置样式表的外部CSS文件<br>重置样式表网上很多，现成且可用</p><h5 id="盒子的大小"><a href="#盒子的大小" class="headerlink" title="盒子的大小"></a>盒子的大小</h5><p> 默认情况下，盒子可见框的大小由内容区，内边距和边框共同决定<br>box-sizing: content-box;<br>box-sizing用于设置盒子尺寸的计算方式（width，height的作用）<br>可选值：<br>content-box  默认值，宽度和高度用来设置内容区的大小<br>border-box  宽度，高度用来设置盒子可见框的大小。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bfc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red solid;</span><br><span class="language-css">            <span class="hljs-comment">/* 默认情况下，盒子可见框的大小由内容区，内边距和边框共同决定 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: content-box;</span><br><span class="language-css">            <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">            box-sizing用于设置盒子尺寸的计算方式（width，height的作用）</span></span><br><span class="hljs-comment"><span class="language-css">            可选值：</span></span><br><span class="hljs-comment"><span class="language-css">            content-box  默认值，宽度和高度用来设置内容区的大小</span></span><br><span class="hljs-comment"><span class="language-css">            border-box  宽度，高度用来设置盒子可见框的大小。</span></span><br><span class="hljs-comment"><span class="language-css">             */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="轮廓阴影和圆角"><a href="#轮廓阴影和圆角" class="headerlink" title="轮廓阴影和圆角"></a>轮廓阴影和圆角</h5><p>outline用来设置元素的轮廓线，用法和border一样，和边框不同，轮廓不会影响到可见框的大小<br>box-shadow用来设置元素的阴影效果，阴影不会影响页面布局<br>            第一个值：水平偏移量  正值阴影朝右偏移<br>            第二个值：垂直偏移量  正值阴影朝下偏移<br>            第三个值：阴影的模糊半径<br>            第四个值：颜色<br>border-radius用来设置圆角，值为圆角半径大小<br>             border-radius可以分别指定四个角的圆角<br>             四个值：左上 右上 右下 右上<br>             三个值：左上 右上&#x2F;左下 右下<br>             两个值：左上&#x2F;右下 右上&#x2F;左下<br>            还有单独写法<br>            border-top-left-radius:<br>            左上角<br>            border-top-right-radius:<br>            右上角<br>            border-bottom-left-radius:<br>            左下角<br>            border-bottom-right-radius:<br>            右下角<br>            将元素设置为圆形：可以这样写：<br>            border-radius：50%;<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red solid;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: solid <span class="hljs-number">10px</span> solid</span><br><span class="language-css">            <span class="hljs-comment">/* outline用来设置元素的轮廓线，用法和border一样，和边框不同，轮廓不会影响到可见框的大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0.4</span>);</span><br><span class="language-css">            <span class="hljs-comment">/*box-shadow用来设置元素的阴影效果，阴影不会影响页面布局</span></span><br><span class="hljs-comment"><span class="language-css">              */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: silver;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><h5 id="浮动的介绍"><a href="#浮动的介绍" class="headerlink" title="浮动的介绍"></a>浮动的介绍</h5><p>CSS 的 Float（浮动），会使元素向其父元素左或向右移动，其周围的元素也会重新排列。<br>使用float:属性来设置元素的浮动<br>可选值：<br>none：默认值，不浮动。<br>left：元素向左浮动<br>right：元素向右浮动<br>元素设置浮动后，元素水平方向布局的等式便不需要强制成立<br>元素设置浮动后，会完全从文档流中脱离，不在占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动。<br>浮动特点：<br>1.元素设置浮动后，会完全从文档流中脱离<br>2.元素设置浮动后，会使元素向其父元素左或向右移动<br>3.浮动元素，默认不会从父元素中移出<br>4.一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止，不会盖住其他浮动元素。<br>5.如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移<br>6.浮动元素不会超过它前一个浮动的兄弟元素，最多最多就是和他一样高。</p><p>浮动的主要作用是让页面中的元素可以水平排列<br>通过浮动可以制作一些水平方向的布局</p><h5 id="浮动的其他特点："><a href="#浮动的其他特点：" class="headerlink" title="浮动的其他特点："></a>浮动的其他特点：</h5><p>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以可以利用浮动来设置文字环绕图片的效果<br>语速设置浮动，从文档流中脱离，元素的一些特点也会发生改变</p><p>元素脱离文档流的特点：<br>块元素<br>1.块元素不会独占页面的一行<br>2.脱离文档流，块元素的宽度和高度都会被内容撑开<br>行内元素<br>行内文档脱离文档流以后会变为块元素，特点和块元素一样<br>脱离文档流以后，就不需要区分行内和块元素了</p><h4 id="网页的布局"><a href="#网页的布局" class="headerlink" title="网页的布局"></a>网页的布局</h4><p>header网页头部<br>main网页主体<br>footer网页的底部<br>布局示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页的布局<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">header</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">main</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">700px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">160</span>, <span class="hljs-number">32</span>, <span class="hljs-number">28</span>);</span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">nav</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">article</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">580px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkgoldenrod;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">aside</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkkhaki;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">footer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">112</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 网站的头部 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 网站的主体 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 左边导航栏 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 中间内容 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 右边侧栏 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h4><p>在浮动布局里，父元素的高度是默认被子元素撑开的，<br>当子元素浮动后，会完全脱离文档流，子元素从文档流中脱离<br>将会无法撑起父元素的高度，导致父元素的高度丢失<br>父元素的高度塌陷后其下的元素会自动上移，导致页面布局混乱<br>所以高度塌陷是浮动布局中一个比较常见的问题这个问题必须进行处理</p><h5 id="BFC（块级格式化环境）"><a href="#BFC（块级格式化环境）" class="headerlink" title="BFC（块级格式化环境）"></a>BFC（块级格式化环境）</h5><p>bfc是一个css中的一个隐含的属性，可以为一个元素开启BFC<br>开启BFC该元素会变成一个独立的布局区域<br>元素开启BFC后的特点<br>1.开启BFC的元素不会被浮动元素覆盖<br>2.开启BFC的元素子元素和父元素的外边距不会重叠<br>3.开启BFC的元素可以包含浮动的子元素<br>可以通过一些特殊的方式开启BFC<br>1.设置元素的浮动（不推荐）<br>2.将元素设置为行内块元素（不推荐）<br>3.将元素的overflow设置为非visible的值<br>    常用方式：为元素设置overflow：hidden  开启BFC</p><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><p>如果不希望某个元素因为其他浮动元素的影响改变位置，可以通过clear属性清除浮动元素的当前元素所产生的影响<br>clear：清除浮动元素对当前元素的影响<br>可选值：<br>left：清除左侧浮动元素对当前元素的影响<br>right：清除右侧浮动元素对当前元素的影响<br>both:清除两侧影响最大的那侧<br>原理：设置清除浮动后，浏览器会自动为元素设置一个上外边距，以使其位置不受其他元素的影响</p><h5 id="使用after伪类来解决高度塌陷问题"><a href="#使用after伪类来解决高度塌陷问题" class="headerlink" title="使用after伪类来解决高度塌陷问题"></a>使用after伪类来解决高度塌陷问题</h5><p>最好用的方法<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: chocolate <span class="hljs-number">10px</span> solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-comment">/* 转换为块元素 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h5><p>最终解决方案：clearfix<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkorange;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* clearfix这个样式可以同时解决高度塌陷和外边距重叠的问题 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: table;</span><br><span class="language-css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 clearfix&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><h5 id="定位的介绍"><a href="#定位的介绍" class="headerlink" title="定位的介绍"></a>定位的介绍</h5><p>定位是一种更加高级的布局手段<br>通过定位可以将元素放到页面的任何位置<br>使用position属性来设置定位<br>    可选值：static       默认值，元素是静止的没有开启定位<br>           relative     开启元素的相对定位<br>           absolute     开启元素的绝对定位<br>           fixed        开启元素的固定定位<br>           sticky       开启元素的粘滞定位</p><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><p>将position属性设置为relative时则开启相对定位</p><p>相对定位特点：<br>        1.如果元素开启相对定位后，如果不设置偏移量则元素不会发生任何的变化<br>        2.相对定位是参照于元素在文档流中的位置进行定位的<br>        3.相对定位会提高元素的层级<br>        4.相对定位不会脱离文档流</p><p>偏移量（offset）<br>    垂直方向：通常情况下使用一种<br>        top：定位元素和定位位置上边的距离。<br>        bottom：定位元素定位位置上边的距离。<br>    水平方向：<br>        lift：定位元素和定位位置左边的距离。<br>        right：定位元素和定位位置右边的距离。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">95</span>, <span class="hljs-number">160</span>, <span class="hljs-number">106</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">200px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">214</span>, <span class="hljs-number">109</span>, <span class="hljs-number">61</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p>将position属性设置为absolute时则开启绝对定位<br>绝对定位特点：<br>        1.如果元素开启绝对定位后，如果不设置偏移量则元素位置不会发生变化<br>        2.绝对定位会脱离文档流<br>        3.绝对定位会改变元素的性质，行内变成块，块的宽高被元素撑开<br>        4.绝对定位会使元素提示一个层级<br>        5.是相对于其包含块进行定位的<br>        包含块：（containing block）<br>            正常情况下：<br>                包含块就是当前元素最近的祖先块元素<br>            绝对定位的包含块：<br>            包含块就是离他最近的开启了定位的祖先元素，如果所有祖先元素都没有开启定位，则根元素就是它的包含块。<br>            html（根元素  ，初始包含块）</p><p>偏移量（offset）<br>    垂直方向：通常情况下使用一种<br>        top：定位元素和定位位置上边的距离。<br>        bottom：定位元素定位位置上边的距离。<br>    水平方向：<br>        lift：定位元素和定位位置左边的距离。<br>        right：定位元素和定位位置右边的距离。</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box2</span>&#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">95</span>, <span class="hljs-number">160</span>, <span class="hljs-number">106</span>);<br>           <span class="hljs-attribute">position</span>: absolute;<br>           <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;<br>           <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;<br></code></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>（网页固定广告，导航栏等）<br>将position属性设置为fixed时则开启绝对定位<br>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样<br>唯一不同是固定定位永远参照浏览器的视口进行定位</p><h5 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h5><p>(兼容性不好)<br>将position属性设置为sticky时则开启粘滞定位<br>粘滞定位和相对定位的特点基本一致<br>粘滞定位和相对定位可以在元素到达某个位置时将其固定</p><h5 id="绝对定位元素的位置"><a href="#绝对定位元素的位置" class="headerlink" title="绝对定位元素的位置"></a>绝对定位元素的位置</h5><p>开启绝对定位以后：<br>水平方向的布局等式就需要添加left和right两个值<br>        lift+margin-left+border-left+padding-left+width+margin-right+border-right+padding-right+right&#x3D;其父元素区的宽度（必须满足）<br>        和以前一样只是多了两个值<br>        发生过度约束时，没有auto时，则自动调整right值以使等式满足。<br>        如果有auto，则自动调整auto的值以使等式满足<br>        可设置auto的值：<br>            margin width left right<br>            left right 默认为auto，等式不满足优先调整这两个值<br>这样可以写水平方向的居中：（在包含块里居中）<br>        left:0;<br>        right:0;<br>        margin-right:auto;<br>        margin-lift:auto;</p><p>垂直方向的等式也必须要满足：<br>        top+margin-top&#x2F;bottom+padding-top&#x2F;bottom+border-top&#x2F;bottom+bottom&#x3D;父元素高度<br>        同样auto的值会自动调整<br>这样可以写垂直方向的居中：（在包含块里居中）<br>        margin-top:auto;<br>        margin-bottom:auto;<br>        top:0;<br>        bottom:0;<br>例子：水平垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h4><p>对于开启了定位的元素，可以通过z-index属性来指定元素的层级<br>    z-index需要一个整数做参数，数值越大元素的层级越高<br>        元素的层级越优先显示<br>    没有参数（参数相同）优先显示结构里最下面的元素。<br>祖先元素的层级再高，也不会遮盖住后代元素<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">209</span>, <span class="hljs-number">196</span>, <span class="hljs-number">73</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">214</span>, <span class="hljs-number">109</span>, <span class="hljs-number">61</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box4</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">88</span>, <span class="hljs-number">76</span>, <span class="hljs-number">70</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">100</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>3<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="font"><a href="#font" class="headerlink" title="font"></a>font</h4><h5 id="字体相关样式："><a href="#字体相关样式：" class="headerlink" title="字体相关样式："></a>字体相关样式：</h5><p>color  用来设置字体颜色<br>font-size  用来设置字体大小<br>    font-size相关单位：<br>        em相对于当前元素的一个font-size<br>        rem相当于根元素的一个font-size<br>font-family字体族（字体的格式）<br>        可选值： serif（衬线字体）<br>                sans-serif（非衬线字体）<br>                monospace（等宽字体）<br>                    指定字体的类别，可以指定多种字体，使用，隔开，浏览器会自己按顺序选择其中电脑上有的字体显示<br>font-face可以将服务器中的字体直接提供给用户去使用 问题：1.加载可能比较慢  2.版权<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>           <span class="hljs-attribute">font-family</span>:这是字体名字;<br>           <span class="hljs-comment">/*   font-family 字体名字 */</span><br>           <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">路径</span>) format（<span class="hljs-string">&quot;格式声明&quot;</span>）;<br>           <span class="hljs-comment">/* 服务器上字体的路径 */</span><br></code></pre></td></tr></table></figure><h5 id="图标字体"><a href="#图标字体" class="headerlink" title="图标字体"></a>图标字体</h5><pre><code class="hljs">网页里经常使用一些图标，可以通过图片来引入图标但是图片大小本身太大，并且非常不灵活-所以在使用图标时，我们可以将图标直接设置为字体然后通过font-size的形式来引入这样我们就可以通过字体的形式来使用图标Font Awesome：    免费的字体图标库https://fontawesome.com/    下载解压后    将css文件和webfonts移动到项目中（这两必须在同一级目录）    将CSS文件引入到网页中    使用图标字体：        直接通过使用类名来使用图标字体（通常使用i标签来表示字体图标）    其他用法，可以通过伪元素来设置字体图标：    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> li::before&#123;<br>    content: &#x27;\f1b0&#x27;;<br>    font-family: &#x27;Font Awesome 5 Free&#x27;;<br>    font-weight: 900;<br>&#125;<br></code></pre></td></tr></table></figure>    也可以通过实体来引入符号    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas&quot;</span>&gt;</span> <span class="hljs-symbol">&amp;#xf0f3;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre><h5 id="行高（line-height）"><a href="#行高（line-height）" class="headerlink" title="行高（line height）"></a>行高（line height）</h5><p>行高是文字占有的实际的高度<br>可以通过line height设置行高<br>    行高可以指定大小（px em），也可以为行高设置一个整数,行高会是字体大小的指定倍数（默认行高1.33）</p><p>字体框：字体框就是字体存在的格子，设置font-size就是在设置字体框的高度</p><p>行高会在字体框里平均分配<br>    可以将行高设置为与元素高度一样，使得单行文字在元素中垂直居中<br>    行高还可以用来设置文字的行间距<br>        行间距&#x3D;行高-字体的大小</p><h5 id="字体的简写属性"><a href="#字体的简写属性" class="headerlink" title="字体的简写属性"></a>字体的简写属性</h5><p>font可以设置字体相关的所有属性<br>    格式：<br>        font：字体大小&#x2F;行高  字体族<br>        行高可以省略。不写则使用默认值</p><p>font-weight  字重  字体的加粗<br>    可选值：normal 默认值<br>            bold  加粗<br>            100-900（九个级别，没啥用）<br>font-style：  字体样式<br>    可选值：normal 正常的<br>           italic 斜体</p><h5 id="文本的样式"><a href="#文本的样式" class="headerlink" title="文本的样式"></a>文本的样式</h5><p>text-align  文本的水平对齐<br>    可选值:<br>            left 左侧对齐<br>            right 右对齐<br>            center 居中对齐<br>            justify两端对齐</p><p>vertical-align：元素的垂直对齐<br>    可选值：<br>            baseline(基线对齐)<br>            top    顶部对齐<br>            bottom  底部对齐<br>            center  居中对齐</p><p>text-decoration可以用来设置文本的修饰<br>    可选值：<br>        none：默认值，不添加任何修饰，正常显示<br>        underline 为文本添加下划线<br>        overline 为文本添加上划线<br>        line-through 为文本添加删除线</p><p>white-space:设置网页如何处理空白<br>    可选值：<br>        normal  正常<br>        nowrap  不换行<br>        pre 保留空白</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>设置背景样式</p><h5 id="设置背景颜色："><a href="#设置背景颜色：" class="headerlink" title="设置背景颜色："></a>设置背景颜色：</h5><p>background-color: #bfa;</p><h5 id="设置背景图片："><a href="#设置背景图片：" class="headerlink" title="设置背景图片："></a>设置背景图片：</h5><p>使用background-image来设置背景图片<br>    - 语法：background-image:url(相对路径);<br>    - 如果背景图片大于元素，默认会显示图片的左上角<br>    - 如果背景图片和元素一样大，则会将背景图片全部显示<br>    - 如果背景图片小于元素大小，则会默认将背景图片平铺以充满元素<br>background-image:url(img&#x2F;1.png);<br>可以同时为一个元素指定背景颜色和背景图片，<br>这样背景颜色将会作为背景图片的底色<br>一般情况下设置背景图片时都会同时指定一个背景颜色</p><h5 id="设置背景图片的重复方式"><a href="#设置背景图片的重复方式" class="headerlink" title="设置背景图片的重复方式"></a>设置背景图片的重复方式</h5><p>background-repeat用于设置背景图片的重复方式<br>可选值：<br>    repeat，默认值，背景图片会双方向重复（平铺）<br>    no-repeat ，背景图片不会重复，有多大就显示多大<br>    repeat-x， 背景图片沿水平方向重复<br>    repeat-y， 背景图片沿垂直方向重复</p><h5 id="设置背景图片的位置"><a href="#设置背景图片的位置" class="headerlink" title="设置背景图片的位置"></a>设置背景图片的位置</h5><p>background-position 用来设置背景图片的位置<br>设置方式：<br>        通过top bottom left right center几个方位来设置图片的位置<br>例子：background-position： bottom left;（至少两个值）</p><p>也可以直接指定两个偏移量，<br>第一个值是水平偏移量<br>    - 如果指定的是一个正值，则图片会向右移动指定的像素<br>    - 如果指定的是一个负值，则图片会向左移动指定的像素<br>第二个是垂直偏移量<br>    - 如果指定的是一个正值，则图片会向下移动指定的像素<br>    - 如果指定的是一个负值，则图片会向上移动指定的像素<br>例子：background-position: -80px -40px;</p><h5 id="设置背景的范围"><a href="#设置背景的范围" class="headerlink" title="设置背景的范围"></a>设置背景的范围</h5><p>background-clip用于设置背景的范围<br>可选值： border-box  默认值，背景会出现在边框的下边<br>        padding-box 背景不会出现在边框，只出现在内容区和内边距<br>        content-box 背景只会出现在内容区<br>background-origin 背景图片的偏移量计算的原点<br>        padding-box  默认值background-position从内边距开始算<br>        content-box  background-position从内容区开始算<br>        border-box   background-position从边框开始算</p><h5 id="背景图片的尺寸"><a href="#背景图片的尺寸" class="headerlink" title="背景图片的尺寸"></a>背景图片的尺寸</h5><p>background-size来设置背景图片的尺寸<br>第一个值表示宽度<br>第二个值表示高度<br>-如果只写一个，则第二个默认为auto</p><p>写cover可以让图片比例不变，将元素铺满<br>contain图片比例不变，将图片在元素中完整显示</p><h5 id="背景图片的滚动"><a href="#背景图片的滚动" class="headerlink" title="背景图片的滚动"></a>背景图片的滚动</h5><p>background-attachment用来设置背景图片是否随页面一起滚动（很少用）<br>         可选值：<br>             scroll，默认值，背景图片随着窗口滚动<br>              fixed，背景图片会固定在某一位置，不随页面滚动</p><p> 不随窗口滚动的图片，我们一般都是设置给body，而不设置给其他元素</p><h5 id="背景属性的简写"><a href="#背景属性的简写" class="headerlink" title="背景属性的简写"></a>背景属性的简写</h5><p>  background(还是不简写的好，具体查文档)<br>      - 通过该属性可以同时设置所有背景相关的样式<br>      - 没有顺序的要求，谁在前睡在后都行<br>         也没有数量的要求，不写的样式就使用默认值<br>例子：<br>background: #bfa url(img&#x2F;3.png) center center no-repeat fixed;</p><h5 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h5><p>为了解决图片闪烁和加载问题<br>    可以将多个小图片统一保存到一个大图片中，然后通过调整background-position来调整显示位置<br>    这样图片可以同时加载到网页中，可以有效避免出现闪烁问题<br>    这个技术在网页运用十分广泛，称为CSS-sprite（现在在减少使用）<br>    使用：<br>    1.确定要使用的图标<br>    2.测量图标大小<br>    3.根据测量创建元素<br>    4.将图设置为元素的背景图片<br>    5.设置偏移量以显示对应图标</p><pre><code class="hljs">特点：一次性加载多个图片，减少服务器请求，加快访问速度</code></pre><h5 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h5><p>通过渐变可以设置一些复杂的背景颜色，可以实现一个颜色向其他颜色过渡的效果<br>    渐变是图片，需要使用background-image来设置<br>    （用法太多了）<br>线性渐变<br>   background-image: linear-gradient(to left ,red,yellow);<br>   三个值是渐变方向，开头颜色 ，结尾颜色<br>  （也可以同时指定多个颜色，多个颜色默认情况下平均分配）<br>径向渐变<br>    background-image: radial-gradient(red,yellow);<br>    从中间向西周散射，默认情况下，径向渐变的形状由元素形状决定<br>    可以手动指定方向：<br>        circle  正圆<br>        ellipse 椭圆</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (10.颜色单位)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/11.%E9%A2%9C%E8%89%B2%E5%8D%95%E4%BD%8D/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/11.%E9%A2%9C%E8%89%B2%E5%8D%95%E4%BD%8D/</url>
    
    <content type="html"><![CDATA[<h3 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h3><p>在css里可以直接使用颜色来设置各种颜色(不方便))</p><h5 id="RGB值"><a href="#RGB值" class="headerlink" title="RGB值"></a>RGB值</h5><p>RGB通过三种颜色的不同浓度来调配出不同颜色<br>R：red<br>G:green<br>B:blue<br>每一种颜色的范围都在0-255之间<br>语法：RGB（红色，绿色，蓝色）<br>这里是光的三原色：所以都为0时为黑色，都为255为白色</p><h5 id="RGBA"><a href="#RGBA" class="headerlink" title="RGBA"></a>RGBA</h5><p>A:在RGB基础上多一个不透明效果（1不透明——0完全透明）</p><h5 id="十六进制的RGB值"><a href="#十六进制的RGB值" class="headerlink" title="十六进制的RGB值"></a>十六进制的RGB值</h5><p>语法：#红色绿色蓝色<br>颜色浓度：00-ff<br> 如果符号两位两位相同，可以简写：#aabbcc –&gt;#abc</p><h5 id="HSL值和HSLA值"><a href="#HSL值和HSLA值" class="headerlink" title="HSL值和HSLA值"></a>HSL值和HSLA值</h5><p>H：色相（0~360）<br>S：饱和度  颜色浓度（0%——100%）<br>L：亮度    颜色的亮度（0%——100%）<br>A:不透明度<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-class">.box</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(red, green, blue, alpha);     <br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(hue, saturation, lightness); <br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsla</span>(hue, saturation, lightness, alpha);     <br>        &#125;<br><br>    &lt;/style&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS笔记 (汇总版)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/HTML+CSS%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%89%8D%E7%AB%AF/HTML+CSS/HTML+CSS%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前端HTML-CSS学习"><a href="#前端HTML-CSS学习" class="headerlink" title="前端HTML+CSS学习"></a>前端HTML+CSS学习</h1><h1 id="总体介绍："><a href="#总体介绍：" class="headerlink" title="总体介绍："></a>总体介绍：</h1><h3 id="前端开发-客户端"><a href="#前端开发-客户端" class="headerlink" title="前端开发(客户端):"></a>前端开发(客户端):</h3><h4 id="1-文字客户端"><a href="#1-文字客户端" class="headerlink" title="1.文字客户端"></a>1.文字客户端</h4><h4 id="2-图形化客户端（C-x2F-S架构（client-x2F-server））"><a href="#2-图形化客户端（C-x2F-S架构（client-x2F-server））" class="headerlink" title="2.图形化客户端（C&#x2F;S架构（client&#x2F;server））"></a>2.图形化客户端（C&#x2F;S架构（client&#x2F;server））</h4><h4 id="3-网页（B-x2F-S架构-browser-x2F-server-）"><a href="#3-网页（B-x2F-S架构-browser-x2F-server-）" class="headerlink" title="3.网页（B&#x2F;S架构(browser&#x2F;server)）"></a>3.网页（B&#x2F;S架构(browser&#x2F;server)）</h4><h5 id="网页的优点（相比图形化）"><a href="#网页的优点（相比图形化）" class="headerlink" title="网页的优点（相比图形化）"></a>网页的优点（相比图形化）</h5><p>跨平台  无需安装  无需更新（客户）</p><h5 id="网页使用的语言"><a href="#网页使用的语言" class="headerlink" title="网页使用的语言"></a>网页使用的语言</h5><p>HTML CSS JavaScript</p><h3 id="网页开发概览："><a href="#网页开发概览：" class="headerlink" title="网页开发概览："></a>网页开发概览：</h3><h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>浏览器：渲染网页</p><h4 id="开发标准："><a href="#开发标准：" class="headerlink" title="开发标准："></a>开发标准：</h4><p>W3C(万维网联盟)—-&gt;统一的标准使网页在不同的浏览器有统一的渲染效果</p><h4 id="由W3C标准，网页分为结构表现和行为"><a href="#由W3C标准，网页分为结构表现和行为" class="headerlink" title="由W3C标准，网页分为结构表现和行为"></a>由W3C标准，网页分为结构表现和行为</h4><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>HTML用于描述网页结构</p><h5 id="表现"><a href="#表现" class="headerlink" title="表现"></a>表现</h5><p>CSS用于控制页面中元素的样式</p><h5 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h5><p>JavaScript用于相应用户操作</p><h1 id="知识点内容"><a href="#知识点内容" class="headerlink" title="知识点内容"></a>知识点内容</h1><h2 id="HTML基础学习"><a href="#HTML基础学习" class="headerlink" title="HTML基础学习"></a>HTML基础学习</h2><h3 id="1-HTML介绍："><a href="#1-HTML介绍：" class="headerlink" title="1.HTML介绍："></a>1.HTML介绍：</h3><p>HTML（超文本标记语言——HyperText Markup Language）是构成 Web 世界的一砖一瓦。它定义了网页内容的含义和结构。除 HTML 以外的其它技术则通常用来描述一个网页的表现与展示效果（如 CSS），或功能与行为（如 JavaScript）。</p><p>“超文本”（hypertext）是指连接单个网站内或多个网站间的网页的链接。链接是网络的一个基本方面。只要将内容上传到互联网，并将其与他人创建的页面相链接，你就成为了万维网的积极参与者。</p><p>HTML 使用“标记”（markup）来注明文本、图片和其他内容，以便于在 Web 浏览器中显示。<br>HTML 元素通过“标签”（tag）将文本从文档中引出，标签由在“&lt;”和“&gt;”中包裹的元素名组成，HTML 标签里的元素名不区分大小写。也就是说，它们可以用大写，小写或混合形式书写。</p><p>HTML文件的后缀为.html</p><h3 id="2-编写第一个网页程序"><a href="#2-编写第一个网页程序" class="headerlink" title="2.编写第一个网页程序"></a>2.编写第一个网页程序</h3><h4 id="标签："><a href="#标签：" class="headerlink" title="标签："></a>标签：</h4><p>&lt;标签&gt; 开始标签…..中间就是内容….. &lt;&#x2F;标签&gt;结束标签</p><h5 id="标题标签："><a href="#标题标签：" class="headerlink" title="标题标签："></a>标题标签：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>共有六级标题</p><h5 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span> 这是一个段落 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是另一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="根标签-子标签（层级关系）"><a href="#根标签-子标签（层级关系）" class="headerlink" title="根标签,子标签（层级关系）"></a>根标签,子标签（层级关系）</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>   <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>    <br>      <br></code></pre></td></tr></table></figure><p>根标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><p>子标签（头部）<br>用户不可见，是给浏览器看的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>子标签（身体）<br>用户可见部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="第一个网页示例："><a href="#第一个网页示例：" class="headerlink" title="第一个网页示例："></a>第一个网页示例：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span> 第一个网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span> 将进酒 <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>  李白<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见高堂明镜悲白发，朝如青丝暮成雪。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人生得意须尽欢，莫使金樽空对月。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天生我材必有用，千金散尽还复来。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="3-细化一个网页"><a href="#3-细化一个网页" class="headerlink" title="3.细化一个网页"></a>3.细化一个网页</h3><h4 id="HTML注释"><a href="#HTML注释" class="headerlink" title="HTML注释"></a>HTML注释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这是一个注释 --&gt;</span><br></code></pre></td></tr></table></figure><p>注释不可嵌套</p><h4 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a>标签的属性</h4><p>HTML 标签可以设置属性<br>属性可以在标签中添加附加信息<br>属性一般描述于开始标签，不用于结束标签<br>属性总是以名称&#x2F;值对的形式出现，比如：name&#x3D;”value”。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是我的<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>网页！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>font 规定文本的字体、字体尺寸、字体颜色。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;font&gt;</span>   <span class="hljs-section">&lt;/font&gt;</span><br></code></pre></td></tr></table></figure><p>这里的color&#x3D;”red”就是属性，让中间字体变为红色。<br>属性和标签名或其他属性应该用空格隔开。<br>属性值应该始终被包括在引号内。<br>双引号是最常用的，不过使用单引号也没有问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br></code></pre></td></tr></table></figure><p>color就是属性名   red就是属性值 ，属性不能随便写，是有相应规定的。</p><h5 id="添加了属性的网页代码："><a href="#添加了属性的网页代码：" class="headerlink" title="添加了属性的网页代码："></a>添加了属性的网页代码：</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第二个网页<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是我的<span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>网页！<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-网页的基本结构"><a href="#4-网页的基本结构" class="headerlink" title="4.网页的基本结构"></a>4.网页的基本结构</h3><h4 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h4><h5 id="HTML5的版本声明"><a href="#HTML5的版本声明" class="headerlink" title="HTML5的版本声明"></a>HTML5的版本声明</h5><p>文档声明用来告诉浏览器当前网页的版本，写在第一行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">HTML</span>&gt;</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">htm</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>              <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">htm</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="文档字符编码声明"><a href="#文档字符编码声明" class="headerlink" title="文档字符编码声明"></a>文档字符编码声明</h5><p>字符编码有很多方式，网页一般使用UTF-8字符集编码。<br>声明，置于head内部</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="完整基本结构："><a href="#完整基本结构：" class="headerlink" title="完整基本结构："></a>完整基本结构：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--网页版本声明--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--HTML的根标签--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--子元素，头部（帮助浏览器解析网页）--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--meat用来设置网页元数据--&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>         <span class="hljs-comment">&lt;!--网页的标题，搜索引擎搜索的就是这个--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--body是HTML的子元素，所有可见内容都应该写在body里--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--网页的一级标题--&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="HTML语法-x2F-特性学习"><a href="#HTML语法-x2F-特性学习" class="headerlink" title="HTML语法&#x2F;特性学习"></a>HTML语法&#x2F;特性学习</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><h4 id="实体的作用："><a href="#实体的作用：" class="headerlink" title="实体的作用："></a>实体的作用：</h4><p>在网页里编写的多个空格默认被解析为一个空格，不能直接书写一些特殊符号：多个空格，大于，小于号等<br>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）</p><h4 id="实体的语法"><a href="#实体的语法" class="headerlink" title="实体的语法"></a>实体的语法</h4><pre><code class="hljs">&amp;实体的名字</code></pre><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;nbsp;</span>      <span class="hljs-comment">&lt;!--不间断空格--&gt;</span><br><span class="hljs-symbol">&amp;lt;</span>        <span class="hljs-comment">&lt;!--小于号--&gt;</span><br><span class="hljs-symbol">&amp;gt;</span>        <span class="hljs-comment">&lt;!--大于号--&gt;</span><br><span class="hljs-symbol">&amp;copy;</span>      <span class="hljs-comment">&lt;!--版权符号--&gt;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/html/html-entities.html">详细实体参考：</a></p><h3 id="meat标签"><a href="#meat标签" class="headerlink" title="meat标签"></a>meat标签</h3><h4 id="meat标签作用"><a href="#meat标签作用" class="headerlink" title="meat标签作用"></a>meat标签作用</h4><p>元数据（Metadata）是数据的数据信息。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签提供了 HTML 文档的元数据。元数据不会显示在客户端，但是会被浏览器解析。<br>META元素通常用于指定网页的描述，关键词，文件的最后修改时间，作者及其他元数据。<br>元数据可以被使用浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 Web 服务调用。<br><a href="https://www.runoob.com/tags/tag-meta.html">meat标签文档</a></p><h4 id="meat示例"><a href="#meat示例" class="headerlink" title="meat示例"></a>meat示例</h4><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;前端，html,css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的keywords表示网页的关键字，搜索时会检索这个关键字的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;description&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;免费在线教程&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>description用于网页介绍描述，就是搜索引擎搜索显示结果的小字部分。title标签里的是搜索结果的标题。</p><h3 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h3><p>在网页里，HTML负责网页结构使用HTML标签时我们更应该关注其语义，而不是样式。</p><h4 id="h标题标签"><a href="#h标题标签" class="headerlink" title="h标题标签"></a>h标题标签</h4><p>h1-h6一共有六级标题，重要性依次递减，h1在网页中仅次于title标签，一般情况下只有一个。一般情况下标题标签只用到h1-h6.</p><h5 id="标题组："><a href="#标题组：" class="headerlink" title="标题组："></a>标题组：</h5><p>hgroup标签被用来对标题元素进行分组。</p><p>当标题有多个层级（副标题）时，hgroup 元素被用来对一系列 h1 - h6 元素进行分组。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">hgroup</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Welcome to my WWF<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>For a living planet<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">hgroup</span>&gt;</span><br></code></pre></td></tr></table></figure><p>独占一行的元素叫块元素</p><h4 id="P标签-段落"><a href="#P标签-段落" class="headerlink" title="P标签(段落)"></a>P标签(段落)</h4><p>P标签表示一个段落。<br>是一个块元素。</p><h4 id="em标签：强调文本"><a href="#em标签：强调文本" class="headerlink" title="em标签：强调文本"></a>em标签：强调文本</h4><p>呈现为被强调的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>强调文本<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样的还有strong标签:定义重要的文本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗文本<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="blockquote标签：引用"><a href="#blockquote标签：引用" class="headerlink" title="blockquote标签：引用"></a>blockquote标签：引用</h4><p>定义一个摘自另一个源的块引用：浏览器通常会对 blockquote元素进行缩进<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;http://www.worldwildlife.org/who/index.html&quot;</span>&gt;</span><br>For 50 years, WWF has been protecting the future of nature. The world&#x27;s leading conservation organization, WWF works in 100 countries and is supported by 1.2 million members in the United States and close to 5 million globally.<br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure><p>还有同样的短引用：q标签<br>q 标签定义一个短的引用。</p><p>浏览器经常会在这种引用的周围插入引号。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>WWF&#x27;s goal is to:<br><span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>Build a future where people live in harmony with nature.<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br>We hope they succeed.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="br标签：换行"><a href="#br标签：换行" class="headerlink" title="br标签：换行"></a>br标签：换行</h4><p>br 标签插入一个简单的换行符。<br>br 标签是一个空标签，意味着它没有结束标签。</p><h4 id="header标签（网页的头部）"><a href="#header标签（网页的头部）" class="headerlink" title="header标签（网页的头部）"></a>header标签（网页的头部）</h4><p>header标签定义文档或者文档的一部分区域的页眉。<br>header 元素应该作为介绍内容或者导航链接栏的容器。<br>在一个文档中，您可以定义多个 header&gt;元素。<br>注释：header标签不能被放在 footer，address或者另一个 header元素内部。</p><h4 id="main标签"><a href="#main标签" class="headerlink" title="main标签"></a>main标签</h4><p>main&gt; 标签用于指定文档的主体内容。<br>main 标签中的内容在文档中是唯一的。它不应包含在文档中重复出现的内容，比如侧栏、导航栏、版权信息、站点标志或搜索表单。</p><h4 id="footer标签"><a href="#footer标签" class="headerlink" title="footer标签"></a>footer标签</h4><p>footer 标签定义文档或者文档的一部分区域的页脚。</p><p>footer 元素应该包含它所包含的元素的信息。</p><p>在典型情况下，该元素会包含文档创作者的姓名、文档的版权信息、使用条款的链接、联系信息等等。</p><p>在一个文档中，您可以定义多个 footer元素。</p><h4 id="nav标签"><a href="#nav标签" class="headerlink" title="nav标签"></a>nav标签</h4><p>nav 标签定义导航链接的部分。</p><p>并不是所有的 HTML 文档都要使用到 nav元素。nav元素只是作为标注一个导航链接的区域。</p><p>在不同设备上（手机或者PC）可以制定导航链接是否显示，以适应不同屏幕的需求。</p><h4 id="aside标签"><a href="#aside标签" class="headerlink" title="aside标签"></a>aside标签</h4><p>aside的内容可用作文章的侧栏。、</p><h4 id="article标签"><a href="#article标签" class="headerlink" title="article标签"></a>article标签</h4><p>article标签定义独立的内容。（文章）<br>article标签定义的内容本身必须是有意义的且必须是独立于文档的其余部分。<br>article的潜在来源：</p><h4 id="section标签"><a href="#section标签" class="headerlink" title="section标签"></a>section标签</h4><p>section 标签定义了文档的某个区域。比如章节、头部、底部或者文档的其他区域。</p><h4 id="div标签（定义区块，用的最多）"><a href="#div标签（定义区块，用的最多）" class="headerlink" title="div标签（定义区块，用的最多）"></a>div标签（定义区块，用的最多）</h4><p>div 标签定义 HTML 文档中的一个分隔区块或者一个区域部分。</p><p>div标签常用于组合块级元素，以便通过 CSS 来对这些元素进行格式化。</p><h4 id="span标签"><a href="#span标签" class="headerlink" title="span标签"></a>span标签</h4><p>span 用于对文档中的行内元素进行组合。</p><p>span 标签没有固定的格式表现。当对它应用样式时，它才会产生视觉上的变化。如果不对 span 应用样式，那么 span 元素中的文本与其他文本不会任何视觉上的差异。</p><p>span标签提供了一种将文本的一部分或者文档的一部分独立出来的方式</p><h3 id="块元素-行内元素"><a href="#块元素-行内元素" class="headerlink" title="块元素  行内元素"></a>块元素  行内元素</h3><h4 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h4><p>在网页中一般通过块元素来布局<br>会在块元素里放行内元素，但不会会在行内元素里放块元素。<br>P元素里不能放块元素。</p><h4 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h4><p>用于包裹文字</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>HTML 支持有序、无序和定义列表:<br>列表之间可以互相嵌套</p><h4 id="无序列表：（用的最多）"><a href="#无序列表：（用的最多）" class="headerlink" title="无序列表：（用的最多）"></a>无序列表：（用的最多）</h4><p>使用ul标签来创建有序列表<br>使用li来创建列表项<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>有序列表始于 ol标签。每个列表项始于 li 标签。<br>列表项使用数字来标记。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h4><p>自定义列表不仅仅是一列项目，而是项目及其注释的组合。<br>自定义列表以 dl 标签开始。每个自定义列表项以 dt（下定义） 开始。每个自定义列表项的定义以 dd （定义内容）开始。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Coffee<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- black hot drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>Milk<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>- white cold drink<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>HTML 使用超级链接与网络上的另一个文档相连。。点击链接可以从一张页面跳转到另一张页面。或者当前页面的特定位置。</p><h4 id="超链接的定义"><a href="#超链接的定义" class="headerlink" title="超链接的定义"></a>超链接的定义</h4><p>HTML使用标签 a来设置超文本链接,a标签里可以嵌套除它自身的的所有标签。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>  超链接 <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>链接文本<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="超链接的属性"><a href="#超链接的属性" class="headerlink" title="超链接的属性"></a>超链接的属性</h4><h5 id="href跳转到指定目标"><a href="#href跳转到指定目标" class="headerlink" title="href跳转到指定目标"></a>href跳转到指定目标</h5><p>值可以是外部网页的地址<br>也可以是内部页面地址</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="target-属性"><a href="#target-属性" class="headerlink" title="target 属性"></a>target 属性</h5><p>使用 target 属性，你可以定义被链接的文档在何处显示。<br>可选值：<br>_self默认值，在当前页面打开超链接<br>_blank在一个新页面打开超链接</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.runoob.com/&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;noopener noreferrer&quot;</span>&gt;</span>访问菜鸟教程!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ID属性（锚点）"><a href="#ID属性（锚点）" class="headerlink" title="ID属性（锚点）"></a>ID属性（锚点）</h4><p>每一个标签都可以添加一个id属性<br>id属性就是元素的唯一的标识，同一页面不能出现相同的id属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bottle&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>回到顶部<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="跳转到当前页面的任意地方"><a href="#跳转到当前页面的任意地方" class="headerlink" title="跳转到当前页面的任意地方"></a>跳转到当前页面的任意地方</h5><p>href 写#，就是直接跳转到当前页面的顶部</p><p>在开发中，#可以作为一种占位符（没确定跳转页面，先拿#代替）</p><p>也可以使用JavaScript：；来作为占位符，点击后什么都不发生。</p><p>跳转到页面指定位置，只需要将href属性设置为#目标元素的ID属性值</p><h4 id="路径："><a href="#路径：" class="headerlink" title="路径："></a>路径：</h4><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>当我们跳转到一个服务器内部的页面时我们使用相对路径，相对路径一般以.或..开头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">./ <br></code></pre></td></tr></table></figure><p> 表示当前文件所在的目录</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">../ 表示当前文件所在的目录的上一级目录<br></code></pre></td></tr></table></figure><h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><p>图像由img标签定义。使用img引入外部图片。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>img 是空标签，意思是说，它只包含属性，并且没有闭合标签。它属于一种替换元素（介于行内元素和块元素之间）</p><h4 id="src属性"><a href="#src属性" class="headerlink" title="src属性"></a>src属性</h4><p>要在页面上显示图像，你需要使用源属性（src）。src 指 “source”。源属性的值是图像的 URL 地址。（外部图片的路径)<br>路径规则和超链接一样。</p><h4 id="alt属性"><a href="#alt属性" class="headerlink" title="alt属性"></a>alt属性</h4><p>alt属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。（图片的描述）一般会在图片加载不出来的时候显示。<br>搜索引擎会根据alt中的内容来搜索图片内容。</p><h4 id="图片的高和宽"><a href="#图片的高和宽" class="headerlink" title="图片的高和宽"></a>图片的高和宽</h4><p>height（高度） 与 width（宽度）属性用于设置图像的高度与宽度。</p><p>属性值默认单位为像素:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;pulpit.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Pulpit rock&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;304&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;228&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>宽高中修改一个，则另一个会等比缩放。pc端，一般不建议修改图片大小，需要多大就裁多大。</p><p>指定图像的高度和宽度是一个很好的习惯。如果图像指定了高度宽度，页面加载时就会保留指定的尺寸。如果没有指定图片的大小，加载页面时有可能会破坏HTML页面的整体布局。</p><h4 id="图片的格式"><a href="#图片的格式" class="headerlink" title="图片的格式"></a>图片的格式</h4><p>jpeg(jpg)<br>支持颜色丰富，不支持透明效果，不支持动图<br>gif<br>支持颜色少，支持简单透明，支持动图<br>png<br>支持颜色丰富，支持复杂透明，不支持动图<br>webp<br>谷歌推出的专门用于网页的图片，具备所有优点，本身还小<br>效果一样，尽量选小的图片，但是兼容性不好<br>base64<br> 使用这个编码，可以将图片转化为字符，通过字符来引入图片，一般是需要和网页一起加载的图片才使用base64</p><h3 id="内联框架-很少使用"><a href="#内联框架-很少使用" class="headerlink" title="内联框架(很少使用)"></a>内联框架(很少使用)</h3><p>通过使用框架，你可以在同一个浏览器窗口中显示不止一个页面。<br>使用iframe标签定义一个内联的框架</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>src指定引入网页的路径<br>height 和 width 属性用来定义iframe标签的高度与宽度。</p><p>属性默认以像素为单位, 但是你可以指定其按比例显示 (如：”80%”)。</p><p>frameborder 属性用于定义iframe表示是否显示边框。</p><p>设置属性值为 “0” 移除iframe的边框:</p><h3 id="引入音视频"><a href="#引入音视频" class="headerlink" title="引入音视频"></a>引入音视频</h3><h4 id="音频"><a href="#音频" class="headerlink" title="音频"></a>音频</h4><p>audio标签用来向页面引入一个外部的音频文件，默认不允许用户自己控制播放停止。<br>可以添加controls属性来允许用户自己播放<br>autoplay属性用来控制音频自动播放（大部分网页不会自动播放，为了好的用户体验）（很少用）<br>loop属性 :音乐循环播放</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">controls</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">loop</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般这样写更多一点,兼容性更好。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/ogg&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>    您的浏览器不支持 audio 元素。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><p>使用video标签来引入视频,与audio相似。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;horse.mp4&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><h4 id="基础表格"><a href="#基础表格" class="headerlink" title="基础表格"></a>基础表格</h4><p>表格在日常生活中使用的非常的多，比如excel就是专门用来创建表格的工具，<br>表格就是用来表示一些格式化的数据的，比如：课程表、银行对账单<br>在网页中也可以来创建出不同的表格。<br>    在HTML中，使用table标签来创建一个表格<br>    在table标签中使用tr来表示表格中的一行，有几行就有几个tr<br>    在tr中需要使用td来创建一个单元格，有几个单元格就有几个td</p><p>colspan横向的合并单元格:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>D3<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><p>rowspan用来设置纵向的合并单元格   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>B4<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="长表格"><a href="#长表格" class="headerlink" title="长表格"></a>长表格</h4><p>有一些情况下表格是非常的长的，<br>        这时就需要将表格分为三个部分，表头，表格的主体，表格底部<br>    在HTML中为我们提供了三个标签：<br>        thead 表头<br>        tbody 表格主体<br>        tfoot 表格底部</p><pre><code class="hljs">这三个标签的作用，就来区分表格的不同的部分，他们都是table的子标签，    都需要直接写到table中，tr需要写在这些标签当中    thead中的内容，永远会显示在表格的头部tfoot中的内容，永远都会显示表格的底部tbody中的内容，永远都会显示表格的中间如果表格中没有写tbody，浏览器会自动在表格中添加tbody并且将所有的tr都放到tbody中，所以注意tr并不是table的子元素，而是tbody的子元素通过table &gt; tr 无法选中行 需要通过tbody &gt; tr</code></pre><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>表单的作用就是用来将用户信息提交给服务器的<br>                比如：百度的搜索框 注册 登录这些操作都需要填写表单<br>创建一个表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;target.html&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>form标签中必须指定一个action属性，该属性指向的是一个服务器的地址<br>    当我们提交表单时将会提交到action属性对应的地址<br>使用form创建的仅仅是一个空白的表单，<br>    我们还需要向form中添加不同的表单项</p><h4 id="文本框："><a href="#文本框：" class="headerlink" title="文本框："></a>文本框：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h4 id="提交按钮："><a href="#提交按钮：" class="headerlink" title="提交按钮："></a>提交按钮：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>使用input来创建一个文本框，它的type属性是text<br>    如果希望表单项中的数据会提交到服务器中，还必须给表单项指定一个name属性<br>    name表示提交内容的名字</p><p>用户填写的信息会附在url地址的后边以查询字符串的形式发送给服务器<br>    url地址?查询字符串<br>格式：<br>    属性名&#x3D;属性值&amp;属性名&#x3D;属性值&amp;属性名&#x3D;属性值&amp;属性名&#x3D;属性值<br>在文本框中也可以指定value属性值，该值将会作为文本框的默认值显示</p><p>在html中还为我们提供了一个标签，专门用来选中表单中的提示文字的<br>label标签<br>该标签可以指定一个for属性，该属性的值需要指定一个表单项的id值</p><h4 id="密码框"><a href="#密码框" class="headerlink" title="密码框"></a>密码框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span>  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> /&gt;</span> <br></code></pre></td></tr></table></figure><p>密码框<br>    - 使用input创建一个密码框，它的type属性值是password</p><h5 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h5><pre><code class="hljs">- 使用input来创建一个单选按钮，它的type属性使用radio- 单选按钮通过name属性进行分组，name属性相同是一组按钮- 像这种需要用户选择但是不需要用户直接填写内容的表单项，    还必须指定一个value属性，这样被选中的表单项的value属性值将会最终提交给服务器    如果希望在单选按钮或者是多选框中指定默认选中的选项，    则可以在希望选中的项中添加checked=&quot;checked&quot;属性</code></pre><p>多选框<br>    - 使用input创建一个多选框，它的type属性使用checkbox</p><h5 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h5><pre><code class="hljs">- 使用select来创建一个下拉列表下拉列表的name属性需要指定给select，而value属性需要指定给option可以通过在option中添加selected=&quot;selected&quot;来将选项设置为默认选中当为select添加一个multiple=&quot;multiple&quot;，则下拉列表变为一个多选的下拉列表在select中可以使用optgroup对选项进行分组同一个optgroup中的选项是一组可以通过label属性来指定分组的名字</code></pre><p>提交按钮可以将表单中的信息提交给服务器<br>        使用input创建一个提交按钮,它的type属性值是submit<br>        在提交按钮中可以通过value属性来指定按钮上的文字</p><p>input type&#x3D;”reset” 可以创建一个重置按钮，<br>    点击重置按钮以后表单中内容将会恢复为默认值</p><p>使用input type&#x3D;button可以用来创建一个单纯的按钮，<br>                    这个按钮没有任何功能，只能被点击</p><p>除了使用input，也可以使用button标签来创建按钮<br>                这种方式和使用input类似，只不过由于它是成对出现的标签<br>                    使用起来更加的灵活</p><h2 id="CSS基础学习"><a href="#CSS基础学习" class="headerlink" title="CSS基础学习"></a>CSS基础学习</h2><h3 id="CSS介绍"><a href="#CSS介绍" class="headerlink" title="CSS介绍"></a>CSS介绍</h3><p>CSS用于控制页面中元素的样式(表现)<br>（层叠样式表）是一个多层结构，用CSS给每层设计样式，最终看见的是网页上最上面的一层（ps图层的原理）</p><h3 id="使用css来修改网页中原始的样式"><a href="#使用css来修改网页中原始的样式" class="headerlink" title="使用css来修改网页中原始的样式"></a>使用css来修改网页中原始的样式</h3><h4 id="1-style属性（内联样式）"><a href="#1-style属性（内联样式）" class="headerlink" title="1.style属性（内联样式）"></a>1.style属性（内联样式）</h4><p>在标签内部通过style属性来设置元素的样式(不推荐使用)<br>内联样式只能对一个标签生效，影响多个元素要写很多遍，样式变化不方便修改和维护。<br>！开发时不要使用内联样式<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: brown; font-size: 60px;&quot;</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-内部样式表-将样式编写到head里"><a href="#2-内部样式表-将样式编写到head里" class="headerlink" title="2.(内部样式表)将样式编写到head里"></a>2.(内部样式表)将样式编写到head里</h4><p>将样式编写到head里的style标签里。只对一个网页起作用。不能跨页面复用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br>       统一写到这里<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过css选择器选中元素并为其设置格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css"></span><br><span class="language-css"></span><br><span class="language-css">    &#125;    </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以为所有p元素设置样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: burlywood;</span><br><span class="language-css">        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: brown; font-size: 60px;&quot;</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>君不见高堂明镜悲白发，朝如青丝暮成雪。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人生得意须尽欢，莫使金樽空对月。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天生我材必有用，千金散尽还复来。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-（外部样式表）将样式写在外部css文件里"><a href="#3-（外部样式表）将样式写在外部css文件里" class="headerlink" title="3.（外部样式表）将样式写在外部css文件里"></a>3.（外部样式表）将样式写在外部css文件里</h4><p>将样式写在外部css文件里,然后通过link标签引入外部的css文件,外部样式的好处在于样式可以在不同页面复用。将样式编写到css里可以很好使用到浏览器的缓存机制，从而加快网页的加载速度。<br>这是开发的最佳样式<br>css程序：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span>&#123;<br>    <span class="hljs-attribute">color</span>: blue ;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>html引入css样式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./样式.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="css基本语法"><a href="#css基本语法" class="headerlink" title="css基本语法"></a>css基本语法</h3><p>在style标签内部，不属于html，与html隔离，需要遵守CSS的语法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-comment">/* style标签内部,就不归html管理了*/</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="css的注释"><a href="#css的注释" class="headerlink" title="css的注释"></a>css的注释</h4><p>使用&#x2F;*   *&#x2F;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*这是个注释*/</span><br><span class="hljs-selector-tag">p</span><br>&#123;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-comment">/*这是另一个注释*/</span><br>    <span class="hljs-attribute">color</span>:black;<br>    <span class="hljs-attribute">font-family</span>:arial;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>通过选择器选择页面中的元素，比如使用P标签就是选中页面所有P元素。</p><h4 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h4><p>通过声明块来指定要为元素设定的样式，声明块由一个个声明组成，声明是一个名值对结构一个样式对应一个样式值，名和值之间以：连接，以；结束。</p><h3 id="选择器-1"><a href="#选择器-1" class="headerlink" title="选择器"></a>选择器</h3><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>根据标签名来选中指定的元素<br>语法：标签名｛｝<br>例子：P{} h1{}</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br><span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">color</span> :red;<br><br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>根据元素ID来选中指定的元素<br>(ID属性不要以数字开头，数字开头的ID在 Mozilla&#x2F;Firefox 浏览器中不起作用。)<br>语法：  #id属性值｛｝<br>例子：#box｛｝   #red｛｝</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#red</span>&#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="class选择器（类选择器）"><a href="#class选择器（类选择器）" class="headerlink" title="class选择器（类选择器）"></a>class选择器（类选择器）</h4><p>根据class属性来选中指定的元素组<br>class是一个html的标签属性，和ID相似，但是它可以重复。可以同时为一个元素指定多个class元素。<br>可以解决拿ID选择器不好给多个元素指定样式的弊端，<br>可以通过class给元素分组<br>语法：  .class属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>&gt;<br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这是一段文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="统配选择器"><a href="#统配选择器" class="headerlink" title="统配选择器"></a>统配选择器</h4><p>选中页面里所有元素<br>语法：*</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    <span class="hljs-attribute">color</span>:red;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h4><p>交集选择器：<br>作用：选中复合多个条件的元素<br>语法：选择器1选择器2选择器3选择器N｛｝<br>注意点：如果有元素选择器，必须使用元素选择器开头</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是P标签<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>同时选中多个选择器对应的元素<br>语法：选择器1，选择器2，选择器3，选择器N｛｝<br>例子：#bi,h1,p,div{}</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">div</span>，<span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>:red;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是div<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">P</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>这里是P标签<span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h4><h6 id="关系描述"><a href="#关系描述" class="headerlink" title="关系描述"></a>关系描述</h6><p>父元素：<br>        -直接包含子元素的元素叫父元素<br>子元素：<br>        —直接被父元素包含的元素叫子元素<br>祖先元素：<br>        -直接或间接包含后代元素的元素叫祖先元素<br>        -一个元素的父元素也是它的祖先元素<br>后代元素<br>        -直接或间接被祖先元素包含的元素叫后代元素<br>        -一个元素的子元素也是它的后代元素<br>兄弟元素<br>        -拥有相同父元素的元素是兄弟元素</p><h5 id="子元素选择器："><a href="#子元素选择器：" class="headerlink" title="子元素选择器："></a>子元素选择器：</h5><p>选中指定父元素的子元素<br>语法：父元素&gt;子元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">        为div的子元素设置一个字体颜色红色</span></span><br><span class="hljs-comment"><span class="language-css">        子元素选择器：选中指定父元素的子元素</span></span><br><span class="hljs-comment"><span class="language-css">        语法：父元素&gt;子元素</span></span><br><span class="hljs-comment"><span class="language-css">        */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.box</span>&gt;<span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">P</span> &gt;</span><br>            这里是div里的P标签<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是p里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是div里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        这里是div<br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是第一个div外的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="后代元素选择器："><a href="#后代元素选择器：" class="headerlink" title="后代元素选择器："></a>后代元素选择器：</h5><p>选中指定元素的指定后代元素<br>语法：祖先 （空格）后代</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">         后代元素选择器：</span></span><br><span class="hljs-comment"><span class="language-css">         选中指定元素的指定后代元素        </span></span><br><span class="hljs-comment"><span class="language-css">         语法：祖先 （空格）后代</span></span><br><span class="hljs-comment"><span class="language-css">         */</span></span><br><span class="language-css">         <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">             <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">P</span> &gt;</span><br>            这里是div里的P标签<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是p里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是div里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        这里是div<br>        <br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是第一个div外的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="并列标签选择器"><a href="#并列标签选择器" class="headerlink" title="并列标签选择器"></a>并列标签选择器</h5><h6 id="选择下一个兄弟"><a href="#选择下一个兄弟" class="headerlink" title="选择下一个兄弟"></a>选择下一个兄弟</h6><p>语法：前一个+下一个</p><h6 id="选择下方所有的兄弟"><a href="#选择下方所有的兄弟" class="headerlink" title="选择下方所有的兄弟"></a>选择下方所有的兄弟</h6><p>语法：兄~弟<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">          选择下一个兄弟</span></span><br><span class="hljs-comment"><span class="language-css">          语法：前一个+下一个</span></span><br><span class="hljs-comment"><span class="language-css">          */</span></span><br><span class="language-css">          <span class="hljs-selector-tag">p</span>+<span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">              <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">          &#125;</span><br><span class="language-css">          <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">          选择下方所有的兄弟</span></span><br><span class="hljs-comment"><span class="language-css">          语法：兄~弟 </span></span><br><span class="hljs-comment"><span class="language-css">           */</span></span><br><span class="language-css">           <span class="hljs-selector-tag">P</span>~<span class="hljs-selector-tag">span</span>&#123;<span class="hljs-attribute">color</span>: crimson;&#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">P</span> &gt;</span><br>            这里是div里的P标签<br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是p里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">P</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是div里的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        这里是div<br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>这里是第一个div外的span标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>[属性名]选择含有指定属性的元素<br>[属性名&#x3D;属性值]选择含有指定属性值的元素<br>[属性名^&#x3D;属性值]选择属性值以指定属性值开头的元素<br>[属性名$&#x3D;属性值]选择属性值以指定属性值结尾的元素<br>[属性名*&#x3D;属性值]选择属性值含有指定属性值的元素<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名]选择含有指定属性的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名=属性值]选择含有指定属性值的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名^=属性值]选择属性值以指定属性值开头的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名$=属性值]选择属性值以指定属性值结尾的元素</span></span><br><span class="hljs-comment"><span class="language-css">        [属性名*=属性值]选择属性值含有指定属性值的元素</span></span><br><span class="hljs-comment"><span class="language-css">         */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[title]</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[title=abc]</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-attr">[title^=abc]</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: crimson;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abc&quot;</span>&gt;</span>将进酒<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;abcde&quot;</span>&gt;</span>君不见黄河之水天上来，奔流到海不复回 <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;deabc&quot;</span>&gt;</span>君不见高堂明镜悲白发，朝如青丝暮成雪。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>人生得意须尽欢，莫使金樽空对月。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>天生我材必有用，千金散尽还复来。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>伪类：不存在的类，特殊的类。用来描述元素的特殊状态。比如：第一个子元素，被点击的元素，鼠标处在上面的元素。<br>伪类一般以：开头</p><h5 id="常用的伪类选择器"><a href="#常用的伪类选择器" class="headerlink" title="常用的伪类选择器"></a>常用的伪类选择器</h5><p>第一个子元素 ：first-child<br>最后一个子元素：last-child<br>第n个子元素:nth-child(n)<br>n&#x3D;n是选中除第零个元素之外的所有元素<br>n&#x3D;2n或n&#x3D;even表示偶数元素<br>n&#x3D;2n+1或n&#x3D;odd表示奇数元素<br> 以上几个伪类都是根据所有元素的顺序排列的<br>:first-of-type<br>:last-of-type<br>:nth-of-type()<br>这几个和上面三个功能相似，但是是根据同类一元素的顺序进行排列的</p><h5 id="否定伪类选择器"><a href="#否定伪类选择器" class="headerlink" title="否定伪类选择器"></a>否定伪类选择器</h5><p>:not()去除满足条件的元素<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-comment">/* 将ul里第一个li设为红色 */</span></span><br><span class="language-css">        <span class="hljs-comment">/* 第一个子元素 ：first-child*/</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first</span>-child&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: brown;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 最后一个子元素：last-child */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">        第n个子元素:nth-child(n) </span></span><br><span class="hljs-comment"><span class="language-css">        n=n是选中除第零个元素之外的所有元素</span></span><br><span class="hljs-comment"><span class="language-css">        n=2n或n=even表示偶数元素</span></span><br><span class="hljs-comment"><span class="language-css">        n=2n+1或n=odd表示奇数元素        */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 以上几个伪类都是根据所有元素的顺序排列的 */</span></span><br><span class="language-css">        <span class="hljs-selector-pseudo">:first</span>-of-type</span><br><span class="language-css">        <span class="hljs-selector-pseudo">:last-of-type</span></span><br><span class="language-css">        <span class="hljs-selector-pseudo">:nth-of-type</span>()</span><br><span class="language-css">        <span class="hljs-comment">/* 这几个和上面三个功能相似，但是是根据同类一元素的顺序进行排列的 */</span></span><br><span class="language-css">         <span class="hljs-comment">/* 否定伪类选择器 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&gt;<span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:not</span>(<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>))&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: seagreen;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>第一个span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第四个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第五个<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="a元素的伪类（超链接）"><a href="#a元素的伪类（超链接）" class="headerlink" title="a元素的伪类（超链接）"></a>a元素的伪类（超链接）</h5><p>超链接可以分为特殊状态：<br>1.访问过的超链接<br>2.没有访问过的超链接<br>：link 表示没有访问过的链接（正常的链接） （a独有）<br>:visited表示是访问过的链接 （a独有）<br>由于隐私原因，这个伪类只能修改链接的颜色，不能修改其他字体大小等属性<br>：hover表示鼠标移入的状态<br>:active表示鼠标点击</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: seagreen;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* :link表示没访问过的链接 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: sienna;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* :visited表示是访问过的链接 </span></span><br><span class="hljs-comment"><span class="language-css">       由于隐私原因，这个伪类只能修改链接的颜色，不能修改其他字体大小等属性*/</span></span><br><span class="language-css">       <span class="hljs-comment">/* ：hover表示鼠标移入的状态 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: skyblue;</span><br><span class="language-css">           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* :active表示鼠标点击 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: springgreen;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baibu.com&quot;</span>&gt;</span>baidu（访问过）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.baidu123.com&quot;</span>&gt;</span>baidu123（没访问过）<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h4><p>伪元素：不真实存在的元素，特殊的位置的元素。<br>伪元素使用::开头<br>::first-letter表示第一个字母（字符）<br>::first-line表示第一行<br>::selection表示选中的文本</p><p>::before表示元素开始的位置<br>::after表示元素结束的位置<br>     –&gt;必须配合属性content来使用<br>     这两个应用很多，是重点内容<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">P</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* ::first-letter表示第一个字母（字符） */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-letter</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* ::first-line表示第一行 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* p::selection表示选中的文本 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::selection</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: springgreen;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;123&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: tan;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;hh&quot;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello ,how are you.<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h3><p>继承：为一个元素设置的样式会被应用到其后代元素身上<br>继承是发生在祖先和后代元素之间<br>继承是为了方便进行开发<br>并不是所有的样式都会被继承，比如背景，布局等元素。</p><h3 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h3><h4 id="样式的冲突："><a href="#样式的冲突：" class="headerlink" title="样式的冲突："></a>样式的冲突：</h4><p>当我们通过不同选择器，选择相同的元素，并且为其设置不同的样式（不同的值），此时发生样式冲突。<br>发生样式冲突时由选择器权重（优先级）决定。(选择器越具体权重越高)</p><h4 id="选择器的权重值："><a href="#选择器的权重值：" class="headerlink" title="选择器的权重值："></a>选择器的权重值：</h4><p>内联样式          优先级：1000<br>ID选择器          优先级：0100<br>类和伪元素选择器   优先级：0010<br>元素选择器        优先级: 0001<br>统配选择器         优先级：0000<br>继承的样式         没有优先级<br>比较优先级时要将所有选择器的优先级进行相加计算，最后优先级越高，越优先显示。（分组选择器是单独计算的）<br>选择器再累加也不会超过其最大数量级<br>优先级相同，后面的会覆盖前面的。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: red;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.red</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"><span class="hljs-comment">/* 这里会优先变为白色 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">box1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>第一个div <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在样式后面加一个！important，则此时该样式会获取到最高的优先级，甚至超过内联样式。<br>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-tag">div</span>&#123;<br>            <span class="hljs-attribute">color</span>: red <span class="hljs-meta">!important</span>;<br><br>        &#125;<br>        <span class="hljs-selector-class">.red</span>&#123;<br>            <span class="hljs-attribute">color</span>: white;<br>        &#125;<br>&lt;/style&gt;<br><span class="hljs-comment">/* 优先变为红色 */</span><br></code></pre></td></tr></table></figure><h3 id="像素和百分比"><a href="#像素和百分比" class="headerlink" title="像素和百分比"></a>像素和百分比</h3><p>显示器是由一个个小方格组成的<br>不同屏幕的像素的大小是不同的，像素点越小的屏幕越清晰。<br>所以同样的200px在不同 的设备下显示效果不一样。</p><h4 id="像素的单位"><a href="#像素的单位" class="headerlink" title="像素的单位"></a>像素的单位</h4><h5 id="px表示像素："><a href="#px表示像素：" class="headerlink" title="px表示像素："></a>px表示像素：</h5><p>200px  300px</p><h5 id="百分比"><a href="#百分比" class="headerlink" title="百分比"></a>百分比</h5><p>将属性值设置为相对于父元素的百分比<br>例子：<br>后面两个.box2的效果是一样的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: turquoise;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: yellow;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"><span class="hljs-comment">/* 后面两个.box2的效果是一样的 */</span></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="em和rem"><a href="#em和rem" class="headerlink" title="em和rem"></a>em和rem</h4><p>em是相对于自身字体大小大小来计算的<br>1em&#x3D;1font-size(默认为16)<br>rem是相对于根元素（html）字体大小来计算的（移动端用的多）<br> 例：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box3</span>&#123;<br>           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">10em</span>;<br>           <span class="hljs-comment">/* 相当于300px */</span><br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">10em</span>;<br>           <span class="hljs-attribute">background-color</span>: tomato;<br>       &#125;<br></code></pre></td></tr></table></figure></p><h3 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h3><p>在css里可以直接使用颜色来设置各种颜色(不方便）</p><h5 id="RGB值"><a href="#RGB值" class="headerlink" title="RGB值"></a>RGB值</h5><p>RGB通过三种颜色的不同浓度来调配出不同颜色<br>R：red<br>G:green<br>B:blue<br>每一种颜色的范围都在0-255之间<br>语法：RGB（红色，绿色，蓝色）<br>这里是光的三原色：所以都为0时为黑色，都为255为白色</p><h5 id="RGBA"><a href="#RGBA" class="headerlink" title="RGBA"></a>RGBA</h5><p>A:在RGB基础上多一个不透明效果（1不透明——0完全透明）</p><h5 id="十六进制的RGB值"><a href="#十六进制的RGB值" class="headerlink" title="十六进制的RGB值"></a>十六进制的RGB值</h5><p>语法：#红色绿色蓝色<br>颜色浓度：00-ff<br> 如果符号两位两位相同，可以简写：#aabbcc –&gt;#abc</p><h5 id="HSL值和HSLA值"><a href="#HSL值和HSLA值" class="headerlink" title="HSL值和HSLA值"></a>HSL值和HSLA值</h5><p>H：色相（0~360）<br>S：饱和度  颜色浓度（0%——100%）<br>L：亮度    颜色的亮度（0%——100%）<br>A:不透明度<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;style&gt;<br>        <span class="hljs-selector-class">.box</span>&#123;<br>            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;<br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgba</span>(red, green, blue, alpha);     <br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(hue, saturation, lightness); <br>            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsla</span>(hue, saturation, lightness, alpha);     <br>        &#125;<br><br>    &lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="文档流（normal-flow）"><a href="#文档流（normal-flow）" class="headerlink" title="文档流（normal flow）"></a>文档流（normal flow）</h4><p>网页是一个多层结构，一层摞着一层<br>通过css可以分别为每一层来设置样式<br>作为用户来讲只能看见最上面一层(ps图层的概念)<br>这些层中最底下一层称为文档流，文档流是网页的基础，我们创建的元素默认都是在文档流中进行排列的<br>元素有两个状态：在文档流中，和不在文档流中（默认在）</p><h5 id="元素在文档流中的特点"><a href="#元素在文档流中的特点" class="headerlink" title="元素在文档流中的特点"></a>元素在文档流中的特点</h5><h6 id="块元素-1"><a href="#块元素-1" class="headerlink" title="块元素"></a>块元素</h6><p>块元素独占一行（自上向下垂直排列  ）<br>默认宽度是父元素的全部（把父元素盛满）<br>默认高度是被内容撑开（子元素），比如子元素是一行字，那高度默认就是一行字的高度</p><h6 id="行内元素-1"><a href="#行内元素-1" class="headerlink" title="行内元素"></a>行内元素</h6><p>行内元素不独占一行，只占自身大小。<br>行内元素在页面中从左往右水平排列，如果一行之中不能全部容纳，就会自动换行继续自左向右排列<br>行元素的默认宽度和高度都是被内容撑开。</p><h4 id="盒模型-框模型（box-model）"><a href="#盒模型-框模型（box-model）" class="headerlink" title="盒模型 框模型（box model）"></a>盒模型 框模型（box model）</h4><p>css将页面中的所有元素设置为了一个矩形的盒子<br>将元素设置为矩形的盒子后，对页面布局就是将不同的盒子摆放到不同的位置<br>每一个盒子都由以下几个部分组成：</p><h5 id="内容区：（content）"><a href="#内容区：（content）" class="headerlink" title="内容区：（content）"></a>内容区：（content）</h5><p>元素中的所有子元素和文本内容都在内容区中排列，内容区的大小由width和height两个属性设置。<br>width:宽度<br>height：高度</p><h5 id="边框（border）-边框的大小会影响到整个盒子的大小"><a href="#边框（border）-边框的大小会影响到整个盒子的大小" class="headerlink" title="边框（border）:边框的大小会影响到整个盒子的大小"></a>边框（border）:边框的大小会影响到整个盒子的大小</h5><p>设置边框，至少需要设置三个样式、</p><h6 id="边框的宽度：border-width"><a href="#边框的宽度：border-width" class="headerlink" title="边框的宽度：border-width"></a>边框的宽度：border-width</h6><p>可以不写，默认是三个像素。用来指定四个方向边框的宽度。<br>可以这么写（四个值）：border-width：10px 20px 30px 40px;<br>三个值：border-width：10px（上） 20px（左右）  40px（下）;<br>两个值：border-width：10px（上下） 20px（左右）；<br>一个值：border-width：10px（上下左右）;<br>除了border-width还有一组：border-XXX-width，XXX可以是top right bottom left；可以分别指定某一个边的宽度。</p><h6 id="边框的颜色：border-color"><a href="#边框的颜色：border-color" class="headerlink" title="边框的颜色：border-color"></a>边框的颜色：border-color</h6><p>用于指定四个边框的颜色：可以写四个值，三个值……和上面的border-width相似<br>也可以不写，默认为color（字体）的颜色</p><h6 id="边框的样式：border-style"><a href="#边框的样式：border-style" class="headerlink" title="边框的样式：border-style"></a>边框的样式：border-style</h6><p>solid：表示实线<br>dotted:表示点状虚线<br>dashed:虚线<br>double：双实线<br>同样有四个值，同样可以具体指定一个边的样式同border-width<br>border-style的默认值为none(没有边框)</p><h6 id="border的简写"><a href="#border的简写" class="headerlink" title="border的简写"></a>border的简写</h6><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border-width</span>: <span class="hljs-number">10px</span>;<br>           <span class="hljs-attribute">border-color</span>: coral;<br>           <span class="hljs-attribute">border-style</span>: solid;<br></code></pre></td></tr></table></figure><p>可简写为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">border</span>:<span class="hljs-number">10px</span> coral solid;<br></code></pre></td></tr></table></figure><p>这三个值的顺序是可以发生变化的，同样border-XXX也可以这么写三个值。</p><h6 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h6><p>内容和边框的距离，一共有四个方向的内边距<br>padding-top<br>padding-right<br>padding-bottom<br>padding-left<br>内边距的设置会影响盒子的大小，背景颜色会延伸到内边距上。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="language-css">          <span class="hljs-attribute">border</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">200</span>, <span class="hljs-number">206</span>, <span class="hljs-number">117</span>) <span class="hljs-number">10px</span> solid;</span><br><span class="language-css">          <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding-right</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding-bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">          <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">      <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 用box2来显示内容真实大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkcyan;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>内容部分的真实大小<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>一个盒子的可见框大小</strong>：由内容区 内边距 边框共同决定。计算盒子大小时，需要将这三个区域加到一起计算。<br>padding可以简写：<br>padding：20px 30px 40px 50px;(和border的简写相同)</p><h6 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h6><p>外边距不会影响可见框的大小。但是会影响盒子实际占地位置。<br>一共有四个方向的外边距<br>margin-top<br>-上外边距：设置一个正直，元素会向下移动<br>margin-right<br>-右外边距（默认情况下设置它不会有任何效果）<br>margin-bottom<br>-下外边距，设置一个正值，元素会向右移动。<br>margin-left<br>-左外边距：设置一个正值，元素会向右移动</p><p>如果是负值则往相反方向走。<br>元素在页面中是按照自左向右的顺序排列<br>所以默认情况下设置左和上外边距则会移动元素自身，<br>margin-top    margin-left<br>而设置下和右边距会移动其他元素（挤别人）<br>margin-right    margin-bottom</p><p>margin同样可以进行简写，和和border的简写相同<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkturquoise;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: gray <span class="hljs-number">20px</span> solid;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">90</span>, <span class="hljs-number">194</span>, <span class="hljs-number">137</span>);</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">91</span>, <span class="hljs-number">201</span>, <span class="hljs-number">201</span>) <span class="hljs-number">20px</span> solid;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h5><p>元素在其父元素中的水平方向位置由以下几个属性共同决定<br>margin-left<br>border-left<br>padding-left<br>width<br>margin-right<br>border-right<br>padding-right<br><strong>一个元素在其父元素中，水平布局必须要满足以下等式：</strong><br>margin-left+border-left+padding-left+width+margin-right+border-right+padding-right&#x3D;其父元素区的宽度（必须满足）<br><strong>如果没满足就称为过渡约束，浏览器会默认进行调整。</strong></p><p>调整规则：如果这七个值里没有为auto的情况，则浏览器会自动调整margin-right（右外边距）到满足等式<br>这七个值里有三个值可以设置为auto：<br>width<br>margin-left<br>margin-right<br>如果某个值为auto，则浏览器自动调整auto的值以使等式满足。(width的值如果不写，默认就是auto)<br>如果将一个一个宽度和一个外边距设置为auto，则宽度自动最大，设置为auto外边距会自动变为0;<br>如果将三个值都设置为auto，则外边距都是0，宽度最大<br>如果将两个外边距设置为auto，宽度值固定，则两外边会相等：利用这个特点给元素水平居中<br>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.outer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">800px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: lightcoral <span class="hljs-number">10px</span> solid;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.inner</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">73</span>, <span class="hljs-number">126</span>, <span class="hljs-number">59</span>);</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>: auto; </span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: auto;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;outer&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inner&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="盒子垂直方向的布局"><a href="#盒子垂直方向的布局" class="headerlink" title="盒子垂直方向的布局"></a>盒子垂直方向的布局</h5><p>垂直布局比较简单:默认情况下不指定高度父元素的高度会被内容撑开</p><p>子元素是在父元素的内容中排列的<br>如果子元素的大小超过了父元素，则子元素会从父元素中溢出<br>使用overflow来设置父元素如何处理溢出的子元素<br>可选值：<br>visible默认值  会溢出，在父元素外边显示<br>hidden 溢出内容不显示，直接裁剪掉<br>scroll 生成两个滚动条<br>auto   根据需要生成滚动条<br>还可以使用overflow-x 或overflow-y来单独设置x和y 方向的溢出问题</p><h5 id="盒子模型外边距的折叠"><a href="#盒子模型外边距的折叠" class="headerlink" title="盒子模型外边距的折叠"></a>盒子模型外边距的折叠</h5><p>相邻方向垂直外边距会发生重叠现象<br><strong>兄弟元素</strong><br>兄弟元素间的相邻外边距会取两者之间的一个较大值(两者都是正值)<br>特殊情况：相邻的外边距一正一负，取两者的和<br>如果两个外边距都是负值，则取两者中绝对值较大的<br>兄弟元素外边距的重叠对开发是有利的，所以不需要处理<br><strong>父子元素</strong><br>父子元素间相邻外边距，子元素的会传递给父元素（上外边距）<br>父子外边距的折叠会影响到页面的布局，必须要进行处理</p><h5 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h5><p>行内元素不支持设置宽度和大小<br>可以设置padding，但垂直方向不会影响页面的布局<br>可以设置border，但垂直方向不会影响页面的布局。<br>可以设置margin，但垂直方向的margin不影响页面布局</p><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.s1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: coral;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/*行内元素不支持设置宽度和大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 可以设置padding，但垂直方向不会影响页面的布局 */</span></span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cyan;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;s1&#x27;</span>&gt;</span>This is a span <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>超链接是行内元素，如果要设置它的宽高可以使用display属性（少用）<br>        block   –&gt;将元素设置为块元素<br>        inline-block–&gt;将元素设置为行内块元素（既可以设置宽高，有不会独占一行）<br>        table   –&gt;将元素设置为表格<br>        none    –&gt;元素不在页面里显示       </p><p>visibility属性：可以设置元素的可见状态<br>可选值：visible默认值，元素在页面里正常显示<br>       hidden   元素在页面中隐藏不显示，但依然占据位置</p><h5 id="浏览器的默认样式"><a href="#浏览器的默认样式" class="headerlink" title="浏览器的默认样式"></a>浏览器的默认样式</h5><p>通常情况下，浏览器会为元素设置一些默认样式<br>默认样式会影响到页面的布局，通常情况下编写网页必须要去除浏览器的默认样式（pc端页面）<br>可以具体针对元素进行设置：<br>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> black;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">       </span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">p</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 去除p标签之间的外边距 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-comment">/* 去除项目符号 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但简单考虑：一般写为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">*&#123;<br>    margin:0;<br>    padding:0;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法不够完美，可能去除不干净，所以要把所有的标签都看一遍，都重置一遍，这时候可以引入一个完整的重置样式表的外部CSS文件<br>重置样式表网上很多，现成且可用</p><h5 id="盒子的大小"><a href="#盒子的大小" class="headerlink" title="盒子的大小"></a>盒子的大小</h5><p> 默认情况下，盒子可见框的大小由内容区，内边距和边框共同决定<br>box-sizing: content-box;<br>box-sizing用于设置盒子尺寸的计算方式（width，height的作用）<br>可选值：<br>content-box  默认值，宽度和高度用来设置内容区的大小<br>border-box  宽度，高度用来设置盒子可见框的大小。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#bfc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red solid;</span><br><span class="language-css">            <span class="hljs-comment">/* 默认情况下，盒子可见框的大小由内容区，内边距和边框共同决定 */</span></span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: content-box;</span><br><span class="language-css">            <span class="hljs-comment">/* </span></span><br><span class="hljs-comment"><span class="language-css">            box-sizing用于设置盒子尺寸的计算方式（width，height的作用）</span></span><br><span class="hljs-comment"><span class="language-css">            可选值：</span></span><br><span class="hljs-comment"><span class="language-css">            content-box  默认值，宽度和高度用来设置内容区的大小</span></span><br><span class="hljs-comment"><span class="language-css">            border-box  宽度，高度用来设置盒子可见框的大小。</span></span><br><span class="hljs-comment"><span class="language-css">             */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="轮廓阴影和圆角"><a href="#轮廓阴影和圆角" class="headerlink" title="轮廓阴影和圆角"></a>轮廓阴影和圆角</h5><p>outline用来设置元素的轮廓线，用法和border一样，和边框不同，轮廓不会影响到可见框的大小<br>box-shadow用来设置元素的阴影效果，阴影不会影响页面布局<br>            第一个值：水平偏移量  正值阴影朝右偏移<br>            第二个值：垂直偏移量  正值阴影朝下偏移<br>            第三个值：阴影的模糊半径<br>            第四个值：颜色<br>border-radius用来设置圆角，值为圆角半径大小<br>             border-radius可以分别指定四个角的圆角<br>             四个值：左上 右上 右下 右上<br>             三个值：左上 右上&#x2F;左下 右下<br>             两个值：左上&#x2F;右下 右上&#x2F;左下<br>            还有单独写法<br>            border-top-left-radius:<br>            左上角<br>            border-top-right-radius:<br>            右上角<br>            border-bottom-left-radius:<br>            左下角<br>            border-bottom-right-radius:<br>            右下角<br>            将元素设置为圆形：可以这样写：<br>            border-radius：50%;<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">10px</span> red solid;</span><br><span class="language-css">            <span class="hljs-attribute">outline</span>: solid <span class="hljs-number">10px</span> solid</span><br><span class="language-css">            <span class="hljs-comment">/* outline用来设置元素的轮廓线，用法和border一样，和边框不同，轮廓不会影响到可见框的大小 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-number">10px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<span class="hljs-number">0.4</span>);</span><br><span class="language-css">            <span class="hljs-comment">/*box-shadow用来设置元素的阴影效果，阴影不会影响页面布局</span></span><br><span class="hljs-comment"><span class="language-css">              */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: silver;</span><br><span class="language-css">            <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h4><h5 id="浮动的介绍"><a href="#浮动的介绍" class="headerlink" title="浮动的介绍"></a>浮动的介绍</h5><p>CSS 的 Float（浮动），会使元素向其父元素左或向右移动，其周围的元素也会重新排列。<br>使用float:属性来设置元素的浮动<br>可选值：<br>none：默认值，不浮动。<br>left：元素向左浮动<br>right：元素向右浮动<br>元素设置浮动后，元素水平方向布局的等式便不需要强制成立<br>元素设置浮动后，会完全从文档流中脱离，不在占用文档流的位置，所以元素下边的还在文档流中的元素会自动向上移动。<br>浮动特点：<br>1.元素设置浮动后，会完全从文档流中脱离<br>2.元素设置浮动后，会使元素向其父元素左或向右移动<br>3.浮动元素，默认不会从父元素中移出<br>4.一个浮动元素会尽量向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止，不会盖住其他浮动元素。<br>5.如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移<br>6.浮动元素不会超过它前一个浮动的兄弟元素，最多最多就是和他一样高。</p><p>浮动的主要作用是让页面中的元素可以水平排列<br>通过浮动可以制作一些水平方向的布局</p><h5 id="浮动的其他特点："><a href="#浮动的其他特点：" class="headerlink" title="浮动的其他特点："></a>浮动的其他特点：</h5><p>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以可以利用浮动来设置文字环绕图片的效果<br>语速设置浮动，从文档流中脱离，元素的一些特点也会发生改变</p><p>元素脱离文档流的特点：<br>块元素<br>1.块元素不会独占页面的一行<br>2.脱离文档流，块元素的宽度和高度都会被内容撑开<br>行内元素<br>行内文档脱离文档流以后会变为块元素，特点和块元素一样<br>脱离文档流以后，就不需要区分行内和块元素了</p><h4 id="网页的布局"><a href="#网页的布局" class="headerlink" title="网页的布局"></a>网页的布局</h4><p>header网页头部<br>main网页主体<br>footer网页的底部<br>布局示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网页的布局<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">         *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">header</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">main</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">700px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">160</span>, <span class="hljs-number">32</span>, <span class="hljs-number">28</span>);</span><br><span class="language-css">            </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">nav</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">article</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">580px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkgoldenrod;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">aside</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkkhaki;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">footer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1000px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">112</span>, <span class="hljs-number">89</span>, <span class="hljs-number">72</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 网站的头部 --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 网站的主体 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 左边导航栏 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 中间内容 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- 右边侧栏 --&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="高度塌陷问题"><a href="#高度塌陷问题" class="headerlink" title="高度塌陷问题"></a>高度塌陷问题</h4><p>在浮动布局里，父元素的高度是默认被子元素撑开的，<br>当子元素浮动后，会完全脱离文档流，子元素从文档流中脱离<br>将会无法撑起父元素的高度，导致父元素的高度丢失<br>父元素的高度塌陷后其下的元素会自动上移，导致页面布局混乱<br>所以高度塌陷是浮动布局中一个比较常见的问题这个问题必须进行处理</p><h5 id="BFC（块级格式化环境）"><a href="#BFC（块级格式化环境）" class="headerlink" title="BFC（块级格式化环境）"></a>BFC（块级格式化环境）</h5><p>bfc是一个css中的一个隐含的属性，可以为一个元素开启BFC<br>开启BFC该元素会变成一个独立的布局区域<br>元素开启BFC后的特点<br>1.开启BFC的元素不会被浮动元素覆盖<br>2.开启BFC的元素子元素和父元素的外边距不会重叠<br>3.开启BFC的元素可以包含浮动的子元素<br>可以通过一些特殊的方式开启BFC<br>1.设置元素的浮动（不推荐）<br>2.将元素设置为行内块元素（不推荐）<br>3.将元素的overflow设置为非visible的值<br>    常用方式：为元素设置overflow：hidden  开启BFC</p><h5 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h5><p>如果不希望某个元素因为其他浮动元素的影响改变位置，可以通过clear属性清除浮动元素的当前元素所产生的影响<br>clear：清除浮动元素对当前元素的影响<br>可选值：<br>left：清除左侧浮动元素对当前元素的影响<br>right：清除右侧浮动元素对当前元素的影响<br>both:清除两侧影响最大的那侧<br>原理：设置清除浮动后，浏览器会自动为元素设置一个上外边距，以使其位置不受其他元素的影响</p><h5 id="使用after伪类来解决高度塌陷问题"><a href="#使用after伪类来解决高度塌陷问题" class="headerlink" title="使用after伪类来解决高度塌陷问题"></a>使用after伪类来解决高度塌陷问题</h5><p>最好用的方法<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: chocolate <span class="hljs-number">10px</span> solid;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: block;</span><br><span class="language-css">            <span class="hljs-comment">/* 转换为块元素 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>       <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="clearfix"><a href="#clearfix" class="headerlink" title="clearfix"></a>clearfix</h5><p>最终解决方案：clearfix<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornflowerblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkorange;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* clearfix这个样式可以同时解决高度塌陷和外边距重叠的问题 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::before</span>,<span class="hljs-selector-class">.clearfix</span><span class="hljs-selector-pseudo">::after</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: table;</span><br><span class="language-css">            <span class="hljs-attribute">clear</span>: both;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1 clearfix&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h4><h5 id="定位的介绍"><a href="#定位的介绍" class="headerlink" title="定位的介绍"></a>定位的介绍</h5><p>定位是一种更加高级的布局手段<br>通过定位可以将元素放到页面的任何位置<br>使用position属性来设置定位<br>    可选值：static       默认值，元素是静止的没有开启定位<br>           relative     开启元素的相对定位<br>           absolute     开启元素的绝对定位<br>           fixed        开启元素的固定定位<br>           sticky       开启元素的粘滞定位</p><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><p>将position属性设置为relative时则开启相对定位</p><p>相对定位特点：<br>        1.如果元素开启相对定位后，如果不设置偏移量则元素不会发生任何的变化<br>        2.相对定位是参照于元素在文档流中的位置进行定位的<br>        3.相对定位会提高元素的层级<br>        4.相对定位不会脱离文档流</p><p>偏移量（offset）<br>    垂直方向：通常情况下使用一种<br>        top：定位元素和定位位置上边的距离。<br>        bottom：定位元素定位位置上边的距离。<br>    水平方向：<br>        lift：定位元素和定位位置左边的距离。<br>        right：定位元素和定位位置右边的距离。<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">95</span>, <span class="hljs-number">160</span>, <span class="hljs-number">106</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>:<span class="hljs-number">200px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">214</span>, <span class="hljs-number">109</span>, <span class="hljs-number">61</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><p>将position属性设置为absolute时则开启绝对定位<br>绝对定位特点：<br>        1.如果元素开启绝对定位后，如果不设置偏移量则元素位置不会发生变化<br>        2.绝对定位会脱离文档流<br>        3.绝对定位会改变元素的性质，行内变成块，块的宽高被元素撑开<br>        4.绝对定位会使元素提示一个层级<br>        5.是相对于其包含块进行定位的<br>        包含块：（containing block）<br>            正常情况下：<br>                包含块就是当前元素最近的祖先块元素<br>            绝对定位的包含块：<br>            包含块就是离他最近的开启了定位的祖先元素，如果所有祖先元素都没有开启定位，则根元素就是它的包含块。<br>            html（根元素  ，初始包含块）</p><p>偏移量（offset）<br>    垂直方向：通常情况下使用一种<br>        top：定位元素和定位位置上边的距离。<br>        bottom：定位元素定位位置上边的距离。<br>    水平方向：<br>        lift：定位元素和定位位置左边的距离。<br>        right：定位元素和定位位置右边的距离。</p><p>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.box2</span>&#123;<br>           <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>           <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">95</span>, <span class="hljs-number">160</span>, <span class="hljs-number">106</span>);<br>           <span class="hljs-attribute">position</span>: absolute;<br>           <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;<br>           <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;<br></code></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><p>（网页固定广告，导航栏等）<br>将position属性设置为fixed时则开启绝对定位<br>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样<br>唯一不同是固定定位永远参照浏览器的视口进行定位</p><h5 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h5><p>(兼容性不好)<br>将position属性设置为sticky时则开启粘滞定位<br>粘滞定位和相对定位的特点基本一致<br>粘滞定位和相对定位可以在元素到达某个位置时将其固定</p><h5 id="绝对定位元素的位置"><a href="#绝对定位元素的位置" class="headerlink" title="绝对定位元素的位置"></a>绝对定位元素的位置</h5><p>开启绝对定位以后：<br>水平方向的布局等式就需要添加left和right两个值<br>        lift+margin-left+border-left+padding-left+width+margin-right+border-right+padding-right+right&#x3D;其父元素区的宽度（必须满足）<br>        和以前一样只是多了两个值<br>        发生过度约束时，没有auto时，则自动调整right值以使等式满足。<br>        如果有auto，则自动调整auto的值以使等式满足<br>        可设置auto的值：<br>            margin width left right<br>            left right 默认为auto，等式不满足优先调整这两个值<br>这样可以写水平方向的居中：（在包含块里居中）<br>        left:0;<br>        right:0;<br>        margin-right:auto;<br>        margin-lift:auto;</p><p>垂直方向的等式也必须要满足：<br>        top+margin-top&#x2F;bottom+padding-top&#x2F;bottom+border-top&#x2F;bottom+bottom&#x3D;父元素高度<br>        同样auto的值会自动调整<br>这样可以写垂直方向的居中：（在包含块里居中）<br>        margin-top:auto;<br>        margin-bottom:auto;<br>        top:0;<br>        bottom:0;<br>例子：水平垂直居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">500px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: chocolate;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">right</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-left</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>:auto;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h4><p>对于开启了定位的元素，可以通过z-index属性来指定元素的层级<br>    z-index需要一个整数做参数，数值越大元素的层级越高<br>        元素的层级越优先显示<br>    没有参数（参数相同）优先显示结构里最下面的元素。<br>祖先元素的层级再高，也不会遮盖住后代元素<br>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">209</span>, <span class="hljs-number">196</span>, <span class="hljs-number">73</span>, <span class="hljs-number">0.5</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">50px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box3</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">214</span>, <span class="hljs-number">109</span>, <span class="hljs-number">61</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">top</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box4</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">88</span>, <span class="hljs-number">76</span>, <span class="hljs-number">70</span>);</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">100</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box3&quot;</span>&gt;</span>3<br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box4&quot;</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="font"><a href="#font" class="headerlink" title="font"></a>font</h4><h5 id="字体相关样式："><a href="#字体相关样式：" class="headerlink" title="字体相关样式："></a>字体相关样式：</h5><p>color  用来设置字体颜色<br>font-size  用来设置字体大小<br>    font-size相关单位：<br>        em相对于当前元素的一个font-size<br>        rem相当于根元素的一个font-size<br>font-family字体族（字体的格式）<br>        可选值： serif（衬线字体）<br>                sans-serif（非衬线字体）<br>                monospace（等宽字体）<br>                    指定字体的类别，可以指定多种字体，使用，隔开，浏览器会自己按顺序选择其中电脑上有的字体显示<br>font-face可以将服务器中的字体直接提供给用户去使用 问题：1.加载可能比较慢  2.版权<br>例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span> &#123;<br>           <span class="hljs-attribute">font-family</span>:这是字体名字;<br>           <span class="hljs-comment">/*   font-family 字体名字 */</span><br>           <span class="hljs-attribute">src</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">路径</span>) format（<span class="hljs-string">&quot;格式声明&quot;</span>）;<br>           <span class="hljs-comment">/* 服务器上字体的路径 */</span><br></code></pre></td></tr></table></figure><h5 id="图标字体"><a href="#图标字体" class="headerlink" title="图标字体"></a>图标字体</h5><pre><code class="hljs">网页里经常使用一些图标，可以通过图片来引入图标但是图片大小本身太大，并且非常不灵活-所以在使用图标时，我们可以将图标直接设置为字体然后通过font-size的形式来引入这样我们就可以通过字体的形式来使用图标Font Awesome：    免费的字体图标库https://fontawesome.com/    下载解压后    将css文件和webfonts移动到项目中（这两必须在同一级目录）    将CSS文件引入到网页中    使用图标字体：        直接通过使用类名来使用图标字体（通常使用i标签来表示字体图标）    其他用法，可以通过伪元素来设置字体图标：    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"> li::before&#123;<br>    content: &#x27;\f1b0&#x27;;<br>    font-family: &#x27;Font Awesome 5 Free&#x27;;<br>    font-weight: 900;<br>&#125;<br></code></pre></td></tr></table></figure>    也可以通过实体来引入符号    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;fas&quot;</span>&gt;</span> <span class="hljs-symbol">&amp;#xf0f3;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure></code></pre><h5 id="行高（line-height）"><a href="#行高（line-height）" class="headerlink" title="行高（line height）"></a>行高（line height）</h5><p>行高是文字占有的实际的高度<br>可以通过line height设置行高<br>    行高可以指定大小（px em），也可以为行高设置一个整数,行高会是字体大小的指定倍数（默认行高1.33）</p><p>字体框：字体框就是字体存在的格子，设置font-size就是在设置字体框的高度</p><p>行高会在字体框里平均分配<br>    可以将行高设置为与元素高度一样，使得单行文字在元素中垂直居中<br>    行高还可以用来设置文字的行间距<br>        行间距&#x3D;行高-字体的大小</p><h5 id="字体的简写属性"><a href="#字体的简写属性" class="headerlink" title="字体的简写属性"></a>字体的简写属性</h5><p>font可以设置字体相关的所有属性<br>    格式：<br>        font：字体大小&#x2F;行高  字体族<br>        行高可以省略。不写则使用默认值</p><p>font-weight  字重  字体的加粗<br>    可选值：normal 默认值<br>            bold  加粗<br>            100-900（九个级别，没啥用）<br>font-style：  字体样式<br>    可选值：normal 正常的<br>           italic 斜体</p><h5 id="文本的样式"><a href="#文本的样式" class="headerlink" title="文本的样式"></a>文本的样式</h5><p>text-align  文本的水平对齐<br>    可选值:<br>            left 左侧对齐<br>            right 右对齐<br>            center 居中对齐<br>            justify两端对齐</p><p>vertical-align：元素的垂直对齐<br>    可选值：<br>            baseline(基线对齐)<br>            top    顶部对齐<br>            bottom  底部对齐<br>            center  居中对齐</p><p>text-decoration可以用来设置文本的修饰<br>    可选值：<br>        none：默认值，不添加任何修饰，正常显示<br>        underline 为文本添加下划线<br>        overline 为文本添加上划线<br>        line-through 为文本添加删除线</p><p>white-space:设置网页如何处理空白<br>    可选值：<br>        normal  正常<br>        nowrap  不换行<br>        pre 保留空白</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>设置背景样式</p><h5 id="设置背景颜色："><a href="#设置背景颜色：" class="headerlink" title="设置背景颜色："></a>设置背景颜色：</h5><p>background-color: #bfa;</p><h5 id="设置背景图片："><a href="#设置背景图片：" class="headerlink" title="设置背景图片："></a>设置背景图片：</h5><p>使用background-image来设置背景图片<br>    - 语法：background-image:url(相对路径);<br>    - 如果背景图片大于元素，默认会显示图片的左上角<br>    - 如果背景图片和元素一样大，则会将背景图片全部显示<br>    - 如果背景图片小于元素大小，则会默认将背景图片平铺以充满元素<br>background-image:url(img&#x2F;1.png);<br>可以同时为一个元素指定背景颜色和背景图片，<br>这样背景颜色将会作为背景图片的底色<br>一般情况下设置背景图片时都会同时指定一个背景颜色</p><h5 id="设置背景图片的重复方式"><a href="#设置背景图片的重复方式" class="headerlink" title="设置背景图片的重复方式"></a>设置背景图片的重复方式</h5><p>background-repeat用于设置背景图片的重复方式<br>可选值：<br>    repeat，默认值，背景图片会双方向重复（平铺）<br>    no-repeat ，背景图片不会重复，有多大就显示多大<br>    repeat-x， 背景图片沿水平方向重复<br>    repeat-y， 背景图片沿垂直方向重复</p><h5 id="设置背景图片的位置"><a href="#设置背景图片的位置" class="headerlink" title="设置背景图片的位置"></a>设置背景图片的位置</h5><p>background-position 用来设置背景图片的位置<br>设置方式：<br>        通过top bottom left right center几个方位来设置图片的位置<br>例子：background-position： bottom left;（至少两个值）</p><p>也可以直接指定两个偏移量，<br>第一个值是水平偏移量<br>    - 如果指定的是一个正值，则图片会向右移动指定的像素<br>    - 如果指定的是一个负值，则图片会向左移动指定的像素<br>第二个是垂直偏移量<br>    - 如果指定的是一个正值，则图片会向下移动指定的像素<br>    - 如果指定的是一个负值，则图片会向上移动指定的像素<br>例子：background-position: -80px -40px;</p><h5 id="设置背景的范围"><a href="#设置背景的范围" class="headerlink" title="设置背景的范围"></a>设置背景的范围</h5><p>background-clip用于设置背景的范围<br>可选值： border-box  默认值，背景会出现在边框的下边<br>        padding-box 背景不会出现在边框，只出现在内容区和内边距<br>        content-box 背景只会出现在内容区<br>background-origin 背景图片的偏移量计算的原点<br>        padding-box  默认值background-position从内边距开始算<br>        content-box  background-position从内容区开始算<br>        border-box   background-position从边框开始算</p><h5 id="背景图片的尺寸"><a href="#背景图片的尺寸" class="headerlink" title="背景图片的尺寸"></a>背景图片的尺寸</h5><p>background-size来设置背景图片的尺寸<br>第一个值表示宽度<br>第二个值表示高度<br>-如果只写一个，则第二个默认为auto</p><p>写cover可以让图片比例不变，将元素铺满<br>contain图片比例不变，将图片在元素中完整显示</p><h5 id="背景图片的滚动"><a href="#背景图片的滚动" class="headerlink" title="背景图片的滚动"></a>背景图片的滚动</h5><p>background-attachment用来设置背景图片是否随页面一起滚动（很少用）<br>         可选值：<br>             scroll，默认值，背景图片随着窗口滚动<br>              fixed，背景图片会固定在某一位置，不随页面滚动</p><p> 不随窗口滚动的图片，我们一般都是设置给body，而不设置给其他元素</p><h5 id="背景属性的简写"><a href="#背景属性的简写" class="headerlink" title="背景属性的简写"></a>背景属性的简写</h5><p>  background(还是不简写的好，具体查文档)<br>      - 通过该属性可以同时设置所有背景相关的样式<br>      - 没有顺序的要求，谁在前睡在后都行<br>         也没有数量的要求，不写的样式就使用默认值<br>例子：<br>background: #bfa url(img&#x2F;3.png) center center no-repeat fixed;</p><h5 id="雪碧图"><a href="#雪碧图" class="headerlink" title="雪碧图"></a>雪碧图</h5><p>为了解决图片闪烁和加载问题<br>    可以将多个小图片统一保存到一个大图片中，然后通过调整background-position来调整显示位置<br>    这样图片可以同时加载到网页中，可以有效避免出现闪烁问题<br>    这个技术在网页运用十分广泛，称为CSS-sprite（现在在减少使用）<br>    使用：<br>    1.确定要使用的图标<br>    2.测量图标大小<br>    3.根据测量创建元素<br>    4.将图设置为元素的背景图片<br>    5.设置偏移量以显示对应图标</p><pre><code class="hljs">特点：一次性加载多个图片，减少服务器请求，加快访问速度</code></pre><h5 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h5><p>通过渐变可以设置一些复杂的背景颜色，可以实现一个颜色向其他颜色过渡的效果<br>    渐变是图片，需要使用background-image来设置<br>    （用法太多了）<br>线性渐变<br>   background-image: linear-gradient(to left ,red,yellow);<br>   三个值是渐变方向，开头颜色 ，结尾颜色<br>  （也可以同时指定多个颜色，多个颜色默认情况下平均分配）<br>径向渐变<br>    background-image: radial-gradient(red,yellow);<br>    从中间向西周散射，默认情况下，径向渐变的形状由元素形状决定<br>    可以手动指定方向：<br>        circle  正圆<br>        ellipse 椭圆</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><h4 id="01-图片列表"><a href="#01-图片列表" class="headerlink" title="01.图片列表"></a>01.图片列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>图片列表练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#352929</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#f4f4f4</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">626px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置ul的大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-comment">/* 居中 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">img</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置图片大小 */</span></span><br><span class="language-css">        &#125;     </span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://prodev.jd.com/mall/active/24qWmGEbiPnPYxZzEfMj6ktgWxxR/index.html?babelChannel=ttt13&amp;extension_id=eyJhZCI6IiIsImNoIjoiIiwic2hvcCI6IiIsInNrdSI6IiIsInRzIjoiIiwidW5pcWlkIjoie1wiY2xpY2tfaWRcIjpcIjEwMWQ0ZDE5LTRkZjMtNGFmMC1hMTdhLTc1MDVjOWM2ZTI1NFwiLFwibWF0ZXJpYWxfaWRcIjpcIjU1MDczOTM4NjlcIixcInBvc19pZFwiOlwiNDI3M1wiLFwic2lkXCI6XCJiNjZkMjQ2NC0yNDJhLTRiMTYtYjNmNS1hYmU4MmViYmJkMDlcIn0ifQ==&amp;jd_pop=101d4d19-4df3-4af0-a17a-7505c9c6e254&amp;abt=1&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/02.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>  <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pro.jd.com/mall/active/3uFvKuAQdDK1Npokcjv8tUj8tsmd/index.html?innerAnchor=100014348492&amp;focus=4&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/q (1).jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span> &gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://pro.jd.com/mall/active/N9112CZB4v7aGVL7TKnmRQkevNY/index.html?innerAnchor=100014794825&amp;focus=4&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/q (2).jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://channel-m.jd.com/pc/psp/100010264815?imup=CgYKABIAGAASHAjvkc7I9AIQoZPw3AMaCGN6eW13bGtqILMJKAEYsBsgACombWl4dGFnX2ksdWEseGdhLGdpYSxjaWUsZl9iYV9mbF9sMTYzMzIyCG1peHRhZ19pSqwBSXxNSVhUQUdfSVIsSV9BX0ZMX1IsSV9BX1JFX0xDLElfQV9QTF9MQyxJX0FfU0xfUixJX0FfQ1NfUixJX1VfRkxfTDE2NjI5LElfU19GTF9SLElfUl9GTF9SLElfUF9GTF9MMTYzNzIsSV9HX1hHX1IsSV9HX1JMX0xDLElfQl9GTF9SLEdJQSxYR0EsVUJ8O0Z8TUlYVEFHX0ZSLEZfQkFfRkxfTDE2MzMyfA&amp;extension_id=eyJhZCI6IjM1MDQiLCJjaCI6IjIiLCJza3UiOiIxMDAwMTAyNjQ4MTUiLCJ0cyI6IjE2NDA2ODg3NDIiLCJ1bmlxaWQiOiJ7XCJjbGlja19pZFwiOlwiNGJjMzU2NWItNTJlNy00YjhkLTllN2MtOWMxNWQzY2FhMTQ2XCIsXCJtYXRlcmlhbF9pZFwiOlwiODA4NzQ1MDcwMzA2NzE5MTQ3OFwiLFwicG9zX2lkXCI6XCIzNTA0XCIsXCJzaWRcIjpcIjZlYWQwZTM0LTk5NjYtNDY1Yy1iOTNlLWEwYzUzODA1MzVjNlwifSJ9&amp;jd_pop=4bc3565b-52e7-4b8d-9e7c-9c15d3caa146&amp;abt=0&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/q.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;300&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="02-京东左侧导航条"><a href="#02-京东左侧导航条" class="headerlink" title="02.京东左侧导航条"></a>02.京东左侧导航条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>京东导航条<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">body</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cadetblue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>:<span class="hljs-number">#f4f4f4</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">190px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">450px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置ul的大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-comment">/* 居中 */</span></span><br><span class="language-css">           </span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: cornsilk;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置li大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置右内边距 */</span></span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">25px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 文字在一行内垂直居中：想让文字在父元素垂直居中，把父元素的 line-height和height设置为同样的值便可。 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 鼠标移入背景变色 */</span></span><br><span class="language-css">        <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#d9d9d9</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-comment">/* 超链接样式 */</span></span><br><span class="language-css">       <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;</span><br><span class="language-css">           <span class="hljs-comment">/* 字体颜色 */</span></span><br><span class="language-css">           <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">           <span class="hljs-comment">/* 去除下划线 */</span></span><br><span class="language-css">           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">           <span class="hljs-comment">/* 字体大小 */</span></span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: <span class="hljs-number">#c81623</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">           <span class="hljs-attribute">padding</span>: <span class="hljs-number">0px</span> <span class="hljs-number">2px</span>;</span><br><span class="language-css">           <span class="hljs-comment">/* 为斜杠设置样式 */</span></span><br><span class="language-css">       &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://jiadian.jd.com/&quot;</span>&gt;</span>家用电器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://shouji.jd.com/&quot;</span>&gt;</span>手机<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://wt.jd.com/&quot;</span>&gt;</span>运营商<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://shuma.jd.com/&quot;</span>&gt;</span>数码<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://diannao.jd.com/&quot;</span>&gt;</span>电脑<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://bg.jd.com/&quot;</span>&gt;</span>办公<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://list.jd.com/list.html?cat=1620&quot;</span>&gt;</span>家居<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://channel.jd.com/furniture.html&quot;</span>&gt;</span>家具<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://list.jd.com/list.html?cat=9855&quot;</span>&gt;</span>家装<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>/ <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://channel.jd.com/kitchenware.html&quot;</span>&gt;</span>厨具<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>男装<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>女装<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>童装<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>内衣<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>美妆<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>个护清洁<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>宠物<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>女鞋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>箱包<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>钟表<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>珠宝<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>男鞋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>运动<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>户外<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>房产<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>汽车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>汽车用品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>母婴<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>玩具乐器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>     <br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>食品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>酒类<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>生鲜<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>特产<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>艺术<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>礼品礼花<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>农贸绿植<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>医药保健<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>计生情趣<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>图书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>文娱<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>电纸书<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>机票<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>酒店<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>旅游<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>生活<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>男鞋<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>运动<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>户外<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>房产<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>汽车<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>汽车用品<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>母婴<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>玩具乐器<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>   <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="网易新闻列表"><a href="#网易新闻列表" class="headerlink" title="网易新闻列表"></a>网易新闻列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>网易新闻列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-wrapper</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">357px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置大小 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span> auto;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置居中 */</span></span><br><span class="language-css">            <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ddd</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 设置上边框 */</span></span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-title1</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">border-top</span>: <span class="hljs-number">1px</span> solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-css">            <span class="hljs-comment">/* 设置上边框 */</span></span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">1px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-title1</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#404068</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-img</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">157px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-img</span> <span class="hljs-selector-class">.img-title2</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>);</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: -<span class="hljs-number">30px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-list</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-list</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin-bottom</span>:<span class="hljs-number">17px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">::before</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;●&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">131</span>, <span class="hljs-number">122</span>, <span class="hljs-number">122</span>);</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.news-list</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">           <span class="hljs-attribute">color</span>: <span class="hljs-number">#c81623</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css">       <span class="hljs-selector-class">.news-title1</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">color</span>: <span class="hljs-number">#c81623</span>;</span><br><span class="language-css">       &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news-wrapper&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h3</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; news-title1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://sports.163.com/&quot;</span>&gt;</span>体育<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news-img&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.163.com/sports/article/GSB383Q500058782.html&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/下载.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">h4</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-title2&quot;</span>&gt;</span>俄副总理硬核批NHL退出北京冬奥<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;news-list&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.163.com/sports/article/GSCDH9BN0005877U.html&quot;</span>&gt;</span>疑点重重！460万美元的球星卡是假货？<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.163.com/sports/article/GSCE1CJF00058780.html&quot;</span>&gt;</span>他起步不如李铁 深耕15年成国内第1人<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.163.com/sports/article/GSA9TQVH0005877U.html&quot;</span>&gt;</span>超神奇剧本！莫兰特1打4超强滞空绝杀太阳<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.163.com/sports/article/GS79EGFD00059A7T.html&quot;</span>&gt;</span>4078天！汪峰唱了一首歌给中超之王<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="导航条练习"><a href="#导航条练习" class="headerlink" title="导航条练习"></a>导航条练习</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>导航条练习<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="language-css">            <span class="hljs-comment">/* 导航条大小颜色 */</span></span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">1197px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;             </span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;   </span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#E8E7E3</span>;    </span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="language-css">            </span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">48px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">line-height</span>: <span class="hljs-number">48px</span>;</span><br><span class="language-css">            <span class="hljs-comment">/* 垂直居中 */</span></span><br><span class="language-css">            <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">            <span class="hljs-comment">/* 浮动 */</span></span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: inline-block;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-number">#777</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">39px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.box1</span> <span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">245</span>, <span class="hljs-number">245</span>, <span class="hljs-number">241</span>);</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">110</span>, <span class="hljs-number">110</span>, <span class="hljs-number">105</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a1&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.w3school.com.cn/h.asp&quot;</span>&gt;</span>HTML/CSS<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a2&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Browser Side<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a3&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Serve Side<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a4&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Programming<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a5&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>XML<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a6&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Wed Building<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;a7&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span>Reference<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="京东轮播图（静态）"><a href="#京东轮播图（静态）" class="headerlink" title="京东轮播图（静态）"></a>京东轮播图（静态）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>京东轮播图<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        *&#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-list</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">590px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">height</span>: <span class="hljs-number">470px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: relative;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.img-list</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 通过修改元素层级来显示指定的图片 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.img-list</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)&#123;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">3</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-comment">/* 设置导航点的样式 */</span></span><br><span class="language-css">        <span class="hljs-selector-class">.pointer</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;</span><br><span class="language-css">            <span class="hljs-attribute">bottom</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">left</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.pointer</span> <span class="hljs-selector-tag">a</span>&#123;</span><br><span class="language-css">             <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">             <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;</span><br><span class="language-css">             <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>,.<span class="hljs-number">6</span>);</span><br><span class="language-css">             <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">             <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;</span><br><span class="language-css">             <span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span> <span class="hljs-number">4px</span>;</span><br><span class="language-css">             <span class="hljs-comment">/* 设置圆形 */</span></span><br><span class="language-css">             <span class="hljs-attribute">background-clip</span>: content-box;</span><br><span class="language-css">             <span class="hljs-attribute">border</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">160</span>, <span class="hljs-number">141</span>, <span class="hljs-number">141</span>,<span class="hljs-number">0</span>) <span class="hljs-number">2px</span> solid;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">         <span class="hljs-selector-class">.pointer</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.active</span>&#123;</span><br><span class="language-css">             <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fff</span>;</span><br><span class="language-css">             <span class="hljs-attribute">border</span>: darkgray <span class="hljs-number">2px</span> solid;</span><br><span class="language-css">         &#125;</span><br><span class="language-css">        <span class="hljs-selector-class">.pointer</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: darkgray;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;img-list&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图1.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图2.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图3.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图4.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图5.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图6.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./素材/img/05/轮播图7.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;pointer&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;active&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>计算机前端</category>
      
      <category>HTML+CSS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML+CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(4.序列)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/4.%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%20%E5%BA%8F%E5%88%97/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/4.%E7%AC%AC%E5%9B%9B%E9%83%A8%E5%88%86%20%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="第四部分-序列"><a href="#第四部分-序列" class="headerlink" title="第四部分 序列"></a>第四部分 序列</h2><h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h3><p>列表是Python中的一个对象<br>对象（object）就是内存中专门用来存储数据的一块区域，之前我们学习的对象，像数值，它只能保存一个单一的数据<br>列表中可以保存多个有序的数据，列表是用来存储对象的对象<br>列表的使用：<br>    1.列表的创建<br>    2.操作列表中的数据</p><h4 id="列表的介绍"><a href="#列表的介绍" class="headerlink" title="列表的介绍"></a>列表的介绍</h4><p>类似于C中的数组，但是更灵活</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建列表，通过[]来创建列表</span><br>my_list = [] <span class="hljs-comment"># 创建了一个空列表</span><br><span class="hljs-comment"># print(my_list , type(my_list))</span><br><br><span class="hljs-comment"># 列表存储的数据，我们称为元素</span><br><span class="hljs-comment"># 一个列表中可以存储多个元素，也可以在创建列表时，来指定列表中的元素</span><br>my_list = [<span class="hljs-number">10</span>] <span class="hljs-comment"># 创建一个只包含一个元素的列表</span><br><br><span class="hljs-comment"># 当向列表中添加多个元素时，多个元素之间使用,隔开</span><br>my_list = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>] <span class="hljs-comment"># 创建了一个包含有5个元素的列表</span><br><br><span class="hljs-comment"># 列表中可以保存任意的对象</span><br>my_list = [<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-literal">True</span>,<span class="hljs-literal">None</span>,[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],<span class="hljs-built_in">print</span>]<br><br><span class="hljs-comment"># 列表中的对象都会按照插入的顺序存储到列表中，</span><br><span class="hljs-comment">#   第一个插入的对象保存到第一个位置，第二个保存到第二个位置</span><br><span class="hljs-comment"># 我们可以通过索引（index）来获取列表中的元素</span><br><span class="hljs-comment">#   索引是元素在列表中的位置，列表中的每一个元素都有一个索引</span><br><span class="hljs-comment">#   索引是从0开始的整数，列表第一个位置索引为0，第二个位置索引为1，第三个位置索引为2，以此类推</span><br>my_list = [<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>]<br><br><span class="hljs-comment"># 通过索引获取列表中的元素</span><br><span class="hljs-comment"># 语法：my_list[索引] my_list[0]</span><br> <span class="hljs-built_in">print</span>(my_list[<span class="hljs-number">4</span>])<br><span class="hljs-comment"># 如果使用的索引超过了最大的范围，会抛出异常</span><br> <span class="hljs-built_in">print</span>(my_list[<span class="hljs-number">5</span>]) IndexError: <span class="hljs-built_in">list</span> index out of <span class="hljs-built_in">range</span><br><br><span class="hljs-comment"># 获取列表的长度，列表中元素的个数</span><br><span class="hljs-comment"># len()函数，通过该函数可以获取列表的长度</span><br><span class="hljs-comment"># 获取到的长度的值，是列表的最大索引 + 1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(my_list)) <span class="hljs-comment"># 5</span><br></code></pre></td></tr></table></figure><h4 id="列表的切片"><a href="#列表的切片" class="headerlink" title="列表的切片"></a>列表的切片</h4><p>切片指从现有列表中，获取一个子列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个列表，一般创建列表时，变量的名字会使用复数</span><br>stus = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>]<br><br><span class="hljs-comment"># 列表的索引可以是负数</span><br><span class="hljs-comment"># 如果索引是负数，则从后向前获取元素，-1表示倒数第一个，-2表示倒数第二个 以此类推</span><br> <span class="hljs-built_in">print</span>(stus[-<span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 通过切片来获取指定的元素</span><br><span class="hljs-comment"># 语法：列表[起始:结束] </span><br><span class="hljs-comment">#   通过切片获取元素时，会包括起始位置的元素，不会包括结束位置的元素</span><br><span class="hljs-comment">#   做切片操作时，总会返回一个新的列表，不会影响原来的列表</span><br><span class="hljs-comment">#   起始和结束位置的索引都可以省略不写</span><br><span class="hljs-comment">#   如果省略结束位置，则会一直截取到最后</span><br><span class="hljs-comment">#   如果省略起始位置，则会从第一个元素开始截取</span><br><span class="hljs-comment">#   如果起始位置和结束位置全部省略，则相当于创建了一个列表的副本</span><br> <span class="hljs-built_in">print</span>(stus[<span class="hljs-number">1</span>:])<br> <span class="hljs-built_in">print</span>(stus[:<span class="hljs-number">3</span>])<br> <span class="hljs-built_in">print</span>(stus[:])<span class="hljs-comment">#相当于创建副本</span><br> <span class="hljs-built_in">print</span>(stus)<br><br><span class="hljs-comment"># 语法：列表[起始:结束:步长] </span><br><span class="hljs-comment"># 步长表示，每次获取元素的间隔，默认值是1</span><br> <span class="hljs-built_in">print</span>(stus[<span class="hljs-number">0</span>:<span class="hljs-number">5</span>:<span class="hljs-number">3</span>])<br><span class="hljs-comment"># 步长不能是0，但是可以是负数</span><br> <span class="hljs-built_in">print</span>(stus[::<span class="hljs-number">0</span>]) ValueError: <span class="hljs-built_in">slice</span> step cannot be zero<br><span class="hljs-comment"># 如果是负数，则会从列表的后部向前边取元素</span><br><span class="hljs-built_in">print</span>(stus[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><h4 id="列表的通用操作"><a href="#列表的通用操作" class="headerlink" title="列表的通用操作"></a>列表的通用操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># + 和 *</span><br><span class="hljs-comment"># +可以将两个列表拼接为一个列表</span><br>my_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] + [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><br><span class="hljs-comment"># * 可以将列表重复指定的次数</span><br>my_list = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] * <span class="hljs-number">5</span><br><br><span class="hljs-comment"># print(my_list)</span><br><br><span class="hljs-comment"># 创建一个列表</span><br>stus = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>]<br><br><span class="hljs-comment"># in 和 not in</span><br><span class="hljs-comment"># in用来检查指定元素是否存在于列表中</span><br><span class="hljs-comment">#   如果存在，返回True，否则返回False</span><br><span class="hljs-comment"># not in用来检查指定元素是否不在列表中</span><br><span class="hljs-comment">#   如果不在，返回True，否则返回False</span><br><span class="hljs-comment"># print(&#x27;牛魔王&#x27; not in stus)</span><br><span class="hljs-comment"># print(&#x27;牛魔王&#x27; in stus)</span><br><br><span class="hljs-comment"># len()获取列表中的元素的个数</span><br><br><span class="hljs-comment"># min() 获取列表中的最小值</span><br><span class="hljs-comment"># max() 获取列表中的最大值</span><br>arr = [<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100</span>,<span class="hljs-number">77</span>]<br><span class="hljs-comment"># print(min(arr) , max(arr))</span><br><br><span class="hljs-comment"># 两个方法（method），方法和函数基本上是一样，只不过方法必须通过 对象.方法() 的形式调用</span><br><span class="hljs-comment"># xxx.print() 方法实际上就是和对象关系紧密的函数</span><br><span class="hljs-comment"># s.index() 获取指定元素在列表中的第一次出现时的索引（的位置）</span><br><span class="hljs-comment"># print(stus.index(&#x27;沙和尚&#x27;))</span><br><span class="hljs-comment"># index()的第二个参数，表示查找的起始位置 ， 第三个参数，表示查找的结束位置</span><br><span class="hljs-comment"># print(stus.index(&#x27;沙和尚&#x27;,3,7))</span><br><span class="hljs-comment"># 如果要获取列表中没有的元素，会抛出异常</span><br><span class="hljs-comment"># print(stus.index(&#x27;牛魔王&#x27;)) ValueError: &#x27;牛魔王&#x27; is not in list</span><br><span class="hljs-comment"># s.count() 统计指定元素在列表中出现的次数</span><br><span class="hljs-built_in">print</span>(stus.count(<span class="hljs-string">&#x27;牛魔王&#x27;</span>))<br></code></pre></td></tr></table></figure><h3 id="序列（sequence）"><a href="#序列（sequence）" class="headerlink" title="序列（sequence）"></a>序列（sequence）</h3><p>序列是Python中最基本的一种数据结构 (就是一种顺序表)</p><p>数据结构指计算机中数据存储的方式<br>序列用于保存一组有序的数据，所有的数据在序列当中都有一个唯一的位置（索引）, 并且序列中的数据会按照添加的顺序来分配索引</p><p>序列的分类：<br>        可变序列（序列中的元素可以改变）：<br>             列表（list）<br>        不可变序列（序列中的元素不能改变）：<br>                 字符串（str）<br>                 元组（tuple） </p><p><strong>前面部分所写的所有操作都是序列的通用操作，是列表，字符串，元组三个文件中的操作</strong></p><h4 id="列表的修改"><a href="#列表的修改" class="headerlink" title="列表的修改"></a>列表的修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个列表</span><br>stus = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>]<br><br><span class="hljs-comment"># print(&quot;修改前：&quot;,stus)</span><br><span class="hljs-comment"># 修改列表中的元素</span><br><span class="hljs-comment"># 直接通过索引来修改元素</span><br>stus[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;sunwukong&#x27;</span><br>stus[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;哈哈&#x27;</span><br><span class="hljs-comment"># 通过del来删除元素</span><br><span class="hljs-keyword">del</span> stus[<span class="hljs-number">2</span>] <span class="hljs-comment"># 删除索引为2的元素</span><br><br><br>stus = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>]<br><br><span class="hljs-comment"># 通过切片来修改列表</span><br><span class="hljs-comment"># 在给切片进行赋值时，只能使用序列(等号两边都是序列)</span><br><span class="hljs-comment"># stus[0:2] = [&#x27;牛魔王&#x27;,&#x27;红孩儿&#x27;] 使用新的元素替换旧元素</span><br><span class="hljs-comment"># stus[0:2] = [&#x27;牛魔王&#x27;,&#x27;红孩儿&#x27;,&#x27;二郎神&#x27;]</span><br><span class="hljs-comment"># stus[0:0] = [&#x27;牛魔王&#x27;] # 向索引为0的位置插入元素</span><br><span class="hljs-comment"># 当设置了步长时，序列中元素的个数必须和切片中元素的个数一致</span><br><span class="hljs-comment"># stus[::2] = [&#x27;牛魔王&#x27;,&#x27;红孩儿&#x27;,&#x27;二郎神&#x27;]</span><br><br><span class="hljs-comment"># 通过切片来删除元素</span><br><span class="hljs-comment"># del stus[0:2]</span><br><span class="hljs-comment"># del stus[::2]</span><br><span class="hljs-comment"># stus[1:3] = []</span><br><br><span class="hljs-comment"># 以上操作，只适用于可变序列</span><br>s = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment"># s[1] = &#x27;a&#x27; 不可变序列，无法通过索引来修改</span><br><span class="hljs-comment"># 可以通过 list() 函数将其他的序列转换为list</span><br>s = <span class="hljs-built_in">list</span>(s)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h4 id="列表的方法-通过方法修改列表"><a href="#列表的方法-通过方法修改列表" class="headerlink" title="列表的方法(通过方法修改列表)"></a>列表的方法(通过方法修改列表)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 列表的方法</span><br>stus = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>]<br><span class="hljs-comment"># print(&#x27;原列表：&#x27;,stus)</span><br><br><span class="hljs-comment"># append() </span><br><span class="hljs-comment"># 向列表的最后添加一个元素</span><br> stus.append(<span class="hljs-string">&#x27;唐僧&#x27;</span>)<br><br><span class="hljs-comment"># insert()</span><br><span class="hljs-comment"># 向列表的指定位置插入一个元素</span><br><span class="hljs-comment"># 参数：</span><br><span class="hljs-comment">#   1.要插入的位置</span><br><span class="hljs-comment">#   2.要插入的元素</span><br> stus.insert(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>)<br><br><span class="hljs-comment"># extend()</span><br><span class="hljs-comment"># 使用新的序列来扩展当前序列</span><br><span class="hljs-comment"># 需要一个序列作为参数，它会将该序列中的元素添加到当前列表中</span><br> stus.extend([<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>])<br> stus += [<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>]<br><span class="hljs-comment">#这两者的效果是一模一样的</span><br><br><span class="hljs-comment"># clear()</span><br><span class="hljs-comment"># 清空序列</span><br> stus.clear()<br><br><span class="hljs-comment"># pop()</span><br><span class="hljs-comment"># 根据索引删除并返回被删除的元素</span><br> result = stus.pop(<span class="hljs-number">2</span>) <span class="hljs-comment"># 删除索引为2的元素</span><br> result = stus.pop() <span class="hljs-comment"># 删除最后一个</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result =&#x27;</span>,result)<br><br><span class="hljs-comment"># remove()</span><br><span class="hljs-comment"># 删除指定值的元素，如果相同值得元素有多个，只会删除第一个</span><br> stus.remove(<span class="hljs-string">&#x27;猪八戒&#x27;</span>)<br><br><span class="hljs-comment"># reverse()</span><br><span class="hljs-comment"># 用来反转列表</span><br> stus.reverse()<br><br><span class="hljs-comment"># sort()</span><br><span class="hljs-comment"># 用来对列表中的元素进行排序，默认是升序排列</span><br><span class="hljs-comment"># 如果需要降序排列，则需要传递一个reverse=True作为参数</span><br>my_list = <span class="hljs-built_in">list</span>(<span class="hljs-string">&#x27;asnbdnbasdabd&#x27;</span>)<span class="hljs-comment">#这里是类型转换，将字符串转换为列表（字母按字母顺序进行排列）</span><br>my_list = [<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">2</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改前&#x27;</span>,my_list)<br><br>my_list.sort(reverse=<span class="hljs-literal">True</span>)<span class="hljs-comment">#降序排列</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;修改后&#x27;</span>,my_list)<br><span class="hljs-comment"># print(&#x27;修改后：&#x27;,stus)</span><br></code></pre></td></tr></table></figure><h5 id="range（）函数"><a href="#range（）函数" class="headerlink" title="range（）函数"></a>range（）函数</h5><p>range()是一个函数，可以用来生成一个自然数的序列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># range()是一个函数，可以用来生成一个自然数的序列</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) <span class="hljs-comment"># 生成一个这样的序列[0,1,2,3,4]</span><br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">2</span>)<br>r = <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>)<br><span class="hljs-comment"># 该函数需要三个参数</span><br><span class="hljs-comment">#   1.起始位置（可以省略，默认是0）</span><br><span class="hljs-comment">#   2.结束位置</span><br><span class="hljs-comment">#   3.步长（可以省略，默认是1）</span><br><br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))<br><br><span class="hljs-comment"># 通过range()可以创建一个执行指定次数的for循环</span><br><span class="hljs-comment"># for()循环除了创建方式以外，其余的都和while一样，</span><br><span class="hljs-comment">#   包括else、包括break continue都可以在for循环中使用</span><br><span class="hljs-comment">#   并且for循环使用也更加简单</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    <span class="hljs-built_in">print</span>(i)<br><br> <span class="hljs-comment">#也可以遍历字符串</span><br> <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;hello&#x27;</span>:<br>     <span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h4 id="列表的遍历"><a href="#列表的遍历" class="headerlink" title="列表的遍历"></a>列表的遍历</h4><p>遍历列表，指的就是将列表中的所有元素取出来</p><p> 遍历列表(通过索引遍历)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建列表</span><br>stus = [<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-string">&#x27;沙和尚&#x27;</span>,<span class="hljs-string">&#x27;唐僧&#x27;</span>,<span class="hljs-string">&#x27;白骨精&#x27;</span>,<span class="hljs-string">&#x27;蜘蛛精&#x27;</span>]<br><span class="hljs-comment"># 遍历列表(通过索引遍历)</span><br><span class="hljs-comment"># print(stus[0])</span><br><span class="hljs-comment"># print(stus[1])</span><br><span class="hljs-comment"># print(stus[2])</span><br><span class="hljs-comment"># print(stus[3])</span><br></code></pre></td></tr></table></figure><p>通过while循环来遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过while循环来遍历列表</span><br><span class="hljs-comment"># i = 0</span><br><span class="hljs-comment"># while i &lt; len(stus):</span><br><span class="hljs-comment">#     print(stus[i])</span><br><span class="hljs-comment">#     i += 1</span><br></code></pre></td></tr></table></figure><p>通过for循环来遍历列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过for循环来遍历列表</span><br><span class="hljs-comment"># 语法：</span><br><span class="hljs-comment">#   for 变量 in 序列 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment"># for循环的代码块会执行多次，序列中有几个元素就会执行几次</span><br><span class="hljs-comment">#   没执行一次就会将序列中的一个元素赋值给变量，</span><br><span class="hljs-comment">#   所以我们可以通过变量，来获取列表中的元素</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> stus :<br>    <span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="EMS-练习"><a href="#EMS-练习" class="headerlink" title="EMS 练习"></a>EMS 练习</h3><p>Employee Manager System 员工管理系统<br>代码需求：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">做命令行版本的员工管理系统</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">功能：</span><br>    四个：<br>        1.查询<br>            <span class="hljs-bullet">-</span> <span class="hljs-string">显示当前系统当中的所有员工</span><br>        2.添加<br>            <span class="hljs-bullet">-</span> <span class="hljs-string">将员工添加到当前系统中</span><br>        3.删除<br>            <span class="hljs-bullet">-</span> <span class="hljs-string">将员工从系统当中删除</span><br>        4.退出<br>            <span class="hljs-bullet">-</span> <span class="hljs-string">退出系统</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">员工信息要保存到哪里？ 列表，在系统中应该有一个列表，专门用来保存所有员工信息的 </span><br></code></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 显示系统的欢迎信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">20</span> , <span class="hljs-string">&#x27;欢迎使用员工管理系统&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">20</span>)<br><span class="hljs-comment"># 创建一个列表，用来保存员工的信息，员工的信息以字符串的形式统一保存到列表</span><br>emps = [<span class="hljs-string">&#x27;孙悟空\t18\t男\t花果山&#x27;</span>,<span class="hljs-string">&#x27;猪八戒\t28\t男\t高老庄&#x27;</span>]<br><br><span class="hljs-comment"># 创建一个死循环</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-comment"># 显示用户的选项</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请选择要做的操作：&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t1.查询员工&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t2.添加员工&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t3.删除员工&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t4.退出系统&#x27;</span>)<br>    user_choose = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请选择[1-4]:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">62</span>)<br>    <span class="hljs-comment"># 根据用户的选择做相关的操作</span><br>    <span class="hljs-keyword">if</span> user_choose == <span class="hljs-string">&#x27;1&#x27;</span> :<br>        <span class="hljs-comment"># 查询员工</span><br>        <span class="hljs-comment"># 打印表头</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t序号\t姓名\t年龄\t性别\t住址&#x27;</span>)<br>        <span class="hljs-comment"># 创建一个变量，来表示员工的序号</span><br>        n = <span class="hljs-number">1</span><br>        <span class="hljs-comment"># 显示员工信息</span><br>        <span class="hljs-keyword">for</span> emp <span class="hljs-keyword">in</span> emps :<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\t<span class="hljs-subst">&#123;n&#125;</span>\t<span class="hljs-subst">&#123;emp&#125;</span>&#x27;</span>)<br>            n += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> user_choose == <span class="hljs-string">&#x27;2&#x27;</span>:<br>        <span class="hljs-comment"># 添加员工</span><br>        <span class="hljs-comment"># 获取要添加员工的信息，姓名、年龄、性别、住址</span><br>        emp_name = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入员工的姓名：&#x27;</span>)<br>        emp_age = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入员工的年龄：&#x27;</span>)<br>        emp_gender = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入员工的性别：&#x27;</span>)<br>        emp_address = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入员工的住址：&#x27;</span>)<br><br>        <span class="hljs-comment"># 创建员工信息</span><br>        <span class="hljs-comment"># 将四个信息拼接为一个字符串，然后插入到列表中</span><br>        emp = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;emp_name&#125;</span>\t<span class="hljs-subst">&#123;emp_age&#125;</span>\t<span class="hljs-subst">&#123;emp_gender&#125;</span>\t<span class="hljs-subst">&#123;emp_address&#125;</span>&#x27;</span><br>        <span class="hljs-comment"># 显示一个提示信息</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;以下员工将被添加到系统中&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">62</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;姓名\t年龄\t性别\t住址&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(emp)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">62</span>)<br>        user_confirm = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;是否确认该操作[Y/N]:&#x27;</span>)<br><br>        <span class="hljs-comment"># 判断</span><br>        <span class="hljs-keyword">if</span> user_confirm == <span class="hljs-string">&#x27;y&#x27;</span> <span class="hljs-keyword">or</span> user_confirm == <span class="hljs-string">&#x27;yes&#x27;</span> :<br>            <span class="hljs-comment"># 确认</span><br>            emps.append(emp)<br>            <span class="hljs-comment"># 显示提示信息</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;添加成功！&#x27;</span>)<br>        <span class="hljs-keyword">else</span> :<br>            <span class="hljs-comment"># 取消操作</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;添加已取消！&#x27;</span>)<br>        <br>    <span class="hljs-keyword">elif</span> user_choose == <span class="hljs-string">&#x27;3&#x27;</span>:<br>        <span class="hljs-comment"># 删除员工，根据员工的序号来删除员工</span><br>        <span class="hljs-comment"># 获取要删除的员工的序号</span><br>        del_num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入要删除的员工的序号：&#x27;</span>))<br><br>        <span class="hljs-comment"># 判断序号是否有效</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt; del_num &lt;= <span class="hljs-built_in">len</span>(emps) :<br>            <span class="hljs-comment"># 输入合法，根据序号来获取索引</span><br>            del_i = del_num - <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 显示一个提示信息</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;以下员工将被删除&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">62</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t序号\t姓名\t年龄\t性别\t住址&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;\t<span class="hljs-subst">&#123;del_num&#125;</span>\t<span class="hljs-subst">&#123;emps[del_i]&#125;</span>&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">62</span>)<br>            user_confirm = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;该操作不可恢复，是否确认[Y/N]:&#x27;</span>)<br>            <span class="hljs-comment"># 判断</span><br>            <span class="hljs-keyword">if</span> user_confirm == <span class="hljs-string">&#x27;y&#x27;</span> <span class="hljs-keyword">or</span> user_confirm == <span class="hljs-string">&#x27;yes&#x27;</span> :<br>                <span class="hljs-comment"># 删除元素</span><br>                emps.pop(del_i)<br>                <span class="hljs-comment"># 显示提示</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;员工已被删除！&#x27;</span>)<br>            <span class="hljs-keyword">else</span> :<br>                <span class="hljs-comment"># 操作取消</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;操作已取消！&#x27;</span>)<br>        <span class="hljs-keyword">else</span> :<br>            <span class="hljs-comment"># 输入有误</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您的输入有误，请重新操作！&#x27;</span>)<br><br>    <span class="hljs-keyword">elif</span> user_choose == <span class="hljs-string">&#x27;4&#x27;</span>:<br>        <span class="hljs-comment"># 退出</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎使用！再见!&#x27;</span>)<br>        <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;点击回车键退出！&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;您的输入有误，请重新选择！&#x27;</span>)<br><br>    <span class="hljs-comment"># 打印分割线</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">62</span>)<br></code></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组 tuple<strong>（除了不可变，剩下的和序列差不多）</strong><br>元组是一个<strong>不可变的序列</strong>,它的操作的方式基本上和列表是一致的,所以你在操作元组时，就把元组当成是一个不可变的列表就ok了<br>一般当我们希望数据不改变时，就使用元组，其余情况都使用列表.</p><p>创建元组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建元组</span><br><span class="hljs-comment"># 使用()来创建元组</span><br>my_tuple = () <span class="hljs-comment"># 创建了一个空元组</span><br><span class="hljs-comment"># print(my_tuple,type(my_tuple)) # &lt;class &#x27;tuple&#x27;&gt;</span><br><br>my_tuple = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-comment"># 创建了一个5个元素的元组</span><br><span class="hljs-comment"># 元组是不可变对象，不能尝试为元组中的元素重新赋值</span><br><span class="hljs-comment"># my_tuple[3] = 10 TypeError: &#x27;tuple&#x27; object does not support item assignment</span><br><span class="hljs-comment"># print(my_tuple[3])</span><br><br><span class="hljs-comment"># 当元组不是空元组时，括号可以省略</span><br><span class="hljs-comment"># 如果元组不是空元组，它里边至少要有一个,(逗号)</span><br>my_tuple = <span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span><br>my_tuple = <span class="hljs-number">40</span>,<br><span class="hljs-comment"># print(my_tuple , type(my_tuple))</span><br><br>my_tuple = <span class="hljs-number">10</span> , <span class="hljs-number">20</span> , <span class="hljs-number">30</span> , <span class="hljs-number">40</span><br></code></pre></td></tr></table></figure><p>元组的解包（解构）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 解包指就是将元组当中每一个元素都赋值给一个变量</span><br>a,b,c,d = my_tuple<br><br><span class="hljs-comment"># print(&quot;a =&quot;,a)</span><br><span class="hljs-comment"># print(&quot;b =&quot;,b)</span><br><span class="hljs-comment"># print(&quot;c =&quot;,c)</span><br><span class="hljs-comment"># print(&quot;d =&quot;,d)</span><br><br>a = <span class="hljs-number">100</span><br>b = <span class="hljs-number">300</span><br><span class="hljs-comment"># print(a , b)</span><br><br><span class="hljs-comment"># 交互a 和 b的值，这时我们就可以利用元组的解包(把后面的部分看作一个元组)</span><br>a , b = b , a<br><br><span class="hljs-comment"># print(a , b)</span><br>my_tuple = <span class="hljs-number">10</span> , <span class="hljs-number">20</span> , <span class="hljs-number">30</span> , <span class="hljs-number">40</span><br><br><br><span class="hljs-comment"># 在对一个元组进行解包时，变量的数量必须和元组中的元素的数量一致</span><br><span class="hljs-comment"># 也可以在变量前边添加一个*，这样变量将会获取元组中所有剩余的元素</span><br>a , b , *c = my_tuple<br>a , *b , c = my_tuple<br>*a , b , c = my_tuple<br>a , b , *c = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>a , b , *c = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-comment"># 不能同时出现两个或以上的*变量</span><br><span class="hljs-comment"># *a , *b , c = my_tuple SyntaxError: two starred expressions in assignment</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br>上面三行的输出：<br>a = h<br>b = e<br>c = [<span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]<br></code></pre></td></tr></table></figure><h3 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">- 每个对象中都保存了三个数据：<br>    <span class="hljs-built_in">id</span>（标识）<br>    <span class="hljs-built_in">type</span>（类型）<br>    value（值）    <br><br>- 列表就是一个可变对象<br>    a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br>- a[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span> （改对象）（像指针一样）<br>    - 这个操作是在通过变量去修改对象的值<br>    - 这种操作不会改变变量所指向的对象    <br>    - 当我们去修改对象时，如果有其他变量也指向了该对象，则修改也会在其他的变量中体现<br>    <br>- a = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>] （改变量）<br>    - 这个操作是在给变量重新赋值<br>    - 这种操作会改变变量所指向的对象<br>    - 为一个变量重新赋值时，不会影响其他的变量<br><br>- 一般只有在为变量赋值时才是修改变量，其余的都是修改对象<br></code></pre></td></tr></table></figure><h4 id="x3D-x3D-x3D-is-is-not的区别"><a href="#x3D-x3D-x3D-is-is-not的区别" class="headerlink" title="&#x3D;&#x3D;   !&#x3D;    is   is   not的区别"></a>&#x3D;&#x3D;   !&#x3D;    is   is   not的区别</h4><p> &#x3D;&#x3D; !&#x3D; 比较的是对象的值是否相等<br>is is not 比较的是对象的id是否相等（比较两个对象是否是同一个对象）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-built_in">print</span>(a,b)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(a),<span class="hljs-built_in">id</span>(b))<br><span class="hljs-built_in">print</span>(a == b) <span class="hljs-comment"># a和b的值相等，使用==会返回True</span><br><span class="hljs-built_in">print</span>(a <span class="hljs-keyword">is</span> b) <span class="hljs-comment"># a和b不是同一个对象，内存地址不同，使用is会返回False</span><br></code></pre></td></tr></table></figure><h3 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h3><p>字典属于一种新的数据结构，称为映射（mapping）<br>字典的作用和列表类似，都是用来存储对象的容器。列表存储数据的性能很好，但是查询数据的性能的很差。在字典中每一个元素都有一个唯一的名字，通过这个唯一的名字可以快速的查找到指定的元素。</p><p>在查询元素时，字典的效率是非常快的<br>在字典中可以保存多个对象，每个对象都会有一个唯一的名字   </p><pre><code class="hljs">    1. 这个唯一的名字，我们称其为键（key），通过key可以快速的查询value    2. 这个对象，我们称其为值（value）    3. 所以字典，我们也称为叫做键值对（key-value）结构    4. 每个字典中都可以有多个键值对，而每一个键值对我们称其为一项（item）</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 &#123;&#125; 来创建字典</span><br>d = &#123;&#125; <span class="hljs-comment"># 创建了一个空字典</span><br><br><span class="hljs-comment"># 创建一个包含有数据的字典</span><br><span class="hljs-comment"># 语法：</span><br><span class="hljs-comment">#   &#123;key:value,key:value,key:value&#125;</span><br><span class="hljs-comment">#   字典的值可以是任意对象</span><br><span class="hljs-comment">#   字典的键可以是任意的不可变对象（int、str、bool、tuple ...），但是一般我们都会使用str</span><br><span class="hljs-comment">#       字典的键是不能重复的，如果出现重复的后边的会替换到前边的</span><br><span class="hljs-comment"># d = &#123;&#x27;name&#x27;:&#x27;孙悟空&#x27; , &#x27;age&#x27;:18 , &#x27;gender&#x27;:&#x27;男&#x27; , &#x27;name&#x27;:&#x27;sunwukong&#x27;&#125;</span><br>d = &#123;<br><span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;孙悟空&#x27;</span> , <br><span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">18</span> , <br><span class="hljs-string">&#x27;gender&#x27;</span>:<span class="hljs-string">&#x27;男&#x27;</span> , <br><span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;sunwukong&#x27;</span><br>&#125;<br><br><span class="hljs-comment"># print(d , type(d))</span><br><br><span class="hljs-comment"># 需要根据键来获取值</span><br> <span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;name&#x27;</span>],d[<span class="hljs-string">&#x27;age&#x27;</span>],d[<span class="hljs-string">&#x27;gender&#x27;</span>])<br><br><span class="hljs-comment"># 如果使用了字典中不存在的键，会报错</span><br><span class="hljs-comment"># print(d[&#x27;hello&#x27;]) KeyError: &#x27;hello&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="字典的使用"><a href="#字典的使用" class="headerlink" title="字典的使用"></a>字典的使用</h4><h5 id="创建字典："><a href="#创建字典：" class="headerlink" title="创建字典："></a>创建字典：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建字典</span><br><span class="hljs-comment"># 使用&#123;&#125;</span><br><span class="hljs-comment"># 语法：&#123;k1:v1,k2:v2,k3:v3&#125;</span><br><br><span class="hljs-comment"># 使用 dict()函数来创建字典</span><br><span class="hljs-comment"># 每一个参数都是一个键值对，参数名就是键，参数名就是值（这种方式创建的字典，key都是字符串）</span><br>d = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;孙悟空&#x27;</span>,age=<span class="hljs-number">18</span>,gender=<span class="hljs-string">&#x27;男&#x27;</span>)  <br><br><span class="hljs-comment"># 也可以将一个包含有双值子序列的序列转换为字典</span><br><span class="hljs-comment"># 双值序列，序列中只有两个值，[1,2] (&#x27;a&#x27;,3) &#x27;ab&#x27;</span><br><span class="hljs-comment"># 子序列，如果序列中的元素也是序列，那么我们就称这个元素为子序列</span><br><span class="hljs-comment"># [(1,2),(3,5)]</span><br>d = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;孙悟空&#x27;</span>),(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-number">18</span>)])<br><span class="hljs-comment"># print(d , type(d))</span><br>d = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;孙悟空&#x27;</span>,age=<span class="hljs-number">18</span>,gender=<span class="hljs-string">&#x27;男&#x27;</span>) <br></code></pre></td></tr></table></figure><h5 id="获取字典中键值对的个数"><a href="#获取字典中键值对的个数" class="headerlink" title="获取字典中键值对的个数"></a>获取字典中键值对的个数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># len() 获取字典中键值对的个数</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d))<br></code></pre></td></tr></table></figure><h5 id="检查字典中是否包含指定的键"><a href="#检查字典中是否包含指定的键" class="headerlink" title="检查字典中是否包含指定的键"></a>检查字典中是否包含指定的键</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># in 检查字典中是否包含指定的键</span><br><span class="hljs-comment"># not in 检查字典中是否不包含指定的键</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">in</span> d)<br></code></pre></td></tr></table></figure><h5 id="获取字典中的值"><a href="#获取字典中的值" class="headerlink" title="获取字典中的值"></a>获取字典中的值</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种，根据键来获取值</span><br><span class="hljs-comment"># 语法：d[key]</span><br> <span class="hljs-built_in">print</span>(d[<span class="hljs-string">&#x27;age&#x27;</span>])<span class="hljs-comment">#要加引号</span><br><br> n = <span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-comment">#要加引号</span><br> <span class="hljs-built_in">print</span>(d[n])<br><br><span class="hljs-comment"># 第二种，通过[]来获取值时，如果键不存在，会抛出异常 KeyError</span><br><span class="hljs-comment"># get(key[, default]) 该方法用来根据键来获取字典中的值</span><br><span class="hljs-comment">#   如果获取的键在字典中不存在，会返回None</span><br><span class="hljs-comment">#   也可以指定一个默认值，来作为第二个参数，这样获取不到值时将会返回默认值</span><br> <span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;name&#x27;</span>))<br> <span class="hljs-built_in">print</span>(d.get(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;默认值&#x27;</span>))<br></code></pre></td></tr></table></figure><h5 id="修改字典-添加键值对"><a href="#修改字典-添加键值对" class="headerlink" title="修改字典 添加键值对"></a>修改字典 添加键值对</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 修改字典</span><br><span class="hljs-comment"># d[key] = value 如果key存在则覆盖，不存在则添加</span><br>d[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;sunwukong&#x27;</span> <span class="hljs-comment"># 修改字典的key-value</span><br>d[<span class="hljs-string">&#x27;address&#x27;</span>] = <span class="hljs-string">&#x27;花果山&#x27;</span> <span class="hljs-comment"># 向字典中添加key-value</span><br><br><span class="hljs-comment"># setdefault(key[, default]) 方法可以用来向字典中添加key-value</span><br><span class="hljs-comment">#   如果key已经存在于字典中，则返回key的值，不会对字典做任何操作</span><br><span class="hljs-comment">#   如果key不存在，则向字典中添加这个key，并设置value</span><br>result = d.setdefault(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>)<br>result = d.setdefault(<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;猪八戒&#x27;</span>)<br><br><span class="hljs-comment"># update([other])</span><br><span class="hljs-comment"># 将其他的字典中的key-value添加到当前字典中</span><br><span class="hljs-comment"># 如果有重复的key，则后边的会替换到当前的</span><br>d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br>d2 = &#123;<span class="hljs-string">&#x27;d&#x27;</span>:<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;e&#x27;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;f&#x27;</span>:<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">7</span>&#125;<br>d.update(d2)<br></code></pre></td></tr></table></figure><h5 id="修改字典-删除键值对"><a href="#修改字典-删除键值对" class="headerlink" title="修改字典 删除键值对"></a>修改字典 删除键值对</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 删除，可以使用 del 来删除字典中的 key-value</span><br>d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br><span class="hljs-keyword">del</span> d[<span class="hljs-string">&#x27;a&#x27;</span>]<br><span class="hljs-keyword">del</span> d[<span class="hljs-string">&#x27;b&#x27;</span>]<br><br><span class="hljs-comment"># popitem()方法</span><br><span class="hljs-comment"># 随机删除字典中的一个键值对，一般都会删除最后一个键值对</span><br><span class="hljs-comment">#   删除之后，它会将删除的key-value作为返回值返回</span><br><span class="hljs-comment">#   返回的是一个元组，元组中有两个元素，第一个元素是删除的key，第二个是删除的value</span><br><span class="hljs-comment"># 当使用popitem()删除一个空字典时，会抛出异常 KeyError: &#x27;popitem(): dictionary is empty&#x27;</span><br> d.popitem()<br> result = d.popitem()<br><br><span class="hljs-comment"># pop(key[, default])方法</span><br><span class="hljs-comment"># 根据key删除字典中的key-value</span><br><span class="hljs-comment"># 会将被删除的value返回！</span><br><span class="hljs-comment"># 如果删除不存在的key，会抛出异常</span><br><span class="hljs-comment">#   如果指定了默认值，再删除不存在的key时，不会报错，而是直接返回默认值</span><br>result = d.pop(<span class="hljs-string">&#x27;d&#x27;</span>)<br>result = d.pop(<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;这是默认值&#x27;</span>)<br><br><span class="hljs-comment"># clear()用来清空字典</span><br>d.clear()<br></code></pre></td></tr></table></figure><h5 id="修改字典-浅复制"><a href="#修改字典-浅复制" class="headerlink" title="修改字典 浅复制"></a>修改字典 浅复制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"> copy()<br><span class="hljs-comment"># 该方法用于对字典进行浅复制</span><br><span class="hljs-comment"># 复制以后的对象，和原对象是独立，修改一个不会影响另一个</span><br><span class="hljs-comment"># 注意，浅复制会简单复制对象内部的值，如果值也是一个可变对象，这个可变对象不会被复制</span><br>d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br>d2 = d.copy()<br><span class="hljs-comment"># d[&#x27;a&#x27;] = 100</span><br></code></pre></td></tr></table></figure><p>例子：(没太理解——2022.4.11)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">例子：<br>d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">18</span>&#125;,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;<br>d2 = d.copy()<br>d2[<span class="hljs-string">&#x27;a&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&#x27;猪八戒&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d = &#x27;</span>,d , <span class="hljs-built_in">id</span>(d))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;d2 = &#x27;</span>,d2 , <span class="hljs-built_in">id</span>(d2))<br><br>运行结果：<br>d =  &#123;<span class="hljs-string">&#x27;a&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;猪八戒&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125; <span class="hljs-number">2080115470648</span><br>d2 =  &#123;<span class="hljs-string">&#x27;a&#x27;</span>: &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;猪八戒&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125; <span class="hljs-number">2080115471128</span><br></code></pre></td></tr></table></figure><h5 id="修改字典-遍历字典"><a href="#修改字典-遍历字典" class="headerlink" title="修改字典 遍历字典"></a>修改字典 遍历字典</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 遍历字典(三个方法)</span><br><span class="hljs-comment"># keys() 该方法会返回字典的所有的key</span><br><span class="hljs-comment">#   该方法会返回一个序列，序列中保存有字典的所有的键</span><br>d = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">18</span>,<span class="hljs-string">&#x27;gender&#x27;</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-comment"># 通过遍历keys()来获取所有的键</span><br> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> d.keys() :<br>    <span class="hljs-built_in">print</span>(k , d[k])<br><br><span class="hljs-comment"># values()</span><br><span class="hljs-comment"># 该方法会返回一个序列，序列中保存有字典的左右的值</span><br> <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> d.values():<br>     <span class="hljs-built_in">print</span>(v)<br><br><span class="hljs-comment"># items()</span><br><span class="hljs-comment"># 该方法会返回字典中所有的项</span><br><span class="hljs-comment"># 它会返回一个序列，序列中包含有双值子序列</span><br><span class="hljs-comment"># 双值分别是，字典中的key和value 然后进行元组的解包</span><br> <span class="hljs-built_in">print</span>(d.items())<br><span class="hljs-keyword">for</span> k,v <span class="hljs-keyword">in</span> d.items() :<br>    <span class="hljs-built_in">print</span>(k , <span class="hljs-string">&#x27;=&#x27;</span> , v)<br></code></pre></td></tr></table></figure><h3 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h3><p>集合和列表非常相似</p><p>不同点：</p><ol><li>集合中只能存储不可变对象</li><li>合中存储的对象是无序（不是按照元素的插入顺序保存）不能通过索引操作集合</li><li>集合中不能出现重复的元素</li></ol><h4 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用 &#123;&#125; 来创建集合</span><br>s = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125; <span class="hljs-comment"># &lt;class &#x27;set&#x27;&gt;</span><br><span class="hljs-comment"># s = &#123;[1,2,3],[4,6,7]&#125; TypeError: unhashable type: &#x27;list&#x27;</span><br><span class="hljs-comment">#不能储存可变对象</span><br><span class="hljs-comment"># 使用 set() 函数来创建集合</span><br>s = <span class="hljs-built_in">set</span>() <span class="hljs-comment"># 空集合</span><br><span class="hljs-comment"># 可以通过set()来将序列和字典转换为集合</span><br>s = <span class="hljs-built_in">set</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])<br>s = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>s = <span class="hljs-built_in">set</span>(&#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">3</span>&#125;) <span class="hljs-comment"># 使用set()将字典转换为集合时，只会包含字典中的键</span><br></code></pre></td></tr></table></figure><h4 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建集合</span><br>s = &#123;<span class="hljs-string">&#x27;a&#x27;</span> , <span class="hljs-string">&#x27;b&#x27;</span> , <span class="hljs-number">1</span> , <span class="hljs-number">2</span> , <span class="hljs-number">3</span> , <span class="hljs-number">1</span>&#125;<br><br><span class="hljs-comment"># 使用in和not in来检查集合中的元素</span><br><span class="hljs-comment"># print(&#x27;c&#x27; in s)</span><br><br><span class="hljs-comment"># 使用len()来获取集合中元素的数量</span><br><span class="hljs-comment"># print(len(s))</span><br><br><span class="hljs-comment"># add() 向集合中添加元素</span><br>s.add(<span class="hljs-number">10</span>)<br>s.add(<span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># update() 将一个集合中的元素添加到当前集合中</span><br><span class="hljs-comment">#   update()可以传递序列或字典作为参数，字典只会使用键</span><br>s2 = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>s.update(s2)<br>s.update((<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>,<span class="hljs-number">50</span>))<br>s.update(&#123;<span class="hljs-number">10</span>:<span class="hljs-string">&#x27;ab&#x27;</span>,<span class="hljs-number">20</span>:<span class="hljs-string">&#x27;bc&#x27;</span>,<span class="hljs-number">100</span>:<span class="hljs-string">&#x27;cd&#x27;</span>,<span class="hljs-number">1000</span>:<span class="hljs-string">&#x27;ef&#x27;</span>&#125;)<br><br><span class="hljs-comment"># &#123;1, 2, 3, 100, 40, &#x27;o&#x27;, 10, 1000, &#x27;a&#x27;, &#x27;h&#x27;, &#x27;b&#x27;, &#x27;l&#x27;, 20, 50, &#x27;e&#x27;, 30&#125;</span><br><span class="hljs-comment"># pop()随机删除并返回一个集合中的元素</span><br><span class="hljs-comment"># result = s.pop()</span><br><br><span class="hljs-comment"># remove()删除集合中的指定元素</span><br>s.remove(<span class="hljs-number">100</span>)<br>s.remove(<span class="hljs-number">1000</span>)<br><br><span class="hljs-comment"># clear()清空集合</span><br>s.clear()<br><br><span class="hljs-comment"># copy()对集合进行浅复制</span><br>s2 = s.copy()<br></code></pre></td></tr></table></figure><h4 id="集合的运算"><a href="#集合的运算" class="headerlink" title="集合的运算"></a>集合的运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在对集合做运算时，不会影响原来的集合，而是返回一个运算结果</span><br><span class="hljs-comment"># 创建两个集合</span><br>s = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>s2 = &#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;<br><br><span class="hljs-comment"># &amp; 交集运算</span><br>result = s &amp; s2 <span class="hljs-comment"># &#123;3, 4, 5&#125;</span><br><br><span class="hljs-comment"># | 并集运算</span><br>result = s | s2 <span class="hljs-comment"># &#123;1,2,3,4,5,6,7&#125;</span><br><br><span class="hljs-comment"># - 差集</span><br>result = s - s2 <span class="hljs-comment"># &#123;1, 2&#125;</span><br><br><span class="hljs-comment"># ^ 异或集 获取只在一个集合中出现的元素</span><br>result = s ^ s2 <span class="hljs-comment"># &#123;1, 2, 6, 7&#125;</span><br><br><span class="hljs-comment"># &lt;= 检查一个集合是否是另一个集合的子集</span><br><span class="hljs-comment"># 如果a集合中的元素全部都在b集合中出现，那么a集合就是b集合的子集，b集合是a集合超集</span><br>a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br>b = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br><br>result = a &lt;= b <span class="hljs-comment"># True</span><br>result = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt;= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment"># True</span><br>result = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125; &lt;= &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># &lt; 检查一个集合是否是另一个集合的真子集</span><br><span class="hljs-comment"># 如果超集b中含有子集a中所有元素，并且b中还有a中没有的元素，则b就是a的真超集，a是b的真子集</span><br>result = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; <span class="hljs-comment"># False</span><br>result = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125; &lt; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125; <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># &gt;= 检查一个集合是否是另一个的超集</span><br><span class="hljs-comment"># &gt; 检查一个集合是否是另一个的真超集</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result =&#x27;</span>,result)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
      <tag>序列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(3.流程控制语句)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/3.%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/3.%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="第三部分-流程控制语句"><a href="#第三部分-流程控制语句" class="headerlink" title="第三部分 流程控制语句"></a>第三部分 流程控制语句</h2><p>Python代码在执行时是按照自上向下顺序执行的。通过流程控制语句，可以改变程序的执行顺序，也可以让指定的程序反复执行多次<br>流程控制语句分成两大类：条件判断语句，循环语句</p><h3 id="条件判断语句（if语句）"><a href="#条件判断语句（if语句）" class="headerlink" title="条件判断语句（if语句）"></a>条件判断语句（if语句）</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 条件判断语句（if语句）</span><br><span class="hljs-comment"># 语法：if 条件表达式 : </span><br><span class="hljs-comment">#           代码块</span><br><span class="hljs-comment"># 执行的流程：if语句在执行时，会先对条件表达式进行求值判断，</span><br><span class="hljs-comment">#   如果为True，则执行if后的语句</span><br><span class="hljs-comment">#   如果为False，则不执行</span><br><span class="hljs-comment"># 默认情况下，if语句只会控制紧随其后的那条语句，如果希望if可以控制多条语句，</span><br><span class="hljs-comment">#   则可以在if后跟着一个代码块</span><br><span class="hljs-comment"># 代码块</span><br><span class="hljs-comment">#   代码块中保存着一组代码，同一个代码块中的代码，要么都执行要么都不执行</span><br><span class="hljs-comment">#   代码块就是一种为代码分组的机制</span><br><span class="hljs-comment">#   如果要编写代码块，语句就不能紧随在:后边，而是要写在下一行</span><br><span class="hljs-comment">#   代码块以缩进开始，直到代码恢复到之前的缩进级别时结束</span><br><span class="hljs-comment">#   鲁迅说过：</span><br><span class="hljs-comment">#       世上本来没有路，走的人多了自然就有了！</span><br><span class="hljs-comment">#       xxxx</span><br><span class="hljs-comment">#   yyyy....</span><br><span class="hljs-comment"># 缩进有两种方式，一种是使用tab键，一种是使用空格（四个）</span><br><span class="hljs-comment">#   Python的官方文档中推荐我们使用空格来缩进</span><br><span class="hljs-comment">#   Python代码中使用的缩进方式必须统一</span><br><span class="hljs-comment">#   &quot;translate_tabs_to_spaces&quot;: true,     </span><br><br><span class="hljs-comment"># if False : print(&#x27;你猜我出来么？&#x27;)</span><br><br>num = <span class="hljs-number">10</span><br><span class="hljs-comment"># if num &gt; 10 : print(&#x27;num比10大！&#x27;)</span><br><span class="hljs-comment"># print(&#x27;谁也管不了我&#x27;)</span><br><span class="hljs-keyword">if</span> <span class="hljs-literal">False</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">456</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">789</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">101112</span>)<br><br><span class="hljs-comment"># print(&#x27;hello&#x27;)</span><br><br>num = <span class="hljs-number">28</span><br><br><span class="hljs-comment"># 可以使用逻辑运算符来连接多个条件，</span><br><span class="hljs-comment">#   如果希望所有条件同时满足，则需要使用and</span><br><span class="hljs-comment">#   如果希望只要有一个条件满足即可，则需要使用or</span><br><span class="hljs-comment"># if num &gt; 10 and num &lt; 20 :</span><br><span class="hljs-comment">#     print(&#x27;num比10大,num比20小！&#x27;)</span><br><br><span class="hljs-comment"># if 10 &lt; num &lt; 20 :</span><br><span class="hljs-comment">#     print(&#x27;num比10大,num比20小！&#x27;)</span><br><br><span class="hljs-comment"># 在命令行让用户输入一个用户名，获取用户输入，并进行判断</span><br><span class="hljs-comment"># 如果用户输入的用户名是admin，则显示欢迎管理员光临</span><br><span class="hljs-comment"># 如果用户输入的是其他的用户名，则什么也不做</span><br>username=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;输入用户名&quot;</span>)<br><span class="hljs-keyword">if</span> username==<span class="hljs-string">&quot;admin&quot;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;欢迎管理员光临&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="input函数"><a href="#input函数" class="headerlink" title="input函数"></a>input函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># input()函数</span><br><span class="hljs-comment"># 该函数用来获取用户的输入</span><br><span class="hljs-comment"># input()调用后，程序会立即暂停，等待用户输入</span><br><span class="hljs-comment">#   用户输入完内容以后，点击回车程序才会继续向下执行</span><br><span class="hljs-comment">#   用户输入完成以后，其所输入的的内容会以返回值得形式返回</span><br><span class="hljs-comment">#   注意：input()的返回值是一个字符串</span><br><span class="hljs-comment">#   input()函数中可以设置一个字符串作为参数，这个字符串将会作为提示文字显示</span><br><span class="hljs-comment"># a = input(&#x27;请输入任意内容：&#x27;)</span><br><span class="hljs-comment"># print(&#x27;用户输入的内容是:&#x27;,a) </span><br><span class="hljs-comment"># input()也可以用于暂时阻止程序结束</span><br><br><span class="hljs-comment"># 获取用户输入的用户名</span><br>username = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入你的用户名:&#x27;</span>)<br><span class="hljs-comment"># 判断用户名是否是admin</span><br><span class="hljs-keyword">if</span> username == <span class="hljs-string">&#x27;admin&#x27;</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎管理员光临！&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"> 让用户在控制台中输入一个年龄<br><span class="hljs-comment"># age = int(input(&#x27;请输入你的年龄：&#x27;))</span><br><br><span class="hljs-comment"># 如果用户的年龄大于18岁，则显示你已经成年了</span><br><span class="hljs-comment"># if age &gt;= 18 :</span><br><span class="hljs-comment">#     print(&#x27;你已经成年了~~~&#x27;)</span><br><br><span class="hljs-comment"># if-else语句</span><br><span class="hljs-comment"># 语法： </span><br><span class="hljs-comment">#   if 条件表达式 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#   else :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment"># 执行流程：</span><br><span class="hljs-comment">#   if-else语句在执行时，先对if后的条件表达式进行求值判断</span><br><span class="hljs-comment">#       如果为True，则执行if后的代码块</span><br><span class="hljs-comment">#       如果为False，则执行else后的代码块</span><br><br>age = <span class="hljs-number">7</span><br><span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">17</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经成年了~~&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你还未成年~~&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="if-elif-else语句"><a href="#if-elif-else语句" class="headerlink" title="if-elif-else语句"></a>if-elif-else语句</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># if-elif-else语句</span><br><span class="hljs-comment"># 语法：</span><br><span class="hljs-comment">#   if 条件表达式 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#   elif 条件表达式 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#   elif 条件表达式 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#   elif 条件表达式 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#   else :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#       </span><br><span class="hljs-comment"># 执行流程：</span><br><span class="hljs-comment">#   if-elif-else语句在执行时，会自上向下依次对条件表达式进行求值判断，</span><br><span class="hljs-comment">#       如果表达式的结果为True，则执行当前代码块，然后语句结束</span><br><span class="hljs-comment">#       如果表达式的结果为False，则继续向下判断，直到找到True为止</span><br><span class="hljs-comment">#       如果所有的表达式都是False，则执行else后的代码块</span><br><span class="hljs-comment">#   if-elif-else中只会有一个代码块会执行</span><br><br>age = <span class="hljs-number">210</span><br><br><span class="hljs-comment"># if age &gt; 200 :</span><br><span class="hljs-comment">#     print(&#x27;活着可真没劲呢！&#x27;)</span><br><span class="hljs-comment"># elif age &gt; 100 :</span><br><span class="hljs-comment">#     print(&#x27;你也是老大不小了！&#x27;)</span><br><span class="hljs-comment"># elif age &gt;= 60 :</span><br><span class="hljs-comment">#     print(&#x27;你已经退休了！&#x27;)</span><br><span class="hljs-comment"># elif age &gt;= 30 :</span><br><span class="hljs-comment">#     print(&#x27;你已经是中年了！&#x27;)</span><br><span class="hljs-comment"># elif age &gt;= 18 :</span><br><span class="hljs-comment">#     print(&#x27;你已经成年了！&#x27;)</span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     print(&#x27;你还是个小孩！&#x27;)</span><br><br>age = <span class="hljs-number">68</span><br><br><span class="hljs-keyword">if</span> age &gt;= <span class="hljs-number">18</span> <span class="hljs-keyword">and</span> age &lt; <span class="hljs-number">30</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经成年了！&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &gt;= <span class="hljs-number">30</span> <span class="hljs-keyword">and</span> age &lt; <span class="hljs-number">60</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经中年了！&#x27;</span>)<br><span class="hljs-keyword">elif</span> age &gt;= <span class="hljs-number">60</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经退休了！&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h5><p>​    编写一个程序，获取一个用户输入的整数。然后通过程序显示这个数是奇数还是偶数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> cgi <span class="hljs-keyword">import</span> print_form<br>enter_an_integer = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个整数:&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你输入的整数是：&#x27;</span>,enter_an_integer)<br><span class="hljs-keyword">if</span> enter_an_integer % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个数是偶数&#x27;</span>)<br><span class="hljs-keyword">if</span> enter_an_integer % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个数是奇数&#x27;</span>)<br><br><span class="hljs-comment"># 优化：</span><br><span class="hljs-comment"># 获取用户输入的整数</span><br><span class="hljs-comment"># num = int(input(&#x27;请输入一个任意的整数：&#x27;))</span><br><span class="hljs-comment"># print(&#x27;你输入的整数是：&#x27;,enter_an_integer)</span><br><span class="hljs-comment"># # 显示num是奇数还是偶数</span><br><span class="hljs-comment"># if num % 2 == 0 :</span><br><span class="hljs-comment">#     print(num , &quot;是偶数&quot;) </span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     print(num , &#x27;是奇数&#x27;)</span><br></code></pre></td></tr></table></figure><h5 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h5><p>​    编写一个程序，检查任意一个年份是否是闰年。<br>​    如果一个年份可以被4整除不能被100整除，或者可以被400整除，这个年份就是闰年</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">year = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个年份&#x27;</span>))<br><span class="hljs-comment">#print(&#x27;你输入的是&#x27;,year)</span><br><span class="hljs-keyword">if</span> year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> year %<span class="hljs-number">100</span>!=<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> year %<span class="hljs-number">400</span> == <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个年份是闰年&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这个年份不是闰年&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h5 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h5><p>​    我家的狗5岁了，5岁的狗相当于多大年龄的人呢？<br>​    其实非常简单，狗的前两年每一年相当于人类的10.5岁，然后每增加一年就增加四岁。<br>​    那么5岁的狗相等于人类的年龄就应该是10.5+10.5+4+4+4 &#x3D; 33岁<br>​编写一个程序，获取用户输入的狗的年龄，然后通过程序显示其相当于人类的年龄。<br>​如果用户输入负数，请显示一个提示信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python">dog_age = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入狗的年龄:&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗的年龄是：&#x27;</span>,dog_age)<br><span class="hljs-keyword">if</span>  dog_age &lt; <span class="hljs-number">0</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你输入的&#x27;</span>,dog_age,<span class="hljs-string">&#x27;不是正确的年龄&#x27;</span>)<br><span class="hljs-keyword">elif</span> dog_age &lt;= <span class="hljs-number">2</span> :<br>    dog_age = <span class="hljs-number">10.5</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗的年龄是：&#x27;</span>,dog_age)<br><span class="hljs-keyword">else</span> :<br>    dog_age = <span class="hljs-number">21</span>+(dog_age-<span class="hljs-number">2</span>)*<span class="hljs-number">4</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗的年龄是&#x27;</span>,dog_age)<br><br><br><span class="hljs-comment"># 优化解答</span><br><span class="hljs-comment"># dog_age = float(input(&#x27;请输入狗的年龄：&#x27;))</span><br><span class="hljs-comment"># like_person_age = 0</span><br><span class="hljs-comment"># 检查用户输入的是否是负数</span><br><span class="hljs-comment"># if dog_age &lt; 0 :</span><br><span class="hljs-comment">#     print(&#x27;你的输入不合法！&#x27;)</span><br><span class="hljs-comment"># # 如果狗的年龄在两岁以下（包含两岁）</span><br><span class="hljs-comment"># elif dog_age &lt;= 2 :</span><br><span class="hljs-comment">#     # 直接将当前的年龄乘以10.5</span><br><span class="hljs-comment">#     like_person_age = dog_age * 10.5</span><br><span class="hljs-comment"># # 如果狗的年龄在两岁以上</span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     # 计算前两岁相当于人类的年纪</span><br><span class="hljs-comment">#     like_person_age = 2 * 10.5</span><br><span class="hljs-comment">#     # 计算超过两岁的部分相对于人类的年纪，并进行相加</span><br><span class="hljs-comment">#     like_person_age += ( dog_age - 2 ) * 4</span><br><br><span class="hljs-comment"># if dog_age &gt; 0 :</span><br><span class="hljs-comment">#     print(dog_age,&#x27;岁的狗，年纪相当于&#x27;,like_person_age,&#x27;岁的人&#x27;)</span><br><span class="hljs-comment">#     </span><br><br><span class="hljs-comment"># 在if也可以去嵌套if，代码块是可以嵌套的，每增加一个缩进的级别，代码块就低一级</span><br><span class="hljs-comment"># 检查用户的输入是否合法</span><br><span class="hljs-comment"># if dog_age &gt; 0 :</span><br><span class="hljs-comment">#     # 如果狗的年龄在两岁以下（包含两岁）</span><br><span class="hljs-comment">#     if dog_age &lt;= 2 :</span><br><span class="hljs-comment">#         # 直接将当前的年龄乘以10.5</span><br><span class="hljs-comment">#         like_person_age = dog_age * 10.5</span><br><span class="hljs-comment">#     # 如果狗的年龄在两岁以上</span><br><span class="hljs-comment">#     else :</span><br><span class="hljs-comment">#         # 计算前两岁相当于人类的年纪</span><br><span class="hljs-comment">#         like_person_age = 2 * 10.5</span><br><span class="hljs-comment">#         # 计算超过两岁的部分相对于人类的年纪，并进行相加</span><br><span class="hljs-comment">#         like_person_age += ( dog_age - 2 ) * 4</span><br><br><span class="hljs-comment">#     print(dog_age,&#x27;岁的狗，年纪相当于&#x27;,like_person_age,&#x27;岁的人&#x27;)</span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     print(&#x27;请输入一个合法的年龄！&#x27;)</span><br></code></pre></td></tr></table></figure><h5 id="练习4："><a href="#练习4：" class="headerlink" title="练习4："></a>练习4：</h5><p>​    从键盘输入小明的期末成绩:<br>​        当成绩为100时，’奖励一辆BMW’<br>​        当成绩为[80-99]时，’奖励一台iphone’<br>​        当成绩为[60-79]时，’奖励一本参考书’<br>​        其他时，什么奖励也没有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">final_result = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入期末成绩：&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的期末成绩是：&#x27;</span>,final_result)<br><span class="hljs-keyword">if</span> final_result == <span class="hljs-number">100</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;奖励一辆BMW&#x27;</span>)<br><span class="hljs-keyword">elif</span> final_result &gt;= <span class="hljs-number">80</span> <span class="hljs-keyword">and</span> final_result&lt;=<span class="hljs-number">99</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;奖励一台iphone&#x27;</span>)<br><span class="hljs-keyword">elif</span> final_result &gt;= <span class="hljs-number">60</span> <span class="hljs-keyword">and</span> final_result &lt;= <span class="hljs-number">79</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;奖励一本参考书&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;没有奖励&#x27;</span>)<br><br><br><span class="hljs-comment"># 优化结果</span><br><span class="hljs-comment"># 获取小明的成绩</span><br><span class="hljs-comment"># score = float(input(&#x27;请输入你的期末成绩(0-100)：&#x27;))</span><br><br><span class="hljs-comment"># # 打印分割线</span><br><span class="hljs-comment"># print(&quot;=&quot;*40)</span><br><br><span class="hljs-comment"># # 检查用户的输入是否合法</span><br><span class="hljs-comment"># if 0 &lt;= score &lt;= 100 :</span><br><span class="hljs-comment">#     # 判断发给的奖励</span><br><span class="hljs-comment">#     if score == 100 :</span><br><span class="hljs-comment">#         print(&#x27;宝马，拿去玩！&#x27;)</span><br><span class="hljs-comment">#     elif score &gt;= 80 :</span><br><span class="hljs-comment">#         print(&#x27;苹果手机，拿去玩！&#x27;)</span><br><span class="hljs-comment">#     elif score &gt;= 60 :</span><br><span class="hljs-comment">#         print(&#x27;参考书，拿去玩！&#x27;)</span><br><span class="hljs-comment">#     else :</span><br><span class="hljs-comment">#         print(&#x27;棍子一根！&#x27;)</span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     # 用户输入的不合法，弹出一个友好提示</span><br><span class="hljs-comment">#     print(&#x27;你输入的内容不合法，拉出去毙了！&#x27;)</span><br></code></pre></td></tr></table></figure><h5 id="练习5："><a href="#练习5：" class="headerlink" title="练习5："></a>练习5：</h5><p>​    大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：<br>​        高：180cm以上; 富:1000万以上; 帅:500以上;<br>​        如果这三个条件同时满足，则:’我一定要嫁给他’<br>​        如果三个条件有为真的情况，则:’嫁吧，比上不足，比下有余。’<br>​        如果三个条件都不满足，则:’不嫁！’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">height = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入身高(0-300)c:&#x27;</span>))<br>wealth = <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入财富xxx万元:&#x27;</span>))<br>face= <span class="hljs-built_in">float</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入颜值(0-800)cm:&#x27;</span>))<br><span class="hljs-keyword">if</span> height &gt; <span class="hljs-number">180</span> <span class="hljs-keyword">and</span> wealth &gt; <span class="hljs-number">1000</span> <span class="hljs-keyword">and</span> face &gt; <span class="hljs-number">500</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我一定要嫁给他&#x27;</span>)<br><span class="hljs-keyword">elif</span> height &gt; <span class="hljs-number">180</span> <span class="hljs-keyword">or</span> wealth &gt;<span class="hljs-number">1000</span> <span class="hljs-keyword">or</span> height &gt; <span class="hljs-number">180</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;嫁吧，比上不足，比下有余。&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不嫁！&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句可以使指定的代码块重复指定的次数<br>循环语句分成两种，while循环 和 for循环</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># while循环</span><br><span class="hljs-comment"># 语法：</span><br><span class="hljs-comment">#   while 条件表达式 :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment">#   else :</span><br><span class="hljs-comment">#       代码块</span><br><span class="hljs-comment"># 执行流程：</span><br><span class="hljs-comment">#   while语句在执行时，会先对while后的条件表达式进行求值判断，</span><br><span class="hljs-comment">#       如果判断结果为True，则执行循环体（代码块），</span><br><span class="hljs-comment">#       循环体执行完毕，继续对条件表达式进行求值判断，以此类推，</span><br><span class="hljs-comment">#       直到判断结果为False，则循环终止，如果循环有对应的else，则执行else后的代码块</span><br><br><span class="hljs-comment"># 条件表达式恒为True的循环语句，称为死循环，它会一直运行，慎用！</span><br><span class="hljs-comment"># while True :</span><br><span class="hljs-comment">#     print(&#x27;hello&#x27;)</span><br><br><span class="hljs-comment"># 循环的三个要件（表达式）</span><br><span class="hljs-comment"># 初始化表达式，通过初始化表达式初始化一个变量</span><br><span class="hljs-comment"># i = 0</span><br><br><span class="hljs-comment"># # 条件表达式，条件表达式用来设置循环执行的条件</span><br><span class="hljs-comment"># while i &lt; 10 :</span><br><span class="hljs-comment">#     print(i)</span><br><span class="hljs-comment">#     # 更新表达式，修改初始化变量的值</span><br><span class="hljs-comment">#     i += 1</span><br><br><span class="hljs-comment"># 创建一个执行十次的循环</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">10</span> :<br>    i += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(i,<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;else中的代码块&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="break-continue-pass"><a href="#break-continue-pass" class="headerlink" title="break  \ continue \ pass"></a>break  \ continue \ pass</h4><p>break:<br>可以用来立即退出循环语句（包括else）</p><p>continue:<br>可以用来跳过当次循环<br>break和continue都是只对离他最近的循环起作用</p><p>pass:<br>是用来在判断或循环语句中占位的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">例子：<br><span class="hljs-comment"># 创建一个5次的循环</span><br> i = <span class="hljs-number">0</span><br> <span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">5</span>:<br>     <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span>:<br>         <span class="hljs-keyword">break</span><br>     <span class="hljs-built_in">print</span>(i)<br>     i += <span class="hljs-number">1</span><br> <span class="hljs-keyword">else</span> :<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环结束&#x27;</span>)<br><br><span class="hljs-comment"># i = 0</span><br><span class="hljs-comment"># while i &lt; 5:</span><br><span class="hljs-comment">#     i += 1</span><br><span class="hljs-comment">#     if i == 2:</span><br><span class="hljs-comment">#         continue</span><br><span class="hljs-comment">#     print(i)</span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     print(&#x27;循环结束&#x27;)</span><br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h4><h5 id="练习1：求100以内所有的奇数之和"><a href="#练习1：求100以内所有的奇数之和" class="headerlink" title="练习1：求100以内所有的奇数之和"></a>练习1：求100以内所有的奇数之和</h5><p>​    求100以内所有的奇数之和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求100以内所有的奇数之和</span><br>result = <span class="hljs-number">0</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span> :<br>    i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> :<br>        result = result + i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;100以内所有奇数和为:&quot;</span>,result)<br><br><span class="hljs-comment">#优化</span><br><span class="hljs-comment"># 获取所有100以内数</span><br><span class="hljs-comment"># i = 0</span><br><span class="hljs-comment"># # 创建一个变量，用来保存结果</span><br><span class="hljs-comment"># result = 0</span><br><span class="hljs-comment"># while i &lt; 100 :</span><br><span class="hljs-comment">#     i += 1</span><br><span class="hljs-comment">#     # 判断i是否是奇数</span><br><span class="hljs-comment">#     if i % 2 != 0:</span><br><span class="hljs-comment">#         result += i</span><br><br><span class="hljs-comment"># print(&#x27;result =&#x27;,result)</span><br><br><br></code></pre></td></tr></table></figure><h5 id="练习2：-求100以内所有7的倍数之和，以及个数"><a href="#练习2：-求100以内所有7的倍数之和，以及个数" class="headerlink" title="练习2： 求100以内所有7的倍数之和，以及个数"></a>练习2： 求100以内所有7的倍数之和，以及个数</h5><p>​    求100以内所有7的倍数之和，以及个数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求100以内所有7的倍数之和，以及个数</span><br>result = <span class="hljs-number">0</span><br>i = <span class="hljs-number">7</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">100</span>:<br>    count += <span class="hljs-number">1</span><br>    i += <span class="hljs-number">7</span><br>    result = result + i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result=&#x27;</span>,result)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;j=&#x27;</span>,count)<br><br><span class="hljs-comment">#优化结果</span><br><span class="hljs-comment">#  求100以内所有7的倍数之和，以及个数</span><br><span class="hljs-comment"># i = 7 </span><br><span class="hljs-comment">#  创建一个变量，来保存结果</span><br><span class="hljs-comment"># result = 0</span><br><span class="hljs-comment">#  创建一个计数器，用来记录循环执行的次数</span><br><span class="hljs-comment">#  计数器就是一个变量，专门用来记录次数的变量</span><br><span class="hljs-comment"># count = 0</span><br><span class="hljs-comment"># while i &lt; 100:</span><br><span class="hljs-comment">#     为计数器加1</span><br><span class="hljs-comment">#     count += 1</span><br><span class="hljs-comment">#     result += i</span><br><span class="hljs-comment">#     i += 7    </span><br><br><span class="hljs-comment"># print(&#x27;总和为：&#x27;,result,&#x27;总数量为:&#x27;,count)</span><br><br></code></pre></td></tr></table></figure><h5 id="练习3：求1000以内所有的水仙花数"><a href="#练习3：求1000以内所有的水仙花数" class="headerlink" title="练习3：求1000以内所有的水仙花数"></a>练习3：求1000以内所有的水仙花数</h5><p>​    水仙花数是指一个 n 位数（n≥3 ），它的每个位上的数字的 n 次幂之和等于它本身（例如：1<strong>3 + 5</strong>3 + 3**3 &#x3D; 153）。<br>​    求1000以内所有的水仙花数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取1000以内的三位数</span><br>i = <span class="hljs-number">100</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">1000</span>:<br><br>    <span class="hljs-comment"># 假设，i的百位数是a，十位数b，个位数c</span><br>    <span class="hljs-comment"># 求i的百位数</span><br>    a = i // <span class="hljs-number">100</span><br>    <span class="hljs-comment"># 求i的十位数</span><br>    <span class="hljs-comment"># b = i // 10 % 10</span><br>    b = (i - a * <span class="hljs-number">100</span>) // <span class="hljs-number">10</span><br>    <span class="hljs-comment"># 求i的个位数字</span><br>    c = i % <span class="hljs-number">10</span><br>    <span class="hljs-comment"># print(i , a , b , c)</span><br>    <br>    <span class="hljs-comment"># 判断i是否是水仙花数</span><br>    <span class="hljs-keyword">if</span> a**<span class="hljs-number">3</span> + b**<span class="hljs-number">3</span> + c**<span class="hljs-number">3</span> == i :<br>        <span class="hljs-built_in">print</span>(i)<br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="练习4：判断是否是质数"><a href="#练习4：判断是否是质数" class="headerlink" title="练习4：判断是否是质数"></a>练习4：判断是否是质数</h5><p>​获取用户输入的任意数，判断其是否是质数。质数是只能被1和它自身整除的数，1不是质数也不是合数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取用户输入的任意数，判断其是否是质数。</span><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;输入一个任意的大于1的整数：&#x27;</span>))<br><br><span class="hljs-comment"># 判断num是否是质数，只能被1和它自身整除的数就是质数</span><br><span class="hljs-comment"># 获取到所有的可能整除num的整数</span><br>i = <span class="hljs-number">2</span><br><span class="hljs-comment"># 创建一个变量，用来记录num是否是质数，默认认为num是质数</span><br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> i &lt; num:<br>    <span class="hljs-comment"># 判断num能否被i整除</span><br>    <span class="hljs-comment"># 如果num能被i整除，则说明num一定不是质</span><br>    <span class="hljs-keyword">if</span> num % i == <span class="hljs-number">0</span> :<br>        <span class="hljs-comment"># 一旦进入判断，则证明num不是质数，则需要将flag修改为false</span><br>        flag = <span class="hljs-literal">False</span><br>    i += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">if</span> flag :<br>    <span class="hljs-built_in">print</span>(num,<span class="hljs-string">&#x27;是质数&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-built_in">print</span>(num,<span class="hljs-string">&#x27;不是质数&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在控制台中打印如下图形</span><br><span class="hljs-comment"># *****</span><br><span class="hljs-comment"># *****</span><br><span class="hljs-comment"># *****</span><br><span class="hljs-comment"># ***** </span><br><span class="hljs-comment"># *****</span><br><span class="hljs-comment"># </span><br><br><span class="hljs-comment"># 创建一个循环来控制图形的高度</span><br><span class="hljs-comment"># 循环嵌套时，外层循环没执行一次，内存循环就要执行一圈</span><br><span class="hljs-comment"># i = 0</span><br><span class="hljs-comment"># while i &lt; 5:</span><br><span class="hljs-comment">#     # 创建一个内层循环来控制图形的宽度</span><br><span class="hljs-comment">#     j = 0</span><br><span class="hljs-comment">#     while j &lt; 5:</span><br><span class="hljs-comment">#         print(&quot;* &quot;,end=&#x27;&#x27;)</span><br><span class="hljs-comment">#         j += 1</span><br><span class="hljs-comment">#     print()</span><br><span class="hljs-comment">#     i += 1</span><br><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># *     j&lt;1   i=0</span><br><span class="hljs-comment"># **    j&lt;2   i=1   </span><br><span class="hljs-comment"># ***   j&lt;3   i=2</span><br><span class="hljs-comment"># ****  j&lt;4   i=3</span><br><span class="hljs-comment"># ***** j&lt;5   i=4</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># *****</span><br><span class="hljs-comment"># ****</span><br><span class="hljs-comment"># ***</span><br><span class="hljs-comment"># **</span><br><span class="hljs-comment"># *</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">5</span>:<br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> j &lt; i + <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;* &quot;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#这里的end=&#x27;&#x27;是为了使print输出内容不换行</span><br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>()<br>    i += <span class="hljs-number">1</span><br><br><br></code></pre></td></tr></table></figure><h5 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h5><h6 id="练习1：-打印99乘法表"><a href="#练习1：-打印99乘法表" class="headerlink" title="练习1： 打印99乘法表"></a>练习1： 打印99乘法表</h6><p>​    打印99乘法表<br>​    1<em>1&#x3D;1<br>​    1</em>2&#x3D;2 2<em>2&#x3D;4<br>​    1</em>3&#x3D;3 2<em>3&#x3D;6 3</em>3&#x3D;9<br>​    …                 9*9&#x3D;81</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个外层循环来控制图形的高度</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> i &lt; <span class="hljs-number">9</span>:<br>    i += <span class="hljs-number">1</span><br>    <br>    <span class="hljs-comment"># 创建一个内层循环来控制图形的宽度</span><br>    j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> j &lt; i:<br>        j += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;j&#125;</span>*<span class="hljs-subst">&#123;i&#125;</span>=<span class="hljs-subst">&#123;i*j&#125;</span> &quot;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br></code></pre></td></tr></table></figure><h6 id="练习2：求100以内所有的质数"><a href="#练习2：求100以内所有的质数" class="headerlink" title="练习2：求100以内所有的质数"></a>练习2：求100以内所有的质数</h6><p>​    求100以内所有的质数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求100以内所有的质数</span><br><span class="hljs-comment"># 创建一个循环，求1-100以内所有的数</span><br>i = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">100</span>:<br>    <br>    <span class="hljs-comment"># 创建一个变量，记录i的状态，默认认为i是质数</span><br>    flag = <span class="hljs-literal">True</span><br><br>    <span class="hljs-comment"># 判断i是否是质数</span><br>    <span class="hljs-comment"># 获取所有可能成为i的因数的数</span><br>    j = <span class="hljs-number">2</span> <br>    <span class="hljs-keyword">while</span> j &lt; i:<br>        <span class="hljs-comment"># 判断i能否被j整除</span><br>        <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># i能被j整除，证明i不是质数，修改flag为False</span><br>            flag = <span class="hljs-literal">False</span><br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 验证结果并输出</span><br>    <span class="hljs-keyword">if</span> flag :<br>        <span class="hljs-built_in">print</span>(i)   <br><br>    i += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="练习优化示例：模块的引入"><a href="#练习优化示例：模块的引入" class="headerlink" title="练习优化示例：模块的引入"></a>练习优化示例：模块的引入</h4><p>模块，通过模块可以对Python进行扩展<br>引入一个time模块，来统计程序执行的时间。time()函数可以用来获取当前的时间，返回的单位是秒</p><p>优化前：<br>求100000以内所有的质数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> *<br>begin = time()<br>i = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">10000</span>:<br>    flag = <span class="hljs-literal">True</span><br>    j = <span class="hljs-number">2</span> <br>    <span class="hljs-keyword">while</span> j &lt; i:<br>        <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>            flag = <span class="hljs-literal">False</span><br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> flag :<br>       <span class="hljs-comment">#print(i)   </span><br>    i += <span class="hljs-number">1</span><br>end = time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序执行花费了：&quot;</span>,end - begin , <span class="hljs-string">&quot;秒&quot;</span>)<br></code></pre></td></tr></table></figure><p>结果：程序执行花费了： 8.352874279022217 秒</p><p>第一次优化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 获取程序开始的时间 </span><br>begin = time()<br>i = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">10000</span>:<br>    flag = <span class="hljs-literal">True</span><br>    j = <span class="hljs-number">2</span> <br>    <span class="hljs-keyword">while</span> j &lt; i:<br>        <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-comment"># 一旦进入判断，则证明i一定不是质数，此时内层循环没有继续执行的必要</span><br>            <span class="hljs-comment"># 使用break来退出内层的循环</span><br>            <span class="hljs-keyword">break</span><br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> flag :<br>        <span class="hljs-comment"># print(i)  </span><br>        <span class="hljs-keyword">pass</span><br>    i += <span class="hljs-number">1</span><br><span class="hljs-comment"># 获取程序结束的时间</span><br>end = time()<br><span class="hljs-comment"># 计算程序执行的时间</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序执行花费了：&quot;</span>,end - begin , <span class="hljs-string">&quot;秒&quot;</span>)<br></code></pre></td></tr></table></figure><p>结果：程序执行花费了： 0.9832208156585693 秒</p><p>第二次优化：</p><p>算法优化：一个数的因数最大是其本身的算术平方根</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> *<br>begin = time()<br>i = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> i &lt;= <span class="hljs-number">10000</span>:<br>    flag = <span class="hljs-literal">True</span><br>    j = <span class="hljs-number">2</span> <br>    <span class="hljs-keyword">while</span> j &lt;= i ** <span class="hljs-number">0.5</span>:<span class="hljs-comment">#这里进行优化</span><br>        <span class="hljs-keyword">if</span> i % j == <span class="hljs-number">0</span>:<br>            flag = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> flag :<br>        <span class="hljs-comment"># print(i)  </span><br>        <span class="hljs-keyword">pass</span><br>    i += <span class="hljs-number">1</span><br>end = time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;程序执行花费了：&quot;</span>,end - begin , <span class="hljs-string">&quot;秒&quot;</span>)<br></code></pre></td></tr></table></figure><p>结果： 程序执行花费了： 0.040992021560668945 秒</p><p>可见优化程序对提高程序运行效率十分重要。</p><h3 id="总练习-小游戏"><a href="#总练习-小游戏" class="headerlink" title="总练习 小游戏"></a>总练习 小游戏</h3><p> <strong>小游戏 《唐僧大战白骨精》</strong></p><p>内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span>、身份选择<br>    ① 显示提示信息<br>        欢迎光临 xxx 游戏！<br>        请选择你的身份：<br>            <span class="hljs-number">1.</span>xxx<br>            <span class="hljs-number">2.</span>xxx<br>        请选择：x<br>    ② 根据用户选择来分配身份（显示不同的提示消息）  <br>        <span class="hljs-number">1.</span>---<br>        <span class="hljs-number">2.</span>---<br>        <span class="hljs-number">3.</span>---  <br><br><span class="hljs-number">2</span>、游戏进行<br>    ① 显示玩家的基本信息（攻击力 生命值）<br>    ② 显示玩家可以进行的操作：<br>        <span class="hljs-number">1</span>、练级<br>            - 提升玩家的攻击力和生命值<br>        <span class="hljs-number">2</span>、打BOSS<br>            - 玩家对BOSS进行攻击，玩家要攻击BOSS，BOSS对玩家进行反击<br>            - 计算BOSS是否被玩家消灭，玩家是否被BOSS消灭<br>            - 游戏结束<br>        <span class="hljs-number">3</span>、逃跑<br>            - 退出游戏，显示提示信息，游戏结束！<br></code></pre></td></tr></table></figure><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 显示欢迎信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">20</span>,<span class="hljs-string">&#x27;欢迎光临《唐僧大战白骨精》&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">20</span>)<br><span class="hljs-comment"># 显示身份选择的信息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请选择你的身份：&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t1.唐僧&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t2.白骨精&#x27;</span>)<br><span class="hljs-comment"># 游戏的身份选择</span><br>player_choose = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请选择[1-2]：&#x27;</span>)<br><br><span class="hljs-comment"># 打印一条分割线</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br><br><span class="hljs-comment"># 根据用户的选择来显示不同的提示信息</span><br><span class="hljs-keyword">if</span> player_choose == <span class="hljs-string">&#x27;1&#x27;</span>:<br>    <span class="hljs-comment"># 选择1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你已经选择了1，你将以-&gt;唐僧&lt;-的身份来进行游戏！&#x27;</span>)<br><span class="hljs-keyword">elif</span> player_choose == <span class="hljs-string">&#x27;2&#x27;</span>:<br>    <span class="hljs-comment"># 选择2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你竟然选择了白骨精，太不要脸了，你将以-&gt;唐僧&lt;-的身份来进行游戏！&#x27;</span>)<br><span class="hljs-keyword">else</span> :<br>    <span class="hljs-comment"># 选择3</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的输入有误，系统将自动分配身份，你将以-&gt;唐僧&lt;-的身份来进行游戏！&#x27;</span>)<br><span class="hljs-comment"># 进入游戏</span><br><span class="hljs-comment"># 创建变量，来保存玩家的生命值和攻击力</span><br>player_life = <span class="hljs-number">2</span> <span class="hljs-comment"># 生命值</span><br>player_attack = <span class="hljs-number">2</span> <span class="hljs-comment"># 攻击力</span><br><br><span class="hljs-comment"># 创建一个变量，保存boss的生命值和攻击力</span><br>boss_life = <span class="hljs-number">10</span><br>boss_attack = <span class="hljs-number">10</span><br><span class="hljs-comment"># 打印一条分割线</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br><span class="hljs-comment"># 显示玩家的信息（攻击力、生命值）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;唐僧，你的生命值是 <span class="hljs-subst">&#123;player_life&#125;</span> , 你的攻击力是 <span class="hljs-subst">&#123;player_attack&#125;</span>&#x27;</span>)<br><span class="hljs-comment"># 由于游戏选项是需要反复显示的，所以必须将其编写到一个循环中</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>    <span class="hljs-comment"># 打印一条分割线</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br>    <span class="hljs-comment"># 显示游戏选项，游戏正式开始</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;请选择你要进行的操作：&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t1.练级&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t2.打BOSS&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\t3.逃跑&#x27;</span>)<br>    game_choose = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请选择要做的操作[1-3]：&#x27;</span>)<br>    <span class="hljs-comment"># 处理用户的选择</span><br>    <span class="hljs-keyword">if</span> game_choose == <span class="hljs-string">&#x27;1&#x27;</span> :<br>        <span class="hljs-comment"># 增加玩家的生命值和攻击力</span><br>        player_life += <span class="hljs-number">2</span><br>        player_attack += <span class="hljs-number">2</span><br>        <span class="hljs-comment"># 显示最新的信息</span><br>        <span class="hljs-comment"># 打印一条分割线</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br>        <span class="hljs-comment"># 显示玩家的信息（攻击力、生命值）</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;恭喜你升级了！，你现在的生命值是 <span class="hljs-subst">&#123;player_life&#125;</span> , 你的攻击力是 <span class="hljs-subst">&#123;player_attack&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">elif</span> game_choose == <span class="hljs-string">&#x27;2&#x27;</span> :<br>        <span class="hljs-comment"># 玩家攻击boss</span><br>        <span class="hljs-comment"># 减去boss的生命值，减去的生命值应该等于玩家的攻击力</span><br>        boss_life -= player_attack <br><br>        <span class="hljs-comment"># 打印一条分割线</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&gt;唐僧&lt;- 攻击了 -&gt;白骨精&lt;-&#x27;</span>)<br>        <span class="hljs-comment"># 检查boss是否死亡</span><br>        <span class="hljs-keyword">if</span> boss_life &lt;= <span class="hljs-number">0</span> :<br>            <span class="hljs-comment"># boss死亡，player胜利，游戏结束</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;-&gt;白骨精&lt;-受到了 <span class="hljs-subst">&#123;player_attack&#125;</span> 点伤害，重伤不治死了，-&gt;唐僧&lt;-赢得了胜利！&#x27;</span>)<br>            <span class="hljs-comment"># 游戏结束</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># boss要反击玩家</span><br>        <span class="hljs-comment"># 减去玩家的生命值</span><br>        player_life -= boss_attack <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; -&gt;白骨精&lt;- 攻击了 -&gt;唐僧&lt;-&#x27;</span>)<br>        <span class="hljs-comment"># 检查玩家是否死亡</span><br>        <span class="hljs-keyword">if</span> player_life &lt;= <span class="hljs-number">0</span> :<br>            <span class="hljs-comment"># 玩家死亡</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;你受到了 <span class="hljs-subst">&#123;boss_attack&#125;</span> 点伤害，重伤不治死了！GAME OVER&#x27;</span>)<br>            <span class="hljs-comment"># 游戏结束</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">elif</span> game_choose == <span class="hljs-string">&#x27;3&#x27;</span> :<br>        <span class="hljs-comment"># 打印一条分割线</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br>        <span class="hljs-comment"># 逃跑，退出游戏</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&gt;唐僧&lt;-一扭头，撒腿就跑！GAME OVER&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span> :<br>        <span class="hljs-comment"># 打印一条分割线</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;-&#x27;</span>*<span class="hljs-number">66</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你的输入有误，请重新输入！&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(2.Python入门)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/2.%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20python%E5%85%A5%E9%97%A8/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/2.%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%20python%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="第二部分-Python入门"><a href="#第二部分-Python入门" class="headerlink" title="第二部分 Python入门"></a>第二部分 Python入门</h2><h3 id="什么是计算机语言"><a href="#什么是计算机语言" class="headerlink" title="什么是计算机语言"></a>什么是计算机语言</h3><p>计算机就是一台用来计算机的机器，人让计算机干什么计算机就得干什么！<br>需要通过计算机的语言来控制计算机（编程语言）！<br>计算机语言其实和人类的语言没有本质的区别，不同点就是交流的主体不同！<br>计算机语言发展经历了三个阶段：</p><h4 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h4><ul><li>机器语言通过二进制编码来编写程序效率好，编写起来太麻烦</li></ul><h4 id="符号语言（汇编）"><a href="#符号语言（汇编）" class="headerlink" title="符号语言（汇编）"></a>符号语言（汇编）</h4><ul><li>使用符号来代替机器码</li><li>编写程序时，不需要使用二进制，而是直接编写符号</li><li>编写完成后，需要将符号转换为机器码，然后再由计算机执行<br>符号转换为机器码的过程称为汇编</li><li>将机器码转换为符号的过程，称为反汇编  </li><li>汇编语言一般只适用于某些硬件，兼容性比较差</li></ul><h4 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h4><ul><li>高级语言的语法基本和现在英语语法类似，并且和硬件的关系没有那么紧密了</li><li>也就是说我们通过高级语言开发程序可以在不同的硬件系统中执行</li><li>并且高级语言学习起来也更加的容易，现在我们知道的语言基本都是高级语言</li><li>C、C++、C#、Java、JavaScript、Python 。。。</li></ul><h3 id="编译型语言和解释型语言"><a href="#编译型语言和解释型语言" class="headerlink" title="编译型语言和解释型语言"></a>编译型语言和解释型语言</h3><p>计算机只能识别二进制编码（机器码），所以任何的语言在交由计算机执行时必须要先转换为机器码，也就是像 print(‘hello’) 必需要转换为类似 1010101 这样的机器码   根据转换时机的不同，语言分成了两大类：</p><h4 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h4><ul><li><p>C语言</p></li><li><p>编译型语言，会在代码执行前将代码编译为机器码，然后将机器码交由计算机执行</p></li><li><p>a(源码) –编译–&gt; b(编译后的机器码)</p></li><li><p>特点：<br>执行速度特别快<br>跨平台性比较差</p></li></ul><h4 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h4><ul><li>Python JS Java</li><li>解释型语言，不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译</li><li>a（源码）–解释器–&gt; 解释执行  </li><li>特点：<br>执行速度比较慢<br>跨平台性比较好</li></ul><h3 id="Python的介绍"><a href="#Python的介绍" class="headerlink" title="Python的介绍"></a>Python的介绍</h3><p>Python是解释型语言</p><p>Python（英国发音：&#x2F;ˈpaɪθən&#x2F; 美国发音：&#x2F;ˈpaɪθɑːn&#x2F;），是一种广泛使用的高级编程语言，属于通用型编程语言，由吉多·范罗苏姆创造，第一版发布于1991年。可以视之为一种改良（加入一些其他编程语言的优点，如面向对象）的LISP。作为一种解释型语言，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进划分代码块，而非使用大括号或者关键词）。相比于C++或Java，Python让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。 </p><p>Life is short you need Python （人生苦短，我用Python）    </p><p>Python的用途：<br>    WEB应用<br>    Facebook 豆瓣 。。。<br>    爬虫程序<br>    科学计算<br>    自动化运维<br>    大数据（数据清洗）<br>    云计算<br>    桌面软件&#x2F;游戏<br>    人工智能<br>    。。。     </p><h3 id="Python开发环境搭建"><a href="#Python开发环境搭建" class="headerlink" title="Python开发环境搭建"></a>Python开发环境搭建</h3><p>开发环境搭建就是安装Python的解释器<br>Python的解释器分类：<br>    CPython（官方）<br>        用c语言编写的Python解释器<br>    PyPy<br>        用Python语言编写的Python解释器<br>    IronPython<br>        用.net编写的Python解释器<br>    Jython<br>        用Java编写的Python解释器</p><h3 id="Python的交互界面"><a href="#Python的交互界面" class="headerlink" title="Python的交互界面"></a>Python的交互界面</h3><p>当我们通过命令行来输入Python，所进入到的界面就是Python的交互界面</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1648466736248.png" style="zoom:67%;" /><p>结构：</p><pre><code class="hljs">版本和版权声明：Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.命令提示符：&gt;&gt;&gt;在命令提示符后可以直接输入Python的指令！输入完的指令将会被Python的解释器立即执行！安装Python的同时，会自动安装一个Python的开发工具IDLE，通过IDLE也可以进入到交互模式但是不同的是，在IDLE中可以通过TAB键来查看语句的提示。IDLE实际上就是一个交互界面，但是他可以有一些简单的提示，并且可以将代码保存</code></pre><p>交互模式只能你输入一行代码，它就是执行一行，所以他并不适用于我们日常的开发！<br>    仅可以用来做一些日常的简单的测试！   </p><p>我们一般会将Python代码编写到一个py文件中，然后通过python指令来执行文件中的代码</p><h3 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h3><h4 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1.表达式"></a>1.表达式</h4><p>​    表达式就是一个类似于数学公式的东西<br>​    比如：10 + 5   8 - 4<br>​    表达式一般仅仅用了计算一些结果，不会对程序产生实质性的影响<br>​    如果在交互模式中输入一个表达式，解释器会自动将表达式的结果输出</p><h4 id="2-语句"><a href="#2-语句" class="headerlink" title="2.语句"></a>2.语句</h4><p>​    在程序中语句一般需要完成某种功能，比如打印信息、获取信息、为变量赋值。。。<br>​    比如：<br>​        print()<br>​        input()<br>​        a &#x3D; 10<br>​    语句的执行一般会对程序产生一定的影响<br>​    在交互模式中不一定会输出语句的执行结果  </p><h4 id="3-程序（program）"><a href="#3-程序（program）" class="headerlink" title="3.程序（program）"></a>3.程序（program）</h4><p>​    程序就是由一条一条的语句和一条一条的表达式构成的。</p><h4 id="4-函数（function）"><a href="#4-函数（function）" class="headerlink" title="4.函数（function）"></a>4.函数（function）</h4><p>​函数就是一种语句，函数专门用来完成特定的功能<br>​函数长的形如：xxx()          </p><h4 id="函数的分类："><a href="#函数的分类：" class="headerlink" title="函数的分类："></a>函数的分类：</h4><h5 id="内置函数："><a href="#内置函数：" class="headerlink" title="内置函数："></a>内置函数：</h5><p>​    由Python解释器提供的函数，可以在Python中直接使用</p><h5 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h5><p>​由程序员自主的创建的函数<br>​当我们需要完成某个功能时，就可以去调用内置函数，或者自定义函数 </p><h4 id="函数的两个要素："><a href="#函数的两个要素：" class="headerlink" title="函数的两个要素："></a>函数的两个要素：</h4><p>​<strong>参数</strong><br>​()中的内容就是函数的参数。有参数，也可以有多个参数，多个参数之间使用,隔开<br>​<strong>返回值</strong><br>​返回值是函数的返回结果，不是所有的函数都有返回值</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h3><p>1.在Python中严格区分大小写<br>2.Python中的每一行就是一条语句，每条语句以换行结束<br>3.Python中每一行语句不要过长（规范中建议每行不要超过80个字符）<br>    “rulers”:[80],<br>4.一条语句可以分多行编写，多行编写时语句后边以\结尾<br>5.Python是缩进严格的语言，所以在Python中不要随便写缩进<br>6.在Python中使用#来表示注释，#后的内容都属于注释，注释的内容将会被解释器所忽略<br>    我们可以通过注释来对程序进行解释说明，一定要养成良好的编写注释的习惯<br>    注释要求简单明了，一般习惯上#后边会跟着一个空格</p><h3 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h3><p>字面量就是一个一个的值，比如：1，2，3，4，5，6，‘HELLO’。字面量所表示的意思就是它的字面的值，在程序中可以直接使用字面量</p><p>变量（variable）变量可以用来保存字面量，并且变量中保存的字面量是不定的。变量本身没有任何意思，它会根据不同的字面量表示不同的意思</p><p>一般我们在开发时，很少直接使用字面量，都是将字面量保存到变量中，通过变量来引用字面量</p><h3 id="变量和标识符"><a href="#变量和标识符" class="headerlink" title="变量和标识符"></a>变量和标识符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Python中使用变量，不需要声明，直接为变量赋值即可</span><br>a = <span class="hljs-number">10</span><br><br><span class="hljs-comment"># 不能使用没有进行过赋值的变量</span><br><span class="hljs-comment"># 如果使用没有赋值过的变量，会报错 NameError: name &#x27;b&#x27; is not defined</span><br><span class="hljs-comment"># print(b)</span><br><br><span class="hljs-comment"># Python是一个动态类型的语言，可以为变量赋任意类型的值，也可以任意修改变量的值</span><br>a = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment"># print(a)</span><br><span class="hljs-comment"># 标识符</span><br><span class="hljs-comment"># 在Python中所有可以自主命名的内容都属于标识符</span><br><span class="hljs-comment"># 比如：变量名、函数名、类名</span><br><span class="hljs-comment"># 标识符必须遵循标识符的规范</span><br><span class="hljs-comment">#   1.标识符中可以含有字母、数字、_，但是不能使用数字开头</span><br><span class="hljs-comment">#       例子：a_1 _a1 _1a</span><br><span class="hljs-comment">#   2.标识符不能是Python中的关键字和保留字</span><br><span class="hljs-comment">#       也不建议使用Python中的函数名作为标识符,因为这样会导致函数被覆盖</span><br><span class="hljs-comment">#   3.命名规范：</span><br><span class="hljs-comment">#       在Python中注意遵循两种命名规范：</span><br><span class="hljs-comment">#           下划线命名法</span><br><span class="hljs-comment">#               所有字母小写，单词之间使用_分割</span><br><span class="hljs-comment">#               max_length min_length hello_world xxx_yyy_zzz</span><br><span class="hljs-comment">#           帕斯卡命名法（大驼峰命名法）  </span><br><span class="hljs-comment">#               首字母大写，每个单词开头字母大写，其余字母小写</span><br><span class="hljs-comment">#               MaxLength MinLength HelloWorld XxxYyyZzz  </span><br><span class="hljs-comment">#       </span><br><span class="hljs-comment">#   如果使用不符合标准的标识符，将会报错 SyntaxError: invalid syntax    </span><br>_b123 = <span class="hljs-number">20</span><br><span class="hljs-comment"># print(_b123)</span><br><br><span class="hljs-comment"># print = 123</span><br><span class="hljs-comment"># print(print)</span><br><br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数据类型指的就是变量的值得类型，也就是可以为变量赋哪些值 </p><h4 id="1-数值-整型-浮点型-复数"><a href="#1-数值-整型-浮点型-复数" class="headerlink" title="1.数值:整型, 浮点型,复数"></a>1.数值:整型, 浮点型,复数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在Python数值分成了三种：整数、浮点数（小数）、复数</span><br><span class="hljs-comment"># 在Python中所有的整数都是int类型</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><span class="hljs-comment"># Python中的整数的大小没有限制，可以是一个无限大的整数</span><br><span class="hljs-comment"># c = 999999999999999999999999999999999999999999999 ** 100</span><br><span class="hljs-comment"># 如果数字的长度过大，可以使用下划线作为分隔符</span><br>c = <span class="hljs-number">123_456_789</span><br><span class="hljs-comment"># d = 0123 10进制的数字不能以0开头</span><br><span class="hljs-comment"># 其他进制的整数，只要是数字打印时一定是以十进制的形式显示的</span><br><span class="hljs-comment"># 二进制 0b开头</span><br>c = <span class="hljs-number">0b10</span> <span class="hljs-comment"># 二进制的10</span><br><span class="hljs-comment"># 八进制 0o开头</span><br>c = <span class="hljs-number">0o10</span>      <br><span class="hljs-comment"># 十六进制 0x开头</span><br>c = <span class="hljs-number">0x10</span><br><span class="hljs-comment"># 也可以通过运算符来对数字进行运算，并且可以保证整数运算的精确</span><br>c = -<span class="hljs-number">100</span><br>c = c + <span class="hljs-number">3</span><br><span class="hljs-comment"># 浮点数（小数），在Python中所有的小数都是float类型</span><br>c = <span class="hljs-number">1.23</span><br>c = <span class="hljs-number">4.56</span><br><span class="hljs-comment"># 对浮点数进行运算时，可能会得到一个不精确的结果</span><br>c = <span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span> <span class="hljs-comment"># 0.30000000000000004</span><br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><h4 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h4><h5 id="字符串介绍："><a href="#字符串介绍：" class="headerlink" title="字符串介绍："></a>字符串介绍：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 字符串(str)</span><br><span class="hljs-comment"># 字符串用来表示一段文本信息，字符串是程序中使用的最多的数据类型</span><br><span class="hljs-comment"># 在Python中字符串需要使用引号引起来</span><br><br>s = <span class="hljs-string">&#x27;hello&#x27;</span><br><span class="hljs-comment"># s = abc # 字符串必须使用引号引起来，不使用不是字符串</span><br><span class="hljs-comment"># 引号可以是双引号，也可以是单引号，但是注意不要混着用</span><br>s = <span class="hljs-string">&#x27;hello&#x27;</span><br>s = <span class="hljs-string">&quot;hello&quot;</span><br><span class="hljs-comment"># s = &#x27;hello&quot; 引号不能混合使用  SyntaxError: EOL while scanning string literal</span><br><br><span class="hljs-comment"># 相同的引号之间不能嵌套</span><br><span class="hljs-comment"># s = &quot;子曰:&quot;学而时习之，乐呵乐呵！&quot;&quot;</span><br>s = <span class="hljs-string">&#x27;子曰:&quot;学而时习之，乐呵乐呵！&quot;&#x27;</span><br><br><span class="hljs-comment"># 长字符串</span><br><span class="hljs-comment"># 单引号和双引号不能跨行使用</span><br>s = <span class="hljs-string">&#x27;锄禾日当午，\</span><br><span class="hljs-string">汗滴禾下土，\</span><br><span class="hljs-string">谁知盘中餐，\</span><br><span class="hljs-string">粒粒皆辛苦&#x27;</span><br><br><span class="hljs-comment"># 使用三重引号来表示一个长字符串 &#x27;&#x27;&#x27; &quot;&quot;&quot;</span><br><span class="hljs-comment"># 三重引号可以换行，并且会保留字符串中的格式</span><br><br>s = <span class="hljs-string">&#x27;&#x27;&#x27;锄禾日当午，</span><br><span class="hljs-string">汗滴禾下土，</span><br><span class="hljs-string">谁知盘中餐，</span><br><span class="hljs-string">粒粒皆辛苦&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 转义字符</span><br><span class="hljs-comment"># 可以使用 \ 作为转义字符，通过转义字符，可以在字符串中使用一些特殊的内容</span><br><span class="hljs-comment"># 例子：</span><br><span class="hljs-comment">#   \&#x27; 表示&#x27;</span><br><span class="hljs-comment">#   \&quot; 表示&quot;</span><br><span class="hljs-comment">#   \t 表示制表符</span><br><span class="hljs-comment">#   \n 表示换行符</span><br><span class="hljs-comment">#   \\ 表示反斜杠</span><br><span class="hljs-comment">#   \uxxxx 表示Unicode编码</span><br>s = <span class="hljs-string">&quot;子曰:\&quot;学而时习之，\\\\n乐呵乐呵！\&quot;&quot;</span><br><br>s = <span class="hljs-string">&#x27;\u2250&#x27;</span><br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h5 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 格式化字符串</span><br>a = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-comment"># 字符串之间也可以进行加法运算</span><br><span class="hljs-comment"># 如果将两个字符串进行相加，则会自动将两个字符串拼接为一个</span><br>a = <span class="hljs-string">&#x27;abc&#x27;</span> + <span class="hljs-string">&#x27;haha&#x27;</span> + <span class="hljs-string">&#x27;哈哈&#x27;</span><br><span class="hljs-comment"># a = 123 </span><br><span class="hljs-comment"># 字符串只能不能和其他的类型进行加法运算，如果做了会出现异常 TypeError: must be str, not int</span><br><span class="hljs-comment"># print(&quot;a = &quot;+a) # 这种写法在Python中不常见</span><br>a = <span class="hljs-number">123</span><br><span class="hljs-comment"># print(&#x27;a =&#x27;,a)</span><br><br><span class="hljs-comment"># 在创建字符串时，可以在字符串中指定占位符</span><br><span class="hljs-comment"># %s 在字符串中表示任意字符</span><br><span class="hljs-comment"># %f 浮点数占位符</span><br><span class="hljs-comment"># %d 整数占位符</span><br>b = <span class="hljs-string">&#x27;Hello %s&#x27;</span>%<span class="hljs-string">&#x27;孙悟空&#x27;</span><br>b = <span class="hljs-string">&#x27;hello %s 你好 %s&#x27;</span>%(<span class="hljs-string">&#x27;tom&#x27;</span>,<span class="hljs-string">&#x27;孙悟空&#x27;</span>)<br>b = <span class="hljs-string">&#x27;hello %3.5s&#x27;</span>%<span class="hljs-string">&#x27;abcdefg&#x27;</span> <span class="hljs-comment"># %3.5s字符串的长度限制在3-5之间</span><br>b = <span class="hljs-string">&#x27;hello %s&#x27;</span>%<span class="hljs-number">123.456</span><br>b = <span class="hljs-string">&#x27;hello %.2f&#x27;</span>%<span class="hljs-number">123.456</span><br>b = <span class="hljs-string">&#x27;hello %d&#x27;</span>%<span class="hljs-number">123.95</span><br>b = <span class="hljs-string">&#x27;呵呵&#x27;</span><br><br><span class="hljs-comment"># print(&#x27;a = %s&#x27;%a)</span><br><br><span class="hljs-comment"># 格式化字符串，可以通过在字符串前添加一个f来创建一个格式化字符串</span><br><span class="hljs-comment"># 在格式化字符串中可以直接嵌入变量</span><br>c = <span class="hljs-string">f&#x27;hello <span class="hljs-subst">&#123;a&#125;</span> <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个变量来保存你的名字</span><br>name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br><br><span class="hljs-comment"># 使用四种方式来输出，欢迎 xxx 光临</span><br><span class="hljs-comment"># 拼串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎 &#x27;</span>+name+<span class="hljs-string">&#x27; 光临！&#x27;</span>)<br><span class="hljs-comment"># 多个参数</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎&#x27;</span>,name,<span class="hljs-string">&#x27;光临！&#x27;</span>)<br><span class="hljs-comment"># 占位符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎 %s 光临！&#x27;</span>%name)<br><span class="hljs-comment"># 格式化字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;欢迎 <span class="hljs-subst">&#123;name&#125;</span> 光临！&#x27;</span>)<br><br><span class="hljs-comment"># 字符串的复制（将字符串和数字相乘）</span><br>a = <span class="hljs-string">&#x27;abc&#x27;</span><br><span class="hljs-comment"># * 在语言中表示乘法</span><br><span class="hljs-comment"># 如果将字符串和数字相乘，则解释器会将字符串重复指定的次数并返回</span><br>a = a * <span class="hljs-number">20</span><br><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><h4 id="3-空值和布尔值"><a href="#3-空值和布尔值" class="headerlink" title="3.空值和布尔值"></a>3.空值和布尔值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 布尔值（bool）</span><br><span class="hljs-comment"># 布尔值主要用来做逻辑判断</span><br><span class="hljs-comment"># 布尔值一共有两个 True 和 False</span><br><span class="hljs-comment"># True表示真 False表示假</span><br>a = <span class="hljs-literal">True</span><br>a = <span class="hljs-literal">False</span><br><span class="hljs-comment"># print(&#x27;a =&#x27;,a)</span><br><br><span class="hljs-comment"># 布尔值实际上也属于整型，True就相当于1，False就相当于0</span><br><span class="hljs-comment"># print(1 + False)</span><br><br><span class="hljs-comment"># None（空值）</span><br><span class="hljs-comment"># None专门用来表示不存在</span><br>b = <span class="hljs-literal">None</span><br><span class="hljs-built_in">print</span>(b)<br></code></pre></td></tr></table></figure><h3 id="类型检查"><a href="#类型检查" class="headerlink" title="类型检查"></a>类型检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过类型检查，可以检查只能值（变量）的类型</span><br><br>a = <span class="hljs-number">123</span> <span class="hljs-comment"># 数值</span><br>b = <span class="hljs-string">&#x27;123&#x27;</span> <span class="hljs-comment"># 字符串</span><br><br><span class="hljs-comment"># print(&#x27;a =&#x27;,a)</span><br><span class="hljs-comment"># print(&#x27;b =&#x27;,b)、</span><br><br><span class="hljs-comment"># type()用来检查值的类型</span><br><span class="hljs-comment"># 该函数会将检查的结果作为返回值返回，可以通过变量来接收函数的返回值</span><br>c = <span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;123&#x27;</span>)<br>c = <span class="hljs-built_in">type</span>(a)<br><span class="hljs-comment"># print(type(b))</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment"># &lt;class &#x27;int&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-number">1.5</span>)) <span class="hljs-comment"># &lt;class &#x27;float&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-literal">True</span>)) <span class="hljs-comment"># &lt;class &#x27;bool&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-string">&#x27;hello&#x27;</span>))  <span class="hljs-comment"># &lt;class &#x27;str&#x27;&gt;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(<span class="hljs-literal">None</span>)) <span class="hljs-comment"># &lt;class &#x27;NoneType&#x27;&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="对象（object）"><a href="#对象（object）" class="headerlink" title="对象（object）"></a>对象（object）</h3><ul><li>Python是一门面向对象的语言</li><li>一切皆对象！</li><li>程序运行当中，所有的数据都是存储到内存当中然后再运行的！</li><li>对象就是内存中专门用来存储指定数据的一块区域</li><li>对象实际上就是一个容器，专门用来存储数据</li><li>像我们之前学习的数值、字符串、布尔值、None都是对象</li></ul><h3 id="对象的结构"><a href="#对象的结构" class="headerlink" title="对象的结构"></a>对象的结构</h3><ul><li><p>每个对象中都要保存三种数据</p><ul><li><p>id（标识）</p><blockquote><p>id用来标识对象的唯一性，每一个对象都有唯一的id<br>对象的id就相当于人的身份证号一样<br>可以通过id()函数来查看对象的id<br>id是由解析器生成的，在CPython中，id就是对象的内存地址<br>对象一旦创建，则它的id永远不能再改变</p></blockquote></li><li><p>type（类型）</p><blockquote><p>类型用来标识当前对象所属的类型<br>比如：int str float bool 。。。<br>类型决定了对象有哪些功能<br>通过type()函数来查看对象的类型<br>Python是一门强类型的语言，对象一旦创建类型便不能修改</p></blockquote></li><li><p>value（值）</p><blockquote><p>值就是对象中存储的具体的数据<br>对于有些对象值是可以改变的<br>对象分成两大类，可变对象 不可变对象<br>可变对象的值可以改变<br>不可变对象的值不能改变，之前学习的对象都是不可变对象</p></blockquote></li></ul></li></ul><h3 id="变量和对象"><a href="#变量和对象" class="headerlink" title="变量和对象"></a>变量和对象</h3><ul><li>对象并没有直接存储到变量中，在Python中变量更像是给对象起了一个别名</li><li>变量中存储的不是对象的值，而是对象的id（内存地址），<br>当我们使用变量时，实际上就是在通过对象id在查找对象</li><li>变量中保存的对象，只有在为变量重新赋值时才会改变</li><li>变量和变量之间是相互独立的，修改一个变量不会影响另一个变量</li></ul><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><ul><li>所谓的类型转换，将一个类型的对象转换为其他对象</li><li>类型转换不是改变对象本身的类型，而是根据当前对象的值创建一个新对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 类型转换四个函数 int() float() str() bool()</span><br><span class="hljs-comment"># int() 可以用来将其他的对象转换为整型</span><br><span class="hljs-comment"># 规则：</span><br><span class="hljs-comment">#   布尔值：True -&gt; 1   False -&gt; 0</span><br><span class="hljs-comment">#   浮点数：直接取整，省略小数点后的内容</span><br><span class="hljs-comment">#   字符串：合法的整数字符串，直接转换为对应的数字</span><br><span class="hljs-comment">#           如果不是一个合法的整数字符串，则报错 ValueError: invalid literal for int() with base 10: &#x27;11.5&#x27;</span><br><span class="hljs-comment">#   对于其他不可转换为整型的对象，直接抛出异常 ValueError</span><br><span class="hljs-comment"># float() 和 int()基本一致，不同的是它会将对象转换为浮点数</span><br><span class="hljs-comment"># str() 可以将对象转换为字符串</span><br><span class="hljs-comment">#  True -&gt; &#x27;True&#x27;</span><br><span class="hljs-comment">#  False -&gt; &#x27;False&#x27;</span><br><span class="hljs-comment">#  123 -&gt; &#x27;123&#x27; </span><br><span class="hljs-comment">#  。。。</span><br><span class="hljs-comment">#  bool() 可以将对象转换为布尔值，任何对象都可以转换为布尔值</span><br><span class="hljs-comment">#   规则：对于所有表示空性的对象都会转换为False，其余的转换为True</span><br><span class="hljs-comment">#       哪些表示的空性：0 、 None 、 &#x27;&#x27; 。。。</span><br><br>a = <span class="hljs-literal">True</span><br><br><span class="hljs-comment"># 调用int()来将a转换为整型</span><br><span class="hljs-comment"># int()函数不会对原来的变量产生影响，他是对象转换为指定的类型并将其作为返回值返回</span><br><span class="hljs-comment"># 如果希望修改原来的变量，则需要对变量进行重新赋值</span><br>a = <span class="hljs-built_in">int</span>(a)<br><br>a = <span class="hljs-literal">False</span><br>a = <span class="hljs-built_in">int</span>(a)<br><br>a = <span class="hljs-string">&#x27;123&#x27;</span><br>a = <span class="hljs-built_in">int</span>(a)<br><br>a = <span class="hljs-number">11.6</span><br>a = <span class="hljs-built_in">int</span>(a)<br><br>a = <span class="hljs-string">&#x27;11.5&#x27;</span><br><span class="hljs-comment"># a = int(a)</span><br><br>a = <span class="hljs-literal">None</span><br><span class="hljs-comment"># a = int(a)</span><br><br>a = <span class="hljs-number">1</span><br>a = <span class="hljs-built_in">float</span>(a)<br><br>a = <span class="hljs-literal">False</span><br>a = <span class="hljs-built_in">float</span>(a)<br><br>a = <span class="hljs-number">123</span><br>a = <span class="hljs-built_in">str</span>(a)<br><br>a = <span class="hljs-literal">None</span><br>a = <span class="hljs-built_in">bool</span>(a)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a的类型是&#x27;</span>,<span class="hljs-built_in">type</span>(a))<br><span class="hljs-comment"># b = 456</span><br><span class="hljs-comment"># print(&#x27;hello&#x27;+str(b))</span><br></code></pre></td></tr></table></figure><h3 id="运算符-操作符"><a href="#运算符-操作符" class="headerlink" title="运算符(操作符)"></a>运算符(操作符)</h3><ul><li>运算符可以对一个值或多个值进行运算或各种操作</li><li>比如 + 、-、&#x3D; 都属于运算符</li></ul><h4 id="运算符的分类："><a href="#运算符的分类：" class="headerlink" title="运算符的分类："></a>运算符的分类：</h4><h5 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 算术运算符</span><br><span class="hljs-comment"># + 加法运算符（如果是两个字符串之间进行加法运算，则会进行拼串操作）</span><br><span class="hljs-comment"># - 减法运算符</span><br><span class="hljs-comment"># * 乘法运算符（如果将字符串和数字相乘，则会对字符串进行复制操作，将字符串重复指定次数）</span><br><span class="hljs-comment"># / 除法运算符，运算时结果总会返回一个浮点类型</span><br><span class="hljs-comment"># // 整除，只会保留计算后的整数位，总会返回一个整型</span><br><span class="hljs-comment"># ** 幂运算，求一个值的几次幂</span><br><span class="hljs-comment"># % 取模，求两个数相除的余数</span><br><br>a = <span class="hljs-number">10</span> + <span class="hljs-number">5</span> <span class="hljs-comment"># 计算</span><br>a = <span class="hljs-string">&#x27;hello&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;world&#x27;</span> <span class="hljs-comment"># 拼串</span><br><br>a = <span class="hljs-number">10</span> - <span class="hljs-number">5</span> <span class="hljs-comment"># 计算</span><br>a = <span class="hljs-number">5</span> - <span class="hljs-literal">True</span> <br>a = a - <span class="hljs-number">2</span> <span class="hljs-comment"># 用变量a的值减去2，然后再赋值给a</span><br><span class="hljs-comment"># a = &#x27;hello&#x27; - &#x27;h&#x27; TypeError</span><br><br>a = <span class="hljs-number">5</span> * <span class="hljs-number">5</span><br><br>a = <span class="hljs-number">10</span> / <span class="hljs-number">5</span><br>a = <span class="hljs-number">5</span> / <span class="hljs-number">2</span><br><span class="hljs-comment"># a = 5 / 0 ZeroDivisionError: division by zero</span><br>a = <span class="hljs-number">10</span> / <span class="hljs-number">3</span><br>a = <span class="hljs-number">10</span> // <span class="hljs-number">3</span><br>a = <span class="hljs-number">5</span> // <span class="hljs-number">2</span> <br><br>a = <span class="hljs-number">2</span> ** <span class="hljs-number">2</span><br>a = <span class="hljs-number">10</span> ** <span class="hljs-number">5</span><br>a = <span class="hljs-number">16</span> ** <span class="hljs-number">0.5</span> <span class="hljs-comment"># 求16的平方根</span><br><br>a = <span class="hljs-number">10</span> % <span class="hljs-number">5</span> <span class="hljs-comment"># 0</span><br>a = <span class="hljs-number">10</span> % <span class="hljs-number">4</span> <span class="hljs-comment"># 2</span><br>a = <span class="hljs-number">10</span> % <span class="hljs-number">3</span> <span class="hljs-comment"># 1</span><br>a = <span class="hljs-number">10</span> % <span class="hljs-number">2</span> <span class="hljs-comment"># 0</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>,a)<br></code></pre></td></tr></table></figure><h5 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2.赋值运算符"></a>2.赋值运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 赋值运算符</span><br><span class="hljs-comment"># = 可以将等号右侧的值赋值给等号左侧的变量</span><br><span class="hljs-comment"># +=  a += 5 相当于 a = a + 5 </span><br><span class="hljs-comment"># -=  a -= 5 相当于 a = a - 5 </span><br><span class="hljs-comment"># *=  a *= 5 相当于 a = a * 5 </span><br><span class="hljs-comment"># **= a **= 5 相当于 a = a ** 5 </span><br><span class="hljs-comment"># /=  a /= 5 相当于 a = a / 5 </span><br><span class="hljs-comment"># //= a //= 5 相当于 a = a // 5 </span><br><span class="hljs-comment"># %=  a %= 5 相当于 a = a % 5 </span><br>a = <span class="hljs-number">10</span><br><span class="hljs-comment"># a = a + 5</span><br><span class="hljs-comment"># a += 5</span><br>a -= <span class="hljs-number">5</span><br>a *= <span class="hljs-number">5</span><br>a **= <span class="hljs-number">2</span><br>a /= <span class="hljs-number">25</span><br>a = <span class="hljs-number">25.0</span> <span class="hljs-comment"># 在对浮点数做算术运算时，结果也会返回一个浮点数</span><br>a //= <span class="hljs-number">5</span><br>a = <span class="hljs-number">5</span><br>a %= <span class="hljs-number">4</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br></code></pre></td></tr></table></figure><h5 id="3-比较运算符（关系运算符）"><a href="#3-比较运算符（关系运算符）" class="headerlink" title="3.比较运算符（关系运算符）"></a>3.比较运算符（关系运算符）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 关系运算符</span><br><span class="hljs-comment"># 关系运算符用来比较两个值之间的关系，总会返回一个布尔值</span><br><span class="hljs-comment"># 如果关系成立，返回True，否则返回False</span><br><span class="hljs-comment"># &gt; 比较左侧值是否大于右侧值</span><br><span class="hljs-comment"># &gt;= 比较左侧的值是否大于或等于右侧的值</span><br><span class="hljs-comment"># &lt; 比较左侧值是否小于右侧值</span><br><span class="hljs-comment"># &lt;= 比较左侧的值是否小于或等于右侧的值</span><br><span class="hljs-comment"># == 比较两个对象的值是否相等</span><br><span class="hljs-comment"># != 比较两个对象的值是否不相等</span><br><span class="hljs-comment">#   相等和不等比较的是对象的值，而不是id</span><br><span class="hljs-comment"># is 比较两个对象是否是同一个对象，比较的是对象的id</span><br><span class="hljs-comment"># is not 比较两个对象是否不是同一个对象，比较的是对象的id</span><br>result = <span class="hljs-number">10</span> &gt; <span class="hljs-number">20</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-number">30</span> &gt; <span class="hljs-number">20</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-number">30</span> &lt; <span class="hljs-number">20</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-number">10</span> &gt;= <span class="hljs-number">10</span> <span class="hljs-comment"># True</span><br><br>result = <span class="hljs-number">2</span> &gt; <span class="hljs-literal">True</span> <span class="hljs-comment"># True</span><br><span class="hljs-comment"># result = 2 &gt; &#x27;1&#x27; TypeError: &#x27;&gt;&#x27; not supported between instances of &#x27;int&#x27; and &#x27;str&#x27;</span><br><br><span class="hljs-comment"># 0032 &gt; 0031</span><br>result = <span class="hljs-string">&#x27;2&#x27;</span> &gt; <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-string">&#x27;2&#x27;</span> &gt; <span class="hljs-string">&#x27;11&#x27;</span> <span class="hljs-comment"># True</span><br><br><span class="hljs-comment"># 在Python中可以对两个字符串进行大于（等于）或小于（等于）的运算，</span><br><span class="hljs-comment">#   当对字符串进行比较时，实际上比较的是字符串的Unicode编码</span><br><span class="hljs-comment">#   比较两个字符串的Unicode编码时，是逐位比较的</span><br><span class="hljs-comment">#   利用该特性可以对字符串按照字母顺序进行排序，但是对于中文来说意义不是特别大</span><br><span class="hljs-comment">#   注意：如果不希望比较两个字符串的Unicode编码，则需要将其转换为数字然后再比较</span><br><span class="hljs-comment">#   0061 &gt; 0062</span><br>result = <span class="hljs-string">&#x27;a&#x27;</span> &gt; <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-string">&#x27;c&#x27;</span> &lt; <span class="hljs-string">&#x27;d&#x27;</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-string">&#x27;ab&#x27;</span> &gt; <span class="hljs-string">&#x27;b&#x27;</span> <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># print(int(&#x27;2&#x27;) &gt; int(&#x27;11&#x27;))</span><br><br>result = <span class="hljs-number">1</span> == <span class="hljs-number">1</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-string">&#x27;hello&#x27;</span> == <span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-string">&#x27;abc&#x27;</span> == <span class="hljs-string">&#x27;bcd&#x27;</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-string">&#x27;abc&#x27;</span> != <span class="hljs-string">&#x27;bcd&#x27;</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-number">1</span> == <span class="hljs-literal">True</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-number">1</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># True</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;result =&#x27;</span>,result)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">id</span>(<span class="hljs-number">1</span>),<span class="hljs-built_in">id</span>(<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><h5 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 逻辑运算符</span><br><span class="hljs-comment"># 逻辑运算符主要用来做一些逻辑判断</span><br><span class="hljs-comment"># not 逻辑非</span><br><span class="hljs-comment">#   not可以对符号右侧的值进行非运算</span><br><span class="hljs-comment">#       对于布尔值，非运算会对其进行取反操作，True变False，False变True</span><br><span class="hljs-comment">#       对于非布尔值，非运算会先将其转换为布尔值，然后再取反</span><br><span class="hljs-comment">#       </span><br><span class="hljs-comment"># and 逻辑与</span><br><span class="hljs-comment">#   and可以对符号两侧的值进行与运算</span><br><span class="hljs-comment">#    只有在符号两侧的值都为True时，才会返回True，只要有一个False就返回False</span><br><span class="hljs-comment">#    与运算是找False的</span><br><span class="hljs-comment">#    Python中的与运算是短路的与，如果第一个值为False，则不再看第二个值</span><br><span class="hljs-comment">#   </span><br><span class="hljs-comment"># or 逻辑或</span><br><span class="hljs-comment">#   or 可以对符号两侧的值进行或运算</span><br><span class="hljs-comment">#    或运算两个值中只要有一个True，就会返回True</span><br><span class="hljs-comment">#    或运算是找True的</span><br><span class="hljs-comment">#    Python中的或运算是短路的或，如果第一个值为True，则不再看第二个值</span><br><span class="hljs-comment">#    </span><br><span class="hljs-comment"># 练习：</span><br><span class="hljs-comment">#   尝试一下对布尔值进行三种逻辑运算</span><br><span class="hljs-comment">#   尝试对非布尔值进行三种逻辑运算，并观察返回的结果   </span><br><span class="hljs-comment">#   </span><br><br>a = <span class="hljs-literal">True</span><br>a = <span class="hljs-keyword">not</span> a <span class="hljs-comment"># 对a进行非运算</span><br><br>a = <span class="hljs-number">1</span><br>a = <span class="hljs-string">&#x27;&#x27;</span><br>a = <span class="hljs-keyword">not</span> a<br><span class="hljs-comment"># print(&#x27;a =&#x27;,a)</span><br><br>result = <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-literal">True</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># False</span><br>result = <span class="hljs-literal">False</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># print(result) </span><br><br><span class="hljs-comment"># True and print(&#x27;你猜我出来吗？&#x27;) 第一个值是True，会看第二个值，所以print()会执行</span><br><span class="hljs-comment"># False and print(&#x27;你猜我出来吗？&#x27;)第一个值是False，不会看第二个值，所以print()不会执行</span><br><br><br>result = <span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-literal">True</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-literal">False</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># True</span><br>result = <span class="hljs-literal">False</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">False</span> <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># print(result) </span><br><span class="hljs-comment"># False or print(&#x27;你猜我出来吗？&#x27;) 第一个值为False，继续看第二个，所以打印语句执行</span><br><span class="hljs-comment"># True or print(&#x27;你猜我出来吗？&#x27;) 第一个值为True，不看第二个，所以打印语句不执行</span><br><br><span class="hljs-comment"># 非布尔值的与或运算</span><br><span class="hljs-comment">#   当我们对非布尔值进行与或运算时，Python会将其当做布尔值运算，最终会返回原值</span><br><span class="hljs-comment">#   与运算的规则</span><br><span class="hljs-comment">#       与运算是找False的，如果第一个值是False，则不看第二个值</span><br><span class="hljs-comment">#       如果第一个值是False，则直接返回第一个值，否则返回第二个值</span><br><span class="hljs-comment">#   或运算的规则</span><br><span class="hljs-comment">#       或运算是找True的，如果第一个值是True，则不看第二个值</span><br><span class="hljs-comment">#       如果第一个值是True，则直接返回第一个值，否则返回第二个值    </span><br><br><span class="hljs-comment"># True and True</span><br>result = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 2</span><br><span class="hljs-comment"># True and False</span><br>result = <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># False and True</span><br>result = <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 0</span><br><span class="hljs-comment"># False and False</span><br>result = <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-literal">None</span> <span class="hljs-comment"># 0</span><br><br><span class="hljs-comment"># True or True</span><br>result = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">2</span> <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># True or False</span><br>result = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># False or True</span><br>result = <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 1</span><br><span class="hljs-comment"># False or False</span><br>result = <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-literal">None</span> <span class="hljs-comment"># None</span><br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h5 id="5-条件运算符（三元运算符）"><a href="#5-条件运算符（三元运算符）" class="headerlink" title="5.条件运算符（三元运算符）"></a>5.条件运算符（三元运算符）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 条件运算符（三元运算符）</span><br><span class="hljs-comment"># 语法： 语句1 if 条件表达式 else 语句2</span><br><span class="hljs-comment"># 执行流程：</span><br><span class="hljs-comment">#   条件运算符在执行时，会先对条件表达式进行求值判断</span><br><span class="hljs-comment">#       如果判断结果为True，则执行语句1，并返回执行结果</span><br><span class="hljs-comment">#       如果判断结果为False，则执行语句2，并返回执行结果</span><br><span class="hljs-comment"># 练习：</span><br><span class="hljs-comment">#   现在有a b c三个变量，三个变量中分别保存有三个数值，</span><br><span class="hljs-comment">#       请通过条件运算符获取三个值中的最大值</span><br><br><span class="hljs-comment"># print(&#x27;你好&#x27;) if False else print(&#x27;Hello&#x27;)</span><br><br>a = <span class="hljs-number">30</span><br>b = <span class="hljs-number">50</span><br><br><span class="hljs-comment"># print(&#x27;a的值比较大！&#x27;) if a &gt; b else print(&#x27;b的值比较大！&#x27;)</span><br><span class="hljs-comment"># 获取a和b之间的较大值</span><br><span class="hljs-built_in">max</span> = a <span class="hljs-keyword">if</span> a &gt; b <span class="hljs-keyword">else</span> b<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>)<br></code></pre></td></tr></table></figure><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">40</span><br>b = <span class="hljs-number">50</span><br>c = <span class="hljs-number">30</span><br><br><span class="hljs-comment"># 通过条件运算符获取三个值中的最大值</span><br><span class="hljs-comment"># max = a if a &gt; b else b</span><br><span class="hljs-comment"># max = max if max &gt; c else c</span><br><br><span class="hljs-built_in">max</span> = a <span class="hljs-keyword">if</span> (a &gt; b <span class="hljs-keyword">and</span> a &gt; c) <span class="hljs-keyword">else</span> (b <span class="hljs-keyword">if</span> b &gt; c <span class="hljs-keyword">else</span> c) <span class="hljs-comment"># 不推荐这么使用</span><br><span class="hljs-comment"># max = a if (b &lt; a &gt; c) else (b if b &gt; c else c)</span><br><br><span class="hljs-comment"># print(max)</span><br><br><span class="hljs-comment"># 运算符的优先级</span><br><span class="hljs-comment"># 和数学中一样，在Python运算也有优先级，比如先乘除 后加减</span><br><span class="hljs-comment"># 运算符的优先级可以根据优先级的表格来查询，</span><br><span class="hljs-comment">#   在表格中位置越靠下的运算符优先级越高，优先级越高的越优先计算</span><br><span class="hljs-comment">#   如果优先级一样则自左向右计算</span><br><span class="hljs-comment">#  关于优先级的表格，你知道有这么一个东西就够了，千万不要去记</span><br><span class="hljs-comment">#  在开发中如果遇到优先级不清楚的,则可以通过小括号来改变运算顺序</span><br>a = <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * <span class="hljs-number">3</span><br><br><span class="hljs-comment"># 一样 and高 or高</span><br><span class="hljs-comment"># 如果or的优先级高，或者两个运算符的优先级一样高</span><br><span class="hljs-comment">#   则需要先进行或运算，则运算结果是3</span><br><span class="hljs-comment"># 如果and的优先级高，则应该先计算与运算</span><br><span class="hljs-comment">#   则运算结果是1</span><br>a = <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3</span><br><br><span class="hljs-comment"># print(a)</span><br><br><span class="hljs-comment"># 逻辑运算符（补充）</span><br><span class="hljs-comment"># 逻辑运算符可以连着使用</span><br>result = <span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span> &lt; <span class="hljs-number">3</span> <span class="hljs-comment"># 相当于 1 &lt; 2 and 2 &lt; 3</span><br>result = <span class="hljs-number">10</span> &lt; <span class="hljs-number">20</span> &gt; <span class="hljs-number">15</span><br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(1.计算机基础知识)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/1.%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/1.%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="第一部分-计算机基础知识（了解即可）"><a href="#第一部分-计算机基础知识（了解即可）" class="headerlink" title="第一部分 计算机基础知识（了解即可）"></a>第一部分 计算机基础知识（了解即可）</h2><h3 id="计算机的组成"><a href="#计算机的组成" class="headerlink" title="计算机的组成"></a>计算机的组成</h3><p>计算机由两部分组成：硬件 和 软件<br>硬件包含：键盘、鼠标、显示器、CPU、主板、内存、硬盘 。。。硬件是看的见摸得着的<br>软件包含：系统软件（windows、macOS、Linux）和应用软件（office 、QQ、绝地求生）软件是看的见摸不着的，软件负责控制计算机中的硬件    </p><h3 id="计算机的使用方式"><a href="#计算机的使用方式" class="headerlink" title="计算机的使用方式"></a>计算机的使用方式</h3><p>我们必须要通过软件来对计算机完成各种操作，但是注意，软件中并不是所有的功能都会对用户开放，用户需要调用软件提供的接口（Interface 交互界面）来操作计算机<br>用户界面分成两种：TUI（文本交互界面）和 GUI（图形化交互界面）</p><h3 id="windows的命令行"><a href="#windows的命令行" class="headerlink" title="windows的命令行"></a>windows的命令行</h3><p>命令行就是文本交互界面，通过命令行可以使用一个一个的指令来操作计算机，任何的计算机的操作系统中都包含有命令行（windows、linux、macOS）<br>命令行有多个不同的名字：命令行、命令行窗口、DOS窗口、命令提示符、CMD窗口、Shell、终端、Terminal</p><h4 id="1-如何进入到命令行"><a href="#1-如何进入到命令行" class="headerlink" title="1.如何进入到命令行"></a>1.如何进入到命令行</h4><p>​    win键 + R 出现运行窗口，输入cmd，然后回车</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1648465246565.png" style="zoom:67%;" /><h4 id="2-命令行的结构"><a href="#2-命令行的结构" class="headerlink" title="2.命令行的结构"></a>2.命令行的结构</h4><pre><code class="hljs">- 版本及版权声明（一般没有什么用）Microsoft Windows [版本 10.0.16299.431](c) 2017 Microsoft Corporation。保留所有权利。命令提示符    C:\Users\lilichao&gt;          C:              - 当前所在的磁盘根目录            - 可以通过 x: 来切换盘符（x表示你的盘符）        \Users\lilichao            - 所在磁盘的路径，当前所在的文件夹            - cd 来切换目录        &gt;            - 命令提示符，在大于号后边可以直接输入指令</code></pre><h4 id="3-常用的dos命令"><a href="#3-常用的dos命令" class="headerlink" title="3.常用的dos命令"></a>3.常用的dos命令</h4><p>​    dir 查看当前目录下的所有文件（夹）<br>​    cd 进入到指定的目录<br>​        . 表示当前目录<br>​        .. 表示上一级目录<br>​    md 创建一个目录<br>​    rd 删除一个目录<br>​    del 删除一个文件<br>​    cls 清除屏幕<br>命令的语法<br>​    命令 [参数] [选项]</p><h4 id="4-小技巧"><a href="#4-小技巧" class="headerlink" title="4.小技巧"></a>4.小技巧</h4><ul><li>方向键上下，查看命令的历史记录<ul><li>tab键自动补全命令</li></ul></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>环境变量指的就是操作系统当中的一些变量。可以通过修改环境变量，来对计算机进行配置（主要是来配置一些路径的）</p><h4 id="1-查看环境变量"><a href="#1-查看环境变量" class="headerlink" title="1.查看环境变量"></a>1.查看环境变量</h4><p>​    &gt; 右键 计算机（此电脑），选择属性<br>​    &gt; 系统界面左侧选择 高级系统设置<br>​    &gt; 选择环境变量<br>​    环境变量界面分成了两个部分，上边是用户环境变量，下边是系统环境变量 建议只修改用户的环境变量，不要修改系统的环境变量</p><h4 id="2-添加环境变量"><a href="#2-添加环境变量" class="headerlink" title="2.添加环境变量"></a>2.添加环境变量</h4><p>​    &gt; 通过新建按钮添加环境变量<br>​    &gt; 一个环境变量可以由多个值，值与值之间使用;（英文）隔开</p><h4 id="3-修改环境变量"><a href="#3-修改环境变量" class="headerlink" title="3.修改环境变量"></a>3.修改环境变量</h4><p>​    &gt; 通过编辑按钮来修改环境变量</p><h4 id="4-删除环境变量"><a href="#4-删除环境变量" class="headerlink" title="4.删除环境变量"></a>4.删除环境变量</h4><p>​    &gt; 通过删除按钮来删除环境变量</p><h3 id="path环境变量"><a href="#path环境变量" class="headerlink" title="path环境变量"></a>path环境变量</h3><p>path环境变量中保存的是一个一个的路径。<br>当我们在命令行中输入一个命令（或访问一个文件时），系统会首先在当前目录下寻找，如果找到了则直接执行或打开。 如果没有找到，则会依次去path环境变量的路径中去寻找，直到找到为止。如果path环境变量中的路径都没有找到，则报错 ‘xxx’ 不是内部或外部命令，也不是可运行的程序或批处理文件。<br>我们可以将一些经常需要访问到的文件会程序的路径，添加到path环境变量中，这样我们就可以在任意的位置访问到这些文件了</p><p>注意事项：<br>    1.如果环境变量中没有path，可以手动添加<br>    2.path环境变量不区分大小写 PATH Path path<br>    3.修改完环境变量必须重新启动命令行窗口<br>    4.多个路径之间使用;隔开</p><h3 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h3><h4 id="十进制（最常用的进制）"><a href="#十进制（最常用的进制）" class="headerlink" title="十进制（最常用的进制）"></a>十进制（最常用的进制）</h4><ul><li>十进制就是满十进一的进制</li><li>十进制当中一共有10个数字<br>0 1 2 3 4 5 6 7 8 9</li><li>十进制如何计数<br>0 1 2 3 4 5 6 7 8 9 10 11 12 。。。 19 20 。。。29 30</li></ul><h4 id="二进制（计算机底层使用的进制）"><a href="#二进制（计算机底层使用的进制）" class="headerlink" title="二进制（计算机底层使用的进制）"></a>二进制（计算机底层使用的进制）</h4><ul><li>满二进一</li><li>二进制中一共有2个数字<br>0 1</li><li>二进制如何计数<br>0 1 10 11 100 101 110 111 1000</li><li>所有的数据在计算机底层都是以二进制的形式保存的，计算机只认二进制</li><li>可以将内存想象为一个一个的小格子，小格子中可以存储一个0或一个1</li><li>内存中的每一个小格子，我们称为1bit（位）<br>bit是计算机中的最小的单位<br>byte是我们最小的可操作的单位<br>8bit &#x3D; 1byte（字节）<br>1024byte &#x3D; 1kb（千字节）<br>1024kb &#x3D; 1mb（兆字节）<br>1024mb &#x3D; 1gb（吉字节）<br>1024gb &#x3D; 1tb（太字节）</li></ul><h4 id="八进制（一般不用）"><a href="#八进制（一般不用）" class="headerlink" title="八进制（一般不用）"></a>八进制（一般不用）</h4><ul><li>满八进一</li><li>八进制中一共有8个数字<br>0 1 2 3 4 5 6 7</li><li>八进制如何计数<br>0 1 2 3 4 5 6 7 10 11 。。。 17 20 。。。27 30</li></ul><h4 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h4><ul><li>满十六进一</li><li>十六进制中一共有16个数字，由于十六进制是满16才进位，所以十六进制中引入了a b c d e f来表示 10 11 12 13 14 15<br>0 1 2 3 4 5 6 7 8 9 a b c d e f </li><li>十六进制如何计数<br>0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 。。。 1a 1b 1c 1d 1e 1f20 21 22 。。。 2a 2b 2c 2d 2e 2f 30    </li><li>我们在查看二进制数据时，一般会以十六进制的形式显示</li></ul><h3 id="文本文件和字符集"><a href="#文本文件和字符集" class="headerlink" title="文本文件和字符集"></a>文本文件和字符集</h3><p> 文本分成两种，一种叫做纯文本，还有一种叫做富文本</p><ul><li>纯文本中只能保存单一的文本内容，无法保存内容无关的东西（字体、颜色、图片。。。）</li><li>富文本中可以保存文本以外的内容（word文档）</li><li>在开发时，编写程序使用的全都是纯文本！</li><li>纯文本在计算机底层也会转换为二进制保存，将字符转换为二进制码的过程，我们称为编码<br>将二进制码转换为字符的过程，我们称为解码编码和解码时所采用的规则，我们称为字符集</li><li>常见的字符集：<br>ASCII<ul><li>美国人编码，使用7位来对美国常用的字符进行编码</li><li>包含128个字符<br>ISO-8859-1</li><li>欧洲的编码，使用8位</li><li>包含256个字符<br>GB2312<br>GBK<br>国标码，中国的编码<br>Unicode<br>万国码，包含世界上所有的语言和符号，编写程序时一般都会使用Unicode编码Unicode编码有多种实现，UTF-8 UTF-16 UTF-32最常用的就是UTF-8</li></ul></li><li>乱码<br>编写程序时，如果发现程序代码出现乱码的情况，就要马上去检查字符集是否正确</li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
      <tag>计算机基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(7.异常和文件)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/7.%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86%20%E5%BC%82%E5%B8%B8%E5%92%8C%E6%96%87%E4%BB%B6/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/7.%E7%AC%AC%E4%B8%83%E9%83%A8%E5%88%86%20%E5%BC%82%E5%B8%B8%E5%92%8C%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="第七部分-异常和文件"><a href="#第七部分-异常和文件" class="headerlink" title="第七部分 异常和文件"></a>第七部分 异常和文件</h2><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h4><p>程序在运行过程当中，不可避免的会出现一些错误，比如：<br>        使用了没有赋值过的变量<br>        使用了不存在的索引<br>        除0<br>        …<br> 这些错误在程序中，我们称其为异常。<br> 程序运行过程中，一旦出现异常将会导致程序立即终止，异常以后的代码全部都不会执行！    </p><h4 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h4><p>程序运行时出现异常，目的并不是让我们的程序直接终止！<br>Python是希望在出现异常时，我们可以编写代码来对异常进行处理！</p><h5 id="try语句"><a href="#try语句" class="headerlink" title="try语句"></a>try语句</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>语句<br>    <span class="hljs-keyword">try</span>:<br>        代码块（可能出现错误的语句）<br>    <span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> 异常名:<br>        代码块（出现错误以后的处理方式）<br>    <span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> 异常名:<br>        代码块（出现错误以后的处理方式）<br>    <span class="hljs-keyword">except</span> 异常类型 <span class="hljs-keyword">as</span> 异常名:<br>        代码块（出现错误以后的处理方式）<br>    <span class="hljs-keyword">else</span>：<br>        代码块（没出错时要执行的语句）    <br>    <span class="hljs-keyword">finally</span>:<br>        代码块（该代码块总会执行）   <br>   <span class="hljs-comment"># try是必须的 else语句有没有都行      except和finally至少有一个  </span><br></code></pre></td></tr></table></figure><p>如果出现错误，则会执行expect子句中的代码，这样我们就可以通过代码来处理异常<br>避免因为一个异常导致整个程序的终止 </p><h4 id="异常的传播"><a href="#异常的传播" class="headerlink" title="异常的传播"></a>异常的传播</h4><p>当在函数中出现异常时，如果在函数中对异常进行了处理，则异常不会再继续传播,。如果函数中没有对异常进行处理，则异常会继续向函数调用处传播,</p><p> 如果函数调用处处理了异常，则不再传播，如果没有处理则继续向调用处传播，直到传递到全局作用域（主模块）如果依然没有处理，则程序终止，并且显示异常信息。</p><h4 id="异常的对象"><a href="#异常的对象" class="headerlink" title="异常的对象"></a>异常的对象</h4><p>当程序运行过程中出现异常以后，所有的异常信息会被保存一个专门的异常对象中，而异常传播时，实际上就是异常对象抛给了调用处<br>比如 ： ZeroDivisionError类的对象专门用来表示除0的异常， NameError类的对象专门用来处理变量错误的异常（在Python为我们提供了多个异常对象  ）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;异常出现前&#x27;</span>)<br>l = []<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># print(c)</span><br>    <span class="hljs-comment"># l[10]</span><br>    <span class="hljs-comment"># 1 + &#x27;hello&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">10</span>/<span class="hljs-number">0</span>)<br><span class="hljs-keyword">except</span> NameError:<br>    <span class="hljs-comment"># 如果except后不跟任何的内容，则此时它会捕获到所有的异常</span><br>    <span class="hljs-comment"># 如果在except后跟着一个异常的类型，那么此时它只会捕获该类型的异常</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;出现 NameError 异常&#x27;</span>)<br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;出现 ZeroDivisionError 异常&#x27;</span>)<br><span class="hljs-keyword">except</span> IndexError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;出现 IndexError 异常&#x27;</span>)<br><span class="hljs-comment"># Exception 是所有异常类的父类，所以如果except后跟的是Exception，他也会捕获到所有的异常</span><br><span class="hljs-comment"># 可以在异常类后边跟着一个 as xx 此时xx就是异常对象</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;未知异常&#x27;</span>,e,<span class="hljs-built_in">type</span>(e))<br><span class="hljs-keyword">finally</span> :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;无论是否出现异常，该子句都会执行&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;异常出现后&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h4><p>可以使用 raise 语句来抛出异常，raise语句后需要跟一个异常类 或 异常的实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyError</span>(<span class="hljs-title class_ inherited__">Exception</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-comment"># 如果a和b中有负数，就向调用处抛出异常</span><br>    <span class="hljs-keyword">if</span> a &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> b &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># raise用于向外部抛出异常，后边可以跟一个异常类，或异常类的实例</span><br>        <span class="hljs-comment"># raise Exception    </span><br>        <span class="hljs-comment"># 抛出异常的目的，告诉调用者这里调用时出现问题，希望你自己处理一下</span><br>        <span class="hljs-comment"># raise Exception(&#x27;两个参数中不能有负数！&#x27;)  </span><br>        <span class="hljs-keyword">raise</span> MyError(<span class="hljs-string">&#x27;自定义的异常&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 也可以通过if else来代替异常的处理</span><br>        <span class="hljs-comment"># return None</span><br>    r = a + b<br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-built_in">print</span>(add(-<span class="hljs-number">123</span>,<span class="hljs-number">456</span>))    <br></code></pre></td></tr></table></figure><h3 id="文件（File）"><a href="#文件（File）" class="headerlink" title="文件（File）"></a>文件（File）</h3><p>通过Python程序来对计算机中的各种文件进行增删改查的操作   I&#x2F;O(Input &#x2F; Output)</p><p>操作文件的步骤：</p><p>​    ① 打开文件<br>​        ② 对文件进行各种操作（读、写），然后保存<br>​        ③ 关闭文件</p><h4 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h4><p>当前文件结构：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1651048473327.png" style="zoom:67%;" /><p>使用open函数来打开一个文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">open</span>(file, mode=<span class="hljs-string">&#x27;r&#x27;</span>, buffering=-<span class="hljs-number">1</span>, encoding_=<span class="hljs-literal">None</span>, errors=<span class="hljs-literal">None</span>, newline=<span class="hljs-literal">None</span>, closefd=<span class="hljs-literal">True</span>, opener=<span class="hljs-literal">None</span>)<br><span class="hljs-comment"># 使用open函数来打开一个文件</span><br><span class="hljs-comment"># 参数：</span><br><span class="hljs-comment">#   file 要打开的文件的名字（路径）</span><br><span class="hljs-comment"># 返回值：</span><br><span class="hljs-comment">#   返回一个对象，这个对象就代表了当前打开的文件</span><br><br><span class="hljs-comment"># 创建一个变量，来保存文件的名字</span><br><span class="hljs-comment"># 如果目标文件和当前文件在同一级目录下，则直接使用文件名即可</span><br>file_name = <span class="hljs-string">&#x27;demo.txt&#x27;</span><br><br><span class="hljs-comment"># 在windows系统使用路径时，可以使用/来代替 \</span><br><span class="hljs-comment"># 或者可以使用 \\ 来代替 \</span><br><span class="hljs-comment"># 或者也可以使用原始字符串(加r)</span><br>file_name = <span class="hljs-string">&#x27;hello\\demo.txt&#x27;</span><br>file_name = <span class="hljs-string">r&#x27;hello\demo.txt&#x27;</span><br><br><span class="hljs-comment"># 表示路径，可以使用..来返回一级目录</span><br>file_name = <span class="hljs-string">&#x27;../hello/demo.txt&#x27;</span><br><br><span class="hljs-comment"># 如果目标文件距离当前文件比较远，此时可以使用绝对路径</span><br><span class="hljs-comment"># 绝对路径应该从磁盘的根目录开始书写</span><br>file_name = <span class="hljs-string">r&#x27;C:\Users\lilichao\Desktop\hello.txt&#x27;</span><br><br>file_obj = <span class="hljs-built_in">open</span>(file_name) <span class="hljs-comment"># 打开 file_name 对应的文件</span><br><br><span class="hljs-built_in">print</span>(file_obj)<br></code></pre></td></tr></table></figure><p><strong>打开文件代码基本结构：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 打开文件</span><br>file_name = <span class="hljs-string">&#x27;demo.txt&#x27;</span><br><br><span class="hljs-comment"># 调用open()来打开文件</span><br>file_obj = <span class="hljs-built_in">open</span>(file_name)<br><br><span class="hljs-comment"># # 当我们获取了文件对象以后，所有的对文件的操作都应该通过对象来进行</span><br><span class="hljs-comment"># # 读取文件中的内容</span><br><span class="hljs-comment"># # read()方法，用来读取文件中的内容，它会将内容全部保存为一个字符串返回</span><br>content = file_obj.read()<br><br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure><h4 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h4><p>调用close()方法来关闭文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># # 关闭文件</span><br><span class="hljs-comment"># # 调用close()方法来关闭文件</span><br>file_obj.close()  <span class="hljs-comment">#不常用</span><br><br><span class="hljs-comment"># with ... as 语句</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> file_obj :<br><span class="hljs-comment">#     # 在with语句中可以直接使用file_obj来做文件操作</span><br><span class="hljs-comment">#     # 此时这个文件只能在with中使用，一旦with结束则文件会自动close()</span><br><span class="hljs-comment">#     print(file_obj.read())</span><br></code></pre></td></tr></table></figure><p>完善结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">file_name = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name) <span class="hljs-keyword">as</span> file_obj :<br>        <span class="hljs-built_in">print</span>(file_obj.read())<br><span class="hljs-keyword">except</span> FileNotFoundError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;file_name&#125;</span> 文件不存在~~&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h4><p><strong>注意：</strong><br>调用open()来打开一个文件，可以将文件分成两种类型:<br> 一种，是纯文本文件（使用utf-8等编码编写的文本文件）<br>一种，是二进制文件（图片、mp3、ppt等这些文件）</p><p>open()打开文件时，默认是以文本文件的形式打开的，但是open()默认的编码为None<br>所以处理文本文件时，必须要指定文件的编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br></code></pre></td></tr></table></figure><h5 id="通过-read-来读取文件中的内容"><a href="#通过-read-来读取文件中的内容" class="headerlink" title="通过 read() 来读取文件中的内容"></a><strong>通过 read() 来读取文件中的内容</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">content = file_obj.read(<span class="hljs-number">6</span>)<br>content = file_obj.read(-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>如果直接调用read()它会将文本文件的所有内容全部都读取出来，如果要读取的文件较大的话，会一次性将文件的内容加载到内存中，容易导致内存泄漏，所以对于较大的文件，不要直接调用read()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">file_name = <span class="hljs-string">&#x27;demo2.txt&#x27;</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br>        <span class="hljs-comment"># content = file_obj.read(-1)</span><br>        content = file_obj.read(<span class="hljs-number">6</span>)<br>        content = file_obj.read(<span class="hljs-number">6</span>)<br>        content = file_obj.read(<span class="hljs-number">6</span>)<br>        content = file_obj.read(<span class="hljs-number">6</span>)<br>        <span class="hljs-comment"># print(content)</span><br>        <span class="hljs-comment"># print(len(content))</span><br><span class="hljs-keyword">except</span> FileNotFoundError :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;file_name&#125;</span> 这个文件不存在！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>read()可以接收一个size作为参数，该参数用来指定要读取的字符的数量， 默认值为-1，它会读取文件中的所有字符，可以为size指定一个值，这样read()会读取指定数量的字符。</p><p>每一次读取都是从上次读取到位置开始读取的，如果字符的数量小于size，则会读取剩余所有的，如果已经读取到了文件的最后了，则会返回’’空串</p><h5 id="读取大文件的方式"><a href="#读取大文件的方式" class="headerlink" title="读取大文件的方式"></a><strong>读取大文件的方式</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取大文件的方式</span><br>file_name = <span class="hljs-string">&#x27;demo.txt&#x27;</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br>        <span class="hljs-comment"># 定义一个变量，来保存文件的内容</span><br>        file_content = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># 定义一个变量，来指定每次读取的大小</span><br>        chunk = <span class="hljs-number">100</span><br>        <span class="hljs-comment"># 创建一个循环来读取文件内容</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-comment"># 读取chunk大小的内容</span><br>            content = file_obj.read(chunk)<br><br>            <span class="hljs-comment"># 检查是否读取到了内容</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content:<br>                <span class="hljs-comment"># 内容读取完毕，退出循环</span><br>                <span class="hljs-keyword">break</span><br><br>            <span class="hljs-comment"># 输出内容</span><br>            <span class="hljs-comment"># print(content,end=&#x27;&#x27;)</span><br>            file_content += content<br><br><span class="hljs-keyword">except</span> FileNotFoundError :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;file_name&#125;</span> 这个文件不存在！&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(file_content)<br></code></pre></td></tr></table></figure><h5 id="其它读取方式："><a href="#其它读取方式：" class="headerlink" title="其它读取方式："></a><strong>其它读取方式：</strong></h5><p><strong>readline()</strong>   <strong>readlines()</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pprint<br><span class="hljs-keyword">import</span> os<br>file_name = <span class="hljs-string">&#x27;demo.txt&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name , encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br>    <span class="hljs-comment"># readline()</span><br>    <span class="hljs-comment"># 该方法可以用来读取一行内容</span><br>     <span class="hljs-built_in">print</span>(file_obj.readline(),end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-comment"># print(file_obj.readline())</span><br>    <span class="hljs-comment"># print(file_obj.readline())</span><br><br>    <span class="hljs-comment"># readlines()</span><br>    <span class="hljs-comment"># 该方法用于一行一行的读取内容，它会一次性将读取到的内容封装到一个列表中返回</span><br>     r = file_obj.readlines()<br>     pprint.pprint(r[<span class="hljs-number">0</span>])<br>    <span class="hljs-comment"># pprint.pprint(r[1])</span><br>    <span class="hljs-comment"># pprint.pprint(r[2])</span><br><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> file_obj:<br>        <span class="hljs-built_in">print</span>(t)d<br></code></pre></td></tr></table></figure><h5 id="二进制文件的读取"><a href="#二进制文件的读取" class="headerlink" title="二进制文件的读取"></a>二进制文件的读取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">file_name = <span class="hljs-string">&#x27;c:/Users/lilichao/Desktop/告白气球.flac&#x27;</span><span class="hljs-comment">#读取一个音乐文件</span><br><br><span class="hljs-comment"># 读取模式</span><br><span class="hljs-comment"># t 读取文本文件（默认值）</span><br><span class="hljs-comment"># b 读取二进制文件</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name , <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br>    <span class="hljs-comment"># 读取文本文件时，size是以字符为单位的</span><br>    <span class="hljs-comment"># 读取二进制文件时，size是以字节为单位</span><br>    <span class="hljs-comment"># print(file_obj.read(100))</span><br></code></pre></td></tr></table></figure><p> 将读取到的内容写出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 将读取到的内容写出来</span><br><span class="hljs-comment"># 定义一个新的文件</span><br>new_name = <span class="hljs-string">&#x27;aa.flac&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(new_name , <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> new_obj:<br><br>    <span class="hljs-comment"># 定义每次读取的大小</span><br>    chunk = <span class="hljs-number">1024</span> * <span class="hljs-number">100</span>  <span class="hljs-comment">#每次读取100K</span><br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span> :<br>        <span class="hljs-comment"># 从已有的对象中读取数据</span><br>        content = file_obj.read(chunk)<br><br>        <span class="hljs-comment"># 内容读取完毕，终止循环</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content :<br>            <span class="hljs-keyword">break</span><br><br>        <span class="hljs-comment"># 将读取到的数据写入到新对象中</span><br>        new_obj.write(content)<br></code></pre></td></tr></table></figure><h4 id="文件的写入"><a href="#文件的写入" class="headerlink" title="文件的写入"></a>文件的写入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">file_name = <span class="hljs-string">&#x27;demo5.txt&#x27;</span><br><span class="hljs-comment"># 使用open()打开文件时必须要指定打开文件所要做的操作（读、写、追加）</span><br><span class="hljs-comment"># 如果不指定操作类型，则默认是 读取文件 ， 而读取文件时是不能向文件中写入的</span><br><span class="hljs-comment"># r 表示只读的 (默认值)</span><br><span class="hljs-comment"># w 表示是可写的，使用w来写入文件时，如果文件不存在会创建文件，如果文件存在则会截断文件</span><br><span class="hljs-comment">#   截断文件指删除原来文件中的所有内容</span><br><span class="hljs-comment"># a 表示追加内容，如果文件不存在会创建文件，如果文件存在则会向文件中追加内容</span><br><span class="hljs-comment"># x 用来新建文件，如果文件不存在则创建，存在则报错</span><br><span class="hljs-comment"># + 为操作符增加功能</span><br><span class="hljs-comment">#   r+ 即可读又可写，文件不存在会报错</span><br><span class="hljs-comment">#   w+</span><br><span class="hljs-comment">#   a+</span><br><span class="hljs-comment"># with open(file_name , &#x27;w&#x27; , encoding=&#x27;utf-8&#x27;) as file_obj:</span><br><span class="hljs-comment"># with open(file_name , &#x27;r+&#x27; , encoding=&#x27;utf-8&#x27;) as file_obj:</span><br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name , <span class="hljs-string">&#x27;x&#x27;</span> , encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br>    <span class="hljs-comment"># write()来向文件中写入内容，</span><br>    <span class="hljs-comment"># 如果操作的是一个文本文件的话，则write()需要传递一个字符串作为参数</span><br>    <span class="hljs-comment"># 该方法会可以分多次向文件中写入内容</span><br>    <span class="hljs-comment"># 写入完成以后，该方法会返回写入的字符的个数</span><br>    file_obj.write(<span class="hljs-string">&#x27;aaa\n&#x27;</span>)<br>    file_obj.write(<span class="hljs-string">&#x27;bbb\n&#x27;</span>)<br>    file_obj.write(<span class="hljs-string">&#x27;ccc\n&#x27;</span>)<br>    r = file_obj.write(<span class="hljs-built_in">str</span>(<span class="hljs-number">123</span>)+<span class="hljs-string">&#x27;123123\n&#x27;</span>)<br>    r = file_obj.write(<span class="hljs-string">&#x27;今天天气真不错&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(r)<br><br></code></pre></td></tr></table></figure><h4 id="读取文件的位置"><a href="#读取文件的位置" class="headerlink" title="读取文件的位置"></a>读取文件的位置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># with open(&#x27;demo.txt&#x27;,&#x27;rb&#x27;) as file_obj:</span><br><span class="hljs-comment">#     # print(file_obj.read(100))</span><br><span class="hljs-comment">#     # print(file_obj.read(30))</span><br><br><span class="hljs-comment">#     # seek() 可以修改当前读取的位置</span><br><span class="hljs-comment">#     file_obj.seek(55)</span><br><span class="hljs-comment">#     file_obj.seek(80,0)</span><br><span class="hljs-comment">#     file_obj.seek(70,1)</span><br><span class="hljs-comment">#     file_obj.seek(-10,2)</span><br><span class="hljs-comment">#     # seek()需要两个参数</span><br><span class="hljs-comment">#     #   第一个 是要切换到的位置</span><br><span class="hljs-comment">#     #   第二个 计算位置方式</span><br><span class="hljs-comment">#     #       可选值：</span><br><span class="hljs-comment">#     #           0 从头计算，默认值</span><br><span class="hljs-comment">#     #           1 从当前位置计算</span><br><span class="hljs-comment">#     #           2 从最后位置开始计算</span><br><br><span class="hljs-comment">#     print(file_obj.read())</span><br><br><span class="hljs-comment">#     # tell() 方法用来查看当前读取的位置</span><br><span class="hljs-comment">#     print(&#x27;当前读取到了 --&gt;&#x27;,file_obj.tell())</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;demo2.txt&#x27;</span>,<span class="hljs-string">&#x27;rt&#x27;</span> , encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file_obj:<br>    <span class="hljs-comment"># print(file_obj.read(100))</span><br>    <span class="hljs-comment"># print(file_obj.read(30))</span><br><br>    <span class="hljs-comment"># seek() 可以修改当前读取的位置</span><br>    file_obj.seek(<span class="hljs-number">9</span>)<br>    <span class="hljs-comment"># seek()需要两个参数</span><br>    <span class="hljs-comment">#   第一个 是要切换到的位置</span><br>    <span class="hljs-comment">#   第二个 计算位置方式</span><br>    <span class="hljs-comment">#       可选值：</span><br>    <span class="hljs-comment">#           0 从头计算，默认值</span><br>    <span class="hljs-comment">#           1 从当前位置计算</span><br>    <span class="hljs-comment">#           2 从最后位置开始计算</span><br><br>    <span class="hljs-built_in">print</span>(file_obj.read())<br><br>    <span class="hljs-comment"># tell() 方法用来查看当前读取的位置</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前读取到了 --&gt;&#x27;</span>,file_obj.tell())<br></code></pre></td></tr></table></figure><h4 id="文件的其他操作-和操作系统命令行相似"><a href="#文件的其他操作-和操作系统命令行相似" class="headerlink" title="文件的其他操作(和操作系统命令行相似)"></a>文件的其他操作(和操作系统命令行相似)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> pprint <span class="hljs-keyword">import</span> pprint<br><br><span class="hljs-comment"># os.listdir() 获取指定目录的目录结构</span><br><span class="hljs-comment"># 需要一个路径作为参数，会获取到该路径下的目录结构，默认路径为 . 当前目录</span><br><span class="hljs-comment"># 该方法会返回一个列表，目录中的每一个文件（夹）的名字都是列表中的一个元素</span><br>r = os.listdir()<br><br><span class="hljs-comment"># os.getcwd() 获取当前所在的目录</span><br>r = os.getcwd()<br><br><span class="hljs-comment"># os.chdir() 切换当前所在的目录 作用相当于 cd</span><br><span class="hljs-comment"># os.chdir(&#x27;c:/&#x27;)</span><br><br><span class="hljs-comment"># r = os.getcwd()</span><br><br><span class="hljs-comment"># 创建目录</span><br><span class="hljs-comment"># os.mkdir(&quot;aaa&quot;) # 在当前目录下创建一个名字为 aaa 的目录</span><br><br><span class="hljs-comment"># 删除目录</span><br><span class="hljs-comment"># os.rmdir(&#x27;abc&#x27;)</span><br><br><span class="hljs-comment"># open(&#x27;aa.txt&#x27;,&#x27;w&#x27;)</span><br><span class="hljs-comment"># 删除文件</span><br><span class="hljs-comment"># os.remove(&#x27;aa.txt&#x27;)</span><br><br><span class="hljs-comment"># os.rename(&#x27;旧名字&#x27;,&#x27;新名字&#x27;) 可以对一个文件进行重命名，也可以用来移动一个文件</span><br><span class="hljs-comment"># os.rename(&#x27;aa.txt&#x27;,&#x27;bb.txt&#x27;)</span><br>os.rename(<span class="hljs-string">&#x27;bb.txt&#x27;</span>,<span class="hljs-string">&#x27;c:/users/lilichao/desktop/bb.txt&#x27;</span>)<br><br>pprint(r)<br></code></pre></td></tr></table></figure><p>END：Duruofu 2022.4.27于西安理工大学</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
      <tag>异常和文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(6.对象)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/6.%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86%20%E5%AF%B9%E8%B1%A1/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/6.%E7%AC%AC%E5%85%AD%E9%83%A8%E5%88%86%20%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h2 id="第六部分-对象"><a href="#第六部分-对象" class="headerlink" title="第六部分 对象"></a>第六部分 对象</h2><h3 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h3><pre><code class="hljs">- 对象是内存中专门用来存储数据的一块区域。- 对象中可以存放各种数据（比如：数字、布尔值、代码）- 对象由三部分组成：    1.对象的标识（id）    2.对象的类型（type）    3.对象的值（value）</code></pre><h3 id="面向对象（oop）"><a href="#面向对象（oop）" class="headerlink" title="面向对象（oop）"></a>面向对象（oop）</h3><ul><li><p>Python是一门面向对象的编程语言</p></li><li><p>所谓的面向对象的语言，简单理解就是语言中的所有操作都是通过对象来进行的</p><ul><li>面向过程的编程的语言<ul><li>面向过程指将我们的程序的逻辑分解为一个一个的步骤，<br>  通过对每个步骤的抽象，来完成程序<ul><li>例子：<ul><li>孩子上学<br>  1.妈妈起床<br>  2.妈妈上厕所<br>  3.妈妈洗漱<br>  4.妈妈做早饭<br>  5.妈妈叫孩子起床<br>  6.孩子上厕所<br>  7.孩子要洗漱<br>  8.孩子吃饭<br>  9.孩子背着书包上学校</li></ul></li></ul></li></ul></li></ul></li><li><p>面向过程的编程思想将一个功能分解为一个一个小的步骤，我们通过完成一个一个的小的步骤来完成一个程序</p></li><li><p>这种编程方式，符合我们人类的思维，编写起来相对比较简单</p></li><li><p>但是这种方式编写代码的往往只适用于一个功能，如果要在实现别的功能，即使功能相差极小，也往往要重新编写代码，<br>所以它可复用性比较低，并且难于维护</p></li></ul><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">面向对象的编程语言</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">面向对象的编程语言，关注的是对象，而不关注过程 </span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">对于面向对象的语言来说，一切都是对象       </span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">例子：</span><br>            1.孩他妈起床叫孩子上学<br><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">面向对象的编程思想，将所有的功能统一保存到对应的对象中</span><br>            比如，妈妈功能保存到妈妈的对象中，孩子的功能保存到孩子对象中<br>            要使用某个功能，直接找到对应的对象即可<br>        <span class="hljs-bullet">-</span> <span class="hljs-string">这种方式编写的代码，比较容易阅读，并且比较易于维护，容易复用。</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">但是这种方式编写，不太符合常规的思维，编写起来稍微麻烦一点 </span><br></code></pre></td></tr></table></figure><p>简单归纳一下，<strong>面向对象的思想</strong></p><ol><li>找对象</li><li>搞对象</li></ol><h3 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(class)</h3><ul><li>我们目前所学习的对象都是Python内置的对象</li><li>但是内置对象并不能满足所有的需求，所以我们在开发中经常需要自定义一些对象</li><li>类，简单理解它就相当于一个图纸。在程序中我们需要根据类来创建对象</li><li>类就是对象的图纸！</li><li>我们也称对象是类的实例（instance）</li><li>如果多个对象是通过一个类创建的，我们称这些对象是一类对象</li><li>像 int() float() bool() str() list() dict() …. 这些都是类</li><li>a &#x3D; int(10) # 创建一个int类的实例 等价于 a &#x3D; 10</li><li>我们自定义的类都需要使用大写字母开头，使用大驼峰命名法（帕斯卡命名法）来对类命名</li><li>类也是一个对象！</li><li>类就是一个用来创建对象的对象！</li><li>类是type类型的对象，定义类实际上就是定义了一个type类型的对象</li></ul><p>示例：<strong>定义一个简单的类</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个简单的类</span><br><span class="hljs-comment"># 使用class关键字来定义类，语法和函数很像！</span><br><span class="hljs-comment"># class 类名([父类]):</span><br><span class="hljs-comment">#   代码块</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClass</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span>(MyClass)    <span class="hljs-comment">#得到： &lt;class &#x27;__main__.MyClass&#x27;&gt;    表示现在运行的是主文件的MyClass类</span><br></code></pre></td></tr></table></figure><p>使用MyClass创建一个对象<br>使用类来创建对象，就像调用一个函数一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用MyClass创建一个对象</span><br>mc = MyClass() <span class="hljs-comment"># mc就是通过MyClass创建的对象，mc是MyClass的实例</span><br>mc_2 = MyClass()<br>mc_3 = MyClass()<br>mc_4 = MyClass()<br><span class="hljs-comment"># mc mc_2 mc_3 mc_4 都是MyClass的实例，他们都是一类对象</span><br><span class="hljs-comment"># isinstance()用来检查一个对象是否是一个类的实例</span><br>result = <span class="hljs-built_in">isinstance</span>(mc_2,MyClass)   <span class="hljs-comment">#true</span><br>result = <span class="hljs-built_in">isinstance</span>(mc_2,<span class="hljs-built_in">str</span>)       <span class="hljs-comment">#false</span><br></code></pre></td></tr></table></figure><p> 现在我们通过MyClass这个类创建的对象都是一个空对象。也就是对象中实际上什么都没有，就相当于是一个空的盒子<br> 可以向对象中添加变量，对象中的变量称为属性。</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">语法：对象.属性名 = 属性值<br>mc.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br>mc_2.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span><br><span class="hljs-built_in">print</span>(mc_2.name)<br></code></pre></td></tr></table></figure><p>使用类创建对象的流程（参考下图）</p><p>​1.创建一个变量<br>​2.在内存中创建一个新对象<br>​3.将对象的id赋值给变量</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650210502561.png" style="zoom:67%;" /><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><ul><li><p>类和对象都是对现实生活中的事物或程序中的内容的抽象</p></li><li><p>实际上所有的事物都由两部分构成：<br>  1.数据（属性）<br>  2.行为（方法）</p></li><li><p>在类的代码块中，我们可以定义变量和函数，<br>  变量会成为该类实例的公共属性，所有的该类实例都可以通过 对象.属性名 的形式访问<br>  函数会成为该类实例的公共方法，所有该类实例都可以通过 对象.方法名() 的形式调用方法</p></li><li><p>注意：<br>  方法调用时，第一个参数由解析器自动传递，所以定义方法时，至少要定义一个形参！ </p></li><li><p><strong>实例为什么能访问到类中的属性和方法</strong><br> 类中定义的属性和方法都是公共的，任何该类实例都可以访问</p><ul><li><p><strong>属性和方法查找的流程</strong><br>  当我们调用一个对象的属性时，解析器会先在当前对象中寻找是否含有该属性，<br>  如果有，则直接返回当前的对象的属性值，<br>  如果没有，则去当前对象的类对象中去寻找，如果有则返回类对象的属性值，<br>  如果类对象中依然没有，则报错！</p></li><li><p>类对象和实例对象中都可以保存属性（方法）<br> - 如果这个属性（方法）是所有的实例共享的，则应该将其保存到类对象中</p><ul><li>如果这个属性（方法）是某个实例独有，则应该保存到实例对象中</li></ul></li></ul></li><li><p>一般情况下，属性保存到实例对象中，而方法需要保存到类对象中</p></li></ul><p><strong>尝试定义一个表示人的类:</strong></p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650211295392.png" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 尝试定义一个表示人的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> :<br>    <span class="hljs-comment"># 在类的代码块中，我们可以定义变量和函数</span><br>    <span class="hljs-comment"># 在类中我们所定义的变量，将会成为所有的实例的公共属性</span><br>    <span class="hljs-comment"># 所有实例都可以访问这些变量</span><br>    name = <span class="hljs-string">&#x27;swk&#x27;</span> <span class="hljs-comment"># 公共属性，所有实例都可以访问</span><br><br>    <span class="hljs-comment"># 在类中也可以定义函数，类中的定义的函数，我们称为方法</span><br>    <span class="hljs-comment"># 这些方法可以通过该类的所有实例来访问</span><br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">self</span>) :<br>        <span class="hljs-comment"># 方法每次被调用时，解析器都会自动传递第一个实参</span><br>        <span class="hljs-comment"># 第一个参数，就是调用方法的对象本身，</span><br>        <span class="hljs-comment">#   如果是p1调的，则第一个参数就是p1对象</span><br>        <span class="hljs-comment">#   如果是p2调的，则第一个参数就是p2对象</span><br>        <span class="hljs-comment"># 一般我们都会将这个参数命名为self</span><br><br>        <span class="hljs-comment"># say_hello()这个方法，可以显示如下格式的数据：</span><br>        <span class="hljs-comment">#   你好！我是 xxx</span><br>        <span class="hljs-comment">#   在方法中不能直接访问类中的属性</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好！我是 %s&#x27;</span> %self.name)<br><br><span class="hljs-comment"># 创建Person的实例</span><br>p1 = Person()<br>p2 = Person()<br><br><span class="hljs-comment"># print(p2.name)</span><br><br><span class="hljs-comment"># 调用方法，对象.方法名()</span><br><span class="hljs-comment"># 方法调用和函数调用的区别</span><br><span class="hljs-comment"># 如果是函数调用，则调用时传几个参数，就会有几个实参</span><br><span class="hljs-comment"># 但是如果是方法调用，默认传递一个参数，所以方法中至少要定义一个形参</span><br><br><br><span class="hljs-comment"># 修改p1的name属性</span><br>p1.name = <span class="hljs-string">&#x27;猪八戒&#x27;</span><br>p2.name = <span class="hljs-string">&#x27;沙和尚&#x27;</span><br><br>p1.say_hello() <span class="hljs-comment"># &#x27;你好！我是 猪八戒&#x27;</span><br>p2.say_hello() <span class="hljs-comment"># &#x27;你好！我是 沙和尚&#x27;</span><br><br><span class="hljs-comment"># del p2.name # 删除p2的name属性</span><br><br><span class="hljs-comment"># print(p1.name) </span><br><span class="hljs-comment"># print(p2.name) </span><br><br></code></pre></td></tr></table></figure><h4 id="类对象的初始化"><a href="#类对象的初始化" class="headerlink" title="类对象的初始化"></a>类对象的初始化</h4><p>目前来讲，对于Person类来说name是必须的，并且每一个对象中的name属性基本上都是不同,<br>而我们现在是将name属性在定义为对象以后，手动添加到对象中，这种方式很容易出现错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># p1 = Person()</span><br><span class="hljs-comment"># # 手动向对象添加name属性</span><br><span class="hljs-comment"># p1.name = &#x27;孙悟空&#x27;</span><br><br><span class="hljs-comment"># p2 = Person()</span><br><span class="hljs-comment"># p2.name = &#x27;猪八戒&#x27;</span><br><br><span class="hljs-comment"># p3 = Person()</span><br><span class="hljs-comment"># p3.name = &#x27;沙和尚&#x27;</span><br></code></pre></td></tr></table></figure><p>上面这样定义很麻烦</p><p>我们希望，在创建对象时，必须设置name属性，如果不设置对象将无法创建，并且属性的创建应该是自动完成的，而不是在创建对象以后手动完成。</p><p>在类中可以定义一些特殊方法（魔术方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 特殊方法都是以__开头，__结尾的方法</span><br><span class="hljs-comment"># 特殊方法不需要我们自己调用，不要尝试去调用特殊方法</span><br><span class="hljs-comment"># p1.__init__() 不要这么做</span><br><br><span class="hljs-comment"># 特殊方法将会在特殊的时刻自动调用</span><br>    <span class="hljs-comment"># 学习特殊方法：</span><br>    <span class="hljs-comment">#   1.特殊方法什么时候调用</span><br>    <span class="hljs-comment">#   2.特殊方法有什么作用</span><br><br><span class="hljs-comment"># 创建对象的流程</span><br>    <span class="hljs-comment"># p1 = Person()的运行流程</span><br>    <span class="hljs-comment">#   1.创建一个变量</span><br>    <span class="hljs-comment">#   2.在内存中创建一个新对象</span><br>    <span class="hljs-comment">#   3.__init__(self)方法执行</span><br>    <span class="hljs-comment">#   4.将对象的id赋值给变量</span><br>    <br><span class="hljs-comment"># init会在对象创建以后立即执行</span><br><span class="hljs-comment"># init可以用来向新创建的对象中初始化属性</span><br><span class="hljs-comment"># 调用类创建对象时，类后边的所有参数都会依次传递到init()中</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#定义Person类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> :<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        <span class="hljs-comment"># print(self)</span><br>        <span class="hljs-comment"># 通过self向新建的对象中初始化属性</span><br>        self.name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;大家好，我是%s&#x27;</span>%self.name)<br> <span class="hljs-comment">#定义实例      </span><br>p1 = Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>)<br>p2 = Person(<span class="hljs-string">&#x27;猪八戒&#x27;</span>)<br>p3 = Person(<span class="hljs-string">&#x27;沙和尚&#x27;</span>)<br>p4 = Person(<span class="hljs-string">&#x27;唐僧&#x27;</span>)<br> <span class="hljs-comment">#输出name</span><br><span class="hljs-built_in">print</span>(p1.name)<br><span class="hljs-built_in">print</span>(p2.name)<br><span class="hljs-built_in">print</span>(p3.name)<br><span class="hljs-built_in">print</span>(p4.name)<br></code></pre></td></tr></table></figure><h4 id="类的基本结构"><a href="#类的基本结构" class="headerlink" title="类的基本结构"></a>类的基本结构</h4><pre><code class="hljs">class 类名([父类]) :    公共的属性...     # 对象的初始化方法    def __init__(self,...):        ...    # 其他的方法        def method_1(self,...):        ...    def method_2(self,...):        ...    ...    </code></pre><h4 id="类的练习"><a href="#类的练习" class="headerlink" title="类的练习"></a>类的练习</h4><h5 id="定义一个表示dog的类"><a href="#定义一个表示dog的类" class="headerlink" title="定义一个表示dog的类"></a>定义一个表示dog的类</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">属性：name，age，gender，height<br>...<br>方法：  jiao()，yao()，run()<br>...<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        表示狗的类</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self , name , age , gender , height</span>):<br>        self.name = name<br>        self.age = age<br>        self.gender = gender<br>        self.height = height<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">jiao</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            狗叫的方法</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汪汪汪~~~&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">yao</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            狗咬的方法</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>  <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我咬你~~&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s 快乐的奔跑着~~&#x27;</span>%self.name)     <br><br><br>d = Dog(<span class="hljs-string">&#x27;小黑&#x27;</span>,<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 目前我们可以直接通过 对象.属性 的方式来修改属性的值，这种方式导致对象中的属性可以随意修改</span><br><span class="hljs-comment">#   非常的不安全，值可以任意修改，不论对错</span><br><span class="hljs-comment"># 现在我们就需要一种方式来增强数据的安全性</span><br><span class="hljs-comment">#   1.属性不能随意修改（我让你改你才能改，不让你改你就不能改）</span><br><span class="hljs-comment">#   2.属性不能修改为任意的值（年龄不能是负数）</span><br>d.name = <span class="hljs-string">&#x27;阿黄&#x27;</span> <span class="hljs-comment">#这些不应该被随意更改</span><br>d.age = -<span class="hljs-number">10</span>     <span class="hljs-comment">#这些不应该被随意更改</span><br>d.run()<br><br><span class="hljs-built_in">print</span>(d.age)<br><br><span class="hljs-comment"># print(d.name , d.age , d.gender , d.height)</span><br></code></pre></td></tr></table></figure><h4 id="类的封装"><a href="#类的封装" class="headerlink" title="类的封装"></a>类的封装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 封装是面向对象的三大特性之一</span><br><span class="hljs-comment"># 封装指的是隐藏对象中一些不希望被外部所访问到的属性或方法</span><br><span class="hljs-comment"># 如何隐藏一个对象中的属性？</span><br><span class="hljs-comment">#   - 将对象的属性名，修改为一个外部不知道的名字（最简单）</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        表示狗的类</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self , name , age</span>):<br>        self.hidden_name = name<br>        self.hidden_age = age<br>        <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;大家好，我是 %s&#x27;</span>%self.hidden_name) <br><span class="hljs-comment"># 如何获取（修改）对象中的属性？</span><br><span class="hljs-comment">#   - 需要提供一个getter和setter方法使外部可以访问到属性</span><br><span class="hljs-comment">#   - getter 获取对象中的指定属性（get_属性名）</span><br><span class="hljs-comment">#   - setter 用来设置对象的指定属性（set_属性名）</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">            get_name()用来获取对象的name属性</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span>    <br>        <span class="hljs-comment"># print(&#x27;用户读取了属性&#x27;)</span><br>        <span class="hljs-keyword">return</span> self.hidden_name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_name</span>(<span class="hljs-params">self , name</span>):<br>        <span class="hljs-comment"># print(&#x27;用户修改了属性&#x27;)</span><br>        self.hidden_name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.hidden_age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_age</span>(<span class="hljs-params">self , age</span>):<br>        <span class="hljs-keyword">if</span> age &gt; <span class="hljs-number">0</span> :<br>            self.hidden_age = age    <br><br><span class="hljs-comment"># 使用封装，确实增加了类的定义的复杂程度，但是它也确保了数据的安全性</span><br><span class="hljs-comment">#   1.隐藏了属性名，使调用者无法随意的修改对象中的属性</span><br><span class="hljs-comment">#   2.增加了getter和setter方法，很好的控制的属性是否是只读的</span><br><span class="hljs-comment">#       如果希望属性是只读的，则可以直接去掉setter方法</span><br><span class="hljs-comment">#       如果希望属性不能被外部访问，则可以直接去掉getter方法</span><br><span class="hljs-comment">#   3.使用setter方法设置属性，可以增加数据的验证，确保数据的值是正确的</span><br><span class="hljs-comment">#   4.使用getter方法获取属性，使用setter方法设置属性</span><br><span class="hljs-comment">#       可以在读取属性和修改属性的同时做一些其他的处理</span><br><span class="hljs-comment">#   5.使用getter方法可以表示一些计算的属性</span><br></code></pre></td></tr></table></figure><p>**使用getter方法表示一些计算的属性:**利用get计算矩形面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span>:<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        表示矩形的类</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,width,height</span>):<br>        self.hidden_width = width<br>        self.hidden_height = height<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_width</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.hidden_width<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_height</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.hidden_height   <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_width</span>(<span class="hljs-params">self , width</span>):<br>        self.hidden_width = width <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_height</span>(<span class="hljs-params">self , height</span>):<br>        self.hidden_height = height <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_area</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.hidden_width * self.hidden_height        <br><br><span class="hljs-comment"># r = Rectangle(5,2)  </span><br><span class="hljs-comment"># r.set_width(10)</span><br><span class="hljs-comment"># r.set_height(20)</span><br><br><span class="hljs-comment"># print(r.get_area())   </span><br></code></pre></td></tr></table></figure><p><strong>利用下划线进一步的隐藏属性：</strong>（用了根没用一样，和改属性名字原理相同，不过是python内置）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以为对象的属性使用双下划线开头，__xxx</span><br><span class="hljs-comment"># 双下划线开头的属性，是对象的隐藏属性，隐藏属性只能在类的内部访问，无法通过对象访问</span><br><span class="hljs-comment"># 其实隐藏属性只不过是Python自动为属性改了一个名字</span><br><span class="hljs-comment">#   实际上是将名字修改为了，_类名__属性名 比如 __name -&gt; _Person__name</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>         self.__name = name<br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-keyword">return</span> self.__name<br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_name</span>(<span class="hljs-params">self , name</span>):<br>         self.__name = name        <br><br> p = Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>)<br><br> <span class="hljs-built_in">print</span>(p.__name) <span class="hljs-comment">#__开头的属性是隐藏属性，无法通过对象访问</span><br> p.__name = <span class="hljs-string">&#x27;猪八戒&#x27;</span>   <span class="hljs-comment">#同样也无法修改</span><br> <span class="hljs-built_in">print</span>(p._Person__name)<br> p._Person__name = <span class="hljs-string">&#x27;猪八戒&#x27;</span><br><br><span class="hljs-comment"># print(p.get_name())</span><br><br><span class="hljs-comment"># 使用__开头的属性，实际上依然可以在外部访问，所以这种方式我们一般不用</span><br><span class="hljs-comment">#   一般我们会将一些私有属性（不希望被外部访问的属性）以_开头</span><br><span class="hljs-comment">#   一般情况下，使用_开头的属性都是私有属性，没有特殊需要不要修改私有属性</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_name</span>(<span class="hljs-params">self , name</span>):<br>        self._name = name   <br><br>p = Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(p._name)<br></code></pre></td></tr></table></figure><h4 id="property装饰器"><a href="#property装饰器" class="headerlink" title="property装饰器"></a>property装饰器</h4><p>简单理解就是把 p.set_name(“名字”)  装饰为 p.name &#x3D; “名字”    ，节省两个括号？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        self._name = name<br>        self._age = age<br><br>    <span class="hljs-comment"># property装饰器，用来将一个get方法，转换为对象的属性</span><br>    <span class="hljs-comment"># 添加为property装饰器以后，我们就可以像调用属性一样使用get方法</span><br>    <span class="hljs-comment"># 使用property装饰的方法，必须和属性名是一样的</span><br><span class="hljs-meta">    @property    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;get方法执行了~~~&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self._name<br><br>    <span class="hljs-comment"># setter方法的装饰器：@属性名.setter</span><br><span class="hljs-meta">    @name.setter    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self , name</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;setter方法调用了&#x27;</span>)<br>        self._name = name        <br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self , age</span>):<br>        self._age = age   <br><br>        <br><br>p = Person(<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-number">18</span>)<br><br>p.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br>p.age = <span class="hljs-number">28</span><br><br><span class="hljs-built_in">print</span>(p.name,p.age)<br><br></code></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><h5 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个类 Animal（动物）</span><br><span class="hljs-comment">#   这个类中需要两个方法：run() sleep() </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物会跑~~~&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物睡觉~~~&#x27;</span>)<br><br>    <span class="hljs-comment"># def bark(self):</span><br>    <span class="hljs-comment">#     print(&#x27;动物嚎叫~~~&#x27;)   </span><br><br><span class="hljs-comment"># 定义一个类 Dog（狗）</span><br><span class="hljs-comment">#   这个类中需要三个方法：run() sleep() bark()</span><br> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>:<br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗会跑~~~&#x27;</span>)<br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗睡觉~~~&#x27;</span>)<br><br>     <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>         <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汪汪汪~~~&#x27;</span>) <br><br><span class="hljs-comment"># 有一个类，能够实现我们需要的大部分功能，但是不能实现全部功能</span><br><span class="hljs-comment"># 如何能让这个类来实现全部的功能呢？</span><br><span class="hljs-comment">#   ① 直接修改这个类，在这个类中添加我们需要的功能</span><br><span class="hljs-comment">#       - 修改起来会比较麻烦，并且会违反OCP原则</span><br><span class="hljs-comment">#   ② 直接创建一个新的类</span><br><span class="hljs-comment">#       - 创建一个新的类比较麻烦，并且需要大量的进行复制粘贴，会出现大量的重复性代码</span><br><span class="hljs-comment">#   ③ 直接从Animal类中来继承它的属性和方法</span><br><span class="hljs-comment">#       - 继承是面向对象三大特性之一</span><br><span class="hljs-comment">#       - 通过继承我们可以使一个类获取到其他类中的属性和方法</span><br><span class="hljs-comment">#       - 在定义类时，可以在类名后的括号中指定当前类的父类（超类、基类、super）</span><br><span class="hljs-comment">#           子类（衍生类）可以直接继承父类中的所有的属性和方法</span><br><span class="hljs-comment">#           </span><br><span class="hljs-comment">#  通过继承可以直接让子类获取到父类的方法或属性，避免编写重复性的代码，并且也符合OCP原则</span><br><span class="hljs-comment">#   所以我们经常需要通过继承来对一个类进行扩展</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汪汪汪~~~&#x27;</span>) <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗跑~~~~&#x27;</span>)    <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hashiqi</span>(<span class="hljs-title class_ inherited__">Dog</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fan_sha</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是一只傻傻的哈士奇&#x27;</span>)        <br><br>d = Dog()<br>h = Hashiqi()<br><br><span class="hljs-comment"># 在创建类时，如果省略了父类，则默认父类为object</span><br><span class="hljs-comment">#   object是所有类的父类，所有类都继承自object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># issubclass() 检查一个类是否是另一个类的子类</span><br><span class="hljs-comment"># print(issubclass(Animal , Dog))</span><br><span class="hljs-comment"># print(issubclass(Animal , object))</span><br><span class="hljs-comment"># print(issubclass(Person , object))</span><br><br><span class="hljs-comment"># isinstance()用来检查一个对象是否是一个类的实例</span><br><span class="hljs-comment">#   如果这个类是这个对象的父类，也会返回True</span><br><span class="hljs-comment">#   所有的对象都是object的实例</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">print</span> , <span class="hljs-built_in">object</span>))<br></code></pre></td></tr></table></figure><h5 id="类方法的重写"><a href="#类方法的重写" class="headerlink" title="类方法的重写"></a>类方法的重写</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个类 Animal（动物）</span><br><span class="hljs-comment">#   这个类中需要两个方法：run() sleep() </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物会跑~~~&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物睡觉~~~&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汪汪汪~~~&#x27;</span>) <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗跑~~~~&#x27;</span>)    <br><br><span class="hljs-comment"># 如果在子类中如果有和父类同名的方法，则通过子类实例去调用方法时，</span><br><span class="hljs-comment">#   会调用子类的方法而不是父类的方法，这个特点我们成为叫做方法的重写（覆盖，override）</span><br><span class="hljs-comment"># 创建Dog类的实例</span><br><span class="hljs-comment"># d = Dog()</span><br><br><span class="hljs-comment"># d.run()</span><br><br><span class="hljs-comment"># 当我们调用一个对象的方法时，</span><br><span class="hljs-comment">#   会优先去当前对象中寻找是否具有该方法，如果有则直接调用</span><br><span class="hljs-comment">#   如果没有，则去当前对象的父类中寻找，如果父类中有则直接调用父类中的方法，</span><br><span class="hljs-comment">#   如果没有，则去父类的父类中寻找，以此类推，直到找到object，如果依然没有找到，则报错</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;AAA&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">A</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;BBB&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(<span class="hljs-title class_ inherited__">B</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;CCC&#x27;</span>)   <br><br><span class="hljs-comment"># 创建一个c的实例</span><br>c = C()<br>c.test()<br></code></pre></td></tr></table></figure><h5 id="super"><a href="#super" class="headerlink" title="super()"></a>super()</h5><p>super() 可以用来动态获取当前类的父类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物会跑~~~&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sleep</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动物睡觉~~~&#x27;</span>)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-meta">    @name.setter    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name<br><br><span class="hljs-comment"># 父类中的所有方法都会被子类继承，包括特殊方法，也可以重写特殊方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-title class_ inherited__">Animal</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name,age</span>):<br>        <span class="hljs-comment"># 希望可以直接调用父类的__init__来初始化父类中定义的属性</span><br>        <span class="hljs-comment"># super() 可以用来获取当前类的父类，</span><br>        <span class="hljs-comment">#   并且通过super()返回对象调用父类方法时，不需要传递self</span><br>        <span class="hljs-built_in">super</span>().__init__(name)<span class="hljs-comment">#直接调用父类的__init__来初始化name属性</span><br>        self._age = age<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bark</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;汪汪汪~~~&#x27;</span>) <br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;狗跑~~~~&#x27;</span>)   <br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._age<br><br><span class="hljs-meta">    @age.setter    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">age</span>(<span class="hljs-params">self,age</span>):<br>        self._age = age        <br><br>d = Dog(<span class="hljs-string">&#x27;旺财&#x27;</span>,<span class="hljs-number">18</span>) <br><br><span class="hljs-built_in">print</span>(d.name)       <br><span class="hljs-built_in">print</span>(d.age)       <br></code></pre></td></tr></table></figure><h5 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;AAA&#x27;</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B中的test()方法~~&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;BBB&#x27;</span>) <br><br><span class="hljs-comment"># 在Python中是支持多重继承的，也就是我们可以为一个类同时指定多个父类</span><br><span class="hljs-comment">#   可以在类名的()后边添加多个类，来实现多重继承</span><br><span class="hljs-comment">#   多重继承，会使子类同时拥有多个父类，并且会获取到所有父类中的方法</span><br><span class="hljs-comment"># 在开发中没有特殊的情况，应该尽量避免使用多重继承，因为多重继承会让我们的代码过于复杂</span><br><span class="hljs-comment"># 如果多个父类中有同名的方法，则会现在第一个父类中寻找，然后找第二个，然后找第三个。。。</span><br><span class="hljs-comment">#   前边父类的方法会覆盖后边父类的方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>(A,B):<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 类名.__bases__ 这个属性可以用来获取当前类的所有父类    </span><br><span class="hljs-comment"># print(C.__bases__) (&lt;class &#x27;__main__.B&#x27;&gt;,)</span><br><span class="hljs-comment"># print(B.__bases__) (&lt;class &#x27;object&#x27;&gt;,)</span><br><br><span class="hljs-comment"># print(C.__bases__) # (&lt;class &#x27;__main__.A&#x27;&gt;, &lt;class &#x27;__main__.B&#x27;&gt;)</span><br><br>c = C()<br><br>c.test()<br></code></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>多态是面向对象的三大特征之一,多态从字面上理解是多种形态<br>狗:（狼狗、藏獒、哈士奇、古牧 。。。）一个对象可以以不同的形态去呈现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义两个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br>        <br><span class="hljs-meta">    @name.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name   <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br>        <br><span class="hljs-meta">    @name.setter</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self,name</span>):<br>        self._name = name   <br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span>:<br>    <span class="hljs-keyword">pass</span><br><br><br>a = A(<span class="hljs-string">&#x27;孙悟空&#x27;</span>)<br>b = B(<span class="hljs-string">&#x27;猪八戒&#x27;</span>)<br>c = C()<br><br><span class="hljs-comment"># 定义一个函数</span><br><span class="hljs-comment"># 对于say_hello()这个函数来说，只要对象中含有name属性，它就可以作为参数传递</span><br><span class="hljs-comment">#   这个函数并不会考虑对象的类型，只要有name属性即可</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>(<span class="hljs-params">obj</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好 %s&#x27;</span>%obj.name)<br><br><span class="hljs-comment"># 在say_hello_2中我们做了一个类型检查，也就是只有obj是A类型的对象时，才可以正常使用，</span><br><span class="hljs-comment">#   其他类型的对象都无法使用该函数，这个函数就违反了多态</span><br><span class="hljs-comment"># 违反了多态的函数，只适用于一种类型的对象，无法处理其他类型对象，这样导致函数的适应性非常的差</span><br><span class="hljs-comment"># 注意，向isinstance()这种函数，在开发中一般是不会使用的！</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello_2</span>(<span class="hljs-params">obj</span>):<br>    <span class="hljs-comment"># 做类型检查</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj , A):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;你好 %s&#x27;</span>%obj.name)    <br>        <br> say_hello(b)    <span class="hljs-comment">#可以调用</span><br> say_hello_2(b)  <span class="hljs-comment">#不能调用</span><br><br><span class="hljs-comment"># 鸭子类型</span><br><span class="hljs-comment"># 如果一个东西，走路像鸭子，叫声像鸭子，那么它就是鸭子</span><br><br><span class="hljs-comment"># len()</span><br><span class="hljs-comment"># 之所以一个对象能通过len()来获取长度，是因为对象中具有一个特殊方法__len__</span><br><span class="hljs-comment"># 换句话说，只要对象中具有__len__特殊方法，就可以通过len()来获取它的长度</span><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>s = <span class="hljs-string">&#x27;hello&#x27;</span><br><br><span class="hljs-comment"># print(len(l))</span><br><span class="hljs-comment"># print(len(s))</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b)) <span class="hljs-comment">#可以调用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(c)) <span class="hljs-comment">#不能调用</span><br></code></pre></td></tr></table></figure><p><strong>面向对象的三大特征：</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown">封装<br><span class="hljs-bullet">    -</span> 确保对象中的数据安全<br>继承<br><span class="hljs-bullet">    -</span> 保证了对象的可扩展性<br>多态<br><span class="hljs-bullet">    -</span> 保证了程序的灵活性<br></code></pre></td></tr></table></figure><h4 id="类的总结"><a href="#类的总结" class="headerlink" title="类的总结"></a>类的总结</h4><h5 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 类属性，直接在类中定义的属性是类属性</span><br>    <span class="hljs-comment">#   类属性可以通过类或类的实例访问到</span><br>    <span class="hljs-comment">#   但是类属性只能通过类对象来修改，无法通过实例对象修改</span><br>a = A()<br><span class="hljs-built_in">print</span>(A ,A.count) <span class="hljs-comment">#可以访问</span><br><span class="hljs-built_in">print</span>(a ,a.count) <span class="hljs-comment">#可以访问</span><br>a.count = <span class="hljs-number">10</span>      <span class="hljs-comment">#无法通过实例对象修改，只影响a（实例）的属性</span><br></code></pre></td></tr></table></figure><h5 id="实例属性"><a href="#实例属性" class="headerlink" title="实例属性"></a>实例属性</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>   count = <span class="hljs-number">0</span>   <br>   <br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>       self.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span>  <br>       <span class="hljs-comment"># 实例属性，通过实例对象添加的属性属于实例属性</span><br>       <span class="hljs-comment">#   实例属性只能通过实例对象来访问和修改，类对象无法访问修改</span><br></code></pre></td></tr></table></figure><h5 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    count = <span class="hljs-number">0</span>   <br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span> <br><span class="hljs-comment"># 实例方法</span><br>    <span class="hljs-comment">#   在类中定义，以self为第一个参数的方法都是实例方法</span><br>    <span class="hljs-comment">#   实例方法在调用时，Python会将调用对象作为self传入  </span><br>    <span class="hljs-comment">#   实例方法可以通过实例和类去调用</span><br>    <span class="hljs-comment">#       当通过实例调用时，会自动将当前调用对象作为self传入</span><br>    <span class="hljs-comment">#       当通过类调用时，不会自动传递self，此时我们必须手动传递self</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是test方法~~~ &#x27;</span> , self)    <br></code></pre></td></tr></table></figure><h5 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br> count = <span class="hljs-number">0</span>   <br> <br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>     self.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span> <br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是test方法~~~ &#x27;</span> , self)        <br> <span class="hljs-comment"># 类方法    </span><br> <span class="hljs-comment"># 在类内部使用 @classmethod 来修饰的方法属于类方法</span><br> <span class="hljs-comment"># 类方法的第一个参数是cls，也会被自动传递，cls就是当前的类对象</span><br> <span class="hljs-comment">#   类方法和实例方法的区别，实例方法的第一个参数是self，而类方法的第一个参数是cls</span><br> <span class="hljs-comment">#   类方法可以通过类去调用，也可以通过实例调用，没有区别</span><br><span class="hljs-meta"> @classmethod</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_2</span>(<span class="hljs-params">cls</span>):<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是test_2方法，他是一个类方法~~~ &#x27;</span>,cls)<br>     <span class="hljs-built_in">print</span>(cls.count)<br></code></pre></td></tr></table></figure><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    count = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是test方法~~~ &#x27;</span> , self)    <br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_2</span>(<span class="hljs-params">cls</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是test_2方法，他是一个类方法~~~ &#x27;</span>,cls)<br>        <span class="hljs-built_in">print</span>(cls.count)<br><br>    <span class="hljs-comment"># 静态方法</span><br>    <span class="hljs-comment"># 在类中使用 @staticmethod 来修饰的方法属于静态方法  </span><br>    <span class="hljs-comment"># 静态方法不需要指定任何的默认参数，静态方法可以通过类和实例去调用  </span><br>    <span class="hljs-comment"># 静态方法，基本上是一个和当前类无关的方法，它只是一个保存到当前类中的函数</span><br>    <span class="hljs-comment"># 静态方法一般都是一些工具方法，和当前类无关</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">test_3</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test_3执行了~~~&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h4><p>就像我们生活中会产生垃圾一样，程序在运行过程当中也会产生垃圾,程序运行过程中产生的垃圾会影响到程序的运行的运行性能，所以这些垃圾必须被及时清理</p><p>没用的东西就是垃圾,在程序中没有被引用的对象就是垃圾，这种垃圾对象过多以后会影响到程序的运行的性能,所以我们必须进行及时的垃圾回收，所谓的垃圾回收就是讲垃圾对象从内存中删除</p><p>在Python中有自动的垃圾回收机制，它会自动将这些没有被引用的对象删除，所以我们不用手动处理垃圾回收</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.name = <span class="hljs-string">&#x27;A类&#x27;</span><br><br>    <span class="hljs-comment"># del是一个特殊方法，它会在对象被垃圾回收前调用</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__del__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A()对象被删除了~~~&#x27;</span>,self)<br><br>a = A()<br>b = a <span class="hljs-comment"># 又使用一个变量b，来引用a对应的对象</span><br><br><span class="hljs-built_in">print</span>(a.name)<br><br><span class="hljs-comment"># a = None # 将a设置为了None，此时没有任何的变量对A()对象进行引用，它就是变成了垃圾</span><br><span class="hljs-comment"># b = None</span><br><br></code></pre></td></tr></table></figure><h4 id="特殊方法"><a href="#特殊方法" class="headerlink" title="特殊方法"></a>特殊方法</h4><p>特殊方法，也称为魔术方法, 特殊方法都是使用__开头和结尾的<br> 特殊方法一般不需要我们手动调用，需要在一些特殊情况下自动执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个Person类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;人类&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name , age</span>):<br>        self.name = name<br>        self.age = age<br><br>    <span class="hljs-comment"># __str__（）这个特殊方法会在尝试将对象转换为字符串的时候调用</span><br>    <span class="hljs-comment"># 它的作用可以用来指定对象转换为字符串的结果  （print函数）  </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__str__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Person [name=%s , age=%d]&#x27;</span>%(self.name,self.age)        <br><br>    <span class="hljs-comment"># __repr__()这个特殊方法会在对当前对象使用repr()函数时调用</span><br>    <span class="hljs-comment"># 它的作用是指定对象在 ‘交互模式’中直接输出的效果    </span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello&#x27;</span>        <br><span class="hljs-comment">#一系列特殊方法</span><br>    <span class="hljs-comment"># object.__add__(self, other)</span><br>    <span class="hljs-comment"># object.__sub__(self, other)</span><br>    <span class="hljs-comment"># object.__mul__(self, other)</span><br>    <span class="hljs-comment"># object.__matmul__(self, other)</span><br>    <span class="hljs-comment"># object.__truediv__(self, other)</span><br>    <span class="hljs-comment"># object.__floordiv__(self, other)</span><br>    <span class="hljs-comment"># object.__mod__(self, other)</span><br>    <span class="hljs-comment"># object.__divmod__(self, other)</span><br>    <span class="hljs-comment"># object.__pow__(self, other[, modulo])</span><br>    <span class="hljs-comment"># object.__lshift__(self, other)</span><br>    <span class="hljs-comment"># object.__rshift__(self, other)</span><br>    <span class="hljs-comment"># object.__and__(self, other)</span><br>    <span class="hljs-comment"># object.__xor__(self, other)</span><br>    <span class="hljs-comment"># object.__or__(self, other)</span><br><br>    <span class="hljs-comment"># object.__lt__(self, other) 小于 &lt;</span><br>    <span class="hljs-comment"># object.__le__(self, other) 小于等于 &lt;=</span><br>    <span class="hljs-comment"># object.__eq__(self, other) 等于 ==</span><br>    <span class="hljs-comment"># object.__ne__(self, other) 不等于 !=</span><br>    <span class="hljs-comment"># object.__gt__(self, other) 大于 &gt;</span><br>    <span class="hljs-comment"># object.__ge__(self, other) 大于等于 &gt;= </span><br>    <br>    <span class="hljs-comment"># __len__()获取对象的长度</span><br><br>    <span class="hljs-comment"># object.__bool__(self)</span><br>    <span class="hljs-comment"># 可以通过bool来指定对象转换为布尔值的情况</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__bool__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.age &gt; <span class="hljs-number">17</span><br><br>    <span class="hljs-comment"># __gt__会在对象做大于比较的时候调用，该方法的返回值将会作为比较的结果</span><br>    <span class="hljs-comment"># 他需要两个参数，一个self表示当前对象，other表示和当前对象比较的对象</span><br>    <span class="hljs-comment"># self &gt; other</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__gt__</span>(<span class="hljs-params">self , other</span>):<br>        <span class="hljs-keyword">return</span> self.age &gt; other.age<br><br><br><span class="hljs-comment"># 创建两个Person类的实例        </span><br>p1 = Person(<span class="hljs-string">&#x27;孙悟空&#x27;</span>,<span class="hljs-number">18</span>)<br>p2 = Person(<span class="hljs-string">&#x27;猪八戒&#x27;</span>,<span class="hljs-number">28</span>)<br><br><span class="hljs-comment"># 打印p1</span><br><span class="hljs-comment"># 当我们打印一个对象时，实际上打印的是对象的中特殊方法 __str__()的返回值</span><br><span class="hljs-comment"># print(p1) # &lt;__main__.Person object at 0x04E95090&gt;</span><br><span class="hljs-comment"># print(p1)</span><br><span class="hljs-comment"># print(p2)</span><br><br><span class="hljs-comment"># print(repr(p1))</span><br><br><span class="hljs-comment"># t = 1,2,3</span><br><span class="hljs-comment"># print(t) # (1, 2, 3)</span><br><br><span class="hljs-comment"># print(p1 &gt; p2)</span><br><span class="hljs-comment"># print(p2 &gt; p1)</span><br><br><span class="hljs-comment"># print(bool(p1))</span><br><br><span class="hljs-comment"># if p1 :</span><br><span class="hljs-comment">#     print(p1.name,&#x27;已经成年了&#x27;)</span><br><span class="hljs-comment"># else :</span><br><span class="hljs-comment">#     print(p1.name,&#x27;还未成年了&#x27;)</span><br></code></pre></td></tr></table></figure><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><h4 id="模块的创建和引入"><a href="#模块的创建和引入" class="headerlink" title="模块的创建和引入"></a>模块的创建和引入</h4><p>模块（module）模块化，模块化指将一个完整的程序分解为一个一个小的模块<br>通过将模块组合，来搭建出一个完整的程序</p><p>不采用模块化，统一将所有的代码编写到一个文件中  .采用模块化，将程序分别编写到多个文件中</p><p> 模块化的优点：  ① 方便开发 ② 方便维护  ③ 模块可以复用！</p><p>在Python中一个py文件就是一个模块，要想创建模块，实际上就是创建一个python文件。<br>注意：模块名要符号标识符的规范。</p><p> <strong>在一个模块中引入外部模块</strong><br> ① import 模块名 （模块名，就是python文件的名字，注意不要py）。<br> ② import 模块名 as 模块别名。</p><ul><li>可以引入同一个模块多次，但是模块的实例只会创建一个。</li><li>import可以在程序的任意位置调用，但是一般情况下，import语句都会统一写在程序的开头。</li><li>在每一个模块内部都有一个__name__属性，通过这个属性可以获取到模块的名字。</li><li>__name__属性值为 __main__的模块是主模块，一个程序中只会有一个主模块。主模块就是我们直接通过 python 执行的模块</li></ul><p>引入一个叫test_module的模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> test_module <span class="hljs-keyword">as</span> test<br><br><span class="hljs-comment"># print(test.__name__)</span><br><span class="hljs-built_in">print</span>(__name__)  <span class="hljs-comment">#获取到模块的名字：  __main__</span><br></code></pre></td></tr></table></figure><h4 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h4><p>创建一个模块：m.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 可以在模块中定义变量，在模块中定义的变量，在引入模块后，就可以直接使用了</span><br>a = <span class="hljs-number">10</span><br>b = <span class="hljs-number">20</span><br><br><span class="hljs-comment"># 添加了_的变量，只能在模块内部访问，在通过import * 引入时，不会引入_开头的变量</span><br>_c = <span class="hljs-number">30</span><br><br><span class="hljs-comment"># 可以在模块中定义函数，同样可以通过模块访问到</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test2&#x27;</span>)<br><br><span class="hljs-comment"># 也可以定义类    </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.name = <span class="hljs-string">&#x27;孙悟空&#x27;</span><br><br><span class="hljs-comment"># 编写测试代码，这部分代码，只要当当前文件作为主模块的时候才需要执行</span><br><span class="hljs-comment">#   而当模块被其他模块引入时，不需要执行的，此时我们就必须要检查当前模块是否是主模块  </span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    test()<br>    test2()<br>    p = Person()<br>    <span class="hljs-built_in">print</span>(p.name)<br></code></pre></td></tr></table></figure><p>主程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> m  <span class="hljs-comment">#引入模块</span><br><br><span class="hljs-comment"># # 访问模块中的变量：模块名.变量名</span><br><span class="hljs-comment"># # print(m.a , m.b)</span><br><span class="hljs-comment"># # m.test2()</span><br><span class="hljs-comment"># p = m.Person()</span><br><span class="hljs-comment"># print(p.name)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是主模块中的test2&#x27;</span>)<br><br><br><span class="hljs-comment"># 也可以只引入模块中的部分内容</span><br><span class="hljs-comment"># 语法 from 模块名 import 变量,变量....</span><br> <span class="hljs-keyword">from</span> m <span class="hljs-keyword">import</span> Person<br> <span class="hljs-keyword">from</span> m <span class="hljs-keyword">import</span> test<br> <span class="hljs-keyword">from</span> m <span class="hljs-keyword">import</span> Person,test<br> <span class="hljs-keyword">from</span> m <span class="hljs-keyword">import</span> * <span class="hljs-comment"># 引入到模块中所有内容，一般不会使用</span><br> p1 = Person()<br> <span class="hljs-built_in">print</span>(p1)<br> test()<br> test2()<br><br><span class="hljs-comment"># 也可以为引入的变量使用别名</span><br><span class="hljs-comment"># 语法：from 模块名 import 变量 as 别名</span><br> <span class="hljs-keyword">from</span> m <span class="hljs-keyword">import</span> test2 <span class="hljs-keyword">as</span> new_test2<br><br> test2()<br> new_test2()<br><br><span class="hljs-keyword">from</span> m <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># print(_c)</span><br></code></pre></td></tr></table></figure><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p> 包 Package。包也是一个模块<br>当我们模块中代码过多时，或者一个模块需要被分解为多个模块时，这时就需要使用到包。</p><p>普通的模块就是一个py文件，而包是一个文件夹<br>包中必须要一个一个 <strong>init</strong>.py 这个文件，这个文件中可以包含有包中的主要内容</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1650987964696.png" style="zoom:67%;" /><p>引入一个叫hello的包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hello <span class="hljs-keyword">import</span> a , b<br><br><span class="hljs-built_in">print</span>(a.c)<br><span class="hljs-built_in">print</span>(b.d)<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># <span class="hljs-strong">__pycache__</span> 是模块的缓存文件</span><br><span class="hljs-section"># py代码在执行前，需要被解析器先转换为机器码，然后再执行</span><br><span class="hljs-section">#   所以我们在使用模块（包）时，也需要将模块的代码先转换为机器码然后再交由计算机执行</span><br><span class="hljs-section">#   而为了提高程序运行的性能，python会在编译过一次以后，将代码保存到一个缓存文件中</span><br><span class="hljs-section">#   这样在下次加载这个模块（包）时，就可以不再重新编译而是直接加载缓存中编译好的代码即可</span><br></code></pre></td></tr></table></figure><h3 id="python标准库"><a href="#python标准库" class="headerlink" title="python标准库"></a>python标准库</h3><p>开箱即用。为了实现开箱即用的思想，Python中为我们提供了一个模块的标准库。<br>在这个标准库中，有很多很强大的模块我们可以直接使用，并且标准库会随Python的安装一同安装。</p><p><strong>sys模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sys模块，它里面提供了一些变量和函数，使我们可以获取到Python解析器的信息</span><br><span class="hljs-comment">#   或者通过函数来操作Python解析器</span><br><span class="hljs-comment"># 引入sys模块</span><br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-comment"># sys.argv</span><br><span class="hljs-comment"># 获取执行代码时，命令行中所包含的参数</span><br><span class="hljs-comment"># 该属性是一个列表，列表中保存了当前命令的所有参数</span><br> <span class="hljs-built_in">print</span>(sys.argv)<br><br><span class="hljs-comment"># sys.path</span><br><span class="hljs-comment"># 他是一个列表，列表中保存的是模块的搜索路径</span><br><span class="hljs-comment"># [&#x27;C:\\Users\\lilichao\\Desktop\\resource\\course\\lesson_06\\code&#x27;,</span><br><span class="hljs-comment"># &#x27;C:\\dev\\python\\python36\\python36.zip&#x27;,</span><br><span class="hljs-comment"># &#x27;C:\\dev\\python\\python36\\DLLs&#x27;,</span><br><span class="hljs-comment"># &#x27;C:\\dev\\python\\python36\\lib&#x27;,</span><br><span class="hljs-comment"># &#x27;C:\\dev\\python\\python36&#x27;,</span><br><span class="hljs-comment"># &#x27;C:\\dev\\python\\python36\\lib\\site-packages&#x27;]</span><br> <span class="hljs-built_in">print</span>.pprint(sys.path)<br><br><span class="hljs-comment"># sys.platform</span><br><span class="hljs-comment"># 表示当前Python运行的平台</span><br> <span class="hljs-built_in">print</span>(sys.platform)<br><br><span class="hljs-comment"># sys.exit()</span><br><span class="hljs-comment"># 函数用来退出程序</span><br><span class="hljs-comment"># sys.exit(&#x27;程序出现异常，结束！&#x27;)</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br></code></pre></td></tr></table></figure><p> <strong>pprint 模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pprint 模块它给我们提供了一个方法 pprint() 该方法可以用来对打印的数据做简单的格式化</span><br><br><span class="hljs-keyword">import</span> pprint<br><br><span class="hljs-comment"># sys.modules</span><br><span class="hljs-comment"># 获取当前程序中引入的所有模块</span><br><span class="hljs-comment"># modules是一个字典，字典的key是模块的名字，字典的value是模块对象</span><br> pprint.pprint(sys.modules)<br></code></pre></td></tr></table></figure><p><strong>os模块</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># os 模块让我们可以对操作系统进行访问</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment"># os.environ</span><br><span class="hljs-comment"># 通过这个属性可以获取到系统的环境变量</span><br> pprint.pprint(os.environ[<span class="hljs-string">&#x27;path&#x27;</span>])<br><br><span class="hljs-comment"># os.system()</span><br><span class="hljs-comment"># 可以用来执行操作系统的名字</span><br><span class="hljs-comment"># os.system(&#x27;dir&#x27;)</span><br>os.system(<span class="hljs-string">&#x27;notepad&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
      <tag>对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python笔记(5.函数)</title>
    <link href="/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/5.%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%20%E5%87%BD%E6%95%B0/"/>
    <url>/2023/06/06/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/python/5.%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86%20%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="第五部分-函数"><a href="#第五部分-函数" class="headerlink" title="第五部分 函数"></a>第五部分 函数</h2><h4 id="函数简介（function）"><a href="#函数简介（function）" class="headerlink" title="函数简介（function）"></a>函数简介（function）</h4><pre><code class="hljs">- 函数也是一个对象- 对象是内存中专门用来存储数据的一块区域- 函数可以用来保存一些可执行的代码，并且可以在需要时，对这些语句进行多次的调用- 创建函数：    def 函数名([形参1,形参2,...形参n]) :        代码块    - 函数名必须要符号标识符的规范        （可以包含字母、数字、下划线、但是不能以数字开头）    - 函数中保存的代码不会立即执行，需要调用函数代码才会执行- 调用函数：    函数对象()- 定义函数一般都是要实现某种功能的 </code></pre><h4 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 比如有如下三行代码，这三行代码是一个完整的功能</span><br><span class="hljs-comment"># print(&#x27;Hello&#x27;)</span><br><span class="hljs-comment"># print(&#x27;你好&#x27;)</span><br><span class="hljs-comment"># print(&#x27;再见&#x27;)</span><br><br><span class="hljs-comment"># 定义一个函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>() :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;这是我的第一个函数！&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;今天天气真不错！&#x27;</span>)<br><br><span class="hljs-comment"># 打印fn</span><br><span class="hljs-comment"># print(fn) &lt;function fn at 0x03D2B618&gt;</span><br><span class="hljs-comment"># print(type(fn)) &lt;class &#x27;function&#x27;&gt;</span><br><br><span class="hljs-comment"># fn是函数对象  fn()调用函数</span><br><span class="hljs-comment"># print是函数对象 print()调用函数</span><br><span class="hljs-comment"># fn()  </span><br><span class="hljs-comment"># 调用fn函数</span><br><br><span class="hljs-comment"># 定义一个函数，可以用来求任意两个数的和</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>() :<br>     a = <span class="hljs-number">123</span><br>     b = <span class="hljs-number">456</span><br>     <span class="hljs-built_in">print</span>(a + b)<br><br><span class="hljs-comment"># 定义函数时指定形参</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">a , b</span>) :<br>    <span class="hljs-comment"># print(&#x27;a =&#x27;,a)</span><br>    <span class="hljs-comment"># print(&#x27;b =&#x27;,b)</span><br>    <span class="hljs-built_in">print</span>(a,<span class="hljs-string">&quot;+&quot;</span>,b,<span class="hljs-string">&quot;=&quot;</span>,a + b)<br><br><span class="hljs-comment"># 调用函数时，来传递实参</span><br>fn2(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<br>fn2(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>)<br></code></pre></td></tr></table></figure><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><pre><code class="hljs">- 在定义函数时，可以在函数名后的()中定义数量不等的形参，    多个形参之间使用,隔开- 形参（形式参数），定义形参就相当于在函数内部声明了变量，但是并不赋值- 实参（实际参数）    - 如果函数定义时，指定了形参，那么在调用函数时也必须传递实参，        实参将会赋值给对应的形参，简单来说，有几个形参就得传几个实参</code></pre><h5 id="练习1-定义一个函数，可以用来求任意三个数的乘积"><a href="#练习1-定义一个函数，可以用来求任意三个数的乘积" class="headerlink" title="练习1:定义一个函数，可以用来求任意三个数的乘积"></a>练习1:定义一个函数，可以用来求任意三个数的乘积</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求任意三个数的乘积</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">a,b,c</span>):<br>    <span class="hljs-built_in">print</span>(a*b*c)<br></code></pre></td></tr></table></figure><h5 id="练习1-定义一个函数，可以根据不同的用户名显示不同的欢迎信息"><a href="#练习1-定义一个函数，可以根据不同的用户名显示不同的欢迎信息" class="headerlink" title="练习1:定义一个函数，可以根据不同的用户名显示不同的欢迎信息"></a>练习1:定义一个函数，可以根据不同的用户名显示不同的欢迎信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 根据不同的用户名显示不同的欢迎信息   </span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;欢迎&#x27;</span>,username,<span class="hljs-string">&#x27;光临&#x27;</span>)<br><br><span class="hljs-comment"># mul(1,2,3)   </span><br><span class="hljs-comment"># welcome(&#x27;孙悟空&#x27;) </span><br></code></pre></td></tr></table></figure><h5 id="参数传递实例："><a href="#参数传递实例：" class="headerlink" title="参数传递实例："></a>参数传递实例：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个函数</span><br><span class="hljs-comment"># 定义形参时，可以为形参指定默认值</span><br><span class="hljs-comment"># 指定了默认值以后，如果用户传递了参数则默认值没有任何作用</span><br><span class="hljs-comment">#   如果用户没有传递，则默认值就会生效</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a = <span class="hljs-number">5</span> , b = <span class="hljs-number">10</span> , c = <span class="hljs-number">20</span></span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><br><span class="hljs-comment"># fn(1 , 2 , 3)</span><br><span class="hljs-comment"># fn(1 , 2)</span><br><span class="hljs-comment"># fn()</span><br><br><span class="hljs-comment"># 实参的传递方式</span><br><span class="hljs-comment"># 位置参数</span><br><span class="hljs-comment"># 位置参数就是将对应位置的实参复制给对应位置的形参</span><br><span class="hljs-comment"># 第一个实参赋值给第一个形参，第二个实参赋值给第二个形参 。。。</span><br><span class="hljs-comment"># fn(1 , 2 , 3)</span><br><br><span class="hljs-comment"># 关键字参数</span><br><span class="hljs-comment"># 关键字参数，可以不按照形参定义的顺序去传递，而直接根据参数名去传递参数</span><br><span class="hljs-comment"># fn(b=1 , c=2 , a=3)</span><br><span class="hljs-comment"># print(&#x27;hello&#x27; , end=&#x27;&#x27;)</span><br><span class="hljs-comment"># 位置参数和关键字参数可以混合使用</span><br><span class="hljs-comment"># 混合使用关键字和位置参数时，必须将位置参数写到前面</span><br><span class="hljs-comment"># fn(1,c=30)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br><br><span class="hljs-comment"># 函数在调用时，解析器不会检查实参的类型</span><br><span class="hljs-comment"># 实参可以传递任意类型的对象（和C有所区别）</span><br>b = <span class="hljs-number">123</span><br>b = <span class="hljs-literal">True</span><br>b = <span class="hljs-string">&#x27;hello&#x27;</span><br>b = <span class="hljs-literal">None</span><br>b = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment"># fn2(b)    </span><br>fn2(fn)<br><br><span class="hljs-comment"># 参数类型任意方便，但也会产生一些问题</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params">a , b</span>):<br>    <span class="hljs-built_in">print</span>(a+b)<br><span class="hljs-comment"># fn3(123,&quot;456&quot;)</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn4</span>(<span class="hljs-params">a</span>):<br>    <span class="hljs-comment"># 在函数中对形参进行重新赋值，不会影响其他的变量</span><br>    <span class="hljs-comment"># a = 20</span><br>    <span class="hljs-comment"># a是一个列表，尝试修改列表中的元素</span><br>    <span class="hljs-comment"># 如果形参执行的是一个对象，当我们通过形参去修改对象时（该对象）</span><br>    <span class="hljs-comment">#   会影响到所有指向该对象的变量（类似于传地址调用）</span><br>    a[<span class="hljs-number">0</span>] = <span class="hljs-number">30</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a,<span class="hljs-built_in">id</span>(a))<br><br>c = <span class="hljs-number">10</span>   <br>c = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br>fn4(c)<br><br><span class="hljs-comment"># 想要传值调用，不改变实参本身，可以这样</span><br><span class="hljs-comment"># fn4(c.copy())</span><br><span class="hljs-comment"># fn4(c[:])</span><br></code></pre></td></tr></table></figure><h5 id="不定长的参数："><a href="#不定长的参数：" class="headerlink" title="不定长的参数："></a>不定长的参数：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不定长的参数</span><br><span class="hljs-comment"># 定义一个函数，可以求任意个数字的和</span><br><span class="hljs-comment"># 在定义函数时，可以在形参前边加上一个*，这样这个形参将会获取到所有的实参</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">*nums</span>):<br>    <span class="hljs-comment"># 定义一个变量，来保存结果</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 遍历元组，并将元组中的数进行累加</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums :<br>        result += n<br>    <span class="hljs-built_in">print</span>(result)<br><br><br><span class="hljs-comment"># sum(123,456,789,10,20,30,40) 想要参数数量随便变化</span><br><span class="hljs-comment"># 在定义函数时，可以在形参前边加上一个*，这样这个形参将会获取到所有的实参</span><br><span class="hljs-comment"># 它将会将所有的实参保存到一个元组中</span><br><span class="hljs-comment"># a,b,*c = (1,2,3,4,5,6)</span><br><br><span class="hljs-comment"># *a会接受所有的位置实参，并且会将这些实参统一保存到一个元组中（装包）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">*a</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>,a,<span class="hljs-built_in">type</span>(a))<br><br><span class="hljs-comment"># fn(1,2,3,4,5)</span><br><span class="hljs-comment"># 带星号的形参只能有一个</span><br><span class="hljs-comment"># 带星号的参数，可以和其他参数配合使用</span><br><span class="hljs-comment"># 第一个参数给a，第二个参数给b，剩下的都保存到c的元组中</span><br><span class="hljs-comment"># def fn2(a,b,*c):</span><br><span class="hljs-comment">#     print(&#x27;a =&#x27;,a)</span><br><span class="hljs-comment">#     print(&#x27;b =&#x27;,b)</span><br><span class="hljs-comment">#     print(&#x27;c =&#x27;,c)</span><br><br><span class="hljs-comment"># 可变参数不是必须写在最后，但是注意，带*的参数后的所有参数，必须以关键字参数的形式传递(c就必须使用关键字参数的形式传递)</span><br><span class="hljs-comment"># 第一个参数给a，剩下的位置参数给b的元组，c必须使用关键字参数</span><br><span class="hljs-comment"># def fn2(a,*b,c):</span><br><span class="hljs-comment">#     print(&#x27;a =&#x27;,a)</span><br><span class="hljs-comment">#     print(&#x27;b =&#x27;,b)</span><br><span class="hljs-comment">#     print(&#x27;c =&#x27;,c)</span><br><br><span class="hljs-comment"># 所有的位置参数都给a，b和c必须使用关键字参数</span><br><span class="hljs-comment"># def fn2(*a,b,c):</span><br><span class="hljs-comment">#     print(&#x27;a =&#x27;,a)</span><br><span class="hljs-comment">#     print(&#x27;b =&#x27;,b)</span><br><span class="hljs-comment">#     print(&#x27;c =&#x27;,c)</span><br><br><span class="hljs-comment"># 如果在形参的开头直接写一个*,则要求我们的所有的参数必须以关键字参数的形式传递</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">*,a,b,c</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><span class="hljs-comment"># fn2(a=3,b=4,c=5)</span><br><br><span class="hljs-comment"># *形参只能接收位置参数，而不能接收关键字参数</span><br><span class="hljs-comment"># def fn3(*a) :</span><br><span class="hljs-comment">#     print(&#x27;a =&#x27;,a)</span><br><br><span class="hljs-comment"># **形参可以接收其他的关键字参数，它会将这些参数统一保存到一个字典中</span><br><span class="hljs-comment">#   字典的key就是参数的名字，字典的value就是参数的值</span><br><span class="hljs-comment"># **形参只能有一个，并且必须写在所有参数的最后</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params">b,c,**a</span>) :<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a,<span class="hljs-built_in">type</span>(a))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><br><span class="hljs-comment"># fn3(b=1,d=2,c=3,e=10,f=20)</span><br><br><span class="hljs-comment"># 参数的解包（拆包）</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn4</span>(<span class="hljs-params">a,b,c</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><br><span class="hljs-comment"># 创建一个元组</span><br>t = (<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>)<br><br><span class="hljs-comment"># 传递实参时，也可以在序列类型的参数前添加星号，这样他会自动将序列中的元素依次作为参数传递</span><br><span class="hljs-comment"># 这里要求序列中元素的个数必须和形参的个数的一致</span><br><span class="hljs-comment"># fn4(*t)    </span><br><br><span class="hljs-comment"># 创建一个字典</span><br>d = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;b&#x27;</span>:<span class="hljs-number">200</span>,<span class="hljs-string">&#x27;c&#x27;</span>:<span class="hljs-number">300</span>&#125;<br><span class="hljs-comment"># 通过 **来对一个字典进行解包操作</span><br>fn4(**d)<br></code></pre></td></tr></table></figure><h4 id="函数的返回值："><a href="#函数的返回值：" class="headerlink" title="函数的返回值："></a>函数的返回值：</h4><p>返回值，返回值就是函数执行以后返回的结果<br>可以通过 return 来指定函数的返回值<br>可以之间使用函数的返回值，也可以通过一个变量来接收函数的返回值</p><p>这是一个没有返回值的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">*nums</span>):<br>    <span class="hljs-comment"># 定义一个变量，来保存结果</span><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 遍历元组，并将元组中的数进行累加</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums :<br>        result += n<br>    <span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># sum(123,456,789)</span><br></code></pre></td></tr></table></figure><p>return 后边跟什么值，函数就会返回什么值<br>return 后边可以跟任意的对象(字符串，列表，字典)，返回值甚至可以是一个函数</p><p>这是一个有返回值的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    <span class="hljs-comment"># return &#x27;Hello&#x27;</span><br>    <span class="hljs-comment"># return [1,2,3]</span><br>    <span class="hljs-comment"># return &#123;&#x27;k&#x27;:&#x27;v&#x27;&#125;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn2</span>() :<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<span class="hljs-comment">#嵌套函数</span><br>    <span class="hljs-keyword">return</span> fn2 <span class="hljs-comment"># 返回值也可以是一个函数</span><br><br>r = fn() <span class="hljs-comment"># 这个函数的执行结果就是它的返回值</span><br></code></pre></td></tr></table></figure><p>如果仅仅写一个return 或者 不写return，则相当于return None<br>在函数中，return后的代码都不会执行，return 一旦执行函数自动结束</p><p>return continue break三者的区别：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn4</span>() :<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">3</span> :<br>            <span class="hljs-comment"># break 用来退出当前循环</span><br>            <span class="hljs-comment"># continue 用来跳过当次循环</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-comment"># return 用来结束函数</span><br>        <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;循环执行完毕！&#x27;</span>)<br></code></pre></td></tr></table></figure><p>fn5 和 fn5()的区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn5</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">print</span>(fn5) <br><span class="hljs-comment"># fn5是函数对象，打印fn5实际是在打印函数对象 &lt;function fn5 at 0x05771BB8&gt;</span><br><span class="hljs-built_in">print</span>(fn5()) <br><span class="hljs-comment"># fn5()是在调用函数，打印fn5()实际上是在打印fn5()函数的返回值 10</span><br></code></pre></td></tr></table></figure><h4 id="文档字符串-函数的描述"><a href="#文档字符串-函数的描述" class="headerlink" title="文档字符串(函数的描述)"></a>文档字符串(函数的描述)</h4><h5 id="help-函数"><a href="#help-函数" class="headerlink" title="help 函数"></a>help 函数</h5><p>help()是Python中的内置函数<br>通过help()函数可以查询python中的函数的用法<br>语法：help(函数对象)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">help</span>(<span class="hljs-built_in">print</span>) <span class="hljs-comment"># 获取print()函数的使用说明</span><br>结果：<br>Help on built-<span class="hljs-keyword">in</span> function <span class="hljs-built_in">print</span> <span class="hljs-keyword">in</span> module builtins:<br><br><span class="hljs-built_in">print</span>(...)<br>    <span class="hljs-built_in">print</span>(value, ..., sep=<span class="hljs-string">&#x27; &#x27;</span>, end=<span class="hljs-string">&#x27;\n&#x27;</span>, file=sys.stdout, flush=<span class="hljs-literal">False</span>)<br>    <br>    Prints the values to a stream, <span class="hljs-keyword">or</span> to sys.stdout by default.<br>    <span class="hljs-type">Optional</span> keyword arguments:<br>    file:  a file-like <span class="hljs-built_in">object</span> (stream); defaults to the current sys.stdout.<br>    sep:   string inserted between values, default a space.<br>    end:   string appended after the last value, default a newline.<br>    flush: whether to forcibly flush the stream.<br></code></pre></td></tr></table></figure><h5 id="利用函数字符串编写函数说明"><a href="#利用函数字符串编写函数说明" class="headerlink" title="利用函数字符串编写函数说明"></a>利用函数字符串编写函数说明</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 文档字符串（doc str）</span><br><span class="hljs-comment"># 在定义函数时，可以在函数内部编写文档字符串，文档字符串就是函数的说明</span><br><span class="hljs-comment">#   当我们编写了文档字符串时，就可以通过help()函数来查看函数的说明</span><br><span class="hljs-comment">#   文档字符串非常简单，其实直接在函数的第一行写一个字符串就是文档字符串</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">a:<span class="hljs-built_in">int</span>,b:<span class="hljs-built_in">bool</span>,c:<span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;hello&#x27;</span></span>) -&gt; <span class="hljs-built_in">int</span>:<span class="hljs-comment">#这里等于号后面是对参数类型的描述，后面的箭头表示其返回值的类型</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    这是一个文档字符串的示例（尽量使用英文编写）</span><br><span class="hljs-string"></span><br><span class="hljs-string">    函数的作用：。。。。。</span><br><span class="hljs-string">    函数的参数：</span><br><span class="hljs-string">        a，作用，类型，默认值。。。。</span><br><span class="hljs-string">        b，作用，类型，默认值。。。。</span><br><span class="hljs-string">        c，作用，类型，默认值。。。。</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">10</span><br><br><span class="hljs-built_in">help</span>(fn)<br></code></pre></td></tr></table></figure><h4 id="函数的作用域和命名空间"><a href="#函数的作用域和命名空间" class="headerlink" title="函数的作用域和命名空间"></a>函数的作用域和命名空间</h4><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><p>作用域（scope）<br>作用域指的是变量生效的区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">b = <span class="hljs-number">20</span> <span class="hljs-comment"># 全局变量</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    a = <span class="hljs-number">10</span> <span class="hljs-comment"># a定义在了函数内部，所以他的作用域就是函数内部，函数外部无法访问</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数内部：&#x27;</span>,<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数内部：&#x27;</span>,<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br><br>fn()    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数外部：&#x27;</span>,<span class="hljs-string">&#x27;a =&#x27;</span>,a)<span class="hljs-comment">#无法调用</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数外部：&#x27;</span>,<span class="hljs-string">&#x27;b =&#x27;</span>,b)<br></code></pre></td></tr></table></figure><p>在Python中一共有两种作用域<br>全局作用域</p><ul><li><p>全局作用域在程序执行时创建，在程序执行结束时销毁</p></li><li><p>所有函数以外的区域都是全局作用域</p></li><li><p>在全局作用域中定义的变量，都属于全局变量，全局变量可以在程序的任意位置被访问</p></li></ul><p>函数作用域</p><ul><li><p>函数作用域在函数调用时创建，在调用结束时销毁</p></li><li><p>函数每调用一次就会产生一个新的函数作用域</p></li><li><p>在函数作用域中定义的变量，都是局部变量，它只能在函数内部被访问</p></li></ul><p> 变量的查找</p><p>当我们使用变量时，会优先在当前作用域中寻找该变量，如果有则使用，如果没有则继续去上一级作用域中寻找，如果有则使用，<br>如果依然没有则继续去上一级作用域中寻找，以此类推。直到找到全局作用域，依然没有找到，则会抛出异常：<br>NameError: name ‘a’ is not defined</p><p>变量修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">20</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn3</span>():<br>    <span class="hljs-comment"># a = 10 # 在函数中为变量赋值时，默认都是为局部变量赋值</span><br>    <span class="hljs-comment"># 如果希望在函数内部修改全局变量，则需要使用global关键字，来声明变量</span><br>    <span class="hljs-keyword">global</span> a <span class="hljs-comment"># 声明在函数内部的使用a是全局变量，此时再去修改a时，就是在修改全局的a</span><br>    a = <span class="hljs-number">10</span> <span class="hljs-comment"># 修改全局变量</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数内部：&#x27;</span>,<span class="hljs-string">&#x27;a =&#x27;</span>,a)<br></code></pre></td></tr></table></figure><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>命名空间（namespace）<br>命名空间指的是变量存储的位置，每一个变量都需要存储到指定的命名空间当中<br>每一个作用域都会有一个它对应的命名空间<br>全局命名空间，用来保存全局变量。函数命名空间用来保存函数中的变量<br>命名空间实际上就是一个字典，是一个专门用来存储变量的字典</p><p>locals()用来获取当前作用域的命名空间<br>如果在全局作用域中调用locals()则获取全局命名空间，如果在函数作用域中调用locals()则获取函数命名空间<br>返回的是一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">scope = <span class="hljs-built_in">locals</span>() <span class="hljs-comment"># 当前命名空间</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(scope))<br><span class="hljs-comment"># print(a)</span><br><span class="hljs-comment"># print(scope[&#x27;a&#x27;])</span><br><span class="hljs-comment"># 向scope中添加一个key-value</span><br>scope[<span class="hljs-string">&#x27;c&#x27;</span>] = <span class="hljs-number">1000</span> <span class="hljs-comment"># 向字典中添加key-value就相当于在全局中创建了一个变量（一般不建议这么做）</span><br><span class="hljs-comment"># print(c)</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn4</span>():<br>    a = <span class="hljs-number">10</span><br>    <span class="hljs-comment"># scope = locals() # 在函数内部调用locals()会获取到函数的命名空间</span><br>    <span class="hljs-comment"># scope[&#x27;b&#x27;] = 20 # 可以通过scope来操作函数的命名空间，但是也是不建议这么做</span><br><br>    <span class="hljs-comment"># globals() 函数可以用来在任意位置获取全局命名空间</span><br>    global_scope = <span class="hljs-built_in">globals</span>()<br>    <span class="hljs-comment"># print(global_scope[&#x27;a&#x27;])</span><br>    global_scope[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-number">30</span><br>    <span class="hljs-comment"># print(scope)</span><br><br>fn4()    <br></code></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>求10的阶乘</p><p>基础：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 尝试求10的阶乘（10!）</span><br><span class="hljs-comment"># 1! = 1</span><br><span class="hljs-comment"># 2! = 1*2 = 2</span><br><span class="hljs-comment"># 3! = 1*2*3 = 6</span><br><span class="hljs-comment"># 4! = 1*2*3*4 = 24</span><br><br><span class="hljs-comment"># print(1*2*3*4*5*6*7*8*9*10)</span><br></code></pre></td></tr></table></figure><p>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个变量保存结果</span><br><span class="hljs-comment"># n = 10</span><br><span class="hljs-comment"># for i in range(1,10):</span><br><span class="hljs-comment">#     n *= i</span><br><span class="hljs-comment"># print(n)</span><br><span class="hljs-comment"># 创建一个函数，可以用来求任意数的阶乘</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        该函数用来求任意数的阶乘</span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            n 要求阶乘的数字</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 创建一个变量，来保存结果</span><br>    result = n    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        result *= i<br>    <span class="hljs-keyword">return</span> result    <br><span class="hljs-comment"># 求10的阶乘    </span><br><span class="hljs-comment"># print(factorial(20))</span><br></code></pre></td></tr></table></figure><p> 递归式的函数：<br>从前有座山，山里有座庙，庙里有个老和尚讲故事，讲的什么故事呢？<br>从前有座山，山里有座庙，庙里有个老和尚讲故事，讲的什么故事呢？….<br>递归简单理解就是自己去引用自己！<br>递归式函数，在函数中自己调用自己！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 无穷递归，如果这个函数被调用，程序的内存会溢出，效果类似于死循环</span><br> <span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>     fn()<br> fn()<br></code></pre></td></tr></table></figure><p> 递归是解决问题的一种方式，它和循环很像</p><p>它的整体思想是，将一个大问题分解为一个个的小问题，直到问题无法分解时，再去解决问题<br>递归式函数的两个要件<br>1.基线条件</p><ul><li>问题可以被分解为的最小问题，当满足基线条件时，递归就不在执行了</li></ul><p>2.递归条件</p><ul><li>将问题继续分解的条件</li></ul><p>递归和循环类似，基本是可以互相代替的，循环编写起来比较容易，阅读起来稍难,递归编写起来难，但是方便阅读</p><p>利用递归求阶乘：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorial</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        该函数用来求任意数的阶乘</span><br><span class="hljs-string"></span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            n 要求阶乘的数字</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 基线条件 判断n是否为1，如果为1则此时不能再继续递归</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span> :<br>        <span class="hljs-comment"># 1的阶乘就是1，直接返回1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>    <span class="hljs-comment"># 递归条件    </span><br>    <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># print(factorial(10))</span><br></code></pre></td></tr></table></figure><h5 id="递归练习"><a href="#递归练习" class="headerlink" title="递归练习"></a>递归练习</h5><h6 id="创建一个函数-power-来为任意数字做幂运算-n-i"><a href="#创建一个函数-power-来为任意数字做幂运算-n-i" class="headerlink" title="创建一个函数 power 来为任意数字做幂运算 n ** i"></a>创建一个函数 power 来为任意数字做幂运算 n ** i</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">n , i</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        power()用来为任意的数字做幂运算</span><br><span class="hljs-string"></span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            n 要做幂运算的数字</span><br><span class="hljs-string">            i 做幂运算的次数</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 基线条件</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">1</span>:<br>        <span class="hljs-comment"># 求1次幂</span><br>        <span class="hljs-keyword">return</span> n<br>    <span class="hljs-comment"># 递归条件</span><br>    <span class="hljs-keyword">return</span> n * power(n , i-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># print(power(8,6))    </span><br></code></pre></td></tr></table></figure><h6 id="创建一个函数，用来检查一个任意的字符串是否是回文字符串"><a href="#创建一个函数，用来检查一个任意的字符串是否是回文字符串" class="headerlink" title="创建一个函数，用来检查一个任意的字符串是否是回文字符串"></a>创建一个函数，用来检查一个任意的字符串是否是回文字符串</h6><p>先检查第一个字符和最后一个字符是否一致，如果不一致则不是回文字符串<br>如果一致，则看剩余的部分是否是回文字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#   abcdefgfedcba</span><br><span class="hljs-comment">#   先检查第一个字符和最后一个字符是否一致，如果不一致则不是回文字符串</span><br><span class="hljs-comment">#       如果一致，则看剩余的部分是否是回文字符串</span><br><span class="hljs-comment">#   检查 abcdefgfedcba 是不是回文</span><br><span class="hljs-comment">#   检查 bcdefgfedcb 是不是回文</span><br><span class="hljs-comment">#   检查 cdefgfedc 是不是回文</span><br><span class="hljs-comment">#   检查 defgfed 是不是回文</span><br><span class="hljs-comment">#   检查 efgfe 是不是回文</span><br><span class="hljs-comment">#   检查 fgf 是不是回文</span><br><span class="hljs-comment">#   检查 g 是不是回文(基线条件)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hui_wen</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        该函数用来检查指定的字符串是否回文字符串，如果是返回True，否则返回False</span><br><span class="hljs-string"></span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            s：就是要检查的字符串</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 基线条件</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s) &lt; <span class="hljs-number">2</span> :<br>        <span class="hljs-comment"># 字符串的长度小于2，则字符串一定是回文</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> s[<span class="hljs-number">0</span>] != s[-<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment"># 第一个字符和最后一个字符不相等，不是回文字符串</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>    <br>    <span class="hljs-comment"># 递归条件    </span><br>    <span class="hljs-keyword">return</span> hui_wen(s[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(hui_wen(<span class="hljs-string">&#x27;abcdefgfedcba&#x27;</span>))    <br></code></pre></td></tr></table></figure><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><h5 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h5><p>在Python中，函数是一等对象</p><ul><li>一等对象一般都会具有如下特点：<br>① 对象是在运行时创建的<br>② 能赋值给变量或作为数据结构中的元素<br>③ 能作为参数传递<br>④ 能作为返回值返回</li></ul><p>高阶函数</p><ul><li>高阶函数至少要符合以下两个特点中的一个<br>① 接收一个或多个函数作为参数<br>② 将函数作为返回值返回</li></ul><p>一个普通的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个列表</span><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><br><span class="hljs-comment"># 定义一个函数</span><br><span class="hljs-comment">#   可以将指定列表中的所有的偶数，保存到一个新的列表中返回</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">lst</span>) :<br><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        fn()函数可以将指定列表中的所有偶数获取出来，并保存到一个新列表中返回</span><br><span class="hljs-string"></span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            lst：要进行筛选的列表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 创建一个新列表</span><br>    new_list = []<br><br>    <span class="hljs-comment"># 对列表进行筛选</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> lst :<br>        <span class="hljs-comment"># 判断n的奇偶</span><br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ::<br>            new_list.append(n)<br>    <span class="hljs-comment"># 返回新列表</span><br>    <span class="hljs-keyword">return</span> new_list<br></code></pre></td></tr></table></figure><p>函数化编程：</p><p>检查一个任意的数字是否是偶数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个函数，用来检查一个任意的数字是否是偶数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn2</span>(<span class="hljs-params">i</span>) :<br>    <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br></code></pre></td></tr></table></figure><p>这个函数用来检查指定的数字是否大于5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这个函数用来检查指定的数字是否大于5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn3</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">5</span> :<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>主函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">func , lst</span>) :<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        fn()函数可以将指定列表中的所有偶数获取出来，并保存到一个新列表中返回</span><br><span class="hljs-string"></span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            lst：要进行筛选的列表</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 创建一个新列表</span><br>    new_list = []<br>    <span class="hljs-comment"># 对列表进行筛选</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> lst :<br>        <span class="hljs-comment"># 判断n的奇偶</span><br>        <span class="hljs-keyword">if</span> func(n) :<br>            new_list.append(n)<br>        <span class="hljs-comment"># if n &gt; 5 :</span><br>        <span class="hljs-comment">#     new_list.append(n)</span><br>    <span class="hljs-comment"># 返回新列表</span><br>    <span class="hljs-keyword">return</span> new_list<br></code></pre></td></tr></table></figure><p>调用时，主函数可以直接选择调用任意函数，和参数  (规则和参数都作为输入)<br>当我们使用一个函数作为参数时，实际上是将指定的代码传递进了目标函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(fn(fn2 , l))<br><span class="hljs-comment">#实现的功能也是将指定列表中的所有的偶数，保存到一个新的列表中返回</span><br></code></pre></td></tr></table></figure><h5 id="filter-过滤器"><a href="#filter-过滤器" class="headerlink" title="filter()过滤器"></a>filter()过滤器</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">filter</span>()可以从序列中过滤出符合条件的元素，保存到一个新的序列中<br>参数：<br> <span class="hljs-number">1.</span>函数，根据该函数来过滤序列（可迭代的结构）<br> <span class="hljs-number">2.</span>需要过滤的序列（可迭代的结构）<br>返回值：<br>  过滤后的新序列（可迭代的结构）<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">r=<span class="hljs-built_in">filter</span>(fn4 ,l)<span class="hljs-comment">#这里fn4作为参数，所以不加（）</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))<br><span class="hljs-comment"># fn4是作为参数传递进filter()函数中</span><br><span class="hljs-comment">#   而fn4实际上只有一个作用，就是作为filter()的参数</span><br><span class="hljs-comment">#   filter()调用完毕以后，fn4就已经没用</span><br></code></pre></td></tr></table></figure><h5 id="匿名函数："><a href="#匿名函数：" class="headerlink" title="匿名函数："></a>匿名函数：</h5><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby">匿名函数 <span class="hljs-built_in">lambda</span> 函数表达式 （语法糖）<br>  <span class="hljs-built_in">lambda</span>函数表达式专门用来创建一些简单的函数，他是函数创建的又一种方式<br>  语法：<span class="hljs-built_in">lambda</span> 参数列表 : 返回值<br>  匿名函数一般都是作为参数使用，其他地方一般不会使用<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#普通写法：</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn5</span>(<span class="hljs-params">a , b</span>):<br>    <span class="hljs-keyword">return</span> a + b<br><span class="hljs-comment">#匿名写法：</span><br><span class="hljs-keyword">lambda</span> a,b : a + b<br><br>调用：整体加括号，参数也放进括号里<br>(<span class="hljs-keyword">lambda</span> a,b : a + b)(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>)<span class="hljs-comment">#一般不这么用</span><br><br><span class="hljs-comment"># 也可以将匿名函数赋值给一个变量，一般不会这么做</span><br>fn6 = <span class="hljs-keyword">lambda</span> a,b : a + b<br><span class="hljs-comment"># print(fn6(10,30))</span><br></code></pre></td></tr></table></figure><p>对本节第一个程序的改造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn4</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">return</span> i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span><br><span class="hljs-comment">#fn4可以有如上的简写</span><br><span class="hljs-comment">#在利用filter()和匿名函数调用就是下面这样：</span><br>r = <span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> i : i &gt; <span class="hljs-number">5</span> , l)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(r))<br><span class="hljs-comment">#这两行就起到了本节第一个普通函数fn的效果</span><br></code></pre></td></tr></table></figure><h5 id="map-函数"><a href="#map-函数" class="headerlink" title="map()函数"></a>map()函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># map()</span><br><span class="hljs-comment"># map()函数可以对可迭代对象中的所有元素做指定的操作，然后将其添加到一个新的对象中返回</span><br>l = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>]<br><br>r = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> i : i ** <span class="hljs-number">2</span> , l)<span class="hljs-comment">#求列表每一个元素的2次方</span><br><br><span class="hljs-comment"># print(list(r))</span><br></code></pre></td></tr></table></figure><h5 id="sort-方法"><a href="#sort-方法" class="headerlink" title="sort()方法"></a>sort()方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sort()</span><br><span class="hljs-comment"># 该方法用来对列表中的元素进行排序</span><br><span class="hljs-comment"># sort()方法默认是直接比较列表中的元素的大小</span><br><span class="hljs-comment"># 在sort()可以接收一个关键字参数 ， key</span><br><span class="hljs-comment">#   key需要一个函数作为参数，当设置了函数作为参数</span><br><span class="hljs-comment">#   每次都会以列表中的一个元素作为参数来调用函数，并且使用函数的返回值来比较元素的大小</span><br>l = [<span class="hljs-string">&#x27;bb&#x27;</span>,<span class="hljs-string">&#x27;aaaa&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;ddddddddd&#x27;</span>,<span class="hljs-string">&#x27;fff&#x27;</span>]<br><span class="hljs-comment"># l.sort(key=len)</span><br><br>l = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br>l.sort(key=<span class="hljs-built_in">int</span>)<br><span class="hljs-comment"># print(l)</span><br></code></pre></td></tr></table></figure><h5 id="sorted-函数"><a href="#sorted-函数" class="headerlink" title="sorted()函数"></a>sorted()函数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sorted()</span><br><span class="hljs-comment"># 这个函数和sort()的用法基本一致，但是sorted()可以对任意的序列进行排序</span><br><span class="hljs-comment">#   并且使用sorted()排序不会影响原来的对象，而是返回一个新对象</span><br><br>l = [<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>]<br><span class="hljs-comment"># l = &quot;123765816742634781&quot;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序前:&#x27;</span>,l)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(l,key=<span class="hljs-built_in">int</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;排序后:&#x27;</span>,l)<br></code></pre></td></tr></table></figure><h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p> 将函数作为返回值返回，也是一种高阶函数<br> 这种高阶函数我们也称为叫做闭包，通过闭包可以创建一些只有当前函数能访问的变量<br>  可以将一些私有的数据藏到的闭包中</p><p>语法示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn</span>():<br>    a = <span class="hljs-number">10</span><br>    <span class="hljs-comment"># 函数内部再定义一个函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我是fn2&#x27;</span> , a)<br>    <span class="hljs-comment"># 将内部函数 inner作为返回值返回   </span><br>    <span class="hljs-keyword">return</span> inner<br><br><span class="hljs-comment"># r是一个函数，是调用fn()后返回的函数</span><br><span class="hljs-comment"># 这个函数实在fn()内部定义，并不是全局函数</span><br><span class="hljs-comment"># 所以这个函数总是能访问到fn()函数内的变量,其他函数访问不了</span><br>r = fn()    <br>r()<br></code></pre></td></tr></table></figure><p>示例：求多个数的平均值:</p><p>正常写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求多个数的平均值</span><br> nums = [<span class="hljs-number">50</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>,<span class="hljs-number">77</span>]<br><span class="hljs-comment"># sum()用来求一个列表中所有元素的和</span><br> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(nums)/<span class="hljs-built_in">len</span>(nums))<br></code></pre></td></tr></table></figure><p>闭包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 形成闭包的要件</span><br><span class="hljs-comment">#   ① 函数嵌套</span><br><span class="hljs-comment">#   ② 将内部函数作为返回值返回</span><br><span class="hljs-comment">#   ③ 内部函数必须要使用到外部函数的变量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_averager</span>():<br>    <span class="hljs-comment"># 创建一个列表，用来保存数值</span><br>    nums = []<br><br>    <span class="hljs-comment"># 创建一个函数，用来计算平均值</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">averager</span>(<span class="hljs-params">n</span>) :<br>        <span class="hljs-comment"># 将n添加到列表中</span><br>        nums.append(n)<br>        <span class="hljs-comment"># 求平均值</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(nums)/<span class="hljs-built_in">len</span>(nums)<br><br>    <span class="hljs-keyword">return</span> averager<br><br>averager = make_averager()<br><span class="hljs-built_in">print</span>(averager(<span class="hljs-number">10</span>))<br><span class="hljs-built_in">print</span>(averager(<span class="hljs-number">20</span>))<br><span class="hljs-built_in">print</span>(averager(<span class="hljs-number">30</span>))<br><span class="hljs-built_in">print</span>(averager(<span class="hljs-number">40</span>))<br></code></pre></td></tr></table></figure><h4 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h4><p>现在有以下程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">a , b</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        求任意两个数的和</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    r = a + b<br>    <span class="hljs-keyword">return</span> r<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">a , b</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        求任意两个数的积</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    r = a * b<br>    <span class="hljs-keyword">return</span> r    <br><br>r = add(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>)<br><span class="hljs-built_in">print</span>(r)<br></code></pre></td></tr></table></figure><p><strong>当前需求</strong>：希望函数可以在计算前，打印开始计算，计算结束后打印计算完毕</p><p>我们可以直接通过修改函数中的代码来完成这个需求，但是会产生以下一些问题<br>       ① 如果要修改的函数过多，修改起来会比较麻烦<br>       ② 并且不方便后期的维护<br>       ③ 并且这样做会违反开闭原则（OCP）</p><p>程序的设计，要求开发对程序的扩展，要关闭对程序的修改<br>我们希望在不修改原函数的情况下，来对函数进行扩展:</p><p>只需要根据现有的函数，来创建一个新的函数:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">fn2</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数开始执行~~~&#x27;</span>)<br>    fn()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;函数执行结束~~~&#x27;</span>)<br></code></pre></td></tr></table></figure><p>对add函数进行修改(记得传递参数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">new_add</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;计算开始~~~&#x27;</span>)<br>    r = add(a,b)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;计算结束~~~&#x27;</span>)<br>    <span class="hljs-keyword">return</span> r<br><br><span class="hljs-comment"># r = new_add(111,222)    </span><br><span class="hljs-comment"># print(r)</span><br></code></pre></td></tr></table></figure><p>上边的方式，已经可以在不修改源代码的情况下对函数进行扩展了<br>但是，这种方式要求我们每扩展一个函数就要手动创建一个新的函数，实在是太麻烦了<br>为了解决这个问题，我们创建一个函数，让这个函数可以自动的帮助我们生产函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">begin_end</span>(<span class="hljs-params">old</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        用来对其他函数进行扩展，使其他函数可以在执行前打印开始执行，执行后打印执行结束</span><br><span class="hljs-string"></span><br><span class="hljs-string">        参数：</span><br><span class="hljs-string">            old 要扩展的函数对象</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 创建一个新函数</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">new_function</span>(<span class="hljs-params">*args , **kwargs</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;开始执行~~~~&#x27;</span>)<br>        <span class="hljs-comment"># 调用被扩展的函数</span><br>        result = old(*args , **kwargs)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;执行结束~~~~&#x27;</span>)<br>        <span class="hljs-comment"># 返回函数的执行结果</span><br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-comment"># 返回新函数        </span><br>    <span class="hljs-keyword">return</span> new_function<br><br>f = begin_end(fn)<br>f2 = begin_end(add)<br>f3 = begin_end(mul)<br><span class="hljs-comment"># r = f()</span><br><span class="hljs-comment"># r = f2(123,456)</span><br><span class="hljs-comment"># r = f3(123,456)</span><br><span class="hljs-comment"># print(r)</span><br></code></pre></td></tr></table></figure><p>向begin_end()这种函数我们就称它为装饰器<br>通过装饰器，可以在不修改原来函数的情况下来对函数进行扩展<br>在开发中，我们都是通过装饰器来扩展函数的功能的<br>在定义函数时，可以通过@装饰器，来使用指定的装饰器，来装饰当前的函数<br>可以同时为一个函数指定多个装饰器，这样函数将会安装从内向外的顺序被装饰 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@begin_end</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say_hello</span>():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;大家好~~~&#x27;</span>)<br><br>say_hello()<br></code></pre></td></tr></table></figure><p>这个就相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">f = begin_end(say_hello)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程语言</tag>
      
      <tag>python</tag>
      
      <tag>函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人读书清单</title>
    <link href="/2023/06/06/1.%E9%98%85%E8%AF%BB%E5%86%99%E4%BD%9C/%E8%AF%BB%E4%B9%A6/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/%E4%B8%AA%E4%BA%BA%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"/>
    <url>/2023/06/06/1.%E9%98%85%E8%AF%BB%E5%86%99%E4%BD%9C/%E8%AF%BB%E4%B9%A6/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/%E4%B8%AA%E4%BA%BA%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>在此记录个人读书情况</p><span id="more"></span><h3 id="2021-年读书清单"><a href="#2021-年读书清单" class="headerlink" title="2021 年读书清单"></a>2021 年读书清单</h3><p>《球状闪电》刘慈欣<br>《时间移民》刘慈欣<br>《上帝之手》王晋康<br>《夹边沟记事》杨显惠<br>《改造火星（科幻集）》王晋康 何夕 张冉<br>《时空平移》王晋康<br>《沉默的大多数》王小波<br>《汪曾祺散文：人寰速写》汪曾祺<br>《第一序列》会说话的肘子<br>《睡眠革命》尼克·利特尔黑尔斯<br>《计算机是怎样跑起来的》矢泽久雄<br>《what if（那些古怪又让人忧心的问题）》兰道尔·门罗<br>《人类简史：从动物到上帝》尤瓦尔·赫拉利<br>《活着》余华<br>《苏东坡传》林语堂<br>《平面国》埃德温·艾勃特<br>《临界（科幻小说集）》王晋康<br>《哈利波特与密室》J.K·罗琳<br>《哈利波特和阿兹卡班的囚徒》J.K·罗琳<br>《哈利波特与火焰杯》J.K·罗琳<br>《古代人的日常生活（1）》王磊<br>《上帝的骰子》罗金海<br>《给青年的十二封信》朱光潜<br>《古代人的日常生活（2）》王磊<br>《原来如此是这样的宋朝》吴钩<br>《随园食单》袁枚<br>《牧羊少年的奇幻之旅》保罗·柯艾略<br>《我的个天》戴建业<br>《白夜行》<br>《山月记》<br> 《人间失格》太宰治</p><h3 id="2021-年读书清单-1"><a href="#2021-年读书清单-1" class="headerlink" title="2021 年读书清单"></a>2021 年读书清单</h3><p> 《超新星纪元》（小说集）刘慈欣<br>（北京少年儿童出版社）1月1日<br>《天使时代》（小说集）刘慈欣<br>（广西师范大学出版社）1月1号<br>《在细雨中呼喊》余华1月2号<br>《银河系搭车客指南》道格拉斯·亚当斯1月2号<br>《现实一种》余华（作家出版社）1月2号<br>《漫步人生，步履不停》陈忠实（古吴轩出版社）1月3号<br>《许三观卖血记》余华     1月3号<br>《梁家河》 梁家河编写组  陕西人民出版社1.4<br>《陈忠实文学回忆录》陈忠实  广东人民出版社  1.7<br>《山茶文具店》小川糸1.11<br>《恶意》东野圭吾1.14<br>《献给阿尔迪侬的花束》丹尼尔凯斯    广西师范大学出版社   1.26<br>《小狗钱钱》1.27<br>《闪闪发光的人生》小川系 1.29<br>《且听风吟》 村上春树 2.16<br>《第一人称单数》村上春树3.6</p>]]></content>
    
    
    <categories>
      
      <category>阅读与写作</category>
      
      <category>读书</category>
      
      <category>读书清单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>读书清单</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (1.JavaScript介绍)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/1.0%20%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/1.0%20%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>由ECMAScript，DOM,BOM三部分组成</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><h5 id="1-解释型语言"><a href="#1-解释型语言" class="headerlink" title="1.解释型语言"></a>1.解释型语言</h5><p>不用编译</p><h5 id="2-类似于c和java的语法结构"><a href="#2-类似于c和java的语法结构" class="headerlink" title="2.类似于c和java的语法结构"></a>2.类似于c和java的语法结构</h5><h5 id="3-动态语言"><a href="#3-动态语言" class="headerlink" title="3.动态语言"></a>3.动态语言</h5><h5 id="4-基于原型和面对对象"><a href="#4-基于原型和面对对象" class="headerlink" title="4.基于原型和面对对象"></a>4.基于原型和面对对象</h5><h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><p>js是从上到下一行一行的执行的<br>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br>        <span class="hljs-comment">// 控制浏览器弹出一个警告框</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;这是我的第一行js代码&quot;</span>)<br>        <span class="hljs-comment">// 让计算机在页面中输出一个内容</span><br>        <span class="hljs-comment">//  document.write 可以向body中输出一个内容</span><br>        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;这是我的第一行js代码&quot;</span>)<br>        <span class="hljs-comment">// 向控制台输入一个内容</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是我的第一行js代码&quot;</span>)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><ul><li><p>alert(“要输出的内容”);</p></li><li><p>该语句会在浏览器窗口中弹出一个警告框</p></li><li><p>document.write(“要输出的内容”);</p></li><li><p>该内容将会被写到body标签中，并在页面中显示</p></li><li><p>console.log(“要输出的内容”);</p></li><li><p>该内容会被写到开发者工具的控制台中</p></li></ul><h3 id="编写位置"><a href="#编写位置" class="headerlink" title="编写位置"></a>编写位置</h3><p>和CSS类似<br>可以将js代码编写到外部js文件中，然后通过script标签引入<br>写到外部文件中可以在不同的页面中同时引用，也可以利用到浏览器的缓存机制<br>推荐使用的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;js/script.js&quot;</span>&gt;&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>script标签一旦用于引入外部文件了，就不能在编写代码了，即使编写了浏览器也会忽略<br>如果需要则可以在创建一个新的script标签用于编写内部代码</p><p>可以将js代码编写到script标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是内部的JS代码&quot;</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>可以将js代码编写到标签的onclick属性中<br>当我们点击按钮时，js代码才会执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;button onclick=<span class="hljs-string">&quot;alert(&#x27;你点我干嘛~~&#x27;);&quot;</span>&gt;点我一下&lt;/button&gt;<br></code></pre></td></tr></table></figure><p>可以将js代码写在超链接的href属性中，这样当点击超链接时，会执行js代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;a href=<span class="hljs-string">&quot;javascript:alert(&#x27;让你点你就点！！&#x27;);&quot;</span>&gt;你也点我一下&lt;/a&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:;&quot;</span>&gt;</span>你也点我一下<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>虽然可以写在标签的属性中，但是他们属于结构与行为耦合，不方便维护，不推荐使用</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (2.JavaScript基础语法)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.0%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.0%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><p>[[2.1注释]]</p><p>[[2.2 格式要求]]</p><p>[[2.3 字面量和变量]]</p><p>[[2.4 标识符]]</p><p>[[2.5基本数据类型]]</p><p>[[2.6 强制类型转换]]</p><p>[[2.7 运算符]]</p><p>[[2.8 运算符的优先级]]</p><p>[[2.9 代码块]]</p><p>[[2.10 流程控制语句]]</p><p>[[2.11 条件分支语句]]</p><p>[[2.12 循环语句]]</p><p>[[2.13 对象]]</p><p>[[2.14 函数]]<br>[[2.15 数组]]</p><p>[[2.16 正则表达式]]</p><p>[[2.17 JSON]]</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (9.JavaScript条件分支语句)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.11%20%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.11%20%E6%9D%A1%E4%BB%B6%E5%88%86%E6%94%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h3><h4 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h4><p>条件分支语句也叫switch语句</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino">语法：<br><span class="hljs-keyword">switch</span>(条件表达式)&#123;<br><span class="hljs-keyword">case</span> 表达式:<br>语句...<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 表达式:<br>语句...<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>语句...<br><span class="hljs-keyword">break</span>;<br>&#125;  <br></code></pre></td></tr></table></figure><pre><code class="hljs"> 执行流程：</code></pre><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">switch</span>...<span class="hljs-keyword">case</span>..语句<br>在执行时会依次将<span class="hljs-keyword">case</span>后的表达式的值和<span class="hljs-keyword">switch</span>后的条件表达式的值进行全等比较，<br>如果比较结果为<span class="hljs-literal">true</span>，则从当前<span class="hljs-keyword">case</span>处开始执行代码。<br>当前<span class="hljs-keyword">case</span>后的所有的代码都会执行，我们可以在<span class="hljs-keyword">case</span>的后边跟着一个<span class="hljs-keyword">break</span>关键字，<br>这样可以确保只会执行当前<span class="hljs-keyword">case</span>后的语句，而不会执行其他的<span class="hljs-keyword">case</span><br>如果比较结果为<span class="hljs-literal">false</span>，则继续向下比较<br>如果所有的比较结果都为<span class="hljs-literal">false</span>，则只执行<span class="hljs-keyword">default</span>后的语句<br> <br><span class="hljs-keyword">switch</span>语句和<span class="hljs-keyword">if</span>语句的功能实际上有重复的，使用<span class="hljs-keyword">switch</span>可以实现<span class="hljs-keyword">if</span>的功能，<br>同样使用<span class="hljs-keyword">if</span>也可以实现<span class="hljs-keyword">switch</span>的功能，所以我们使用时，可以根据自己的习惯选择。<br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> num = <span class="hljs-number">3</span>;<br><span class="hljs-comment">//用if写：</span><br><span class="hljs-comment">/*if(num == 1)&#123;</span><br><span class="hljs-comment">console.log(&quot;壹&quot;);</span><br><span class="hljs-comment">&#125;else if(num == 2)&#123;</span><br><span class="hljs-comment">console.log(&quot;贰&quot;);</span><br><span class="hljs-comment">&#125;else if(num == 3)&#123;</span><br><span class="hljs-comment">console.log(&quot;叁&quot;);</span><br><span class="hljs-comment">&#125;*/</span><br><br>num = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//用switch语句写</span><br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;壹&quot;</span>);<br><span class="hljs-comment">//使用break可以来退出switch语句</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;贰&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;叁&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-attr">default</span>:<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;非法数字~~&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="swich练习"><a href="#swich练习" class="headerlink" title="swich练习:"></a>swich练习:</h4><p>对于成绩大于60分的，输出’合格’。低于60分的，输出’不合格’</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>switch练习1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 对于成绩大于60分的，输出&#x27;合格&#x27;。低于60分的，输出&#x27;不合格&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> * </span></span><br><span class="hljs-comment"><span class="language-javascript"> * 6x  /  10 = 6</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 7x  /  10 = 7</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 8x  /  10 = 8</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 9x  /  10 = 9</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 100 /  10 = 10</span></span><br><span class="hljs-comment"><span class="language-javascript"> * </span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> score = <span class="hljs-number">75</span>;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*switch(parseInt(score/10))&#123;</span></span><br><span class="hljs-comment"><span class="language-javascript">case 10:</span></span><br><span class="hljs-comment"><span class="language-javascript">case 9:</span></span><br><span class="hljs-comment"><span class="language-javascript">case 8:</span></span><br><span class="hljs-comment"><span class="language-javascript">case 7:</span></span><br><span class="hljs-comment"><span class="language-javascript">case 6:</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&quot;合格&quot;);</span></span><br><span class="hljs-comment"><span class="language-javascript">break;</span></span><br><span class="hljs-comment"><span class="language-javascript">default:</span></span><br><span class="hljs-comment"><span class="language-javascript">console.log(&quot;不合格&quot;);</span></span><br><span class="hljs-comment"><span class="language-javascript">break;</span></span><br><span class="hljs-comment"><span class="language-javascript">&#125;*/</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">switch</span>(<span class="hljs-literal">true</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">case</span> score &gt;= <span class="hljs-number">60</span>:</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;合格&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">break</span>;</span><br><span class="language-javascript"><span class="hljs-attr">default</span>:</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;不合格&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (8.JavaScript流程控制语句)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.10%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.10%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><p>JS中的程序是从上到下一行一行执行的</p><p>通过流程控制语句可以控制程序执行流程，使程序可以根据一定的条件来选择执行</p><ul><li><p>语句的分类：</p><ol><li><p>条件判断语句</p></li><li><p>条件分支语句</p></li><li><p>循环语句</p></li></ol></li></ul><p> 条件判断语句：</p><ul><li>使用条件判断语句可以在执行某个语句之前进行判断，<br>   果条件成立才会执行语句，条件不成立则语句不执行。</li></ul><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">语法一：<br><span class="hljs-keyword">if</span><span class="hljs-params">(条件表达式)</span>&#123;<br>语句<span class="hljs-string">...</span><br>&#125;<br><br><span class="hljs-keyword">if</span>语句在执行时，会先对条件表达式进行求值判断，<br>如果条件表达式的值为<span class="hljs-literal">true</span>，则执行<span class="hljs-keyword">if</span>后的语句，<br>如果条件表达式的值为<span class="hljs-literal">false</span>，则不会执行<span class="hljs-keyword">if</span>后的语句。<br><span class="hljs-keyword">if</span>语句只能控制紧随其后的那个语句,<br>如果希望<span class="hljs-keyword">if</span>语句可以控制多条语句，<br>可以将这些语句统一放到代码块中<br><span class="hljs-keyword">if</span>语句后的代码块不是必须的，但是在开发中尽量写上代码块，即使<span class="hljs-keyword">if</span>后只有一条语句<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso">语法二:<br> <span class="hljs-keyword">if</span>(条件表达式)&#123;<br> 语句<span class="hljs-params">...</span><br> &#125;<span class="hljs-keyword">else</span>&#123;<br> 语句<span class="hljs-params">...</span><br> &#125;<br> <br> <span class="hljs-keyword">if</span><span class="hljs-params">...</span><span class="hljs-keyword">else</span><span class="hljs-params">...</span>语句<br> 当该语句执行时，会先对<span class="hljs-keyword">if</span>后的条件表达式进行求值判断，<br> 如果该值为<span class="hljs-literal">true</span>，则执行<span class="hljs-keyword">if</span>后的语句<br> 如果该值为<span class="hljs-literal">false</span>，则执行<span class="hljs-keyword">else</span>后的语句<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs lasso">语法三：<br><span class="hljs-keyword">if</span>(条件表达式)&#123;<br>语句<span class="hljs-params">...</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式)&#123;<br>语句<span class="hljs-params">...</span><br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式)&#123;<br>语句<span class="hljs-params">...</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>语句<span class="hljs-params">...</span><br>&#125;<br>  <br><span class="hljs-keyword">if</span><span class="hljs-params">...</span><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><span class="hljs-params">...</span><span class="hljs-keyword">else</span><br>当该语句执行时，会从上到下依次对条件表达式进行求值判断<br>如果值为<span class="hljs-literal">true</span>，则执行当前语句。<br>如果值为<span class="hljs-literal">false</span>，则继续向下判断。<br>如果所有的条件都不满足，则执行最后一个<span class="hljs-keyword">else</span>后的语句<br>该语句中，只会有一个代码块被执行，一旦代码块执行了，则直接结束语句<br></code></pre></td></tr></table></figure><h4 id="if练习"><a href="#if练习" class="headerlink" title="if练习"></a>if练习</h4><h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>if练习1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 从键盘输入小明的期末成绩:</span></span><br><span class="hljs-comment"><span class="language-javascript"> *当成绩为100时，&#x27;奖励一辆BMW&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *当成绩为[80-99]时，&#x27;奖励一台iphone15s&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *当成绩为[60-80]时，&#x27;奖励一本参考书&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *其他时，什么奖励也没有</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * prompt()可以弹出一个提示框，该提示框中会带有一个文本框，</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 该字符串将会作为提示框的提示文字</span></span><br><span class="hljs-comment"><span class="language-javascript"> * </span></span><br><span class="hljs-comment"><span class="language-javascript"> * 用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该内容</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"><span class="hljs-comment">//score就是小明的期末成绩</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> score = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入小明的期末成绩(0-100):&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//判断值是否合法</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">100</span> || score &lt; <span class="hljs-number">0</span> || <span class="hljs-built_in">isNaN</span>(score))&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;拉出去毙了~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//根据score的值来决定给小明什么奖励</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//奖励一台宝马</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;宝马，拿去~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">80</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//奖励一个手机</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;手机，拿去玩~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//奖励一本参考书</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;参考书，拿去看~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;棍子一根~~&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>if练习2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件： </span></span><br><span class="hljs-comment"><span class="language-javascript"> *高：180cm以上; 富:1000万以上; 帅:500以上;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *如果这三个条件同时满足，则:&#x27;我一定要嫁给他&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *如果三个条件有为真的情况，则:&#x27;嫁吧，比上不足，比下有余。&#x27; </span></span><br><span class="hljs-comment"><span class="language-javascript"> *如果三个条件都不满足，则:&#x27;不嫁！&#x27; </span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> height = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入你的身高(CM):&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> money = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入你的财富(万):&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> face = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入你的颜值(PX):&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//如果这三个条件同时满足，则:&#x27;我一定要嫁给他&#x27;</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(height &gt; <span class="hljs-number">180</span> &amp;&amp; money &gt; <span class="hljs-number">1000</span> &amp;&amp; face &gt; <span class="hljs-number">500</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我一定要嫁给他~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(height &gt; <span class="hljs-number">180</span> || money &gt; <span class="hljs-number">1000</span> || face &gt; <span class="hljs-number">500</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//如果三个条件有为真的情况，则:&#x27;嫁吧，比上不足，比下有余。&#x27; </span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;嫁吧，比上不足，比下有余。&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//如果三个条件都不满足，则:&#x27;不嫁！&#x27; </span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;不嫁。&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="练习3：三个整数排序"><a href="#练习3：三个整数排序" class="headerlink" title="练习3：三个整数排序"></a>练习3：三个整数排序</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>if练习3<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 编写程序，由键盘输入三个整数分别存入变量num1、num2、num3，</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 对他们进行排序，并且从小到大输出。</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//获取用户输入的三个数</span></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * prompt()函数的返回值是String类型的</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> num1 = +<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入第一个数:&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> num2 = +<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入第二个数:&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> num3 = +<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入第三个数:&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//找到三个数中最小的数</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(num1 &lt; num2 &amp;&amp; num1 &lt; num3)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num1最小，比较num2和num3</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(num2 &lt; num3)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num1 num2 num3</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(num1 +<span class="hljs-string">&quot;,&quot;</span>+num2 + <span class="hljs-string">&quot;,&quot;</span>+num3);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num1 num3 num2</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(num1 +<span class="hljs-string">&quot;,&quot;</span>+num3 + <span class="hljs-string">&quot;,&quot;</span>+num2);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num2 &lt; num1 &amp;&amp; num2 &lt; num3)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num2最小，比较num1和num3</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(num1 &lt; num3)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num2 num1 num3</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(num2 +<span class="hljs-string">&quot;,&quot;</span>+num1 + <span class="hljs-string">&quot;,&quot;</span>+num3);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num2 num3 num1</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(num2 +<span class="hljs-string">&quot;,&quot;</span>+num3 + <span class="hljs-string">&quot;,&quot;</span>+num1);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num3最小,比较num1和num2</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(num1 &lt; num2)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// num3 num1 num2</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(num3 +<span class="hljs-string">&quot;,&quot;</span>+num1 + <span class="hljs-string">&quot;,&quot;</span>+num2);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//num3 num2 num1</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(num3 +<span class="hljs-string">&quot;,&quot;</span>+num2 + <span class="hljs-string">&quot;,&quot;</span>+num1);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (11.JavaScript对象)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.13%20%E5%AF%B9%E8%B1%A1/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.13%20%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="介绍，基本内容："><a href="#介绍，基本内容：" class="headerlink" title="介绍，基本内容："></a><strong>介绍，基本内容：</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * JS中数据类型</span><br><span class="hljs-comment"> * - String 字符串</span><br><span class="hljs-comment"> *  - Number 数值</span><br><span class="hljs-comment"> * - Boolean 布尔值</span><br><span class="hljs-comment"> * - Null 空值</span><br><span class="hljs-comment"> * - Undefined 未定义</span><br><span class="hljs-comment"> * - 以上这五种类型属于基本数据类型，以后我们看到的值</span><br><span class="hljs-comment"> * 只要不是上边的5种，全都是对象</span><br><span class="hljs-comment"> * - Object 对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 基本数据类型都是单一的值&quot;hello&quot; 123 true,</span><br><span class="hljs-comment"> * 值和值之间没有任何的联系。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 在JS中来表示一个人的信息（name gender age）：</span><br><span class="hljs-comment"> * var name = &quot;孙悟空&quot;;</span><br><span class="hljs-comment"> * var gender = &quot;男&quot;;</span><br><span class="hljs-comment"> * var age = 18;</span><br><span class="hljs-comment"> * 如果使用基本数据类型的数据，我们所创建的变量都是独立，不能成为一个整体。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 对象的分类：</span><br><span class="hljs-comment"> * 1.内建对象</span><br><span class="hljs-comment"> * - 由ES标准中定义的对象，在任何的ES的实现中都可以使用</span><br><span class="hljs-comment"> * - 比如：Math String Number Boolean Function Object....</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 2.宿主对象</span><br><span class="hljs-comment"> * - 由JS的运行环境提供的对象，目前来讲主要指由浏览器提供的对象</span><br><span class="hljs-comment"> * - 比如 BOM DOM</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 3.自定义对象</span><br><span class="hljs-comment"> * - 由开发人员自己创建的对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//创建对象</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 使用new关键字调用的函数，是构造函数constructor</span><br><span class="hljs-comment"> * 构造函数是专门用来创建对象的函数</span><br><span class="hljs-comment"> * 使用typeof检查一个对象时，会返回object</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 在对象中保存的值称为属性</span><br><span class="hljs-comment"> * 向对象添加属性</span><br><span class="hljs-comment"> * 语法：对象.属性名 = 属性值;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//向obj中添加一个name属性</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;孙悟空&quot;</span>;<br><span class="hljs-comment">//向obj中添加一个gender属性</span><br>obj.<span class="hljs-property">gender</span> = <span class="hljs-string">&quot;男&quot;</span>;<br><span class="hljs-comment">//向obj中添加一个age属性</span><br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 读取对象中的属性</span><br><span class="hljs-comment"> * 语法：对象.属性名</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 如果读取对象中没有的属性，不会报错而是会返回undefined</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">//console.log(obj.gender);</span><br><span class="hljs-comment">//console.log(obj.hello);</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 修改对象的属性值</span><br><span class="hljs-comment"> * 语法：对象.属性名 = 新值</span><br><span class="hljs-comment"> */</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;tom&quot;</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 删除对象的属性</span><br><span class="hljs-comment"> * 语法：delete 对象.属性名</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">delete</span> obj.<span class="hljs-property">name</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">age</span>);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="属性名和属性值"><a href="#属性名和属性值" class="headerlink" title="属性名和属性值"></a>属性名和属性值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 向对象中添加属性</span><br><span class="hljs-comment"> * 属性名：</span><br><span class="hljs-comment"> * - 对象的属性名不强制要求遵守标识符的规范</span><br><span class="hljs-comment"> * 什么乱七八糟的名字都可以使用</span><br><span class="hljs-comment"> * - 但是我们使用是还是尽量按照标识符的规范去做</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;孙悟空&quot;</span>;<br><br><span class="hljs-comment">//obj.var = &quot;hello&quot;;</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如果要使用特殊的属性名，不能采用.的方式来操作</span><br><span class="hljs-comment"> * 需要使用另一种方式：</span><br><span class="hljs-comment"> * 语法：对象[&quot;属性名&quot;] = 属性值</span><br><span class="hljs-comment"> * 读取时也需要采用这种方式</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 使用[]这种形式去操作属性，更加的灵活，</span><br><span class="hljs-comment"> * 在[]中可以直接传递一个变量，这样变量值是多少就会读取那个属性</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>obj[<span class="hljs-string">&quot;123&quot;</span>] = <span class="hljs-number">789</span>;<br>obj[<span class="hljs-string">&quot;nihao&quot;</span>] = <span class="hljs-string">&quot;你好&quot;</span>;<br><span class="hljs-keyword">var</span> n = <span class="hljs-string">&quot;nihao&quot;</span>;<br><span class="hljs-comment">//console.log(obj[&quot;123&quot;]);</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 属性值</span><br><span class="hljs-comment"> * JS对象的属性值，可以是任意的数据类型</span><br><span class="hljs-comment"> * 甚至也可以是一个对象</span><br><span class="hljs-comment"> */</span><br><br>obj.<span class="hljs-property">test</span> = <span class="hljs-literal">true</span>;<br>obj.<span class="hljs-property">test</span> = <span class="hljs-literal">null</span>;<br>obj.<span class="hljs-property">test</span> = <span class="hljs-literal">undefined</span>;<br><br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj2.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;猪八戒&quot;</span>;<br><br><span class="hljs-comment">//将obj2设置为obj的属性</span><br>obj.<span class="hljs-property">test</span> = obj2;<br><br><span class="hljs-comment">//console.log(obj.test.name);</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * in 运算符</span><br><span class="hljs-comment"> * - 通过该运算符可以检查一个对象中是否含有指定的属性</span><br><span class="hljs-comment"> * 如果有则返回true，没有则返回false</span><br><span class="hljs-comment"> *  - 语法：</span><br><span class="hljs-comment"> * &quot;属性名&quot; in 对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//console.log(obj.test2);</span><br><br><span class="hljs-comment">//检查obj中是否含有test2属性</span><br><span class="hljs-comment">//console.log(&quot;test2&quot; in obj);</span><br><span class="hljs-comment">//console.log(&quot;test&quot; in obj);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-keyword">in</span> obj);<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="基本数据类型和引用数据类型"><a href="#基本数据类型和引用数据类型" class="headerlink" title="基本数据类型和引用数据类型"></a>基本数据类型和引用数据类型</h4><h5 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h5><p>   String Number Boolean Null Undefined</p><h5 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h5><pre><code class="hljs">Object    JS中的变量都是保存到栈内存中的， 基本数据类型的值直接在栈内存中存储， 值与值之间是独立存在，修改一个变量不会影响其他的变量    对象是保存到堆内存中的，每创建一个新的对象，就会在堆内存中开辟出一个新的空间， 而变量保存的是对象的内存地址（对象的引用），如果两个变量保存的是同一个对象引用，  当一个通过一个变量修改属性时，另一个也会受到影响当比较两个基本数据类型的值时，就是比较值。        而比较两个引用数据类型时，它是比较的对象的内存地址，                如果两个对象是一摸一样的，但是地址不同，它也会返回false</code></pre><h4 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h4><p>创建一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure><p>使用对象字面量来创建一个对象:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br></code></pre></td></tr></table></figure><p>使用对象字面量，可以在创建对象时，直接指定对象中的属性</p><p> 语法：{属性名:属性值,属性名:属性值….}<br>        对象字面量的属性名可以加引号也可以不加，建议不加,<br>        如果要使用一些特殊的名字，则必须加引号</p><p> 属性名和属性值是一组一组的名值对结构，<br>        名和值之间使用:连接，多个名值对之间使用,隔开<br>        如果一个属性之后没有其他的属性了，就不要写,</p><p>举例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj2 = &#123;<br><br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;猪八戒&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">13</span>,<br><span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span>,<br><span class="hljs-attr">test</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;沙僧&quot;</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (12.JavaScript函数)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.14%20%E5%87%BD%E6%95%B0/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.14%20%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="function介绍"><a href="#function介绍" class="headerlink" title="function介绍"></a>function介绍</h4><p>函数 function<br>    - 函数也是一个对象<br>    - 函数中可以封装一些功能（代码），在需要时可以执行这些功能（代码）<br>    - 函数中可以保存一些代码在需要的时候调用<br>    - 使用typeof检查一个函数对象时，会返回function</p><p>我们在实际开发中很少使用构造函数来创建一个函数对象<br>使用构造函数创建一个函数对象<br>可以将要封装的代码以字符串的形式传递给构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fun = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;console.log(&#x27;Hello 这是我的第一个函数&#x27;);&quot;</span>);<br></code></pre></td></tr></table></figure><p>封装到函数中的代码不会立即执行<br>函数中的代码会在函数调用的时候执行<br>调用函数 语法：函数对象()<br>当调用函数时，函数中封装的代码会按照顺序执行</p><p>使用 函数声明 来创建一个函数,语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> 函数名([形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2.</span>..形参N])&#123;<br>语句...<br>&#125;<br><span class="hljs-comment">//例子:</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;这是我的第二个函数~~~&quot;</span>);<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;哈哈哈哈哈&quot;</span>);<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;~~~~(&gt;_&lt;)~~~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 函数表达式 来创建一个函数,语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">var</span> 函数名  = <span class="hljs-keyword">function</span>(<span class="hljs-params">[形参<span class="hljs-number">1</span>,形参<span class="hljs-number">2.</span>..形参N]</span>)&#123;<br> 语句....<br>   &#125;<br><span class="hljs-comment">//例子 创建匿名函数：</span><br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是匿名函数中封装的代码&quot;</span>);<br>&#125;;<br><span class="hljs-comment">//调用匿名函数</span><br><span class="hljs-keyword">var</span> fun3 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是匿名函数中封装的代码&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h4><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">// 定义一个用来求两个数和的函数</span><br> <span class="hljs-comment">// 可以在函数的()中来指定一个或多个形参（形式参数）</span><br> <span class="hljs-comment">// 多个形参之间使用,隔开，声明形参就相当于在函数内部声明了对应的变量</span><br> <span class="hljs-comment">// 但是并不赋值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a = &quot;</span>+a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b = &quot;</span>+b);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a+b);<br>&#125;<br><span class="hljs-comment">//在调用函数时，可以在()中指定实参（实际参数）</span><br><span class="hljs-comment">// 实参将会赋值给函数中对应的形参</span><br><span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);<br></code></pre></td></tr></table></figure><p>调用函数时解析器不会检查实参的类型,<br>所以要注意，是否有可能会接收到非法的参数，如果有可能则需要对参数进行类型的检查<br>函数的实参可以是任意的数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>,<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-title function_">sum</span>(<span class="hljs-literal">true</span> , <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>调用函数时，解析器也不会检查实参的数量<br>        多余实参不会被赋值<br>        如果实参的数量少于形参的数量，则没有对应实参的形参将是undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>);<br><span class="hljs-title function_">sum</span>(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><p>可以使用 return 来设置函数的返回值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">语法：<br><span class="hljs-keyword">return</span> 值<br></code></pre></td></tr></table></figure><p>return后的值将会会作为函数的执行结果返回，可以定义一个变量，来接收该结果<br>在函数中return后的语句都不会执行<br>如果return语句后不跟任何值就相当于返回一个undefined，如果函数中不写return，则也会返回undefined<br>return后可以跟任意类型的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">a , b , c</span>)&#123;<br><span class="hljs-comment">//alert(a + b +c);</span><br><span class="hljs-keyword">var</span> d = a + b + c;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用函数<br>变量result的值就是函数的执行结果<br>函数返回什么result的值就是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">sum</span>(<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;result = &quot;</span>+result);<br></code></pre></td></tr></table></figure><p>返回值可以是任意的数据类型,也可以是一个对象，也可以是一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun2</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-comment">//返回一个对象</span><br><span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;沙和尚&quot;</span>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun3</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//在函数内部再声明一个函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun4</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是fun4&quot;</span>);<br>&#125;<br><span class="hljs-comment">//将fun4函数对象作为返回值返回</span><br><span class="hljs-keyword">return</span> fun4;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数练习"><a href="#函数练习" class="headerlink" title="函数练习"></a>函数练习</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//定义一个函数，判断一个数字是否是偶数，如果是返回true，否则返回false</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isOu</span>(<span class="hljs-params">num</span>)&#123;<br><span class="hljs-keyword">return</span> num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">isOu</span>(<span class="hljs-number">15</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 定义一个函数，可以根据半径计算一个圆的面积，并返回计算结果</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mianji</span>(<span class="hljs-params">r</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span>*r*r;<br>&#125;<br>result = <span class="hljs-title function_">mianji</span>(<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建一个函数，可以在控制台中输出一个人的信息(传递对象)</span><br><span class="hljs-comment"> * 可以输出人的 name age gender address</span><br><span class="hljs-comment"> * 实参可以是任意的数据类型，也可以是一个对象</span><br><span class="hljs-comment"> * 当我们的参数过多时，可以将参数封装到一个对象中，然后通过对象传递</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params">o</span>)&#123;<br><br><span class="hljs-comment">//console.log(&quot;o = &quot;+o);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是&quot;</span>+o.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;,今年我&quot;</span>+o.<span class="hljs-property">age</span>+<span class="hljs-string">&quot;岁了,&quot;</span>+<span class="hljs-string">&quot;我是一个&quot;</span>+o.<span class="hljs-property">gender</span>+<span class="hljs-string">&quot;人&quot;</span>+<span class="hljs-string">&quot;,我住在&quot;</span>+o.<span class="hljs-property">address</span>);<br>&#125;<br><span class="hljs-comment">//创建一个对象</span><br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br><span class="hljs-attr">address</span>:<span class="hljs-string">&quot;花果山&quot;</span>,<br><span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span><br><br>&#125;;<br></code></pre></td></tr></table></figure><p>所以：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//实参可以是一个对象，也可以是一个函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">a</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a = &quot;</span>+a);<br><span class="hljs-title function_">a</span>(obj);<br>&#125;<br><span class="hljs-title function_">fun</span>(sayHello);<br><span class="hljs-comment">//将匿名函数作为实参</span><br><span class="hljs-title function_">fun</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>)&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fun</span>(<span class="hljs-title function_">mianji</span>(<span class="hljs-number">10</span>));<br><span class="hljs-title function_">fun</span>(mianji);<br><span class="hljs-comment">//两者的区别：</span><br><span class="hljs-title function_">mianji</span>()<br>  - 调用函数<br>  - 相当于使用的函数的返回值  <br> mianji<br>  - 函数对象<br> - 相当于直接使用函数对象<br></code></pre></td></tr></table></figure><h4 id="break-continue-return的区别"><a href="#break-continue-return的区别" class="headerlink" title="break continue return的区别"></a>break continue return的区别</h4><p>使用break可以退出当前的循环<br>continue用于跳过当次循环<br>使用return可以结束整个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;函数要执行了~~~~&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">5</span> ; i++)&#123;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-comment">//使用break可以退出当前的循环</span><br><span class="hljs-comment">//break;</span><br><span class="hljs-comment">//continue用于跳过当次循环</span><br><span class="hljs-comment">//continue;</span><br><span class="hljs-comment">//使用return可以结束整个函数</span><br><span class="hljs-comment">//return;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;函数执行完了~~~~&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h4><p>立即执行函数:<br>    函数定义完，立即被调用，这种函数叫做立即执行函数<br>    立即执行函数往往只会执行一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//用括号标识匿名函数</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;我是一个匿名函数~~~&quot;</span>);<br>&#125;)();<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a = &quot;</span>+a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b = &quot;</span>+b);<br>&#125;)(<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);<br></code></pre></td></tr></table></figure><h4 id="将函数作为对象的属性-方法"><a href="#将函数作为对象的属性-方法" class="headerlink" title="将函数作为对象的属性(方法)"></a>将函数作为对象的属性(方法)</h4><p>对象的属性值可以是任何的数据类型，也可以是个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;孙悟空&quot;</span>;<br>obj.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br><span class="hljs-comment">//对象的属性值可以是任何的数据类型，也可以是个函数</span><br>obj.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>可以通过调用属性的方法调用该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">obj.<span class="hljs-title function_">sayName</span>();<span class="hljs-comment">//调方法</span><br></code></pre></td></tr></table></figure><p>函数也可以称为对象的属性，如果一个函数作为一个对象的属性保存，那么我们称这个函数时这个对象的方法<br>调用这个函数就说调用对象的方法（method）<br>但是它只是名称上的区别没有其他的区别<br>也可以通过字面量的方式来写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br><br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;猪八戒&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br><span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>);<br>&#125;<br><br>&#125;;<br><br>.<span class="hljs-property">say</span>.<span class="hljs-title class_">Name</span>();<br></code></pre></td></tr></table></figure><h4 id="枚举对象中的属性-遍历"><a href="#枚举对象中的属性-遍历" class="headerlink" title="枚举对象中的属性(遍历)"></a>枚举对象中的属性(遍历)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br><span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span>,<br><span class="hljs-attr">address</span>:<span class="hljs-string">&quot;花果山&quot;</span><br> &#125;; <br><span class="hljs-comment">//枚举对象中的属性</span><br><span class="hljs-comment">//使用for ... in 语句</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  语法：</span><br><span class="hljs-comment">  for(var 变量 in 对象)&#123;</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">   &#125;</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  for...in语句 对象中有几个属性，循环体就会执行几次</span><br><span class="hljs-comment">  每次执行时，会将对象中的一个属性的名字赋值给变量</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> n <span class="hljs-keyword">in</span> obj)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;属性名:&quot;</span>+n);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;属性值:&quot;</span>+obj[n]);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">作用域指一个变量的作用的范围</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">在JS中一共有两种作用域：</span><br><br>1.全局作用域<br><span class="hljs-bullet">-</span> <span class="hljs-string">直接编写在script标签中的JS代码，都在全局作用域</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">全局作用域在页面打开时创建，在页面关闭时销毁</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">在全局作用域中有一个全局对象window</span><br>它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用<br><span class="hljs-bullet">-</span> <span class="hljs-string">在全局作用域中：</span><br>创建的变量都会作为window对象的属性保存<br>创建的函数都会作为window对象的方法保存<br><span class="hljs-bullet">-</span> <span class="hljs-string">全局作用域中的变量都是全局变量</span><br>在页面的任意的部分都可以访问的到<br><br>2.函数作用域<br><br></code></pre></td></tr></table></figure><h4 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JS">函数作用域<br>- 调用函数时创建函数作用域，函数执行完毕以后，函数作用域销毁<br>- 每调用一次函数就会创建一个新的函数作用域，他们之间是互相独立的<br>- 在函数作用域中可以访问到全局作用域的变量<br>在全局作用域中无法访问到函数作用域的变量<br>- 当在函数作用域操作一个变量时，它会先在自身作用域中寻找，如果有就直接使用<br>如果没有则向上一级作用域中寻找，直到找到全局作用域，<br>如果全局作用域中依然没有找到，则会报错<span class="hljs-title class_">ReferenceError</span><br>- 在函数中要访问全局变量可以使用<span class="hljs-variable language_">window</span>对象<br><br>- 在函数作用域也有声明提前的特性，<br>使用<span class="hljs-keyword">var</span>关键字声明的变量，会在函数中所有的代码执行之前被声明<br>函数声明也会在函数中所有的代码执行之前执行<br><br>-在函数中，不适用<span class="hljs-keyword">var</span>声明的变量都会成为全局变量<br>-在函数中，定义形参就相当于在函数作用域中声明了变量<br></code></pre></td></tr></table></figure><h4 id="变量的声明提前"><a href="#变量的声明提前" class="headerlink" title="变量的声明提前"></a>变量的声明提前</h4><p>使用var关键字声明的变量，会在所有的代码执行之前被声明（但是不会赋值），<br>但是如果声明变量时不适用var关键字，则变量不会被声明提前</p><h4 id="函数的声明提前"><a href="#函数的声明提前" class="headerlink" title="函数的声明提前"></a>函数的声明提前</h4><p>使用函数声明形式创建的函数 function 函数(){}<br>它会在所有的代码执行之前就被创建，所以我们可以在函数声明前来调用函数<br>使用函数表达式创建的函数，不会被声明提前，所以不能在声明前调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">//函数声明，会被提前创建</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是一个fun函数&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//函数表达式，不会被提前创建</span><br><span class="hljs-keyword">var</span> fun2 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;我是fun2函数&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="this-当前对象-（类似于python的self）"><a href="#this-当前对象-（类似于python的self）" class="headerlink" title="this(当前对象)（类似于python的self）"></a>this(当前对象)（类似于python的self）</h4><p>解析器在调用函数每次都会向函数内部传递进一个隐含的参数,<br>这个隐含的参数就是this，this指向的是一个对象，<br>这个对象我们称为函数执行的 上下文对象，<br>根据函数的调用方式的不同，this会指向不同的对象<br>        1.以函数的形式调用时，this永远都是window<br>        2.以方法的形式调用时，this就是调用方法的那个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//console.log(&quot;a = &quot;+a+&quot;, b = &quot;+b);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br><span class="hljs-attr">sayName</span>:fun<br>&#125;;<br><span class="hljs-comment">//以方法的形式调用，this是调用方法的对象</span><br>obj.<span class="hljs-title function_">sayName</span>();<span class="hljs-comment">//this就是obj</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><br><span class="hljs-comment">//创建一个name变量</span><br><span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;全局&quot;</span>;<br><br><span class="hljs-comment">//创建一个fun()函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br><br><span class="hljs-comment">//创建两个对象</span><br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br><span class="hljs-attr">sayName</span>:fun<br>&#125;;<br><br><span class="hljs-keyword">var</span> obj2 = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;沙和尚&quot;</span>,<br><span class="hljs-attr">sayName</span>:fun<br>&#125;;<br><span class="hljs-comment">//我们希望调用obj.sayName()时可以输出obj的名字</span><br><span class="hljs-comment">//obj.sayName();</span><br>obj.<span class="hljs-title function_">sayName</span>();<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>补充进阶：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 在调用函数时，浏览器每次都会传递进两个隐含的参数：</span><br><span class="hljs-comment"> * 1.函数的上下文对象 this</span><br><span class="hljs-comment"> * 2.封装实参的对象 arguments</span><br><span class="hljs-comment"> * - arguments是一个类数组对象,它也可以通过索引来操作数据，也可以获取长度</span><br><span class="hljs-comment"> * - 在调用函数时，我们所传递的实参都会在arguments中保存</span><br><span class="hljs-comment"> * - arguments.length可以用来获取实参的长度</span><br><span class="hljs-comment"> * - 我们即使不定义形参，也可以通过arguments来使用实参，</span><br><span class="hljs-comment"> * 只不过比较麻烦</span><br><span class="hljs-comment"> * arguments[0] 表示第一个实参</span><br><span class="hljs-comment"> * arguments[1] 表示第二个实参 。。。</span><br><span class="hljs-comment"> *- 它里边有一个属性叫做callee，</span><br><span class="hljs-comment"> * 这个属性对应一个函数对象，就是当前正在指向的函数的对象</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">a,b</span>)&#123;<br><span class="hljs-comment">//console.log(arguments.length);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span> == fun);<br>&#125;<br><br><span class="hljs-title function_">fun</span>(<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-literal">true</span>);<br><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="date对象"><a href="#date对象" class="headerlink" title="date对象"></a>date对象</h4><h5 id="Date对象创建"><a href="#Date对象创建" class="headerlink" title="Date对象创建"></a>Date对象创建</h5><ul><li>在JS中使用Date对象来表示一个时间<br>创建一个Date对象,保存当前时间<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个Date对象</span><br><span class="hljs-comment">//如果直接使用构造函数创建一个Date对象，则会封装为当前代码执行的时间</span><br><span class="hljs-keyword">var</span> d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br><span class="hljs-comment">//创建一个指定的时间对象</span><br><span class="hljs-comment">//需要在构造函数中传递一个表示时间的字符串作为参数</span><br><span class="hljs-comment">//日期的格式  月份/日/年 时:分:秒</span><br><span class="hljs-keyword">var</span> d2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2/18/2011 11:10:30&quot;</span>);<br></code></pre></td></tr></table></figure>创建一个指定的时间对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个指定的时间对象</span><br><span class="hljs-comment">//需要在构造函数中传递一个表示时间的字符串作为参数</span><br><span class="hljs-comment">//日期的格式  月份/日/年 时:分:秒</span><br><span class="hljs-keyword">var</span> d2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-string">&quot;2/18/2011 11:10:30&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><h6 id="getDate"><a href="#getDate" class="headerlink" title="getDate()"></a>getDate()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * getDate()</span><br><span class="hljs-comment"> * - 获取当前日期对象是几日</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> date = d2.<span class="hljs-title function_">getDate</span>();<br></code></pre></td></tr></table></figure><h6 id="getDay"><a href="#getDay" class="headerlink" title="getDay()"></a>getDay()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * getDay()</span><br><span class="hljs-comment"> * - 获取当前日期对象时周几</span><br><span class="hljs-comment"> * - 会返回一个0-6的值</span><br><span class="hljs-comment"> * 0 表示周日</span><br><span class="hljs-comment"> * 1表示周一</span><br><span class="hljs-comment"> * 。。。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> day = d2.<span class="hljs-title function_">getDay</span>();<br></code></pre></td></tr></table></figure><h6 id="getMonth"><a href="#getMonth" class="headerlink" title="getMonth()"></a>getMonth()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * getMonth()</span><br><span class="hljs-comment"> * d2 = new Date(&quot;12/18/2011 11:10:30&quot;);</span><br><span class="hljs-comment"> * - 获取当前时间对象的月份</span><br><span class="hljs-comment"> * - 会返回一个0-11的值</span><br><span class="hljs-comment"> * 0 表示1月</span><br><span class="hljs-comment"> * 1 表示2月</span><br><span class="hljs-comment"> * 11 表示12月</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> month = d2.<span class="hljs-title function_">getMonth</span>();<br></code></pre></td></tr></table></figure><h6 id="getFullYear"><a href="#getFullYear" class="headerlink" title="getFullYear()"></a>getFullYear()</h6><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * getFullYear()</span><br><span class="hljs-comment"> * - 获取当前日期对象的年份</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> <span class="hljs-built_in">year</span> = d2.getFullYear();<br></code></pre></td></tr></table></figure><h6 id="getTime"><a href="#getTime" class="headerlink" title="getTime()"></a>getTime()</h6><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/*<br><span class="hljs-bullet"> *</span> getTime()<br><span class="hljs-bullet"> *</span> - 获取当前日期对象的时间戳<br><span class="hljs-bullet"> *</span> - 时间戳，指的是从格林威治标准时间的1970年1月1日，0时0分0秒<br><span class="hljs-bullet"> *</span> 到当前日期所花费的毫秒数（1秒 = 1000毫秒）<br><span class="hljs-bullet"> *</span> - 计算机底层在保存时间时使用都是时间戳<br> <span class="hljs-emphasis">*/</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">var time = d2.getTime();</span><br></code></pre></td></tr></table></figure><p>可以利用时间戳来测试代码的执行的性能</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//利用时间戳来测试代码的执行的性能</span><br><span class="hljs-comment">//获取当前的时间戳</span><br><span class="hljs-keyword">var</span> start = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">100</span> ; i++)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<br>&#125;<br><br><span class="hljs-keyword">var</span> end = <span class="hljs-built_in">Date</span>.<span class="hljs-built_in">now</span>();<br><br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;执行了：&quot;</span>+(end - start)+<span class="hljs-string">&quot;毫秒&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="math对象"><a href="#math对象" class="headerlink" title="math对象"></a>math对象</h4><p>Math和其他的对象不同，它不是一个构造函数，它属于一个工具类不用创建对象，它里边封装了数学运算相关的属性和方法<br>比如：Math.PI 表示的圆周率<br>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">*<span class="hljs-title function_">abs</span>()<br>   -可以用来计算一个数的绝对值<br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>()<br>* - 可以对一个数进行向上取整，小数位只有有值就自动进<span class="hljs-number">1</span><br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>()<br>* - 可以对一个数进行向下取整，小数部分会被舍掉<br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>()<br>* - 可以对一个数进行四舍五入取整<br> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()<br>* - 可以用来生成一个<span class="hljs-number">0</span>-<span class="hljs-number">1</span>之间的随机数<br>*  - 生成一个<span class="hljs-number">0</span>-<span class="hljs-number">10</span>的随机数<br>* - 生成一个<span class="hljs-number">0</span>-x之间的随机数<br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*x)<br>* <br>* - 生成一个<span class="hljs-number">1</span>-<span class="hljs-number">10</span><br>* - 生成一个x-y之间的随机数<br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*(y-x)+x)<br>* <span class="hljs-title function_">max</span>() 可以获取多个数中的最大值<br>* <span class="hljs-title function_">min</span>() 可以获取多个数中的最小值<br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(x,y)<br>* 返回x的y次幂<br>* <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>()<br>*  用于对一个数进行开方运算<br></code></pre></td></tr></table></figure><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">* 基本数据类型</span><br><span class="hljs-comment">* String Number Boolean Null Undefined</span><br><span class="hljs-comment">* 引用数据类型</span><br><span class="hljs-comment">* Object</span><br><span class="hljs-comment">* </span><br><span class="hljs-comment">* 在JS中为我们提供了三个包装类，通过这三个包装类可以将基本数据类型的数据转换为对象</span><br><span class="hljs-comment">* String()</span><br><span class="hljs-comment">* - 可以将基本数据类型字符串转换为String对象</span><br><span class="hljs-comment">* Number()</span><br><span class="hljs-comment">* - 可以将基本数据类型的数字转换为Number对象</span><br><span class="hljs-comment">*  Boolean()</span><br><span class="hljs-comment">* - 可以将基本数据类型的布尔值转换为Boolean对象</span><br><span class="hljs-comment">* 但是注意：我们在实际应用中不会使用基本数据类型的对象，</span><br><span class="hljs-comment">* 如果使用基本数据类型的对象，在做一些比较时可能会带来一些不可预期的结果</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">方法和属性之能添加给对象，不能添加给基本数据类型当我们对一些基本数据类型的值去调用属性和方法时，浏览器会临时使用包装类将其转换为对象，然后在调用对象的属性和方法调用完以后，在将其转换为基本数据类型</code></pre><h4 id="批量创建对象（使用工厂方法创建对象）"><a href="#批量创建对象（使用工厂方法创建对象）" class="headerlink" title="批量创建对象（使用工厂方法创建对象）"></a>批量创建对象（使用工厂方法创建对象）</h4><p>创建一个对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>,<br><span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<br><span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span>,<br><span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用工厂方法创建对象,通过该方法可以大批量的创建对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name , age ,gender</span>)&#123;<br><span class="hljs-comment">//创建一个新的对象 </span><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-comment">//向对象中添加属性</span><br>obj.<span class="hljs-property">name</span> = name;<br>obj.<span class="hljs-property">age</span> = age;<br>obj.<span class="hljs-property">gender</span> = gender;<br>obj.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><span class="hljs-comment">//将新的对象返回</span><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后通过这样的函数就可以批量创建同类对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-number">28</span>,<span class="hljs-string">&quot;男&quot;</span>);<br><span class="hljs-keyword">var</span> obj3 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;白骨精&quot;</span>,<span class="hljs-number">16</span>,<span class="hljs-string">&quot;女&quot;</span>);<br><span class="hljs-keyword">var</span> obj4 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;女&quot;</span>);<br></code></pre></td></tr></table></figure><p>使用工厂方法创建的对象，使用的构造函数都是Object<br>所以创建的对象都是Object这个类型，<br>就导致我们无法区分出多种不同类型的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个狗的对象</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createDog</span>(<span class="hljs-params">name , age</span>)&#123;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj.<span class="hljs-property">name</span> = name;<br>obj.<span class="hljs-property">age</span> = age;<br>obj.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;汪汪~~&quot;</span>);<br>&#125;;<br><br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-comment">//和创建人的一样，检查类型都是Object</span><br></code></pre></td></tr></table></figure><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">构造函数就是一个普通的函数，创建方式和普通函数没有区别,<br>不同的是构造函数习惯上首字母大写<br><br>构造函数和普通函数的区别就是调用方式的不同<br>普通函数是直接调用，而构造函数需要使用new关键字来调用<br><br> 构造函数的执行流程：<br> <span class="hljs-number">1.</span>立刻创建一个新的对象<br> <span class="hljs-number">2.</span>将新建的对象设置为函数中<span class="hljs-keyword">this</span>,在构造函数中可以使用<span class="hljs-keyword">this</span>来引用新建的对象<br> <span class="hljs-number">3.</span>逐行执行函数中的代码<br> <span class="hljs-number">4.</span>将新建的对象作为返回值返回<br> <br>使用同一个构造函数创建的对象，我们称为一类对象，也将一个构造函数称为一个类。<br>我们将通过一个构造函数创建的对象，称为是该类的实例<br><br><span class="hljs-keyword">this</span>的情况：<br>  <span class="hljs-number">1.</span>当以函数的形式调用时，<span class="hljs-keyword">this</span>是window<br>  <span class="hljs-number">2.</span>当以方法的形式调用时，谁调用方法<span class="hljs-keyword">this</span>就是谁<br>  <span class="hljs-number">3.</span>当以构造函数的形式调用时，<span class="hljs-keyword">this</span>就是新创建的那个对象<br><br></code></pre></td></tr></table></figure><p>创建一个构造函数，专门用来创建Person对象的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name , age , gender</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p> 使用instanceof可以检查一个对象是否是一个类的实例<br> 如果是，则返回true，否则返回false<br> <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">语法：<br>对象 <span class="hljs-keyword">instanceof</span> 构造函数<br><br></code></pre></td></tr></table></figure><br> 所有的对象都是Object的后代，所以任何对象和Object左instanceof检查时都会返回true</p> <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">创建一个Person构造函数<br>- 在Person构造函数中，为每一个对象都添加了一个sayName方法，<br>目前我们的方法是在构造函数内部创建的，<br>也就是构造函数每执行一次就会创建一个新的sayName方法<br>也是所有实例的sayName都是唯一的。<br>这样就导致了构造函数执行一次就会创建一个新的方法，<br>执行<span class="hljs-number">10000</span>次就会创建<span class="hljs-number">10000</span>个新的方法，而<span class="hljs-number">10000</span>个方法都是一摸一样的<br>这是完全没有必要，完全可以使所有的对象共享同一个方法<br>function Person(name , age , gender)&#123;<br><span class="hljs-keyword">this</span>.name = name;<br><span class="hljs-keyword">this</span>.age = age;<br><span class="hljs-keyword">this</span>.gender = gender;<br>向对象中添加一个方法<br><span class="hljs-keyword">this</span>.sayName = <span class="hljs-function"><span class="hljs-keyword">fun</span>;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>也可以 将sayName方法在全局作用域中定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello大家好，我是:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><p>将函数定义在全局作用域，污染了全局作用域的命名空间,而且定义在全局作用域中也很不安全<br>对应此问题，我们提出原型的概念</p><h4 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h4><p>原型 prototype</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs elm">我们所创建的每一个函数，解析器都会向函数中添加一个属性proto<span class="hljs-keyword">type</span><br>这个属性对应着一个对象，这个对象就是我们所谓的原型对象<br><br>如果函数作为普通函数调用proto<span class="hljs-keyword">type</span>没有任何作用<br>当函数以构造函数的形式调用时，它所创建的对象中都会有一个隐含的属性，<br>指向该构造函数的原型对象，我们可以通过__proto__来访问该属性<br><br>原型对象就相当于一个公共的区域，所有同一个类的实例都可以访问到这个原型对象，<br>我们可以将对象中共有的内容，统一设置到原型对象中。<br><br>当我们访问对象的一个属性或方法时，它会先在对象自身中寻找，如果有则直接使用，<br>如果没有则会去原型对象中寻找，如果找到则直接使用<br><br>以后我们创建构造函数时，可以将这些对象共有的属性和方法，统一添加到构造函数的原型对象中，<br>这样不用分别为每一个对象添加，也不会影响到全局作用域，就可以使每个对象都具有这些属性和方法了<br></code></pre></td></tr></table></figure><p>图示：</p><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1654685732665.png" style="zoom:67%;" /><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyClass</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br><br><span class="hljs-comment">//向MyClass的原型中添加属性a</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">a</span> = <span class="hljs-number">123</span>;<br><br><span class="hljs-comment">//向MyClass的原型中添加一个方法</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name , age , gender</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br><span class="hljs-comment">//向对象中添加一个方法</span><br><span class="hljs-comment">//this.sayName = fun;</span><br>&#125;<br><span class="hljs-comment">//向原型中添加sayName方法</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello大家好，我是:&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建一个构造函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyClass</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br><br><span class="hljs-comment">//向MyClass的原型中添加一个name属性</span><br><span class="hljs-title class_">MyClass</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;我是原型中的名字&quot;</span>;<br><br><span class="hljs-keyword">var</span> mc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br>mc.<span class="hljs-property">age</span> = <span class="hljs-number">18</span>;<br><br><span class="hljs-comment">//console.log(mc.name);</span><br><br><span class="hljs-comment">//使用in检查对象中是否含有某个属性时，如果对象中没有但是原型中有，也会返回true</span><br><span class="hljs-comment">//console.log(&quot;name&quot; in mc);</span><br><br><span class="hljs-comment">//可以使用对象的hasOwnProperty()来检查对象自身中是否含有该属性</span><br><span class="hljs-comment">//使用该方法只有当对象自身中含有属性时，才会返回true</span><br><span class="hljs-comment">//console.log(mc.hasOwnProperty(&quot;age&quot;));</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 原型对象也是对象，所以它也有原型，</span><br><span class="hljs-comment"> * 当我们使用一个对象的属性或方法时，会现在自身中寻找，</span><br><span class="hljs-comment"> * 自身中如果有，则直接使用，</span><br><span class="hljs-comment"> * 如果没有则去原型对象中寻找，如果原型对象中有，则使用，</span><br><span class="hljs-comment"> * 如果没有则去原型的原型中寻找,直到找到Object对象的原型，</span><br><span class="hljs-comment"> * Object对象的原型没有原型，如果在Object原型中依然没有找到，则返回undefined</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h4 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h4><p>当我们直接在页面中打印一个对象时，事件上是输出的对象的toString()方法的返回值（会显示[object Object]，对象的构造函数类）<br>如果我们希望在输出对象时不输出[object Object]，可以为对象添加一个toString()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name , age , gender</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span> = gender;<br>&#125;<br><br><span class="hljs-comment">//修改Person原型的toString(重写toString方法，现在浏览器版本用不到)</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person[name=&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>+<span class="hljs-string">&quot;,age=&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>+<span class="hljs-string">&quot;,gender=&quot;</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">gender</span>+<span class="hljs-string">&quot;]&quot;</span>;<br>&#125;;<br><span class="hljs-comment">//创建一个Person实例</span><br><span class="hljs-keyword">var</span> per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-number">18</span>,<span class="hljs-string">&quot;男&quot;</span>);<br><span class="hljs-keyword">var</span> per2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-number">28</span>,<span class="hljs-string">&quot;男&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="函数对象的方法（call-和apply-）"><a href="#函数对象的方法（call-和apply-）" class="headerlink" title="函数对象的方法（call()和apply()）"></a>函数对象的方法（call()和apply()）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">a,b</span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;a = &quot;</span>+a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;b = &quot;</span>+b);<br><span class="hljs-comment">//alert(this);</span><br>&#125;<br><br><span class="hljs-keyword">var</span> obj = &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&quot;obj&quot;</span>,<br><span class="hljs-attr">sayName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/*<br><span class="hljs-bullet"> *</span> call()和apply()<br><span class="hljs-bullet"> *</span> - 这两个方法都是函数对象的方法，需要通过函数对象来调用<br><span class="hljs-bullet"> *</span> - 当对函数调用call()和apply()都会调用函数执行<br><span class="hljs-bullet"> *</span> - 在调用call()和apply()可以将一个对象指定为第一个参数<br><span class="hljs-bullet"> *</span> 此时这个对象将会成为函数执行时的this<br><span class="hljs-bullet"> *</span> - call()方法可以将实参在对象之后依次传递<br><span class="hljs-bullet"> *</span> - apply()方法需要将实参封装到一个数组中统一传递<br><span class="hljs-bullet"> *</span> <br> * - this的情况：<br><span class="hljs-bullet"> *</span> 1.以函数形式调用时，this永远都是window<br><span class="hljs-bullet"> *</span> 2.以方法的形式调用时，this是调用方法的对象<br><span class="hljs-bullet"> *</span> 3.以构造函数的形式调用时，this是新创建的那个对象<br><span class="hljs-bullet"> *</span> 4.使用call和apply调用时，this是指定的那个对象<br> <span class="hljs-emphasis">*/</span><br></code></pre></td></tr></table></figure><h5 id="call"><a href="#call" class="headerlink" title="call()"></a>call()</h5><p>call()方法可以将实参在对象之后依次传递</p><h5 id="apply"><a href="#apply" class="headerlink" title="apply()"></a>apply()</h5><p>apply()方法需要将实参封装到一个数组中统一传递</p><h4 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JS">- 就像人生活的时间长了会产生垃圾一样，程序运行过程中也会产生垃圾<br>这些垃圾积攒过多以后，会导致程序运行的速度过慢，<br>所以我们需要一个垃圾回收的机制，来处理程序运行过程中产生垃圾<br>- 当一个对象没有任何的变量或属性对它进行引用，此时我们将永远无法操作该对象，<br>此时这种对象就是一个垃圾，这种对象过多会占用大量的内存空间，导致程序运行变慢，<br>所以这种垃圾必须进行清理。<br>- 在<span class="hljs-variable constant_">JS</span>中拥有自动的垃圾回收机制，会自动将这些垃圾对象从内存中销毁，<br>我们不需要也不能进行垃圾回收的操作<br>- 我们需要做的只是要将不再使用的对象设置<span class="hljs-literal">null</span>即可<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>obj = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (10.JavaScript循环语句)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.12%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.12%20%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><p>通过循环语句可以反复的执行一段代码多次</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">while</span>循环:<br>  - 语法：<br>  <span class="hljs-keyword">while</span>(条件表达式)&#123;<br>  语句<span class="hljs-params">...</span><br>  &#125;<br>  <br>  - <span class="hljs-keyword">while</span>语句在执行时，<br>  先对条件表达式进行求值判断，<br>  如果值为<span class="hljs-literal">true</span>，则执行循环体，<br>  循环体执行完毕以后，继续对表达式进行判断<br>  如果为<span class="hljs-literal">true</span>，则继续执行循环体，以此类推<br>  如果值为<span class="hljs-literal">false</span>，则终止循环<br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">do</span><span class="hljs-params">...</span><span class="hljs-keyword">while</span>循环<br>  - 语法：<br>  <span class="hljs-keyword">do</span>&#123;<br>  语句<span class="hljs-params">...</span><br>  &#125;<span class="hljs-keyword">while</span>(条件表达式)<br>  <br>  - 执行流程：<br>  <span class="hljs-keyword">do</span><span class="hljs-params">...</span><span class="hljs-keyword">while</span>语句在执行时，会先执行循环体，<br>  循环体执行完毕以后，在对<span class="hljs-keyword">while</span>后的条件表达式进行判断，<br>  如果结果为<span class="hljs-literal">true</span>，则继续执行循环体，执行完毕继续判断以此类推<br>  如果结果为<span class="hljs-literal">false</span>，则终止循环<br>  <br>  实际上这两个语句功能类似，不同的是<span class="hljs-keyword">while</span>是先判断后执行，<br>  而<span class="hljs-keyword">do</span><span class="hljs-params">...</span><span class="hljs-keyword">while</span>会先执行后判断，<br>  <span class="hljs-keyword">do</span><span class="hljs-params">...</span><span class="hljs-keyword">while</span>可以保证循环体至少执行一次，<br>  而<span class="hljs-keyword">while</span>不能<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//向这种将条件表达式写死为true的循环，叫做死循环</span><br><span class="hljs-comment">//该循环不会停止，除非浏览器关闭，死循环在开发中慎用</span><br><span class="hljs-comment">//可以使用break，来终止循环</span><br>                <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                    <span class="hljs-title function_">alert</span>(n++);<br><br>                    <span class="hljs-comment">//判断n是否是10</span><br>                    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">10</span>)&#123;<br>                        <span class="hljs-comment">//退出循环</span><br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><span class="hljs-comment">//创建一个循环，往往需要三个步骤</span><br><span class="hljs-comment">//1.创初始化一个变量</span><br><span class="hljs-comment">//2.在循环中设置一个条件表达式</span><br><span class="hljs-comment">//3.定义一个更新表达式，每次更新初始化变量</span><br></code></pre></td></tr></table></figure><h5 id="while练习1"><a href="#while练习1" class="headerlink" title="while练习1"></a>while练习1</h5><p>假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 假如投资的年利率为5%，试求从1000块增长到5000块，需要花费多少年</span></span><br><span class="hljs-comment"><span class="language-javascript"> * </span></span><br><span class="hljs-comment"><span class="language-javascript"> * 1000 1000*1.05</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 1050 1050*1.05</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"><span class="hljs-comment">//定义一个变量，表示当前的钱数</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> money = <span class="hljs-number">1000</span>;</span><br><span class="language-javascript"><span class="hljs-comment">//定义一个计数器</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span><br><span class="language-javascript"><span class="hljs-comment">//定义一个while循环来计算每年的钱数</span></span><br><span class="language-javascript"><span class="hljs-keyword">while</span>(money &lt; <span class="hljs-number">5000</span>)&#123;</span><br><span class="language-javascript">money *= <span class="hljs-number">1.05</span>;</span><br><span class="language-javascript"><span class="hljs-comment">//使count自增</span></span><br><span class="language-javascript">count++;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">//console.log(money);</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;一共需要&quot;</span>+count+<span class="hljs-string">&quot;年&quot;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="while练习2"><a href="#while练习2" class="headerlink" title="while练习2"></a>while练习2</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>if练习1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 从键盘输入小明的期末成绩:</span></span><br><span class="hljs-comment"><span class="language-javascript"> *当成绩为100时，&#x27;奖励一辆BMW&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *当成绩为[80-99]时，&#x27;奖励一台iphone15s&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *当成绩为[60-80]时，&#x27;奖励一本参考书&#x27;</span></span><br><span class="hljs-comment"><span class="language-javascript"> *其他时，什么奖励也没有</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="language-javascript"> * prompt()可以弹出一个提示框，该提示框中会带有一个文本框，</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 用户可以在文本框中输入一段内容，该函数需要一个字符串作为参数，</span></span><br><span class="hljs-comment"><span class="language-javascript"> * 该字符串将会作为提示框的提示文字</span></span><br><span class="hljs-comment"><span class="language-javascript"> * </span></span><br><span class="hljs-comment"><span class="language-javascript"> * 用户输入的内容将会作为函数的返回值返回，可以定义一个变量来接收该内容</span></span><br><span class="hljs-comment"><span class="language-javascript"> */</span></span><br><span class="language-javascript"><span class="hljs-comment">//将prompt放入到一个循环中,以实现输错之后可以继续输入</span></span><br><span class="language-javascript"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//score就是小明的期末成绩</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> score = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入小明的期末成绩(0-100):&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-comment">//判断用户输入的值是否合法</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">0</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//满足该条件则证明用户的输入合法，退出循环</span></span><br><span class="language-javascript"><span class="hljs-keyword">break</span>;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请输入有效的分数！！！&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//判断值是否合法</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">100</span> || score &lt; <span class="hljs-number">0</span> || <span class="hljs-built_in">isNaN</span>(score))&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;拉出去毙了~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//根据score的值来决定给小明什么奖励</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//奖励一台宝马</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;宝马，拿去~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">80</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//奖励一个手机</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;手机，拿去玩~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">//奖励一本参考书</span></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;参考书，拿去看~~~&quot;</span>);</span><br><span class="language-javascript">&#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;棍子一根~~&quot;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><p>for语句，也是一个循环语句，也称为for循环、</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">在for循环中，为我们提供了专门的位置用来放三个表达式：<br>        1.初始化表达式<br>        2.条件表达式<br>        3.更新表达式<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>循环的语法：<br>                <span class="hljs-keyword">for</span>(①初始化表达式;②条件表达式;④更新表达式)&#123;<br>                    ③语句...<br>                &#125;<br> <span class="hljs-keyword">for</span>循环的执行流程：<br>                 ①执行初始化表达式，初始化变量（初始化表达式只会执行一次）<br>                 ②执行条件表达式，判断是否执行循环。<br>                 如果为<span class="hljs-literal">true</span>，则执行循环③d<br>                 如果为<span class="hljs-literal">false</span>，终止循环<br>                 ④执行更新表达式，更新表达式执行完毕继续重复②<br>                 <br> <span class="hljs-keyword">for</span>循环中的三个部分都可以省略，也可以写在外部<br> 如果在<span class="hljs-keyword">for</span>循环中不写任何的表达式，只写两个;<br> 此时循环是一个死循环会一直执行下去，慎用<br>                 <span class="hljs-keyword">for</span>(;;)&#123;<br>                     <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>                 &#125;<br></code></pre></td></tr></table></figure><h5 id="for循环的嵌套"><a href="#for循环的嵌套" class="headerlink" title="for循环的嵌套:"></a>for循环的嵌套:</h5><p>以99乘法表为例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/*</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 1.打印99乘法表</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> *  1*1=1</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> *  1*2=2 2*2=4</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> *  1*3=3 2*3=6 3*3=9</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> *  1*4=4 2*4=8 3*4=12 4*4=16</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * ....9*9=81</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * </span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 2.打印出1-100之间所有的质数</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//创建外层循环，用来控制乘法表的高度</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span> ; i&lt;=<span class="hljs-number">9</span> ; i++ )&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//创建一个内层循环来控制图形的宽度</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">1</span> ; j&lt;=i ; j++)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;span&gt;&quot;</span>+j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+i*j+<span class="hljs-string">&quot;&lt;/span&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//输出一个换行</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">body</span>&#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">2000px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-selector-tag">span</span>&#123;</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">display</span>: inline-block;//使式子对齐（通过设置<span class="hljs-selector-tag">span</span>的宽度）</span></span><br><span class="language-css"><span class="language-xml"><span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;</span></span><br><span class="language-css"><span class="language-xml">&#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h5 id="break和continue关键字"><a href="#break和continue关键字" class="headerlink" title="break和continue关键字"></a>break和continue关键字</h5><h6 id="break"><a href="#break" class="headerlink" title="break"></a>break</h6><p>break关键字可以用来退出switch或循环语句<br>不能在if语句中使用break和continue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">5</span> ; i++)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//这里的break是用于外面的for的</span><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>break关键字，会立即终止离他最近的那个循环语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">* 可以为循环语句创建一个label，来标识当前的循环（给循环指定名字）<br>* <span class="hljs-attr">label</span>:循环语句<br>* 使用<span class="hljs-keyword">break</span>语句时，可以在<span class="hljs-keyword">break</span>后跟着一个label，<br>* 这样<span class="hljs-keyword">break</span>将会结束指定的循环，而不是最近的<br>            <span class="hljs-attr">outer</span>:<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;<span class="hljs-number">5</span> ; i++)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;@外层循环&quot;</span>+i)<br>                <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">5</span>; j++)&#123;<br>                    <span class="hljs-keyword">break</span> outer;<span class="hljs-comment">//这里就直接终止了外层循环</span><br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;内层循环:&quot;</span>+j);<br>                &#125;<br>            &#125;<br></code></pre></td></tr></table></figure><h6 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h6><p> continue关键字可以用来跳过当次循环<br>同样continue也是默认只会对离他最近的循环循环起作用</p><h5 id="for循环练习1：100以内奇数和"><a href="#for循环练习1：100以内奇数和" class="headerlink" title="for循环练习1：100以内奇数和"></a>for循环练习1：100以内奇数和</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/*</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 打印1-100之间所有奇数之和</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//创建一个变量，用来保存奇数之和</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//var sum = 0;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//打印1-100之间的数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span> , sum=<span class="hljs-number">0</span> ; i&lt;=<span class="hljs-number">100</span> ; i++)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//判断i是否是奇数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//不能被2整除的数就是奇数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//如果i除以2有余数则证明i是奇数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//console.log(i);</span></span></span><br><span class="language-javascript"><span class="language-xml">sum = sum+i;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;奇数之和为 : &quot;</span>+sum);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="for循环练习2：打印1-100之间所有7的倍数的个数及总和"><a href="#for循环练习2：打印1-100之间所有7的倍数的个数及总和" class="headerlink" title="for循环练习2：打印1-100之间所有7的倍数的个数及总和"></a>for循环练习2：打印1-100之间所有7的倍数的个数及总和</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">/*</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> * 打印1-100之间所有7的倍数的个数及总和</span></span></span><br><span class="hljs-comment"><span class="language-javascript"><span class="language-xml"> */</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//定义一个变量，来保存总和</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//定义一个计数器，来记录数量</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//打印1-100之间所有的数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span> ; i&lt;=<span class="hljs-number">100</span> ; i++)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//判断i是否是7的倍数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//console.log(i);</span></span></span><br><span class="language-javascript"><span class="language-xml">sum += i;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//使计数器自增1</span></span></span><br><span class="language-javascript"><span class="language-xml">count++;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//输出总和</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;总和为:&quot;</span>+sum);</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-comment">//输出总数</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;总数量为:&quot;</span>+count);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h5 id="for循环练习3：水仙花数"><a href="#for循环练习3：水仙花数" class="headerlink" title="for循环练习3：水仙花数"></a>for循环练习3：水仙花数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br><br>/*<br> * 水仙花数是指一个3位数，它的每个位上的数字的3 次幂之和等于它本身。<br>（例如：1^3 + 5^3 + 3^3 = 153）,请打印所有的水仙花数。<br> */<br>//打印所有的三位数<br>for(var i=100 ; i&lt;1000 ; i++)&#123;<br><br>//获取i的百位 十位 个位的数字<br>//获取百位数字<br>var bai = parseInt(i/100);<br>//获取十位的数字<br>var shi = parseInt((i-bai*100)/10);<br>//获取个位数字<br>var ge = i % 10;<br>//判断i是否是水仙花数<br>if(bai*bai*bai + shi*shi*shi + ge*ge*ge == i)&#123;<br>console.log(i);<br>&#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h5 id="for循环练习4：判断质数"><a href="#for循环练习4：判断质数" class="headerlink" title="for循环练习4：判断质数"></a>for循环练习4：判断质数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=&quot;UTF-8&quot;&gt;<br>&lt;title&gt;&lt;/title&gt;<br>&lt;script type=&quot;text/javascript&quot;&gt;<br>/*<br> * 在页面中接收一个用户输入的数字，并判断该数是否是质数。<br>质数：只能被1和它自身整除的数，1不是质数也不是合数，质数必须是大于1的自然数。<br> */<br><br>var num = prompt(&quot;请输入一个大于1的整数:&quot;);<br><br>//判断这个值是否合法<br>if(num &lt;= 1)&#123;<br>alert(&quot;该值不合法！&quot;);<br>&#125;else&#123;<br><br>//创建一个变量来保存当前的数的状态<br>//默认当前num是质数<br>var flag = true;<br><br>//判断num是否是质数<br>//获取2-num之间的数<br>for(var i=2 ; i&lt;num ; i++)&#123;<br>//console.log(i);<br>//判断num是否能被i整除<br>if(num % i == 0)&#123;<br>//如果num能被i整除，则说明num一定不是质数<br>//设置flag为false<br>flag = false;<br>&#125;<br>&#125;<br>//如果num是质数则输出<br>if(flag)&#123;<br>alert(num + &quot;是质数！！！&quot;);<br>&#125;else&#123;<br>alert(&quot;这个不是质数&quot;)<br>&#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (13.JavaScript数组)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.15%20%E6%95%B0%E7%BB%84/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.15%20%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组介绍"><a href="#数组介绍" class="headerlink" title="数组介绍"></a>数组介绍</h4><p>对象可以分为内建对象，宿主对象，自定义对象。数组属于内建对象。</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">数组（Array）<br><span class="hljs-bullet">-</span> <span class="hljs-string">数组也是一个对象</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">它和我们普通对象功能类似，也是用来存储一些值的</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">不同的是普通对象是使用字符串作为属性名的，</span><br>而数组时使用数字来作为索引操作元素<br><span class="hljs-bullet">-</span> <span class="hljs-string">索引：</span><br>从0开始的整数就是索引<br><span class="hljs-bullet">-</span> <span class="hljs-string">数组的存储性能比普通对象要好，在开发中我们经常使用数组来存储一些数据</span><br></code></pre></td></tr></table></figure><p>如何创建数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建数组对象</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<span class="hljs-comment">//Array()就是数组的构造函数</span><br></code></pre></td></tr></table></figure><p>向数组中添加元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 向数组中添加元素</span><br><span class="hljs-comment">// 语法：数组[索引] = 值 </span><br>arr[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>;<br>arr[<span class="hljs-number">1</span>] = <span class="hljs-number">33</span>;<br>arr[<span class="hljs-number">2</span>] = <span class="hljs-number">22</span>;<br>arr[<span class="hljs-number">3</span>] = <span class="hljs-number">44</span>;<br></code></pre></td></tr></table></figure><p>读取数组中的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 读取数组中的元素</span><br><span class="hljs-comment"> * 语法：数组[索引]</span><br><span class="hljs-comment"> * 如果读取不存在的索引，他不会报错而是返回undefined</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[<span class="hljs-number">3</span>]);<br></code></pre></td></tr></table></figure><p>获取数组的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 获取数组的长度</span><br><span class="hljs-comment"> * 可以使用length属性来获取数组的长度(元素的个数)</span><br><span class="hljs-comment"> * 语法：数组.length</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 对于连续的数组，使用length可以获取到数组的长度（元素的个数）</span><br><span class="hljs-comment"> * 对于非连续的数组，使用length会获取到数组的最大的索引+1</span><br><span class="hljs-comment"> * 尽量不要创建非连续的数组</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span>);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  还可以修改length</span><br><span class="hljs-comment"> * 如果修改的length大于原长度，则多出部分会空出来</span><br><span class="hljs-comment"> *  如果修改的length小于原长度，则多出的元素会被删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//小技巧</span><br><span class="hljs-comment">//向数组的最后一个位置添加元素</span><br><span class="hljs-comment">//语法：数组[数组.length] = 值;</span><br>arr[arr.<span class="hljs-property">length</span>] = <span class="hljs-number">70</span>;<br>arr[arr.<span class="hljs-property">length</span>] = <span class="hljs-number">80</span>;<br>arr[arr.<span class="hljs-property">length</span>] = <span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><h4 id="数组的字面量"><a href="#数组的字面量" class="headerlink" title="数组的字面量"></a>数组的字面量</h4><p>使用字面量来创建数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//使用字面量来创建数组</span><br><span class="hljs-comment">//语法:[]</span><br><span class="hljs-keyword">var</span> arr = [];<br><br><span class="hljs-comment">//使用字面量创建数组时，可以在创建时就指定数组中的元素</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>];<br><br><span class="hljs-comment">//使用构造函数创建数组时，也可以同时添加元素，将要添加的元素作文构造函数的参数传递</span><br><span class="hljs-comment">//元素之间使用,隔开</span><br><span class="hljs-keyword">var</span> arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br><br><span class="hljs-comment">//创建一个数组数组中只有一个元素10</span><br>arr = [<span class="hljs-number">10</span>];<br><br><span class="hljs-comment">//创建一个长度为10的数组</span><br>arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-number">10</span>);<br><br><span class="hljs-comment">//数组中的元素可以是任意的数据类型</span><br>arr = [<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-literal">true</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">undefined</span>];<br><br><span class="hljs-comment">//也可以是对象</span><br><span class="hljs-keyword">var</span> obj = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>&#125;;<br>arr[arr.<span class="hljs-property">length</span>] = obj;<br>arr = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;孙悟空&quot;</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;沙和尚&quot;</span>&#125;,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;猪八戒&quot;</span>&#125;];<br><br><span class="hljs-comment">//也可以是一个函数</span><br>arr = [<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-number">2</span>)&#125;];<br><span class="hljs-comment">//数组中也可以放数组，如下这种数组我们称为二维数组</span><br>arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]];<br></code></pre></td></tr></table></figure><h4 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-string">&quot;沙和尚&quot;</span>];<br></code></pre></td></tr></table></figure><h5 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * push()</span><br><span class="hljs-comment"> * - 该方法可以向数组的末尾添加一个或多个元素，并返回数组的新的长度</span><br><span class="hljs-comment"> * - 可以将要添加的元素作为方法的参数传递，</span><br><span class="hljs-comment"> * 这样这些元素将会自动添加到数组的末尾</span><br><span class="hljs-comment"> * - 该方法会将数组新的长度作为返回值返回</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;唐僧&quot;</span>,<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-string">&quot;白骨精&quot;</span>,<span class="hljs-string">&quot;玉兔精&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * pop()</span><br><span class="hljs-comment"> * - 该方法可以删除数组的最后一个元素,并将被删除的元素作为返回值返回</span><br><span class="hljs-comment"> */</span><br>result = arr.<span class="hljs-title function_">pop</span>();<br></code></pre></td></tr></table></figure><h5 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * unshift()</span><br><span class="hljs-comment"> * - 向数组开头添加一个或多个元素，并返回新的数组长度</span><br><span class="hljs-comment"> * - 向前边插入元素以后，其他的元素索引会依次调整</span><br><span class="hljs-comment"> */</span><br>arr.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-string">&quot;二郎神&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * shift()</span><br><span class="hljs-comment"> * - 可以删除数组的第一个元素，并将被删除的元素作为返回值返回</span><br><span class="hljs-comment"> */</span><br>result = arr.<span class="hljs-title function_">shift</span>();<br></code></pre></td></tr></table></figure><h5 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * slice()</span><br><span class="hljs-comment"> * - 可以用来从数组提取指定元素,相当与python里数组的切片</span><br><span class="hljs-comment"> * - 该方法不会改变元素数组，而是将截取到的元素封装到一个新数组中返回</span><br><span class="hljs-comment"> * - 参数：</span><br><span class="hljs-comment"> * 1.截取开始的位置的索引,包含开始索引</span><br><span class="hljs-comment"> * 2.截取结束的位置的索引,不包含结束索引</span><br><span class="hljs-comment"> * - 第二个参数可以省略不写,此时会截取从开始索引往后的所有元素</span><br><span class="hljs-comment"> * - 索引可以传递一个负值，如果传递一个负值，则从后往前计算</span><br><span class="hljs-comment"> * -1 倒数第一个</span><br><span class="hljs-comment"> * -2 倒数第二个</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br></code></pre></td></tr></table></figure><h5 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * splice()</span><br><span class="hljs-comment"> * - 可以用于删除数组中的指定元素</span><br><span class="hljs-comment"> * - 使用splice()会影响到原数组，会将指定元素从原数组中删除</span><br><span class="hljs-comment"> * 并将被删除的元素作为返回值返回</span><br><span class="hljs-comment"> * - 参数：</span><br><span class="hljs-comment"> * 第一个，表示开始位置的索引</span><br><span class="hljs-comment"> * 第二个，表示删除的数量</span><br><span class="hljs-comment"> * 第三个及以后。。</span><br><span class="hljs-comment"> * 可以传递一些新的元素，这些元素将会自动插入到开始位置索引前边</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><br>arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-string">&quot;沙和尚&quot;</span>,<span class="hljs-string">&quot;唐僧&quot;</span>,<span class="hljs-string">&quot;白骨精&quot;</span>];<br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-title function_">splice</span>(<span class="hljs-number">3</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-string">&quot;铁扇公主&quot;</span>,<span class="hljs-string">&quot;红孩儿&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-string">&quot;沙和尚&quot;</span>];<br><span class="hljs-keyword">var</span> arr2 = [<span class="hljs-string">&quot;白骨精&quot;</span>,<span class="hljs-string">&quot;玉兔精&quot;</span>,<span class="hljs-string">&quot;蜘蛛精&quot;</span>];<br><span class="hljs-keyword">var</span> arr3 = [<span class="hljs-string">&quot;二郎神&quot;</span>,<span class="hljs-string">&quot;太上老君&quot;</span>,<span class="hljs-string">&quot;玉皇大帝&quot;</span>];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * concat()可以连接两个或多个数组，并将新的数组返回</span><br><span class="hljs-comment"> * - 该方法不会对原数组产生影响</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> result = arr.<span class="hljs-title function_">concat</span>(arr2,arr3,<span class="hljs-string">&quot;牛魔王&quot;</span>,<span class="hljs-string">&quot;铁扇公主&quot;</span>);<br><br></code></pre></td></tr></table></figure><h5 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h5> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * join()</span><br><span class="hljs-comment"> * - 该方法可以将数组转换为一个字符串</span><br><span class="hljs-comment"> * - 该方法不会对原数组产生影响，而是将转换后的字符串作为结果返回</span><br><span class="hljs-comment"> * - 在join()中可以指定一个字符串作为参数，这个字符串将会成为数组中元素的连接符</span><br><span class="hljs-comment"> * 如果不指定连接符，则默认使用,作为连接符</span><br><span class="hljs-comment"> */</span><br>arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-string">&quot;沙和尚&quot;</span>,<span class="hljs-string">&quot;唐僧&quot;</span>];<br>result = arr.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;-&quot;</span>);<br></code></pre></td></tr></table></figure><h5 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">arr = [<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;d&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * sort()</span><br><span class="hljs-comment"> * - 可以用来对数组中的元素进行排序</span><br><span class="hljs-comment"> * - 也会影响原数组，默认会按照Unicode编码进行排序</span><br><span class="hljs-comment"> */</span><br>arr.<span class="hljs-title function_">sort</span>();<br></code></pre></td></tr></table></figure><p>注意：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/*<br><span class="hljs-bullet"> *</span> 即使对于纯数字的数组，使用sort()排序时，也会按照Unicode编码来排序，<br><span class="hljs-bullet"> *</span> 所以对数字进排序时，可能会得到错误的结果。<br><span class="hljs-bullet"> *</span> <br> * 我们可以自己来指定排序的规则<br><span class="hljs-bullet"> *</span> 我们可以在sort()添加一个回调函数，来指定排序规则，<br><span class="hljs-bullet"> *</span> 回调函数中需要定义两个形参,<br><span class="hljs-bullet"> *</span> 浏览器将会分别使用数组中的元素作为实参去调用回调函数<br><span class="hljs-bullet"> *</span> 使用哪个元素调用不确定，但是肯定的是在数组中a一定在b前边<br><span class="hljs-bullet"> *</span> - 浏览器会根据回调函数的返回值来决定元素的顺序，<br><span class="hljs-bullet"> *</span> 如果返回一个大于0的值，则元素会交换位置<br><span class="hljs-bullet"> *</span> 如果返回一个小于0的值，则元素位置不变<br><span class="hljs-bullet"> *</span> 如果返回一个0，则认为两个元素相等，也不交换位置<br><span class="hljs-bullet"> *</span> <br> * - 如果需要升序排列，则返回 a-b<br><span class="hljs-bullet"> *</span> 如果需要降序排列，则返回b-a<br> <span class="hljs-emphasis">*/</span><br></code></pre></td></tr></table></figure><p>所以有：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">arr = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>];<br><br>arr.<span class="hljs-title function_">sort</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<br><br><span class="hljs-comment">//前边的大(这样写太过于麻烦)</span><br><span class="hljs-comment">/*if(a &gt; b)&#123;</span><br><span class="hljs-comment">return -1;</span><br><span class="hljs-comment">&#125;else if(a &lt; b)&#123;</span><br><span class="hljs-comment">return 1;</span><br><span class="hljs-comment">&#125;else&#123;</span><br><span class="hljs-comment">return 0;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">//升序排列</span><br><span class="hljs-comment">//return a - b;</span><br><br><span class="hljs-comment">//降序排列</span><br><span class="hljs-keyword">return</span> b - a;<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * reverse()</span><br><span class="hljs-comment"> * - 该方法用来反转数组（前边的去后边，后边的去前边）</span><br><span class="hljs-comment"> * - 该方法会直接修改原数组</span><br><span class="hljs-comment"> */</span><br><br>arr.<span class="hljs-title function_">reverse</span>();<br></code></pre></td></tr></table></figure><h4 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h4><h5 id="利用for循环遍历"><a href="#利用for循环遍历" class="headerlink" title="利用for循环遍历"></a>利用for循环遍历</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-string">&quot;沙和尚&quot;</span>,<span class="hljs-string">&quot;唐僧&quot;</span>,<span class="hljs-string">&quot;白骨精&quot;</span>];<br><br><span class="hljs-comment">//所谓的遍历数组，就是将数组中所有的元素都取出来</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;arr.<span class="hljs-property">length</span> ; i++)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="forEach-遍历"><a href="#forEach-遍历" class="headerlink" title="forEach()遍历"></a>forEach()遍历</h5><p>一般我们都是使用for循环去遍历数组，JS中还为我们提供了一个方法，用来遍历数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"> <span class="hljs-comment">/*forEach()</span><br><span class="hljs-comment"> * - 这个方法只支持IE8以上的浏览器</span><br><span class="hljs-comment"> * IE8及以下的浏览器均不支持该方法，所以如果需要兼容IE8，则不要使用forEach</span><br><span class="hljs-comment"> * 还是使用for循环来遍历</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//创建一个数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-string">&quot;沙和尚&quot;</span>,<span class="hljs-string">&quot;唐僧&quot;</span>,<span class="hljs-string">&quot;白骨精&quot;</span>];<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * forEach()方法需要一个函数作为参数</span><br><span class="hljs-comment"> * - 像这种函数，由我们创建但是不由我们调用的，我们称为回调函数</span><br><span class="hljs-comment"> * - 数组中有几个元素函数就会执行几次，每次执行时，浏览器会将遍历到的元素</span><br><span class="hljs-comment"> * 以实参的形式传递进来，我们可以来定义形参，来读取这些内容</span><br><span class="hljs-comment"> * - 浏览器会在回调函数中传递三个参数：</span><br><span class="hljs-comment"> * 第一个参数，就是当前正在遍历的元素</span><br><span class="hljs-comment"> * 第二个参数，就是当前正在遍历的元素的索引</span><br><span class="hljs-comment"> * 第三个参数，就是正在遍历的数组</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">value , index , obj</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h5><p>条件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name , age , gender</span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><span class="hljs-comment">//创建一个Person对象</span><br><span class="hljs-keyword">var</span> per = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-keyword">var</span> per2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>,<span class="hljs-number">28</span>);<br><span class="hljs-keyword">var</span> per3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;红孩儿&quot;</span>,<span class="hljs-number">8</span>);<br><span class="hljs-keyword">var</span> per4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;蜘蛛精&quot;</span>,<span class="hljs-number">16</span>);<br><span class="hljs-keyword">var</span> per5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;二郎神&quot;</span>,<span class="hljs-number">38</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 将这些person对象放入到一个数组中</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> perArr = [per,per2,per3,per4,per5];<br></code></pre></td></tr></table></figure><p>要求：创建一个函数，可以将perArr中的满18岁的Person提取出来，然后封装到一个新的数组中并返回<br>arr:形参，要提取信息的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getAdult</span>(<span class="hljs-params">arr</span>)&#123;<br><span class="hljs-comment">//创建一个新的数组</span><br><span class="hljs-keyword">var</span> newArr = [];<br><br><span class="hljs-comment">//遍历arr，获取arr中Person对象</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;arr.<span class="hljs-property">length</span> ; i++)&#123;<br><span class="hljs-keyword">var</span> p = arr[i];<br><span class="hljs-comment">//判断Person对象的age是否大于等于18</span><br><span class="hljs-keyword">if</span>(p.<span class="hljs-property">age</span> &gt;= <span class="hljs-number">18</span>)&#123;<br><span class="hljs-comment">//如果大于等于18，则将这个对象添加到newArr中</span><br><span class="hljs-comment">//将对象放入到新数组中</span><br>newArr.<span class="hljs-title function_">push</span>(p);<br>&#125;<br>&#125;<br><span class="hljs-comment">//将新的数组返回</span><br><span class="hljs-keyword">return</span> newArr;<br><br>&#125;<br><br><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">getAdult</span>(perArr);<br></code></pre></td></tr></table></figure><h5 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//去除数组中重复的数字</span><br></code></pre></td></tr></table></figure><p>利用嵌套循环去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//去除数组中重复的数字</span><br><span class="hljs-comment">//获取数组中的每一个元素</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span> ; i&lt;arr.<span class="hljs-property">length</span> ; i++)&#123;<br><span class="hljs-comment">//console.log(arr[i]);</span><br><span class="hljs-comment">/*获取当前元素后的所有元素*/</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j=i+<span class="hljs-number">1</span> ; j&lt;arr.<span class="hljs-property">length</span> ; j++)&#123;<br><span class="hljs-comment">//console.log(&quot;----&gt;&quot;+arr[j]);</span><br><span class="hljs-comment">//判断两个元素的值是否相等</span><br><span class="hljs-keyword">if</span>(arr[i] == arr[j])&#123;<br><span class="hljs-comment">//如果相等则证明出现了重复的元素，则删除j对应的元素</span><br>arr.<span class="hljs-title function_">splice</span>(j,<span class="hljs-number">1</span>);<br><span class="hljs-comment">//当删除了当前j所在的元素以后，后边的元素会自动补位</span><br><span class="hljs-comment">//此时将不会在比较这个元素吧，我需要在比较一次j所在位置的元素</span><br><span class="hljs-comment">//使j自减</span><br>j--;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (14.JavaScript正则表达式)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.16%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.16%20%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="正则表达式介绍"><a href="#正则表达式介绍" class="headerlink" title="正则表达式介绍"></a>正则表达式介绍</h4><p>通常情况下用户输入邮件格式：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>- admin@atguigu.com<br><span class="hljs-bullet">*  </span>- admin@.com   adminatguigu.com<br><span class="hljs-bullet">*  </span>- 邮件的规则：<br><span class="hljs-bullet">* </span>1.前边可以是xxxx乱七八糟<br><span class="hljs-bullet">* </span>2.跟着一个@<br><span class="hljs-bullet">* </span>3.后边可以是xxxx乱七八糟<br><span class="hljs-bullet">* </span>4..com获取其他的乱七八糟<br></code></pre></td></tr></table></figure><p>正则表达式用于定义一些字符串的规则，计算机可以根据正则表达式，来检查一个字符串是否符合规则，<br>获取将字符串中符合规则的内容提取出来（给计算机看的一种规则，它也是一个对象）</p><h4 id="创建正则表达式的对象"><a href="#创建正则表达式的对象" class="headerlink" title="创建正则表达式的对象"></a>创建正则表达式的对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 语法：</span><br><span class="hljs-comment"> * var 变量 = new RegExp(&quot;正则表达式&quot;,&quot;匹配模式&quot;);</span><br><span class="hljs-comment"> *  使用typeof检查正则对象，会返回object</span><br><span class="hljs-comment"> * var reg = new RegExp(&quot;a&quot;); 这个正则表达式可以来检查一个字符串中是否含有a</span><br><span class="hljs-comment"> * 在构造函数中可以传递一个匹配模式作为第二个参数，</span><br><span class="hljs-comment"> * 可以是 </span><br><span class="hljs-comment"> * i 忽略大小写 </span><br><span class="hljs-comment"> * g 全局匹配模式</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p> 正则表达式的方法：test()<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 正则表达式的方法：</span><br><span class="hljs-comment"> * test()</span><br><span class="hljs-comment"> *  - 使用这个方法可以用来检查一个字符串是否符合正则表达式的规则，</span><br><span class="hljs-comment"> * 如果符合则返回true，否则返回false</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> result = reg.<span class="hljs-title function_">test</span>(str);<br><span class="hljs-comment">//console.log(result);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reg.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Ac&quot;</span>));<br></code></pre></td></tr></table></figure></p><h4 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h4><h5 id="使用字面量来创建正则表达式："><a href="#使用字面量来创建正则表达式：" class="headerlink" title="使用字面量来创建正则表达式："></a>使用字面量来创建正则表达式：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 使用字面量来创建正则表达式</span><br><span class="hljs-comment"> * 语法：var 变量 = /正则表达式/匹配模式</span><br><span class="hljs-comment"> * 使用字面量的方式创建更加简单</span><br><span class="hljs-comment"> * 使用构造函数创建更加灵活</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;i&quot;</span>);<br><span class="hljs-comment">//改写：</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/a/i</span>;<br></code></pre></td></tr></table></figure><h5 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建一个正则表达式，检查一个字符串中是否有a或b</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 使用 | 表示或者的意思</span><br><span class="hljs-comment"> */</span><br>reg = <span class="hljs-regexp">/a|b|c/</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建一个正则表达式检查一个字符串中是否有字母</span><br><span class="hljs-comment"> */</span><br>reg = <span class="hljs-regexp">/a|b|c|d|e|f|g/</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * []里的内容也是或的关系</span><br><span class="hljs-comment"> * [ab] == a|b</span><br><span class="hljs-comment"> * [a-z] 任意小写字母</span><br><span class="hljs-comment"> * [A-Z] 任意大写字母</span><br><span class="hljs-comment"> * [A-z] 任意字母</span><br><span class="hljs-comment"> * [0-9] 任意数字</span><br><span class="hljs-comment"> */</span><br>reg = <span class="hljs-regexp">/[A-z]/</span>;<br><br><span class="hljs-comment">//检查一个字符串中是否含有 abc 或 adc 或 aec</span><br>reg = <span class="hljs-regexp">/a[bde]c/</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * [^ ] 除了</span><br><span class="hljs-comment"> */</span><br>reg = <span class="hljs-regexp">/[^ab]/</span>;<br><br></code></pre></td></tr></table></figure><h5 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h5><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>量词<br><span class="hljs-bullet">* </span>- 通过量词可以设置一个内容出现的次数<br><span class="hljs-bullet">* </span>- 量词只对它前边的一个内容起作用<br><span class="hljs-bullet">* </span>- &#123;n&#125; 正好出现n次<br><span class="hljs-bullet">* </span>- &#123;m,n&#125; 出现m-n次<br><span class="hljs-bullet">* </span>- &#123;m,&#125; m次以上<br><span class="hljs-bullet">* </span>- + 至少一个，相当于&#123;1,&#125;<br><span class="hljs-bullet">* </span>- * 0个或多个，相当于&#123;0,&#125;<br><span class="hljs-bullet">* </span>- ? 0个或1个，相当于&#123;0,1&#125;<br></code></pre></td></tr></table></figure><h5 id="开头结尾"><a href="#开头结尾" class="headerlink" title="开头结尾"></a>开头结尾</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 检查一个字符串中是否以a开头</span><br><span class="hljs-comment"> * ^ 表示开头</span><br><span class="hljs-comment"> * $ 表示结尾</span><br><span class="hljs-comment"> */</span><br>reg = <span class="hljs-regexp">/^a/</span>; <span class="hljs-comment">//匹配开头的a</span><br><br>reg = <span class="hljs-regexp">/a$/</span>; <span class="hljs-comment">//匹配结尾的a</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如果在正则表达式中同时使用^ $则要求字符串必须完全符合正则表达式</span><br><span class="hljs-comment"> */</span><br>reg = <span class="hljs-regexp">/^a$/</span>;<br></code></pre></td></tr></table></figure><p>练习： 创建一个正则表达式，用来检查一个字符串是否是一个合法手机号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">* 手机号的规则：<br>* <span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">567890123</span> （<span class="hljs-number">11</span>位）<br>* <br>* <span class="hljs-number">1.</span> 以<span class="hljs-number">1</span>开头<br>*  <span class="hljs-number">2.</span> 第二位<span class="hljs-number">3</span>-<span class="hljs-number">9</span>任意数字<br>* <span class="hljs-number">3.</span> 三位以后任意数字<span class="hljs-number">9</span>个<br>* <br>* ^<span class="hljs-number">1</span>   [<span class="hljs-number">3</span>-<span class="hljs-number">9</span>]  [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]&#123;<span class="hljs-number">9</span>&#125;$\<br><br><span class="hljs-keyword">var</span> phoneStr = <span class="hljs-string">&quot;13067890123&quot;</span>;<br><span class="hljs-keyword">var</span> phoneReg = <span class="hljs-regexp">/^1[3-9][0-9]&#123;9&#125;$/</span>;<br></code></pre></td></tr></table></figure><h5 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h5><p>如何检查一个字符串中是否含有 .<br>. 表示任意字符<br>在正则表达式中使用\作为转义字符<br>. 来表示.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/\./</span>;<br><span class="hljs-string">``</span><span class="hljs-string">``</span><br>\\  表示\<br>注意：使用构造函数时，由于它的参数是一个字符串，而\是字符串中转义字符，<br>如果要使用\则需要使用\\来代替<br><span class="hljs-string">``</span><span class="hljs-string">`js</span><br><span class="hljs-string">reg = new RegExp(&quot;\\.&quot;);</span><br><span class="hljs-string">reg = new RegExp(&quot;\\\\&quot;);</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">         * \w         * - 任意字母、数字、_  [A-z0-9_]         * \W         * - 除了字母、数字、_  [^A-z0-9_]         * \d         * - 任意的数字 [0-9]         * \D         * - 除了数字 [^0-9]         * \s         * - 空格         * \S         * - 除了空格         * \b         * - 单词边界         * \B         * - 除了单词边界</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建一个正则表达式检查一个字符串中是否含有单词child</span><br><span class="hljs-comment"> */</span><br><br>reg = <span class="hljs-regexp">/\bchild\b/</span>;<br></code></pre></td></tr></table></figure><p>例子：去除字符串中的空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//接收一个用户的输入</span><br><span class="hljs-comment">//var str = prompt(&quot;请输入你的用户名:&quot;);</span><br><br><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;              he      llo                &quot;</span>;<br><br><span class="hljs-comment">//去除掉字符串中的前后的空格</span><br><span class="hljs-comment">//去除空格就是使用&quot;&quot;来替换空格</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br><br><span class="hljs-comment">//str = str.replace(/\s/g , &quot;&quot;);</span><br><br><span class="hljs-comment">//去除开头的空格</span><br>str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s*/</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">//去除结尾的空格</span><br>str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\s*$/</span>, <span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-comment">// /^\s*|\s*$/g 匹配开头和结尾的空格</span><br>str = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\s*|\s*$/g</span>,<span class="hljs-string">&quot;&quot;</span>);<br><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str);<br></code></pre></td></tr></table></figure><h4 id="正则表达式的方法"><a href="#正则表达式的方法" class="headerlink" title="正则表达式的方法"></a>正则表达式的方法</h4><h5 id="字符串和正则相关的方法"><a href="#字符串和正则相关的方法" class="headerlink" title="字符串和正则相关的方法"></a>字符串和正则相关的方法</h5><h6 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h6><pre><code class="hljs"> split()    - 可以将一个字符串拆分为一个数组    - 方法中可以传递一个正则表达式作为参数，这样方法将会根据正则表达式去拆分字符串    - 这个方法即使不指定全局匹配，也会全都插分</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&quot;1a2b3c4d5e6f7&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 根据任意字母来将字符串拆分</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> result = str.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/[A-z]/</span>);<br></code></pre></td></tr></table></figure><h6 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h6><pre><code class="hljs">     * - 可以搜索字符串中是否含有指定内容     * - 如果搜索到指定内容，则会返回第一次出现的索引，如果没有搜索到返回-1     * - 它可以接受一个正则表达式作为参数，然后会根据正则表达式去检索字符串     * - serach()只会查找第一个，即使设置全局匹配也没用</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;hello abc hello aec afc&quot;</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 搜索字符串中是否含有abc 或 aec 或 afc</span><br><span class="hljs-comment"> */</span><br>result = str.<span class="hljs-title function_">search</span>(<span class="hljs-regexp">/a[bef]c/</span>);<br></code></pre></td></tr></table></figure><h6 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h6><pre><code class="hljs">         * - 可以根据正则表达式，从一个字符串中将符合条件的内容提取出来         * - 默认情况下我们的match只会找到第一个符合要求的内容，找到以后就停止检索         * 我们可以设置正则表达式为全局匹配模式，这样就会匹配到所有的内容         * 可以为一个正则表达式设置多个匹配模式，且顺序无所谓         * - match()会将匹配到的内容封装到一个数组中返回，即使只查询到一个结果</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">str = <span class="hljs-string">&quot;1a2a3a4a5e6f7A8B9C&quot;</span>;<br><br>result = str.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/[a-z]/ig</span>);<br></code></pre></td></tr></table></figure><h6 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h6><pre><code class="hljs">         * - 可以将字符串中指定内容替换为新的内容         *  - 参数：         * 1.被替换的内容，可以接受一个正则表达式作为参数         * 2.新的内容         *  - 默认只会替换第一个</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">result = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[a-z]/gi</span> , <span class="hljs-string">&quot;@_@&quot;</span>);<br>result = str.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/[a-z]/gi</span> , <span class="hljs-string">&quot;&quot;</span>);<br></code></pre></td></tr></table></figure><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><h5 id="邮件的正则表达式"><a href="#邮件的正则表达式" class="headerlink" title="邮件的正则表达式"></a>邮件的正则表达式</h5><p>电子邮件:hello  .nihao          @     abc  .com.cn<br>任意字母数字下划线    .任意字母数字下划线  @   任意字母数字     .任意字母（2-5位）   .任意字母（2-5位）<br>\w{3,}  (.\w+)*  @  [A-z0-9]+  (.[A-z]{2,5}){1,2}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> emailReg = <span class="hljs-regexp">/^\w&#123;3,&#125;(\.\w+)*@[A-z0-9]+(\.[A-z]&#123;2,5&#125;)&#123;1,2&#125;$/</span>;<br><br><span class="hljs-keyword">var</span> email = <span class="hljs-string">&quot;abc.hello@163.com&quot;</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(emailReg.<span class="hljs-title function_">test</span>(email));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (15.JavaScript-JSON)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.17%20JSON/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.17%20JSON/</url>
    
    <content type="html"><![CDATA[<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JS"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * JSON</span><br><span class="hljs-comment"> * - JS中的对象只有JS自己认识，其他的语言都不认识</span><br><span class="hljs-comment"> * - JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别，</span><br><span class="hljs-comment"> * 并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互</span><br><span class="hljs-comment"> * - JSON</span><br><span class="hljs-comment"> * - JavaScript Object Notation JS对象表示法</span><br><span class="hljs-comment"> * - JSON和JS对象的格式一样，只不过JSON字符串中的属性名必须加双引号</span><br><span class="hljs-comment"> * 其他的和JS语法一致</span><br><span class="hljs-comment"> * JSON分类：</span><br><span class="hljs-comment"> * 1.对象 &#123;&#125;</span><br><span class="hljs-comment"> * 2.数组 []</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * JSON中允许的值：</span><br><span class="hljs-comment"> * 1.字符串</span><br><span class="hljs-comment"> * 2.数值</span><br><span class="hljs-comment"> * 3.布尔值</span><br><span class="hljs-comment"> * 4.null</span><br><span class="hljs-comment"> * 5.对象</span><br><span class="hljs-comment"> * 6.数组</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>创建一个对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = <span class="hljs-string">&#x27;[1,2,3,&quot;hello&quot;,true]&#x27;</span>;<br><br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-string">&#x27;&#123;&quot;arr&quot;:[1,2,3]&#125;&#x27;</span>;<br><br><span class="hljs-keyword">var</span> arr2 =<span class="hljs-string">&#x27;[&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;,&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;]&#x27;</span>;<br><br></code></pre></td></tr></table></figure><p> 将JSON字符串转换为JS中的对象<br> 在JS中，为我们提供了一个工具类，就叫JSON<br> 这个对象可以帮助我们将一个JSON转换为JS对象，也可以将一个JS对象转换为JSON<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;孙悟空&quot;,&quot;age&quot;:18,&quot;gender&quot;:&quot;男&quot;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure></p><p> json –&gt; js对象:JSON.parse()</p><ul><li>可以将以JSON字符串转换为js对象</li><li>它需要一个JSON字符串作为参数，会将该字符串转换为JS对象并返回 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> o = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(json);<br><span class="hljs-keyword">var</span> o2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(arr);<br></code></pre></td></tr></table></figure></li></ul><p>JS对象 —&gt; JSON:JSON.stringify()</p><ul><li>可以将一个JS对象转换为JSON字符串</li><li>需要一个js对象作为参数，会返回一个JSON字符串<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj3 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;猪八戒&quot;</span> , <span class="hljs-attr">age</span>:<span class="hljs-number">28</span> , <span class="hljs-attr">gender</span>:<span class="hljs-string">&quot;男&quot;</span>&#125;; <br><span class="hljs-keyword">var</span> str = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(obj3);<br><span class="hljs-comment">//console.log(str);</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (3.JavaScript注释,格式要求,字面量和变量以及标识符)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.1%E6%B3%A8%E9%87%8A/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.1%E6%B3%A8%E9%87%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>多行注释：<br>&#x2F;*<br>这是一个多行注释<br> *&#x2F;<br>单行注释：<br>&#x2F;&#x2F;  这是一个单行注释</p><h3 id="格式要求"><a href="#格式要求" class="headerlink" title="格式要求"></a>格式要求</h3><ul><li>JS严格区分大小写</li><li>JS中每条语句以分号(;)结尾（不添加可以运行，但浏览器会自己加，会影响加载速度，还有可能加错分号导致错误）</li><li>JS中会自动忽略多个空格和换行，所以我们可以利用空格和换行对代码进行格式化。</li></ul><h3 id="字面量和变量"><a href="#字面量和变量" class="headerlink" title="字面量和变量"></a>字面量和变量</h3><p>字面量</p><ul><li>字面量实际上就是一些固定的值，比如 1 2 3 4 true false null NaN “hello”<br>  字面量都是不可以改变的。</li><li>由于字面量不是很方便使用，所以在JS中很少直接使用字面量</li></ul><p>变量</p><ul><li><p>变量可以用来保存字面量，并且可以保存任意的字面量</p></li><li><p>一般都是通过变量来使用字面量，而不直接使用字面量，而且也可以通过变量来对字面量进行一个描述</p></li><li><p>声明变量<br>  - 使用var关键字来声明一个变量<br>      var a;<br>      var b;<br>      var c;</p></li><li><p>为变量赋值<br>  a &#x3D; 1;<br>  b &#x3D; 2;<br>  c &#x3D; 3;</p></li><li><p>声明和赋值同时进行<br>  var d &#x3D; 456;<br>  var e &#x3D; 789;</p></li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p> 在JS中所有的可以自主命名的内容，都可以认为是一个标识符，<br> 是标识符就应该遵守标识符的规范。<br> 比如：变量名、函数名、属性名<br> 规范：<br>        1.标识符中可以含有字母、数字、_、$<br>        2.标识符不能以数字开头<br>        3.标识符不能是JS中的关键字和保留字<br>        4.标识符一般采用驼峰命名法<br>                xxxYyyZzz<br> JS底层保存标识符时实际上是采用的Unicode编码，<br>        所以理论上讲，所有的utf-8中含有的内容都可以作为标识符<br>        所以可以用中文进行命名，但不建议使用</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (5.JavaScript强制类型转换)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.6%20%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.6%20%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ul><li>指将一个数据类型强制转换为其他的数据类型</li><li>类型转换主要指，将其他的数据类型，转换为<br>String Number Boolean</li></ul><h4 id="将其他的数据类型转换为String"><a href="#将其他的数据类型转换为String" class="headerlink" title="将其他的数据类型转换为String"></a>将其他的数据类型转换为String</h4><p>方式一：<br>        - 调用被转换数据类型的toString()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//调用a的toString()方法</span><br><span class="hljs-comment">//调用xxx的yyy()方法，就是xxx.yyy()</span><br>a = a.<span class="hljs-title function_">toString</span>();<br></code></pre></td></tr></table></figure><ul><li>该方法不会影响到原变量，它会将转换的结果返回</li><li>但是注意：null和undefined这两个值没有toString()方法，<br>  如果调用他们的方法，会报错</li></ul><p>方式二：</p><ul><li>调用String()函数，并将被转换的数据作为参数传递给函数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//调用String()函数，来将a转换为字符串</span><br>a = <span class="hljs-title class_">String</span>(a);<br></code></pre></td></tr></table></figure></li><li>使用String()函数做强制类型转换时，<br>  对于Number和Boolean实际上就是调用的toString()方法<br>  但是对于null和undefined，就不会调用toString()方法<br>          它会将 null 直接转换为 “null”<br>          将 undefined 直接转换为 “undefined”</li></ul><h4 id="将其他的数据类型转换为Number"><a href="#将其他的数据类型转换为Number" class="headerlink" title="将其他的数据类型转换为Number"></a>将其他的数据类型转换为Number</h4><p>转换方式一：<br>  使用Number()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//调用Number()函数来将a转换为Number类型</span><br>a = <span class="hljs-title class_">Number</span>(a);<br></code></pre></td></tr></table></figure><pre><code class="hljs">    - 字符串 --&gt; 数字            1.如果是纯数字的字符串，则直接将其转换为数字            2.如果字符串中有非数字的内容，则转换为NaN            3.如果字符串是一个空串或者是一个全是空格的字符串，则转换为0    - 布尔 --&gt; 数字            true 转成 1            false 转成 0    - null --&gt; 数字     0    - undefined --&gt; 数字 NaN</code></pre><p>  转换方式二：<br>        - 这种方式专门用来对付字符串<br>                - 如果对非String使用parseInt()或parseFloat()<br>          它会先将其转换为String然后再操作</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">a = <span class="hljs-string">&quot;123567a567px&quot;</span>;<br><span class="hljs-comment">//调用parseInt()函数将a转换为Number</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">    - parseInt() 把一个字符串转换为一个整数            parseInt()可以将一个字符串中的有效的整数内容去出来，            然后转换为Number    - parseFloat() 把一个字符串转换为一个浮点数      parseFloat()作用和parseInt()类似，不同的是它可以获得有效的小数</code></pre><h4 id="将其他的数据类型转换为Boolean"><a href="#将其他的数据类型转换为Boolean" class="headerlink" title="将其他的数据类型转换为Boolean"></a>将其他的数据类型转换为Boolean</h4><p> 使用Boolean()函数<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//调用Boolean()函数来将a转换为布尔值</span><br>a = <span class="hljs-title class_">Boolean</span>(a);<br></code></pre></td></tr></table></figure></p><ul><li><p>数字 —&gt; 布尔</p><ul><li>除了0和NaN，其余的都是true</li></ul></li><li><p>字符串 —&gt; 布尔</p><ul><li>除了空串，其余的都是true</li></ul></li><li><p>null和undefined都会转换为false</p></li><li><p>对象也会转换为true</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (4.JavaScript基本数据类型)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.5%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.5%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><p>JS中一共分成六种数据类型</p><ul><li>String 字符串</li><li>Number 数值</li><li>Boolean 布尔值</li><li>Null 空值</li><li>Undefined 未定义</li><li>Object 对象<br>其中String Number Boolean Null Undefined属于基本数据类型，而Object属于引用数据类型</li></ul><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>JS中的字符串需要使用引号引起来双引号或单引号都行</p><ul><li>在JS中字符串需要使用引号引起来</li><li>使用双引号或单引号都可以，但是不要混着用</li><li>引号不能嵌套，双引号里不能放双引号，单引号不能放单引号</li></ul><p>在字符串中使用\作为转义字符<br>        &#39;  &#x3D;&#x3D;&gt; ‘<br>        &quot;  &#x3D;&#x3D;&gt; “<br>        \n  &#x3D;&#x3D;&gt; 换行<br>        \t  &#x3D;&#x3D;&gt; 制表符<br>        \  &#x3D;&#x3D;&gt; \</p><p>用typeof运算符检查字符串时，会返回”string”</p><h5 id="字符串拓展"><a href="#字符串拓展" class="headerlink" title="字符串拓展"></a>字符串拓展</h5><p>在底层字符串是以字符数组的形式保存的：[“H”,”e”,”l”]这样<br>一些方法和数组类似：</p><h6 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h6><p> 可以用来获取字符串的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str.<span class="hljs-property">length</span>);<br></code></pre></td></tr></table></figure><h6 id="charAt"><a href="#charAt" class="headerlink" title="charAt()"></a>charAt()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * charAt()</span><br><span class="hljs-comment"> * - 可以返回字符串中指定位置的字符</span><br><span class="hljs-comment"> * - 根据索引获取指定的字符</span><br><span class="hljs-comment"> */</span><br>str = <span class="hljs-string">&quot;中Hello Atguigu&quot;</span>;<br><br><span class="hljs-keyword">var</span> result = str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">6</span>);<br></code></pre></td></tr></table></figure><h6 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title="charCodeAt()"></a>charCodeAt()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * charCodeAt()</span><br><span class="hljs-comment"> * - 获取指定位置字符的字符编码（Unicode编码）</span><br><span class="hljs-comment"> */</span><br>result = str.<span class="hljs-title function_">charCodeAt</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h6 id="fromCharCode-0x2692"><a href="#fromCharCode-0x2692" class="headerlink" title="fromCharCode(0x2692)"></a>fromCharCode(0x2692)</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * String.formCharCode()</span><br><span class="hljs-comment"> * - 可以根据字符编码去获取字符,这是一个构造函数的方法</span><br><span class="hljs-comment"> */</span><br>result = <span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-number">0x2692</span>);<br><br></code></pre></td></tr></table></figure><h6 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * concat()</span><br><span class="hljs-comment"> * - 可以用来连接两个或多个字符串</span><br><span class="hljs-comment"> * - 作用和+一样</span><br><span class="hljs-comment"> */</span><br>result = str.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&quot;你好&quot;</span>,<span class="hljs-string">&quot;再见&quot;</span>);<br></code></pre></td></tr></table></figure><h6 id="indexof"><a href="#indexof" class="headerlink" title="indexof()"></a>indexof()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * indexof()</span><br><span class="hljs-comment"> * - 该方法可以检索一个字符串中是否含有指定内容</span><br><span class="hljs-comment"> * - 如果字符串中含有该内容，则会返回其第一次出现的索引</span><br><span class="hljs-comment"> * 如果没有找到指定的内容，则返回-1</span><br><span class="hljs-comment"> * - 可以指定一个第二个参数，指定开始查找的位置</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * lastIndexOf();</span><br><span class="hljs-comment"> * - 该方法的用法和indexOf()一样，</span><br><span class="hljs-comment"> * 不同的是indexOf是从前往后找，</span><br><span class="hljs-comment"> * 而lastIndexOf是从后往前找</span><br><span class="hljs-comment"> * - 也可以指定开始查找的位置</span><br><span class="hljs-comment"> */</span><br><br>str = <span class="hljs-string">&quot;hello hatguigu&quot;</span>;<br><br>result = str.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-number">1</span>);<br><br>result = str.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-number">5</span>);<br><br></code></pre></td></tr></table></figure><h6 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * slice()</span><br><span class="hljs-comment"> * - 可以从字符串中截取指定的内容</span><br><span class="hljs-comment"> * - 不会影响原字符串，而是将截取到内容返回</span><br><span class="hljs-comment"> * - 参数：</span><br><span class="hljs-comment"> * 第一个，开始位置的索引（包括开始位置）</span><br><span class="hljs-comment"> * 第二个，结束位置的索引（不包括结束位置）</span><br><span class="hljs-comment"> * - 如果省略第二个参数，则会截取到后边所有的</span><br><span class="hljs-comment"> * - 也可以传递一个负数作为参数，负数的话将会从后边计算</span><br><span class="hljs-comment"> */</span><br>str = <span class="hljs-string">&quot;abcdefghijk&quot;</span>;<br><br>result = str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>result = str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h6 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * substring()</span><br><span class="hljs-comment"> * - 可以用来截取一个字符串，可以slice()类似</span><br><span class="hljs-comment"> * - 参数：</span><br><span class="hljs-comment"> * - 第一个：开始截取位置的索引（包括开始位置）</span><br><span class="hljs-comment"> * - 第二个：结束位置的索引（不包括结束位置）</span><br><span class="hljs-comment"> * - 不同的是这个方法不能接受负值作为参数，</span><br><span class="hljs-comment"> * 如果传递了一个负值，则默认使用0</span><br><span class="hljs-comment"> * - 而且他还自动调整参数的位置，如果第二个参数小于第一个，则自动交换</span><br><span class="hljs-comment"> */</span><br><br>result = str.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><br></code></pre></td></tr></table></figure><h6 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * substr()</span><br><span class="hljs-comment"> * - 用来截取字符串</span><br><span class="hljs-comment"> * - 参数：</span><br><span class="hljs-comment"> * 1.截取开始位置的索引</span><br><span class="hljs-comment"> * 2.截取的长度</span><br><span class="hljs-comment"> */</span><br><br>str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><br>result = str.<span class="hljs-title function_">substr</span>(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h6 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * split()</span><br><span class="hljs-comment"> * - 可以将一个字符串拆分为一个数组</span><br><span class="hljs-comment"> * - 参数：</span><br><span class="hljs-comment"> * -需要一个字符串作为参数，将会根据该字符串去拆分数组</span><br><span class="hljs-comment"> */</span><br>str = <span class="hljs-string">&quot;abcbcdefghij&quot;</span>;<br><br>result = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;d&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 如果传递一个空串作为参数，则会将每个字符都拆分为数组中的一个元素</span><br><span class="hljs-comment"> */</span><br>result = str.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-comment">//console.log(Array.isArray(result));</span><br><span class="hljs-comment">//console.log(result[0]);</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br><br><br>str = <span class="hljs-string">&quot;abcdefg&quot;</span>;<br></code></pre></td></tr></table></figure><h6 id="toUpperCase"><a href="#toUpperCase" class="headerlink" title="toUpperCase()"></a>toUpperCase()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * toUpperCase()</span><br><span class="hljs-comment"> * - 将一个字符串转换为大写并返回</span><br><span class="hljs-comment"> */</span><br>result = str.<span class="hljs-title function_">toUpperCase</span>();<br><br>str = <span class="hljs-string">&quot;ABCDEFG&quot;</span>;<br></code></pre></td></tr></table></figure><h6 id="toLowerCase"><a href="#toLowerCase" class="headerlink" title="toLowerCase()"></a>toLowerCase()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * toLowerCase()</span><br><span class="hljs-comment"> * -将一个字符串转换为小写并返回</span><br><span class="hljs-comment"> */</span><br>result = str.<span class="hljs-title function_">toLowerCase</span>();<br></code></pre></td></tr></table></figure><h4 id="Number-数值"><a href="#Number-数值" class="headerlink" title="Number 数值"></a>Number 数值</h4><ul><li>JS中所有的整数和浮点数都是Number类型</li><li>JS中可以表示的数字的最大(小)值<br>Number.MAX_VALUE<br>  1.7976931348623157e+308</li></ul><p>Number.MIN_VALUE 大于0的最小值<br>        5e-324<br>如果使用Number表示的数字超过了最大值，则会返回一个无穷值</p><ul><li><p>特殊的数字<br>Infinity 正无穷（字面量）<br>-Infinity 负无穷<br>使用typeof检查Infinity也会返回number<br>NaN 非法数字（Not A Number）</p></li><li><p>精度<br>在JS中整数的运算基本可以保证精确<br>如果使用JS进行浮点运算，可能得到一个不精确的结果（浮点数不能精确储存）<br>所以千万不要使用JS进行对精确度要求比较高的运算</p></li><li><p>其他进制的数字的表示：<br>0b 开头表示二进制，但是不是所有的浏览器都支持<br>0 开头表示八进制<br>0x 开头表示十六进制</p></li></ul><p>在进制转换时<br>像”070”这种字符串，有些浏览器会当成8进制解析，有些会当成10进制解析<br>可以在parseInt()中传递一个第二个参数，来指定数字的进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//可以在parseInt()中传递一个第二个参数，来指定数字的进制</span><br>a = <span class="hljs-built_in">parseInt</span>(a,<span class="hljs-number">10</span>);<br></code></pre></td></tr></table></figure><ul><li>使用typeof检查一个Number类型的数据时，会返回”number”<br>（包括NaN 和 Infinity）</li></ul><h4 id="Boolean-布尔值"><a href="#Boolean-布尔值" class="headerlink" title="Boolean 布尔值"></a>Boolean 布尔值</h4><p>布尔值只有两个，主要用来做逻辑判断<br>        true<br>        - 表示真<br>        false<br>        - 表示假</p><p>使用typeof检查一个布尔值时，会返回boolean</p><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p> Null（空值）类型的值只有一个，就是null<br>        null这个值专门用来表示一个为空的对象<br>        使用typeof检查一个null值时，会返回object</p><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p> Undefined（未定义）类型的值只有一个，就undefined<br>      当声明一个变量，但是并不给变量赋值时，它的值就是undefined<br>      使用typeof检查一个undefined时也会返回undefined</p>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (6.JavaScript运算符)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.7%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.7%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符也叫操作符<br>通过运算符可以对一个或多个值进行运算,并获取运算结果<br>比如：typeof就是运算符，可以来获得一个值的类型<br>        它会将该值的类型以字符串的形式返回<br>        number string boolean undefined object</p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>当对非Number类型的值进行运算时，会将这些值转换为Number然后在运算<br>        任何值和NaN做运算都得NaN</p><h5 id=""><a href="#" class="headerlink" title="+"></a>+</h5><p>可以对两个值进行加法运算，并将结果返回<br>如果对两个字符串进行加法运算，则会做拼串，会将两个字符串拼接为一个字符串，并返回<br>任何的值和字符串做加法运算，都会先转换为字符串，然后再和字符串做拼串的操作</p><blockquote><p>我们可以利用这一特点，来将一个任意的数据类型转换为String<br>我们只需要为任意的数据类型 + 一个 “” 即可将其转换为String<br>这是一种隐式的类型转换，由浏览器自动完成，实际上它也是调用String()函数</p></blockquote><h5 id="-1"><a href="#-1" class="headerlink" title="-"></a>-</h5><p>可以对两个值进行减法运算，并将结果返回</p><blockquote><p>任何值做- * &#x2F;运算时都会自动转换为Number<br>我们可以利用这一特点做隐式的类型转换<br>可以通过为一个值 -0 *1 &#x2F;1来将其转换为Number<br>原理和Number()函数一样，使用起来更加简单</p></blockquote><h5 id="-2"><a href="#-2" class="headerlink" title="*"></a>*</h5><p>可以对两个值进行乘法运算</p><h5 id="x2F"><a href="#x2F" class="headerlink" title="&#x2F;"></a>&#x2F;</h5><p>可以对两个值进行除法运算</p><h5 id="-3"><a href="#-3" class="headerlink" title="%"></a>%</h5><p>取模运算（取余数）</p><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><p>一元运算符，只需要一个操作数</p><h5 id="正号"><a href="#正号" class="headerlink" title="+ 正号"></a>+ 正号</h5><pre><code class="hljs">- 正号不会对数字产生任何影响</code></pre><h5 id="负号"><a href="#负号" class="headerlink" title="- 负号"></a>- 负号</h5><pre><code class="hljs">- 负号可以对数字进行负号的取反</code></pre><h5 id="对于非Number类型的值，"><a href="#对于非Number类型的值，" class="headerlink" title="对于非Number类型的值，"></a>对于非Number类型的值，</h5><pre><code class="hljs">它会将先转换为Number，然后在运算    可以对一个其他的数据类型使用+,来将其转换为number它的原理和Number()函数一样</code></pre><h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><h5 id="自增"><a href="#自增" class="headerlink" title="自增 ++"></a>自增 ++</h5><ul><li>通过自增可以使变量在自身的基础上增加1</li><li>对于一个变量自增以后，原变量的值会立即自增1<ul><li>自增分成两种：后++(a++) 和 前++(++a)<br> 无论是a++ 还是 ++a，都会立即使原变量的值自增1<br> 不同的是a++ 和 ++a的值不同<br> a++的值等于原变量的值（自增前的值）<br> ++a的值等于新值 （自增后的值）</li></ul></li></ul><h5 id="自减-–"><a href="#自减-–" class="headerlink" title="自减 –"></a>自减 –</h5><ul><li>通过自减可以使变量在自身的基础上减1</li><li>自减分成两种：后–(a–) 和 前–(–a)<br>  无论是a– 还是 –a 都会立即使原变量的值自减1<br>          不同的是a– 和 –a的值不同<br>                  a– 是变量的原值 （自减前的值）<br>                  –a 是变量的新值 （自减以后的值）</li></ul><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>JS中为我们提供了三种逻辑运算符</p><h5 id="非"><a href="#非" class="headerlink" title="非"></a>非</h5><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade">! 非<br>- !可以用来对一个值进行非运算<br>- 所谓非运算就是值对一个布尔值进行取反操作，<br>    <span class="hljs-literal">true</span>变<span class="hljs-literal">false</span>，<span class="hljs-literal">false</span>变<span class="hljs-literal">true</span><br>- 如果对一个值进行两次取反，它不会变化<br>- 如果对非布尔值进行元素，则会将其转换为布尔值，然后再取反<br>    所以我们可以利用该特点，来将一个其他的数据类型转换为布尔值<br>    可以为一个任意数据类型取两次反，来将其转换为布尔值，<br>    原理和<span class="hljs-built_in">Boolean</span>()函数一样<br></code></pre></td></tr></table></figure><h5 id="与"><a href="#与" class="headerlink" title="与"></a>与</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">&amp;&amp; 与<br> - &amp;&amp;可以对符号两侧的值进行与运算并返回结果<br> - 运算规则<br> - 两个值中只要有一个值为<span class="hljs-literal">false</span>就返回<span class="hljs-literal">false</span>，<br> 只有两个值都为<span class="hljs-literal">true</span>时，才会返回<span class="hljs-literal">true</span><br> - JS中的“与”属于短路的与，<br>如果第一个值为<span class="hljs-literal">false</span>，则不会看第二个值<br></code></pre></td></tr></table></figure><h5 id="或"><a href="#或" class="headerlink" title="或"></a>或</h5><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"> || 或<br>- ||可以对符号两侧的值进行或运算并返回结果<br>- 运算规则：<br>- 两个值中只要有一个<span class="hljs-literal">true</span>，就返回<span class="hljs-literal">true</span><br>如果两个值都为<span class="hljs-literal">false</span>，才返回<span class="hljs-literal">false</span><br>- JS中的“或”属于短路的或<br>如果第一个值为<span class="hljs-literal">true</span>，则不会检查第二个值<br></code></pre></td></tr></table></figure><h5 id="非布尔值逻辑运算符"><a href="#非布尔值逻辑运算符" class="headerlink" title="非布尔值逻辑运算符"></a>非布尔值逻辑运算符</h5><p>&amp;&amp; || 非布尔值的情况</p><p>- 对于非布尔值进行与或运算时，会先将其转换为布尔值，然后再运算，并且返回原值</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">与运算：</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">如果第一个值为true，则必然返回第二个值</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">如果第一个值为false，则直接返回第一个值</span><br>  <br><span class="hljs-bullet">-</span> <span class="hljs-string">或运算</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">如果第一个值为true，则直接返回第一个值</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">如果第一个值为false，则返回第二个值</span><br></code></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p> &#x3D; 可以将符号右侧的值赋值给符号左侧的变量</p><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>通过关系运算符可以比较两个值之间的大小关系， 如果关系成立它会返回true，如果关系不成立则返回false</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext">      <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">大于号</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">判断符号左侧的值是否大于右侧的值</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">如果关系成立，返回true，如果关系不成立则返回false</span><br>  <br>      &gt;= 大于等于<br>  <span class="hljs-bullet">-</span> <span class="hljs-string">判断符号左侧的值是否大于或等于右侧的值</span><br>  <br>&lt; 小于号<br>   &lt;= 小于等于<br>  同理<br></code></pre></td></tr></table></figure><p>非数值的情况</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">- 对于非数值进行比较时，会将其转换为数字然后在比较<br> - 如果符号两侧的值都是字符串时，不会将其转换为数字进行比较<br> 而会分别比较字符串中字符的<span class="hljs-title class_">Unicode</span>编码<br>   -比较两个字符串时，比较的是字符串的字符编码<br>   -比较字符编码时是一位一位进行比较<br>   -如果两位一样，则比较下一位，所以借用它来对英文进行排序<br>   -比较中文时没有意义<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;戒&quot;</span> &gt; <span class="hljs-string">&quot;我&quot;</span>); <span class="hljs-comment">//true</span><br>   -如果比较的两个字符串型的数字，可能会得到不可预期的结果<br>  -注意：在比较两个字符串型的数字时，一定一定一定要转型<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;11123123123123123123&quot;</span> &lt; +<span class="hljs-string">&quot;5&quot;</span>); <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h4 id="Unicode编码"><a href="#Unicode编码" class="headerlink" title="Unicode编码"></a>Unicode编码</h4><p>在js里使用：在字符串中使用转义字符输入Unicode编码<br>格式：\u四位编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;\u2620&quot;</span>);<br></code></pre></td></tr></table></figure><p>在网页里（html）使用</p><p>格式：&amp;#编码; 这里的编码需要的是10进制&#96;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;h1 style=<span class="hljs-string">&quot;font-size: 200px;&quot;</span>&gt;&amp;#<span class="hljs-number">9760</span>;&lt;/h1&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-size: 200px;&quot;</span>&gt;</span><span class="hljs-symbol">&amp;#9856;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><p>相等运算符用来比较两个值是否相等，如果相等会返回true，否则返回false</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">* </span>使用 == 来做相等运算<br><span class="hljs-bullet">* </span>- 当使用==来比较两个值时，如果值的类型不同，<br><span class="hljs-bullet">* </span>则会自动进行类型转换，将其转换为相同的类型<br><span class="hljs-bullet">* </span>然后在比较<br><span class="hljs-bullet">* </span>不相等<br><span class="hljs-bullet">*  </span>不相等用来判断两个值是否不相等，如果不相等返回true，否则返回false<br><span class="hljs-bullet">* </span>- 使用 != 来做不相等运算<br><span class="hljs-bullet">* </span>- 不相等也会对变量进行自动的类型转换，如果转换后相等它也会返回false<br><span class="hljs-bullet">* </span><br><span class="hljs-bullet"></span><span class="hljs-bullet">* </span><br><span class="hljs-bullet"></span><span class="hljs-bullet">*  </span>===<br><span class="hljs-bullet">* </span>全等<br><span class="hljs-bullet">* </span>- 用来判断两个值是否全等，它和相等类似，不同的是它不会做自动的类型转换<br><span class="hljs-bullet">* </span>如果两个值的类型不同，直接返回false<br><span class="hljs-bullet">* </span>!==<br><span class="hljs-bullet">* </span>不全等<br><span class="hljs-bullet">* </span>- 用来判断两个值是否不全等，和不等类似，不同的是它不会做自动的类型转换<br><span class="hljs-bullet">* </span>如果两个值的类型不同，直接返回true<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//undefined 衍生自 null</span><br><span class="hljs-comment">//所以这两个值做相等判断时，会返回true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// NaN不和任何值相等，包括他本身</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">NaN</span> == <span class="hljs-title class_">NaN</span>); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">NaN</span>;<br><span class="hljs-comment">//判断b的值是否是NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b == <span class="hljs-title class_">NaN</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 可以通过isNaN()函数来判断一个值是否是NaN</span><br><span class="hljs-comment"> 如果该值是NaN则返回true，否则返回false</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isNaN</span>(b));<br></code></pre></td></tr></table></figure><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>条件运算符也叫三元运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">语法：<br>条件表达式?语句<span class="hljs-number">1</span>:语句<span class="hljs-number">2</span>;<br>- 执行的流程：<br>    条件运算符在执行时，首先对条件表达式进行求值，<br>    如果该值为<span class="hljs-literal">true</span>，则执行语句<span class="hljs-number">1</span>，并返回执行结果<br>    如果该值为<span class="hljs-literal">false</span>，则执行语句<span class="hljs-number">2</span>，并返回执行结果<br>    如果条件的表达式的求值结果是一个非布尔值，<br>    会将其转换为布尔值然后在运算<br></code></pre></td></tr></table></figure><p>举例：求三数最大值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">300</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">143</span>;<br><span class="hljs-keyword">var</span> c = <span class="hljs-number">50</span>;<br><span class="hljs-comment">//获取a和b中的最大值</span><br><span class="hljs-keyword">var</span> max = a &gt; b ? a : b;<br><span class="hljs-comment">//获取a b c 中的大值</span><br>max = max &gt; c ? max : c;<br><span class="hljs-comment">//这种写法不推荐使用，不方便阅读</span><br><span class="hljs-keyword">var</span> max = a &gt; b ? (a &gt; c ? a :c) : (b &gt; c ? b : c);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;max = &quot;</span>+max);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript笔记 (7.JavaScript运算符的优先级和代码块)</title>
    <link href="/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.8%20%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <url>/2023/06/05/3.%E8%BD%AF%E4%BB%B6%E7%9B%B8%E5%85%B3/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/JS/2.8%20%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">就和数学中一样，在<span class="hljs-keyword">JS中运算符也有优先级，</span><br><span class="hljs-keyword"></span> 比如：先乘除 后加减<br> 在<span class="hljs-keyword">JS中有一个运算符优先级的表，</span><br><span class="hljs-keyword"></span> 在表中越靠上优先级越高，优先级越高越优先计算，<br> 如果优先级一样，则从左往右计算。<br> 但是这个表我们并不需要记忆，如果遇到优先级不清楚<br> 可以使用()来改变优先级<br></code></pre></td></tr></table></figure><img src="https://image-1308319148.cos.ap-chengdu.myqcloud.com/main/1652691618198.png"  /><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">我们的程序是由一条一条语句构成的</span><br><span class="language-xml">语句是按照自上向下的顺序一条一条执行的</span><br><span class="language-xml">在JS中可以使用</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">来为语句进行分组,</span><br><span class="language-xml">同一个</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">中的语句我们称为是一组语句，</span><br><span class="language-xml">它们要么都执行，要么都不执行，</span><br><span class="language-xml">一个</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">中的语句我们也称为叫一个代码块</span><br><span class="language-xml">在代码块的后边就不用再编写;了</span><br><span class="language-xml"></span><br><span class="language-xml">JS中的代码块，只具有分组的的作用，没有其他的用途</span><br><span class="language-xml">代码块内容的内容，在外部是完全可见的</span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&quot;语句&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机及嵌入式软件</category>
      
      <category>编程语言</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一些拙劣的诗词</title>
    <link href="/2022/06/06/1.%E9%98%85%E8%AF%BB%E5%86%99%E4%BD%9C/%E5%86%99%E4%BD%9C/%E8%AF%97%E8%AF%8D/%E5%8E%9F%E5%88%9B%E8%AF%97%E8%AF%8D/%E5%8E%9F%E5%88%9B%E8%AF%97%E8%AF%8D%E6%B1%87%E6%80%BB/"/>
    <url>/2022/06/06/1.%E9%98%85%E8%AF%BB%E5%86%99%E4%BD%9C/%E5%86%99%E4%BD%9C/%E8%AF%97%E8%AF%8D/%E5%8E%9F%E5%88%9B%E8%AF%97%E8%AF%8D/%E5%8E%9F%E5%88%9B%E8%AF%97%E8%AF%8D%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="捣练子·九月初五"><a href="#捣练子·九月初五" class="headerlink" title="捣练子·九月初五"></a>捣练子·九月初五</h3><p>西弦月，断南风。破鳖千里忆初衷。尽日无闲事成空，强笑残星似溟濛。</p><blockquote><p>庚子年,九月初五</p></blockquote><h3 id="定风波·初入博雅而作"><a href="#定风波·初入博雅而作" class="headerlink" title="定风波·初入博雅而作"></a>定风波·初入博雅而作</h3><p>应是无心入博雅，何知争鸣意趣嘉，笔落惊风倚天笑，谁料。尔雅舌剑拚韶华。<br>小辈今来初乍到，很慌！幸得众君青拙崽，迎门引路雅堂诏。当要，涕零知遇乘心怀。</p><blockquote><p>庚子年，九月初二</p></blockquote><h3 id="六州歌头·疫中作"><a href="#六州歌头·疫中作" class="headerlink" title="六州歌头·疫中作"></a>六州歌头·疫中作</h3><p>长安断望，避疫寂城空。屡愁醒，曲枕忧，正夕终，黯霜风。且记当年事，人意闹，灯花灿，弦歌地，亦通胧。漫日且馀，终夜难睡觉，常乐皆穷。待检长龙在，携绿取核酸，千万俱形同。邪冠毒蛊，欲此终。<br>四海骈助，家国卫，扶伤众，慰心忡。持拭签，提名剑，探喉咙，试吉凶。当遇白衣者，回首顾，自敛躬。瘟尚在，心无忧，叩钟公。只待阴霾消后，曲江畔，踏尽春风。斩疫随剑去，策勋万人功，心换暖冬。</p><blockquote><p>2022.1.10</p></blockquote><h3 id="蓦山溪·寄小叶遥叩芳辰"><a href="#蓦山溪·寄小叶遥叩芳辰" class="headerlink" title="蓦山溪·寄小叶遥叩芳辰"></a>蓦山溪·寄小叶遥叩芳辰</h3><p>萱花挺秀，蓦然桃李迹。月倚望相忆，方阔别，待留归客。芳春未至，空雪踏香径，当浅忘，锁眉事，笑前年顺逆。<br>云边尺素，且寄杯中碧。闲看荡云雪，任东风，欺尽寒迫。岁月不待，愿君携初心，惜时短，盼东君，今日胜昨昔。</p><blockquote><p>庚子年    冬月十五</p></blockquote><h3 id="南乡子·夜闲"><a href="#南乡子·夜闲" class="headerlink" title="南乡子·夜闲"></a>南乡子·夜闲</h3><p>斜柳绕重檐，堂榭人喧意未忺。花絮乘风弄飞雪，携岚，妆画樱枝妩媚添。<br>闲把拙笔拈，读得前人也自嫌。心上闲烦无更语，渐恹，读尽华章不见颔。</p><blockquote><p>2021.3.31</p></blockquote><h3 id="青玉案·-记11月17日之风雨"><a href="#青玉案·-记11月17日之风雨" class="headerlink" title="青玉案· 记11月17日之风雨"></a>青玉案· 记11月17日之风雨</h3><p>溟濛雾雨融霾处，但日空，晓尘顾。斜风珠帘弄白露。二三行人 ，西理晨雾，当为仙人驻。<br>夜来急雨揉寒飓，满园萧索落叶路。何来狼狈当信步。踏雨归来，提笔诗赋，烦愁随风赴。</p><blockquote><p>庚子年十月初三</p></blockquote><h3 id="阮郎归·闲作"><a href="#阮郎归·闲作" class="headerlink" title="阮郎归·闲作"></a>阮郎归·闲作</h3><p>东君此去尽无期。灯昏助困痴。行云无力枫杨垂。软红无故知。<br>清净处，卧奴狸。少年乘心疲。携笔烦绪书闲词，怀中何湛思。</p><blockquote><p>三月甘五 选修课作</p></blockquote><h3 id="踏沙行-立春"><a href="#踏沙行-立春" class="headerlink" title="踏沙行.立春"></a>踏沙行.立春</h3><p>春色如阑，元宵灯落，倚观西风残破。尽饮浊酿笑孤客，何须对月解心惑。<br>斜冠沉沉，险关难过，问卜终归人祸。闲居狂倚下帘琐，拙笔寄笺慰人弱。</p><blockquote><p>庚子年正月十一夜作</p></blockquote><h3 id="疫中作"><a href="#疫中作" class="headerlink" title="疫中作"></a>疫中作</h3><p>闻道长安逢苦疫，爷娘忍送别妻离。<br>寒初济困医人众，霜漠闲居客路迟。<br>身着白衣平冠蛊，披衿赤甲斩霾疑。<br>一心只愿邪瘟逝，且聚春来共笑时。</p><blockquote><p>2022.1.9这一年 疫情 口罩 网课  期盼 失望 看淡 感恩 与旧事别去，待年来平安。<br>身处疫情，身处西理，感受到的不止面对疫情的无力，更多的是来自学校和身边人的温暖。没有从天而降的英雄，只有挺身而出的凡人，感谢默默在一线付出的所有医务工作者和志愿者。<br>我在西理工给予我的温暖里，像期待春天一样期待新闻里的好消息。</p></blockquote><h3 id="雨霖铃-送叶赴中北兵器以寄之"><a href="#雨霖铃-送叶赴中北兵器以寄之" class="headerlink" title="雨霖铃.送叶赴中北兵器以寄之"></a>雨霖铃.送叶赴中北兵器以寄之</h3><p>秋寒天暮，望君归去，驿边桥渡。亭台向北闲坐，方才惊忆，舟车已赴。瞥然离散，烦愁更对月何寤。念君此行，风云奔走 ，提笔拔剑掌平戎。<br>君子异志各歧路。当记省，年华应珍顾。寻常寄奴何处？近荒远，谁言未禄。汉水一别，恰是少年孙仲余煦。待东君，桥头归客，携酒对溟濛。</p><h3 id="玉楼春·小雪"><a href="#玉楼春·小雪" class="headerlink" title="玉楼春·小雪"></a>玉楼春·小雪</h3><p>南风夜去寒光宿，长安初雪落白头。提壶沽酒顾残空，故人西去无还逐。<br>醉来相忘倚枯木，笑看世人忙案牍。闲弄东篱破菊从， 对月冷酒就雪服。</p><blockquote><p>庚子年十月初八晚</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>阅读与写作</category>
      
      <category>写作</category>
      
      <category>诗词</category>
      
      <category>原创诗词</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创诗词</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
